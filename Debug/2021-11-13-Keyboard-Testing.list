
2021-11-13-Keyboard-Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006a44  08006a44  00016a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006acc  08006acc  00020168  2**0
                  CONTENTS
  4 .ARM          00000000  08006acc  08006acc  00020168  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006acc  08006acc  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006acc  08006acc  00016acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ad0  08006ad0  00016ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08006ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000918  20000168  08006c3c  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a80  08006c3c  00020a80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151c6  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f61  00000000  00000000  0003535e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  000382c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00038ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280e4  00000000  00000000  00039be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103a8  00000000  00000000  00061ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6595  00000000  00000000  00072074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158609  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000342c  00000000  00000000  0015865c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000168 	.word	0x20000168
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006a2c 	.word	0x08006a2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000016c 	.word	0x2000016c
 80001c4:	08006a2c 	.word	0x08006a2c

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d2:	2003      	movs	r0, #3
 80001d4:	f000 f960 	bl	8000498 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 f80d 	bl	80001f8 <HAL_InitTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e001      	b.n	80001ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ea:	f005 fdab 	bl	8005d44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <HAL_InitTick+0x6c>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d023      	beq.n	8000254 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800020c:	4b16      	ldr	r3, [pc, #88]	; (8000268 <HAL_InitTick+0x70>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <HAL_InitTick+0x6c>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	4619      	mov	r1, r3
 8000216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021a:	fbb3 f3f1 	udiv	r3, r3, r1
 800021e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f96d 	bl	8000502 <HAL_SYSTICK_Config>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d10f      	bne.n	800024e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b0f      	cmp	r3, #15
 8000232:	d809      	bhi.n	8000248 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000234:	2200      	movs	r2, #0
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800023c:	f000 f937 	bl	80004ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000240:	4a0a      	ldr	r2, [pc, #40]	; (800026c <HAL_InitTick+0x74>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6013      	str	r3, [r2, #0]
 8000246:	e007      	b.n	8000258 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000248:	2301      	movs	r3, #1
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	e004      	b.n	8000258 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800024e:	2301      	movs	r3, #1
 8000250:	73fb      	strb	r3, [r7, #15]
 8000252:	e001      	b.n	8000258 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000254:	2301      	movs	r3, #1
 8000256:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000258:	7bfb      	ldrb	r3, [r7, #15]
}
 800025a:	4618      	mov	r0, r3
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000004 	.word	0x20000004
 8000268:	20000104 	.word	0x20000104
 800026c:	20000000 	.word	0x20000000

08000270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <HAL_IncTick+0x20>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <HAL_IncTick+0x24>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4413      	add	r3, r2
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <HAL_IncTick+0x24>)
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000004 	.word	0x20000004
 8000294:	200001a4 	.word	0x200001a4

08000298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <HAL_GetTick+0x14>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	200001a4 	.word	0x200001a4

080002b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b8:	f7ff ffee 	bl	8000298 <HAL_GetTick>
 80002bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80002c8:	d005      	beq.n	80002d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <HAL_Delay+0x44>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	461a      	mov	r2, r3
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	4413      	add	r3, r2
 80002d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002d6:	bf00      	nop
 80002d8:	f7ff ffde 	bl	8000298 <HAL_GetTick>
 80002dc:	4602      	mov	r2, r0
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	1ad3      	subs	r3, r2, r3
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d8f7      	bhi.n	80002d8 <HAL_Delay+0x28>
  {
  }
}
 80002e8:	bf00      	nop
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000004 	.word	0x20000004

080002f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f003 0307 	and.w	r3, r3, #7
 8000306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <__NVIC_SetPriorityGrouping+0x44>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800030e:	68ba      	ldr	r2, [r7, #8]
 8000310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000314:	4013      	ands	r3, r2
 8000316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800032a:	4a04      	ldr	r2, [pc, #16]	; (800033c <__NVIC_SetPriorityGrouping+0x44>)
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	60d3      	str	r3, [r2, #12]
}
 8000330:	bf00      	nop
 8000332:	3714      	adds	r7, #20
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <__NVIC_GetPriorityGrouping+0x18>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	0a1b      	lsrs	r3, r3, #8
 800034a:	f003 0307 	and.w	r3, r3, #7
}
 800034e:	4618      	mov	r0, r3
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036a:	2b00      	cmp	r3, #0
 800036c:	db0b      	blt.n	8000386 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	f003 021f 	and.w	r2, r3, #31
 8000374:	4907      	ldr	r1, [pc, #28]	; (8000394 <__NVIC_EnableIRQ+0x38>)
 8000376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037a:	095b      	lsrs	r3, r3, #5
 800037c:	2001      	movs	r0, #1
 800037e:	fa00 f202 	lsl.w	r2, r0, r2
 8000382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	e000e100 	.word	0xe000e100

08000398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	6039      	str	r1, [r7, #0]
 80003a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	db0a      	blt.n	80003c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	490c      	ldr	r1, [pc, #48]	; (80003e4 <__NVIC_SetPriority+0x4c>)
 80003b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b6:	0112      	lsls	r2, r2, #4
 80003b8:	b2d2      	uxtb	r2, r2
 80003ba:	440b      	add	r3, r1
 80003bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003c0:	e00a      	b.n	80003d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	4908      	ldr	r1, [pc, #32]	; (80003e8 <__NVIC_SetPriority+0x50>)
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	f003 030f 	and.w	r3, r3, #15
 80003ce:	3b04      	subs	r3, #4
 80003d0:	0112      	lsls	r2, r2, #4
 80003d2:	b2d2      	uxtb	r2, r2
 80003d4:	440b      	add	r3, r1
 80003d6:	761a      	strb	r2, [r3, #24]
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	e000e100 	.word	0xe000e100
 80003e8:	e000ed00 	.word	0xe000ed00

080003ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b089      	sub	sp, #36	; 0x24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f003 0307 	and.w	r3, r3, #7
 80003fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000400:	69fb      	ldr	r3, [r7, #28]
 8000402:	f1c3 0307 	rsb	r3, r3, #7
 8000406:	2b04      	cmp	r3, #4
 8000408:	bf28      	it	cs
 800040a:	2304      	movcs	r3, #4
 800040c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800040e:	69fb      	ldr	r3, [r7, #28]
 8000410:	3304      	adds	r3, #4
 8000412:	2b06      	cmp	r3, #6
 8000414:	d902      	bls.n	800041c <NVIC_EncodePriority+0x30>
 8000416:	69fb      	ldr	r3, [r7, #28]
 8000418:	3b03      	subs	r3, #3
 800041a:	e000      	b.n	800041e <NVIC_EncodePriority+0x32>
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000424:	69bb      	ldr	r3, [r7, #24]
 8000426:	fa02 f303 	lsl.w	r3, r2, r3
 800042a:	43da      	mvns	r2, r3
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	401a      	ands	r2, r3
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000434:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	fa01 f303 	lsl.w	r3, r1, r3
 800043e:	43d9      	mvns	r1, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000444:	4313      	orrs	r3, r2
         );
}
 8000446:	4618      	mov	r0, r3
 8000448:	3724      	adds	r7, #36	; 0x24
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
	...

08000454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3b01      	subs	r3, #1
 8000460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000464:	d301      	bcc.n	800046a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000466:	2301      	movs	r3, #1
 8000468:	e00f      	b.n	800048a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800046a:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <SysTick_Config+0x40>)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3b01      	subs	r3, #1
 8000470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000472:	210f      	movs	r1, #15
 8000474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000478:	f7ff ff8e 	bl	8000398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <SysTick_Config+0x40>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <SysTick_Config+0x40>)
 8000484:	2207      	movs	r2, #7
 8000486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	e000e010 	.word	0xe000e010

08000498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	f7ff ff29 	bl	80002f8 <__NVIC_SetPriorityGrouping>
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b086      	sub	sp, #24
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	4603      	mov	r3, r0
 80004b6:	60b9      	str	r1, [r7, #8]
 80004b8:	607a      	str	r2, [r7, #4]
 80004ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004c0:	f7ff ff3e 	bl	8000340 <__NVIC_GetPriorityGrouping>
 80004c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	68b9      	ldr	r1, [r7, #8]
 80004ca:	6978      	ldr	r0, [r7, #20]
 80004cc:	f7ff ff8e 	bl	80003ec <NVIC_EncodePriority>
 80004d0:	4602      	mov	r2, r0
 80004d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004d6:	4611      	mov	r1, r2
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff ff5d 	bl	8000398 <__NVIC_SetPriority>
}
 80004de:	bf00      	nop
 80004e0:	3718      	adds	r7, #24
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b082      	sub	sp, #8
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	4603      	mov	r3, r0
 80004ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ff31 	bl	800035c <__NVIC_EnableIRQ>
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b082      	sub	sp, #8
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f7ff ffa2 	bl	8000454 <SysTick_Config>
 8000510:	4603      	mov	r3, r0
}
 8000512:	4618      	mov	r0, r3
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800052a:	e17f      	b.n	800082c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	2101      	movs	r1, #1
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	fa01 f303 	lsl.w	r3, r1, r3
 8000538:	4013      	ands	r3, r2
 800053a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	2b00      	cmp	r3, #0
 8000540:	f000 8171 	beq.w	8000826 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d00b      	beq.n	8000564 <HAL_GPIO_Init+0x48>
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	2b02      	cmp	r3, #2
 8000552:	d007      	beq.n	8000564 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000558:	2b11      	cmp	r3, #17
 800055a:	d003      	beq.n	8000564 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	2b12      	cmp	r3, #18
 8000562:	d130      	bne.n	80005c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	2203      	movs	r2, #3
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	43db      	mvns	r3, r3
 8000576:	693a      	ldr	r2, [r7, #16]
 8000578:	4013      	ands	r3, r2
 800057a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	68da      	ldr	r2, [r3, #12]
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	fa02 f303 	lsl.w	r3, r2, r3
 8000588:	693a      	ldr	r2, [r7, #16]
 800058a:	4313      	orrs	r3, r2
 800058c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	693a      	ldr	r2, [r7, #16]
 8000592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800059a:	2201      	movs	r2, #1
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	43db      	mvns	r3, r3
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	4013      	ands	r3, r2
 80005a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	091b      	lsrs	r3, r3, #4
 80005b0:	f003 0201 	and.w	r2, r3, #1
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	4313      	orrs	r3, r2
 80005be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	693a      	ldr	r2, [r7, #16]
 80005c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	f003 0303 	and.w	r3, r3, #3
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	d118      	bne.n	8000604 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80005d8:	2201      	movs	r2, #1
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	43db      	mvns	r3, r3
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	4013      	ands	r3, r2
 80005e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	08db      	lsrs	r3, r3, #3
 80005ee:	f003 0201 	and.w	r2, r3, #1
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	693a      	ldr	r2, [r7, #16]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	693a      	ldr	r2, [r7, #16]
 8000602:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	2203      	movs	r2, #3
 8000610:	fa02 f303 	lsl.w	r3, r2, r3
 8000614:	43db      	mvns	r3, r3
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	4013      	ands	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	689a      	ldr	r2, [r3, #8]
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	fa02 f303 	lsl.w	r3, r2, r3
 8000628:	693a      	ldr	r2, [r7, #16]
 800062a:	4313      	orrs	r3, r2
 800062c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	2b02      	cmp	r3, #2
 800063a:	d003      	beq.n	8000644 <HAL_GPIO_Init+0x128>
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	2b12      	cmp	r3, #18
 8000642:	d123      	bne.n	800068c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	08da      	lsrs	r2, r3, #3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3208      	adds	r2, #8
 800064c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000650:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	f003 0307 	and.w	r3, r3, #7
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	220f      	movs	r2, #15
 800065c:	fa02 f303 	lsl.w	r3, r2, r3
 8000660:	43db      	mvns	r3, r3
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	4013      	ands	r3, r2
 8000666:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	691a      	ldr	r2, [r3, #16]
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	693a      	ldr	r2, [r7, #16]
 800067a:	4313      	orrs	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	08da      	lsrs	r2, r3, #3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	3208      	adds	r2, #8
 8000686:	6939      	ldr	r1, [r7, #16]
 8000688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	2203      	movs	r2, #3
 8000698:	fa02 f303 	lsl.w	r3, r2, r3
 800069c:	43db      	mvns	r3, r3
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	4013      	ands	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	f003 0203 	and.w	r2, r3, #3
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	693a      	ldr	r2, [r7, #16]
 80006be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	f000 80ac 	beq.w	8000826 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ce:	4b5f      	ldr	r3, [pc, #380]	; (800084c <HAL_GPIO_Init+0x330>)
 80006d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006d2:	4a5e      	ldr	r2, [pc, #376]	; (800084c <HAL_GPIO_Init+0x330>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6613      	str	r3, [r2, #96]	; 0x60
 80006da:	4b5c      	ldr	r3, [pc, #368]	; (800084c <HAL_GPIO_Init+0x330>)
 80006dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80006e6:	4a5a      	ldr	r2, [pc, #360]	; (8000850 <HAL_GPIO_Init+0x334>)
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	089b      	lsrs	r3, r3, #2
 80006ec:	3302      	adds	r3, #2
 80006ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	f003 0303 	and.w	r3, r3, #3
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	220f      	movs	r2, #15
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	43db      	mvns	r3, r3
 8000704:	693a      	ldr	r2, [r7, #16]
 8000706:	4013      	ands	r3, r2
 8000708:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000710:	d025      	beq.n	800075e <HAL_GPIO_Init+0x242>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a4f      	ldr	r2, [pc, #316]	; (8000854 <HAL_GPIO_Init+0x338>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d01f      	beq.n	800075a <HAL_GPIO_Init+0x23e>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a4e      	ldr	r2, [pc, #312]	; (8000858 <HAL_GPIO_Init+0x33c>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d019      	beq.n	8000756 <HAL_GPIO_Init+0x23a>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a4d      	ldr	r2, [pc, #308]	; (800085c <HAL_GPIO_Init+0x340>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d013      	beq.n	8000752 <HAL_GPIO_Init+0x236>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a4c      	ldr	r2, [pc, #304]	; (8000860 <HAL_GPIO_Init+0x344>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d00d      	beq.n	800074e <HAL_GPIO_Init+0x232>
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a4b      	ldr	r2, [pc, #300]	; (8000864 <HAL_GPIO_Init+0x348>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d007      	beq.n	800074a <HAL_GPIO_Init+0x22e>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a4a      	ldr	r2, [pc, #296]	; (8000868 <HAL_GPIO_Init+0x34c>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d101      	bne.n	8000746 <HAL_GPIO_Init+0x22a>
 8000742:	2306      	movs	r3, #6
 8000744:	e00c      	b.n	8000760 <HAL_GPIO_Init+0x244>
 8000746:	2307      	movs	r3, #7
 8000748:	e00a      	b.n	8000760 <HAL_GPIO_Init+0x244>
 800074a:	2305      	movs	r3, #5
 800074c:	e008      	b.n	8000760 <HAL_GPIO_Init+0x244>
 800074e:	2304      	movs	r3, #4
 8000750:	e006      	b.n	8000760 <HAL_GPIO_Init+0x244>
 8000752:	2303      	movs	r3, #3
 8000754:	e004      	b.n	8000760 <HAL_GPIO_Init+0x244>
 8000756:	2302      	movs	r3, #2
 8000758:	e002      	b.n	8000760 <HAL_GPIO_Init+0x244>
 800075a:	2301      	movs	r3, #1
 800075c:	e000      	b.n	8000760 <HAL_GPIO_Init+0x244>
 800075e:	2300      	movs	r3, #0
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	f002 0203 	and.w	r2, r2, #3
 8000766:	0092      	lsls	r2, r2, #2
 8000768:	4093      	lsls	r3, r2
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	4313      	orrs	r3, r2
 800076e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000770:	4937      	ldr	r1, [pc, #220]	; (8000850 <HAL_GPIO_Init+0x334>)
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	089b      	lsrs	r3, r3, #2
 8000776:	3302      	adds	r3, #2
 8000778:	693a      	ldr	r2, [r7, #16]
 800077a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800077e:	4b3b      	ldr	r3, [pc, #236]	; (800086c <HAL_GPIO_Init+0x350>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	43db      	mvns	r3, r3
 8000788:	693a      	ldr	r2, [r7, #16]
 800078a:	4013      	ands	r3, r2
 800078c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000796:	2b00      	cmp	r3, #0
 8000798:	d003      	beq.n	80007a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	4313      	orrs	r3, r2
 80007a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80007a2:	4a32      	ldr	r2, [pc, #200]	; (800086c <HAL_GPIO_Init+0x350>)
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80007a8:	4b30      	ldr	r3, [pc, #192]	; (800086c <HAL_GPIO_Init+0x350>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	43db      	mvns	r3, r3
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	4013      	ands	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d003      	beq.n	80007cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80007c4:	693a      	ldr	r2, [r7, #16]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80007cc:	4a27      	ldr	r2, [pc, #156]	; (800086c <HAL_GPIO_Init+0x350>)
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <HAL_GPIO_Init+0x350>)
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	43db      	mvns	r3, r3
 80007dc:	693a      	ldr	r2, [r7, #16]
 80007de:	4013      	ands	r3, r2
 80007e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d003      	beq.n	80007f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80007f6:	4a1d      	ldr	r2, [pc, #116]	; (800086c <HAL_GPIO_Init+0x350>)
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <HAL_GPIO_Init+0x350>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	43db      	mvns	r3, r3
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	4013      	ands	r3, r2
 800080a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000814:	2b00      	cmp	r3, #0
 8000816:	d003      	beq.n	8000820 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	4313      	orrs	r3, r2
 800081e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <HAL_GPIO_Init+0x350>)
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	3301      	adds	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	fa22 f303 	lsr.w	r3, r2, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	f47f ae78 	bne.w	800052c <HAL_GPIO_Init+0x10>
  }
}
 800083c:	bf00      	nop
 800083e:	bf00      	nop
 8000840:	371c      	adds	r7, #28
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000
 8000850:	40010000 	.word	0x40010000
 8000854:	48000400 	.word	0x48000400
 8000858:	48000800 	.word	0x48000800
 800085c:	48000c00 	.word	0x48000c00
 8000860:	48001000 	.word	0x48001000
 8000864:	48001400 	.word	0x48001400
 8000868:	48001800 	.word	0x48001800
 800086c:	40010400 	.word	0x40010400

08000870 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	691a      	ldr	r2, [r3, #16]
 8000880:	887b      	ldrh	r3, [r7, #2]
 8000882:	4013      	ands	r3, r2
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000888:	2301      	movs	r3, #1
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e001      	b.n	8000892 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800088e:	2300      	movs	r3, #0
 8000890:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	807b      	strh	r3, [r7, #2]
 80008ac:	4613      	mov	r3, r2
 80008ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008b0:	787b      	ldrb	r3, [r7, #1]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d003      	beq.n	80008be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80008b6:	887a      	ldrh	r2, [r7, #2]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80008bc:	e002      	b.n	80008c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008be:	887a      	ldrh	r2, [r7, #2]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80008dc:	695a      	ldr	r2, [r3, #20]
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	4013      	ands	r3, r2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d006      	beq.n	80008f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80008ec:	88fb      	ldrh	r3, [r7, #6]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f005 f9cc 	bl	8005c8c <HAL_GPIO_EXTI_Callback>
  }
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40010400 	.word	0x40010400

08000900 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000902:	b08f      	sub	sp, #60	; 0x3c
 8000904:	af0a      	add	r7, sp, #40	; 0x28
 8000906:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d101      	bne.n	8000912 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e116      	b.n	8000b40 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d106      	bne.n	8000932 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f005 fad5 	bl	8005edc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2203      	movs	r2, #3
 8000936:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800093e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000942:	2b00      	cmp	r3, #0
 8000944:	d102      	bne.n	800094c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f002 fc26 	bl	80031a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	687e      	ldr	r6, [r7, #4]
 800095e:	466d      	mov	r5, sp
 8000960:	f106 0410 	add.w	r4, r6, #16
 8000964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800096a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800096c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000970:	e885 0003 	stmia.w	r5, {r0, r1}
 8000974:	1d33      	adds	r3, r6, #4
 8000976:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000978:	6838      	ldr	r0, [r7, #0]
 800097a:	f002 fb39 	bl	8002ff0 <USB_CoreInit>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d005      	beq.n	8000990 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2202      	movs	r2, #2
 8000988:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	e0d7      	b.n	8000b40 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f002 fc14 	bl	80031c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]
 80009a0:	e04a      	b.n	8000a38 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80009a2:	7bfa      	ldrb	r2, [r7, #15]
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	4613      	mov	r3, r2
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	1a9b      	subs	r3, r3, r2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	440b      	add	r3, r1
 80009b0:	333d      	adds	r3, #61	; 0x3d
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80009b6:	7bfa      	ldrb	r2, [r7, #15]
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	4613      	mov	r3, r2
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	1a9b      	subs	r3, r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	440b      	add	r3, r1
 80009c4:	333c      	adds	r3, #60	; 0x3c
 80009c6:	7bfa      	ldrb	r2, [r7, #15]
 80009c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80009ca:	7bfa      	ldrb	r2, [r7, #15]
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	b298      	uxth	r0, r3
 80009d0:	6879      	ldr	r1, [r7, #4]
 80009d2:	4613      	mov	r3, r2
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	1a9b      	subs	r3, r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	440b      	add	r3, r1
 80009dc:	3342      	adds	r3, #66	; 0x42
 80009de:	4602      	mov	r2, r0
 80009e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80009e2:	7bfa      	ldrb	r2, [r7, #15]
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	4613      	mov	r3, r2
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	1a9b      	subs	r3, r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	440b      	add	r3, r1
 80009f0:	333f      	adds	r3, #63	; 0x3f
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80009f6:	7bfa      	ldrb	r2, [r7, #15]
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	4613      	mov	r3, r2
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	1a9b      	subs	r3, r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	440b      	add	r3, r1
 8000a04:	3344      	adds	r3, #68	; 0x44
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000a0a:	7bfa      	ldrb	r2, [r7, #15]
 8000a0c:	6879      	ldr	r1, [r7, #4]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	1a9b      	subs	r3, r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	440b      	add	r3, r1
 8000a18:	3348      	adds	r3, #72	; 0x48
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000a1e:	7bfa      	ldrb	r2, [r7, #15]
 8000a20:	6879      	ldr	r1, [r7, #4]
 8000a22:	4613      	mov	r3, r2
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	1a9b      	subs	r3, r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	3350      	adds	r3, #80	; 0x50
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	3301      	adds	r3, #1
 8000a36:	73fb      	strb	r3, [r7, #15]
 8000a38:	7bfa      	ldrb	r2, [r7, #15]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d3af      	bcc.n	80009a2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a42:	2300      	movs	r3, #0
 8000a44:	73fb      	strb	r3, [r7, #15]
 8000a46:	e044      	b.n	8000ad2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000a48:	7bfa      	ldrb	r2, [r7, #15]
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	1a9b      	subs	r3, r3, r2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	440b      	add	r3, r1
 8000a56:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000a5e:	7bfa      	ldrb	r2, [r7, #15]
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	4613      	mov	r3, r2
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	1a9b      	subs	r3, r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000a70:	7bfa      	ldrb	r2, [r7, #15]
 8000a72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000a74:	7bfa      	ldrb	r2, [r7, #15]
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	1a9b      	subs	r3, r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	440b      	add	r3, r1
 8000a82:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000a8a:	7bfa      	ldrb	r2, [r7, #15]
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	1a9b      	subs	r3, r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	440b      	add	r3, r1
 8000a98:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000aa0:	7bfa      	ldrb	r2, [r7, #15]
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	1a9b      	subs	r3, r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	440b      	add	r3, r1
 8000aae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ab6:	7bfa      	ldrb	r2, [r7, #15]
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	4613      	mov	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	1a9b      	subs	r3, r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	73fb      	strb	r3, [r7, #15]
 8000ad2:	7bfa      	ldrb	r2, [r7, #15]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d3b5      	bcc.n	8000a48 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	687e      	ldr	r6, [r7, #4]
 8000ae4:	466d      	mov	r5, sp
 8000ae6:	f106 0410 	add.w	r4, r6, #16
 8000aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000af2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000af6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000afa:	1d33      	adds	r3, r6, #4
 8000afc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000afe:	6838      	ldr	r0, [r7, #0]
 8000b00:	f002 fb8a 	bl	8003218 <USB_DevInit>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d005      	beq.n	8000b16 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e014      	b.n	8000b40 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2201      	movs	r2, #1
 8000b22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d102      	bne.n	8000b34 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 ff4a 	bl	80019c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 fb0c 	bl	8004156 <USB_DevDisconnect>

  return HAL_OK;
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b48 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d101      	bne.n	8000b64 <HAL_PCD_Start+0x1c>
 8000b60:	2302      	movs	r3, #2
 8000b62:	e01c      	b.n	8000b9e <HAL_PCD_Start+0x56>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2201      	movs	r2, #1
 8000b68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d105      	bne.n	8000b80 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 fafb 	bl	8003180 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f003 fac0 	bl	8004114 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000ba6:	b590      	push	{r4, r7, lr}
 8000ba8:	b08d      	sub	sp, #52	; 0x34
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000bb4:	6a3b      	ldr	r3, [r7, #32]
 8000bb6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 fb7e 	bl	80042be <USB_GetMode>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f040 838f 	bne.w	80012e8 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f003 fae2 	bl	8004198 <USB_ReadInterrupts>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 8385 	beq.w	80012e6 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 fad9 	bl	8004198 <USB_ReadInterrupts>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d107      	bne.n	8000c00 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	695a      	ldr	r2, [r3, #20]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f002 0202 	and.w	r2, r2, #2
 8000bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f003 fac7 	bl	8004198 <USB_ReadInterrupts>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f003 0310 	and.w	r3, r3, #16
 8000c10:	2b10      	cmp	r3, #16
 8000c12:	d161      	bne.n	8000cd8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	699a      	ldr	r2, [r3, #24]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 0210 	bic.w	r2, r2, #16
 8000c22:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	6a1b      	ldr	r3, [r3, #32]
 8000c28:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	f003 020f 	and.w	r2, r3, #15
 8000c30:	4613      	mov	r3, r2
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	1a9b      	subs	r3, r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	3304      	adds	r3, #4
 8000c42:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	0c5b      	lsrs	r3, r3, #17
 8000c48:	f003 030f 	and.w	r3, r3, #15
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d124      	bne.n	8000c9a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000c56:	4013      	ands	r3, r2
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d035      	beq.n	8000cc8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	091b      	lsrs	r3, r3, #4
 8000c64:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000c66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	6a38      	ldr	r0, [r7, #32]
 8000c70:	f003 f92d 	bl	8003ece <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	091b      	lsrs	r3, r3, #4
 8000c7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c80:	441a      	add	r2, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	699a      	ldr	r2, [r3, #24]
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	091b      	lsrs	r3, r3, #4
 8000c8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c92:	441a      	add	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	619a      	str	r2, [r3, #24]
 8000c98:	e016      	b.n	8000cc8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	0c5b      	lsrs	r3, r3, #17
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d110      	bne.n	8000cc8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8000cac:	2208      	movs	r2, #8
 8000cae:	4619      	mov	r1, r3
 8000cb0:	6a38      	ldr	r0, [r7, #32]
 8000cb2:	f003 f90c 	bl	8003ece <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	699a      	ldr	r2, [r3, #24]
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	091b      	lsrs	r3, r3, #4
 8000cbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cc2:	441a      	add	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	699a      	ldr	r2, [r3, #24]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 0210 	orr.w	r2, r2, #16
 8000cd6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f003 fa5b 	bl	8004198 <USB_ReadInterrupts>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ce8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000cec:	d16e      	bne.n	8000dcc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f003 fa61 	bl	80041be <USB_ReadDevAllOutEpInterrupt>
 8000cfc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000cfe:	e062      	b.n	8000dc6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d057      	beq.n	8000dba <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f003 fa86 	bl	8004226 <USB_ReadDevOutEPInterrupt>
 8000d1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00c      	beq.n	8000d40 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	015a      	lsls	r2, r3, #5
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000d32:	461a      	mov	r2, r3
 8000d34:	2301      	movs	r3, #1
 8000d36:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000d38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 fd6a 	bl	8001814 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d00c      	beq.n	8000d64 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	015a      	lsls	r2, r3, #5
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	4413      	add	r3, r2
 8000d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000d56:	461a      	mov	r2, r3
 8000d58:	2308      	movs	r3, #8
 8000d5a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000d5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 fda6 	bl	80018b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	f003 0310 	and.w	r3, r3, #16
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d008      	beq.n	8000d80 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	015a      	lsls	r2, r3, #5
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	4413      	add	r3, r2
 8000d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	2310      	movs	r3, #16
 8000d7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	f003 0320 	and.w	r3, r3, #32
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d008      	beq.n	8000d9c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	015a      	lsls	r2, r3, #5
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	4413      	add	r3, r2
 8000d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000d96:	461a      	mov	r2, r3
 8000d98:	2320      	movs	r3, #32
 8000d9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d009      	beq.n	8000dba <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	015a      	lsls	r2, r3, #5
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	4413      	add	r3, r2
 8000dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000db2:	461a      	mov	r2, r3
 8000db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc2:	085b      	lsrs	r3, r3, #1
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8000dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d199      	bne.n	8000d00 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f003 f9e1 	bl	8004198 <USB_ReadInterrupts>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ddc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000de0:	f040 8087 	bne.w	8000ef2 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f003 fa02 	bl	80041f2 <USB_ReadDevAllInEpInterrupt>
 8000dee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8000df4:	e07a      	b.n	8000eec <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8000df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d06f      	beq.n	8000ee0 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 fa29 	bl	8004262 <USB_ReadDevInEPInterrupt>
 8000e10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d020      	beq.n	8000e5e <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	2201      	movs	r2, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69f9      	ldr	r1, [r7, #28]
 8000e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	015a      	lsls	r2, r3, #5
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	4413      	add	r3, r2
 8000e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	2301      	movs	r3, #1
 8000e50:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	4619      	mov	r1, r3
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f005 f8fe 	bl	800605a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d008      	beq.n	8000e7a <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6a:	015a      	lsls	r2, r3, #5
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	4413      	add	r3, r2
 8000e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000e74:	461a      	mov	r2, r3
 8000e76:	2308      	movs	r3, #8
 8000e78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	f003 0310 	and.w	r3, r3, #16
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d008      	beq.n	8000e96 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	015a      	lsls	r2, r3, #5
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000e90:	461a      	mov	r2, r3
 8000e92:	2310      	movs	r3, #16
 8000e94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d008      	beq.n	8000eb2 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea2:	015a      	lsls	r2, r3, #5
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000eac:	461a      	mov	r2, r3
 8000eae:	2340      	movs	r3, #64	; 0x40
 8000eb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d008      	beq.n	8000ece <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	015a      	lsls	r2, r3, #5
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000ec8:	461a      	mov	r2, r3
 8000eca:	2302      	movs	r3, #2
 8000ecc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8000ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 fc11 	bl	8001702 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee8:	085b      	lsrs	r3, r3, #1
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8000eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d181      	bne.n	8000df6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 f94e 	bl	8004198 <USB_ReadInterrupts>
 8000efc:	4603      	mov	r3, r0
 8000efe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000f02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f06:	d122      	bne.n	8000f4e <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	69fa      	ldr	r2, [r7, #28]
 8000f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000f16:	f023 0301 	bic.w	r3, r3, #1
 8000f1a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d108      	bne.n	8000f38 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f005 fb97 	bl	8006664 <HAL_PCDEx_LPM_Callback>
 8000f36:	e002      	b.n	8000f3e <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f005 f8fb 	bl	8006134 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	695a      	ldr	r2, [r3, #20]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8000f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f003 f920 	bl	8004198 <USB_ReadInterrupts>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f62:	d112      	bne.n	8000f8a <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d102      	bne.n	8000f7a <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f005 f8b7 	bl	80060e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	695a      	ldr	r2, [r3, #20]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8000f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f003 f902 	bl	8004198 <USB_ReadInterrupts>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000f9e:	d121      	bne.n	8000fe4 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	695a      	ldr	r2, [r3, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8000fae:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d111      	bne.n	8000fde <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	f003 020f 	and.w	r2, r3, #15
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f005 fb44 	bl	8006664 <HAL_PCDEx_LPM_Callback>
 8000fdc:	e002      	b.n	8000fe4 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f005 f882 	bl	80060e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f003 f8d5 	bl	8004198 <USB_ReadInterrupts>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ff8:	f040 80c5 	bne.w	8001186 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	69fa      	ldr	r2, [r7, #28]
 8001006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800100a:	f023 0301 	bic.w	r3, r3, #1
 800100e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2110      	movs	r1, #16
 8001016:	4618      	mov	r0, r3
 8001018:	f002 fa4a 	bl	80034b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001020:	e056      	b.n	80010d0 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001024:	015a      	lsls	r2, r3, #5
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	4413      	add	r3, r2
 800102a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800102e:	461a      	mov	r2, r3
 8001030:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001034:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001038:	015a      	lsls	r2, r3, #5
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	4413      	add	r3, r2
 800103e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001046:	0151      	lsls	r1, r2, #5
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	440a      	add	r2, r1
 800104c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001050:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001054:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001058:	015a      	lsls	r2, r3, #5
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	4413      	add	r3, r2
 800105e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001066:	0151      	lsls	r1, r2, #5
 8001068:	69fa      	ldr	r2, [r7, #28]
 800106a:	440a      	add	r2, r1
 800106c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001070:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001074:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001078:	015a      	lsls	r2, r3, #5
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	4413      	add	r3, r2
 800107e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001082:	461a      	mov	r2, r3
 8001084:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001088:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800108a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108c:	015a      	lsls	r2, r3, #5
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	4413      	add	r3, r2
 8001092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800109a:	0151      	lsls	r1, r2, #5
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	440a      	add	r2, r1
 80010a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80010a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80010a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80010aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ac:	015a      	lsls	r2, r3, #5
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	4413      	add	r3, r2
 80010b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ba:	0151      	lsls	r1, r2, #5
 80010bc:	69fa      	ldr	r2, [r7, #28]
 80010be:	440a      	add	r2, r1
 80010c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80010c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010cc:	3301      	adds	r3, #1
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d3a3      	bcc.n	8001022 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	69fa      	ldr	r2, [r7, #28]
 80010e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80010e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80010ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d016      	beq.n	8001124 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001106:	f043 030b 	orr.w	r3, r3, #11
 800110a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800111c:	f043 030b 	orr.w	r3, r3, #11
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	e015      	b.n	8001150 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001132:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001136:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800113a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800114a:	f043 030b 	orr.w	r3, r3, #11
 800114e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800115e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001162:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800116e:	4619      	mov	r1, r3
 8001170:	4610      	mov	r0, r2
 8001172:	f003 f8d5 	bl	8004320 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	695a      	ldr	r2, [r3, #20]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001184:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f003 f804 	bl	8004198 <USB_ReadInterrupts>
 8001190:	4603      	mov	r3, r0
 8001192:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800119a:	d124      	bne.n	80011e6 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 f89a 	bl	80042da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 f9e1 	bl	8003572 <USB_GetDevSpeed>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681c      	ldr	r4, [r3, #0]
 80011bc:	f001 f9f0 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80011c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	4620      	mov	r0, r4
 80011cc:	f001 ff3c 	bl	8003048 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f004 ff6a 	bl	80060aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	695a      	ldr	r2, [r3, #20]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80011e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 ffd4 	bl	8004198 <USB_ReadInterrupts>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d10a      	bne.n	8001210 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f004 ff47 	bl	800608e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	695a      	ldr	r2, [r3, #20]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f002 0208 	and.w	r2, r2, #8
 800120e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f002 ffbf 	bl	8004198 <USB_ReadInterrupts>
 800121a:	4603      	mov	r3, r0
 800121c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001224:	d10f      	bne.n	8001246 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	b2db      	uxtb	r3, r3
 800122e:	4619      	mov	r1, r3
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f004 ffb9 	bl	80061a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	695a      	ldr	r2, [r3, #20]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001244:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f002 ffa4 	bl	8004198 <USB_ReadInterrupts>
 8001250:	4603      	mov	r3, r0
 8001252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001256:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800125a:	d10f      	bne.n	800127c <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	b2db      	uxtb	r3, r3
 8001264:	4619      	mov	r1, r3
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f004 ff8c 	bl	8006184 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	695a      	ldr	r2, [r3, #20]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800127a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f002 ff89 	bl	8004198 <USB_ReadInterrupts>
 8001286:	4603      	mov	r3, r0
 8001288:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800128c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001290:	d10a      	bne.n	80012a8 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f004 ff9a 	bl	80061cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	695a      	ldr	r2, [r3, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80012a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f002 ff73 	bl	8004198 <USB_ReadInterrupts>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d115      	bne.n	80012e8 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f004 ff8a 	bl	80061e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6859      	ldr	r1, [r3, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	e000      	b.n	80012e8 <HAL_PCD_IRQHandler+0x742>
      return;
 80012e6:	bf00      	nop
    }
  }
}
 80012e8:	3734      	adds	r7, #52	; 0x34
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <HAL_PCD_SetAddress+0x1a>
 8001304:	2302      	movs	r3, #2
 8001306:	e013      	b.n	8001330 <HAL_PCD_SetAddress+0x42>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	78fa      	ldrb	r2, [r7, #3]
 8001314:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	78fa      	ldrb	r2, [r7, #3]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f002 fed1 	bl	80040c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	4608      	mov	r0, r1
 8001342:	4611      	mov	r1, r2
 8001344:	461a      	mov	r2, r3
 8001346:	4603      	mov	r3, r0
 8001348:	70fb      	strb	r3, [r7, #3]
 800134a:	460b      	mov	r3, r1
 800134c:	803b      	strh	r3, [r7, #0]
 800134e:	4613      	mov	r3, r2
 8001350:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800135a:	2b00      	cmp	r3, #0
 800135c:	da0f      	bge.n	800137e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800135e:	78fb      	ldrb	r3, [r7, #3]
 8001360:	f003 020f 	and.w	r2, r3, #15
 8001364:	4613      	mov	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	1a9b      	subs	r3, r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	3338      	adds	r3, #56	; 0x38
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	3304      	adds	r3, #4
 8001374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2201      	movs	r2, #1
 800137a:	705a      	strb	r2, [r3, #1]
 800137c:	e00f      	b.n	800139e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	f003 020f 	and.w	r2, r3, #15
 8001384:	4613      	mov	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	1a9b      	subs	r3, r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4413      	add	r3, r2
 8001394:	3304      	adds	r3, #4
 8001396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80013aa:	883a      	ldrh	r2, [r7, #0]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	78ba      	ldrb	r2, [r7, #2]
 80013b4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	785b      	ldrb	r3, [r3, #1]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d004      	beq.n	80013c8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80013c8:	78bb      	ldrb	r3, [r7, #2]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d102      	bne.n	80013d4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d101      	bne.n	80013e2 <HAL_PCD_EP_Open+0xaa>
 80013de:	2302      	movs	r3, #2
 80013e0:	e00e      	b.n	8001400 <HAL_PCD_EP_Open+0xc8>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68f9      	ldr	r1, [r7, #12]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 f8dd 	bl	80035b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80013fe:	7afb      	ldrb	r3, [r7, #11]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001418:	2b00      	cmp	r3, #0
 800141a:	da0f      	bge.n	800143c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	f003 020f 	and.w	r2, r3, #15
 8001422:	4613      	mov	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	1a9b      	subs	r3, r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	3338      	adds	r3, #56	; 0x38
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	3304      	adds	r3, #4
 8001432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2201      	movs	r2, #1
 8001438:	705a      	strb	r2, [r3, #1]
 800143a:	e00f      	b.n	800145c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	f003 020f 	and.w	r2, r3, #15
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	1a9b      	subs	r3, r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	3304      	adds	r3, #4
 8001454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	b2da      	uxtb	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800146e:	2b01      	cmp	r3, #1
 8001470:	d101      	bne.n	8001476 <HAL_PCD_EP_Close+0x6e>
 8001472:	2302      	movs	r3, #2
 8001474:	e00e      	b.n	8001494 <HAL_PCD_EP_Close+0x8c>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68f9      	ldr	r1, [r7, #12]
 8001484:	4618      	mov	r0, r3
 8001486:	f002 f91b 	bl	80036c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	460b      	mov	r3, r1
 80014aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014ac:	7afb      	ldrb	r3, [r7, #11]
 80014ae:	f003 020f 	and.w	r2, r3, #15
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4413      	add	r3, r2
 80014c2:	3304      	adds	r3, #4
 80014c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	2200      	movs	r2, #0
 80014dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014de:	7afb      	ldrb	r3, [r7, #11]
 80014e0:	f003 030f 	and.w	r3, r3, #15
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80014ea:	7afb      	ldrb	r3, [r7, #11]
 80014ec:	f003 030f 	and.w	r3, r3, #15
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d106      	bne.n	8001502 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6979      	ldr	r1, [r7, #20]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 fb98 	bl	8003c30 <USB_EP0StartXfer>
 8001500:	e005      	b.n	800150e <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6979      	ldr	r1, [r7, #20]
 8001508:	4618      	mov	r0, r3
 800150a:	f002 f9b5 	bl	8003878 <USB_EPStartXfer>
  }

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	460b      	mov	r3, r1
 8001526:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001528:	7afb      	ldrb	r3, [r7, #11]
 800152a:	f003 020f 	and.w	r2, r3, #15
 800152e:	4613      	mov	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	1a9b      	subs	r3, r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	3338      	adds	r3, #56	; 0x38
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	4413      	add	r3, r2
 800153c:	3304      	adds	r3, #4
 800153e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2201      	movs	r2, #1
 8001556:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001558:	7afb      	ldrb	r3, [r7, #11]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	b2da      	uxtb	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001564:	7afb      	ldrb	r3, [r7, #11]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	2b00      	cmp	r3, #0
 800156c:	d106      	bne.n	800157c <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6979      	ldr	r1, [r7, #20]
 8001574:	4618      	mov	r0, r3
 8001576:	f002 fb5b 	bl	8003c30 <USB_EP0StartXfer>
 800157a:	e005      	b.n	8001588 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6979      	ldr	r1, [r7, #20]
 8001582:	4618      	mov	r0, r3
 8001584:	f002 f978 	bl	8003878 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b084      	sub	sp, #16
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	460b      	mov	r3, r1
 800159c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	f003 020f 	and.w	r2, r3, #15
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d901      	bls.n	80015b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e04e      	b.n	800164e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	da0f      	bge.n	80015d8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	f003 020f 	and.w	r2, r3, #15
 80015be:	4613      	mov	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	1a9b      	subs	r3, r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	3338      	adds	r3, #56	; 0x38
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	3304      	adds	r3, #4
 80015ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2201      	movs	r2, #1
 80015d4:	705a      	strb	r2, [r3, #1]
 80015d6:	e00d      	b.n	80015f4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015d8:	78fa      	ldrb	r2, [r7, #3]
 80015da:	4613      	mov	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	1a9b      	subs	r3, r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	3304      	adds	r3, #4
 80015ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2201      	movs	r2, #1
 80015f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	f003 030f 	and.w	r3, r3, #15
 8001600:	b2da      	uxtb	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <HAL_PCD_EP_SetStall+0x82>
 8001610:	2302      	movs	r3, #2
 8001612:	e01c      	b.n	800164e <HAL_PCD_EP_SetStall+0xbc>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68f9      	ldr	r1, [r7, #12]
 8001622:	4618      	mov	r0, r3
 8001624:	f002 fc7c 	bl	8003f20 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	2b00      	cmp	r3, #0
 8001630:	d108      	bne.n	8001644 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800163c:	4619      	mov	r1, r3
 800163e:	4610      	mov	r0, r2
 8001640:	f002 fe6e 	bl	8004320 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	f003 020f 	and.w	r2, r3, #15
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	429a      	cmp	r2, r3
 800166e:	d901      	bls.n	8001674 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e042      	b.n	80016fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001674:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001678:	2b00      	cmp	r3, #0
 800167a:	da0f      	bge.n	800169c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	f003 020f 	and.w	r2, r3, #15
 8001682:	4613      	mov	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	1a9b      	subs	r3, r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	3338      	adds	r3, #56	; 0x38
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	3304      	adds	r3, #4
 8001692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2201      	movs	r2, #1
 8001698:	705a      	strb	r2, [r3, #1]
 800169a:	e00f      	b.n	80016bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	f003 020f 	and.w	r2, r3, #15
 80016a2:	4613      	mov	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	3304      	adds	r3, #4
 80016b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2200      	movs	r2, #0
 80016ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <HAL_PCD_EP_ClrStall+0x86>
 80016d8:	2302      	movs	r3, #2
 80016da:	e00e      	b.n	80016fa <HAL_PCD_EP_ClrStall+0xa4>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68f9      	ldr	r1, [r7, #12]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 fc86 	bl	8003ffc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b088      	sub	sp, #32
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	4613      	mov	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	1a9b      	subs	r3, r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	3338      	adds	r3, #56	; 0x38
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	3304      	adds	r3, #4
 8001728:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	699a      	ldr	r2, [r3, #24]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	429a      	cmp	r2, r3
 8001734:	d901      	bls.n	800173a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e067      	b.n	800180a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	429a      	cmp	r2, r3
 800174e:	d902      	bls.n	8001756 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3303      	adds	r3, #3
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800175e:	e026      	b.n	80017ae <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	695a      	ldr	r2, [r3, #20]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	429a      	cmp	r2, r3
 8001774:	d902      	bls.n	800177c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	3303      	adds	r3, #3
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	68d9      	ldr	r1, [r3, #12]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	b29b      	uxth	r3, r3
 8001790:	6978      	ldr	r0, [r7, #20]
 8001792:	f002 fb6b 	bl	8003e6c <USB_WritePacket>

    ep->xfer_buff  += len;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	441a      	add	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	699a      	ldr	r2, [r3, #24]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	441a      	add	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	015a      	lsls	r2, r3, #5
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d809      	bhi.n	80017d8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	699a      	ldr	r2, [r3, #24]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d203      	bcs.n	80017d8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1c3      	bne.n	8001760 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d811      	bhi.n	8001808 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	2201      	movs	r2, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	6939      	ldr	r1, [r7, #16]
 8001800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001804:	4013      	ands	r3, r2
 8001806:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	333c      	adds	r3, #60	; 0x3c
 800182c:	3304      	adds	r3, #4
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	015a      	lsls	r2, r3, #5
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4413      	add	r3, r2
 800183a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4a19      	ldr	r2, [pc, #100]	; (80018ac <PCD_EP_OutXfrComplete_int+0x98>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d124      	bne.n	8001894 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00a      	beq.n	800186a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	015a      	lsls	r2, r3, #5
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4413      	add	r3, r2
 800185c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001860:	461a      	mov	r2, r3
 8001862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001866:	6093      	str	r3, [r2, #8]
 8001868:	e01a      	b.n	80018a0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	f003 0320 	and.w	r3, r3, #32
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	015a      	lsls	r2, r3, #5
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4413      	add	r3, r2
 800187c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001880:	461a      	mov	r2, r3
 8001882:	2320      	movs	r3, #32
 8001884:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4619      	mov	r1, r3
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f004 fbc9 	bl	8006024 <HAL_PCD_DataOutStageCallback>
 8001892:	e005      	b.n	80018a0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4619      	mov	r1, r3
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f004 fbc2 	bl	8006024 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	4f54310a 	.word	0x4f54310a

080018b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	333c      	adds	r3, #60	; 0x3c
 80018c8:	3304      	adds	r3, #4
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	015a      	lsls	r2, r3, #5
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4a0c      	ldr	r2, [pc, #48]	; (8001914 <PCD_EP_OutSetupPacket_int+0x64>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d90e      	bls.n	8001904 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d009      	beq.n	8001904 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	015a      	lsls	r2, r3, #5
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4413      	add	r3, r2
 80018f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018fc:	461a      	mov	r2, r3
 80018fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001902:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f004 fb7b 	bl	8006000 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	4f54300a 	.word	0x4f54300a

08001918 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	70fb      	strb	r3, [r7, #3]
 8001924:	4613      	mov	r3, r2
 8001926:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d107      	bne.n	8001946 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001936:	883b      	ldrh	r3, [r7, #0]
 8001938:	0419      	lsls	r1, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	430a      	orrs	r2, r1
 8001942:	629a      	str	r2, [r3, #40]	; 0x28
 8001944:	e028      	b.n	8001998 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	0c1b      	lsrs	r3, r3, #16
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	4413      	add	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	e00d      	b.n	8001976 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	3340      	adds	r3, #64	; 0x40
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	4413      	add	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	3301      	adds	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
 8001976:	7bfa      	ldrb	r2, [r7, #15]
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	3b01      	subs	r3, #1
 800197c:	429a      	cmp	r2, r3
 800197e:	d3ec      	bcc.n	800195a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001980:	883b      	ldrh	r3, [r7, #0]
 8001982:	0418      	lsls	r0, r3, #16
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6819      	ldr	r1, [r3, #0]
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	3b01      	subs	r3, #1
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	4302      	orrs	r2, r0
 8001990:	3340      	adds	r3, #64	; 0x40
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fa:	f043 0303 	orr.w	r3, r3, #3
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40007000 	.word	0x40007000

08001a2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a3a:	d130      	bne.n	8001a9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a3c:	4b23      	ldr	r3, [pc, #140]	; (8001acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a48:	d038      	beq.n	8001abc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a52:	4a1e      	ldr	r2, [pc, #120]	; (8001acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2232      	movs	r2, #50	; 0x32
 8001a60:	fb02 f303 	mul.w	r3, r2, r3
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a66:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6a:	0c9b      	lsrs	r3, r3, #18
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a70:	e002      	b.n	8001a78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a84:	d102      	bne.n	8001a8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f2      	bne.n	8001a72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a98:	d110      	bne.n	8001abc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e00f      	b.n	8001abe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aaa:	d007      	beq.n	8001abc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ab4:	4a05      	ldr	r2, [pc, #20]	; (8001acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40007000 	.word	0x40007000
 8001ad0:	20000104 	.word	0x20000104
 8001ad4:	431bde83 	.word	0x431bde83

08001ad8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae6:	6053      	str	r3, [r2, #4]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40007000 	.word	0x40007000

08001af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e3d4      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b0a:	4ba1      	ldr	r3, [pc, #644]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b14:	4b9e      	ldr	r3, [pc, #632]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 80e4 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <HAL_RCC_OscConfig+0x4a>
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	2b0c      	cmp	r3, #12
 8001b36:	f040 808b 	bne.w	8001c50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	f040 8087 	bne.w	8001c50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b42:	4b93      	ldr	r3, [pc, #588]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <HAL_RCC_OscConfig+0x62>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e3ac      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1a      	ldr	r2, [r3, #32]
 8001b5e:	4b8c      	ldr	r3, [pc, #560]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d004      	beq.n	8001b74 <HAL_RCC_OscConfig+0x7c>
 8001b6a:	4b89      	ldr	r3, [pc, #548]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b72:	e005      	b.n	8001b80 <HAL_RCC_OscConfig+0x88>
 8001b74:	4b86      	ldr	r3, [pc, #536]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d223      	bcs.n	8001bcc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 fd15 	bl	80025b8 <RCC_SetFlashLatencyFromMSIRange>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e38d      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b98:	4b7d      	ldr	r3, [pc, #500]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a7c      	ldr	r2, [pc, #496]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001b9e:	f043 0308 	orr.w	r3, r3, #8
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b7a      	ldr	r3, [pc, #488]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4977      	ldr	r1, [pc, #476]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb6:	4b76      	ldr	r3, [pc, #472]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	4972      	ldr	r1, [pc, #456]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
 8001bca:	e025      	b.n	8001c18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bcc:	4b70      	ldr	r3, [pc, #448]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a6f      	ldr	r2, [pc, #444]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001bd2:	f043 0308 	orr.w	r3, r3, #8
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b6d      	ldr	r3, [pc, #436]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	496a      	ldr	r1, [pc, #424]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bea:	4b69      	ldr	r3, [pc, #420]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	4965      	ldr	r1, [pc, #404]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 fcd5 	bl	80025b8 <RCC_SetFlashLatencyFromMSIRange>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e34d      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c18:	f000 fc36 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b5c      	ldr	r3, [pc, #368]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	495a      	ldr	r1, [pc, #360]	; (8001d94 <HAL_RCC_OscConfig+0x29c>)
 8001c2a:	5ccb      	ldrb	r3, [r1, r3]
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
 8001c34:	4a58      	ldr	r2, [pc, #352]	; (8001d98 <HAL_RCC_OscConfig+0x2a0>)
 8001c36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c38:	4b58      	ldr	r3, [pc, #352]	; (8001d9c <HAL_RCC_OscConfig+0x2a4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fadb 	bl	80001f8 <HAL_InitTick>
 8001c42:	4603      	mov	r3, r0
 8001c44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d052      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	e331      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d032      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c58:	4b4d      	ldr	r3, [pc, #308]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a4c      	ldr	r2, [pc, #304]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c64:	f7fe fb18 	bl	8000298 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c6c:	f7fe fb14 	bl	8000298 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e31a      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c7e:	4b44      	ldr	r3, [pc, #272]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a40      	ldr	r2, [pc, #256]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001c90:	f043 0308 	orr.w	r3, r3, #8
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	493b      	ldr	r1, [pc, #236]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ca8:	4b39      	ldr	r3, [pc, #228]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	4936      	ldr	r1, [pc, #216]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
 8001cbc:	e01a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cbe:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a33      	ldr	r2, [pc, #204]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cca:	f7fe fae5 	bl	8000298 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cd2:	f7fe fae1 	bl	8000298 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e2e7      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x1da>
 8001cf0:	e000      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cf2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d074      	beq.n	8001dea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x21a>
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	2b0c      	cmp	r3, #12
 8001d0a:	d10e      	bne.n	8001d2a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d10b      	bne.n	8001d2a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d12:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d064      	beq.n	8001de8 <HAL_RCC_OscConfig+0x2f0>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d160      	bne.n	8001de8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e2c4      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d32:	d106      	bne.n	8001d42 <HAL_RCC_OscConfig+0x24a>
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	e01d      	b.n	8001d7e <HAL_RCC_OscConfig+0x286>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d4a:	d10c      	bne.n	8001d66 <HAL_RCC_OscConfig+0x26e>
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001d52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0c      	ldr	r2, [pc, #48]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	e00b      	b.n	8001d7e <HAL_RCC_OscConfig+0x286>
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a09      	ldr	r2, [pc, #36]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <HAL_RCC_OscConfig+0x298>)
 8001d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d01c      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d86:	f7fe fa87 	bl	8000298 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8c:	e011      	b.n	8001db2 <HAL_RCC_OscConfig+0x2ba>
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	08006a8c 	.word	0x08006a8c
 8001d98:	20000104 	.word	0x20000104
 8001d9c:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7fe fa7a 	bl	8000298 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e280      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db2:	4baf      	ldr	r3, [pc, #700]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x2a8>
 8001dbe:	e014      	b.n	8001dea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7fe fa6a 	bl	8000298 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7fe fa66 	bl	8000298 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e26c      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dda:	4ba5      	ldr	r3, [pc, #660]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x2d0>
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d060      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_OscConfig+0x310>
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2b0c      	cmp	r3, #12
 8001e00:	d119      	bne.n	8001e36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d116      	bne.n	8001e36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e08:	4b99      	ldr	r3, [pc, #612]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_OscConfig+0x328>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e249      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e20:	4b93      	ldr	r3, [pc, #588]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	061b      	lsls	r3, r3, #24
 8001e2e:	4990      	ldr	r1, [pc, #576]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e34:	e040      	b.n	8001eb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d023      	beq.n	8001e86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3e:	4b8c      	ldr	r3, [pc, #560]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a8b      	ldr	r2, [pc, #556]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7fe fa25 	bl	8000298 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e52:	f7fe fa21 	bl	8000298 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e227      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e64:	4b82      	ldr	r3, [pc, #520]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4b7f      	ldr	r3, [pc, #508]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	061b      	lsls	r3, r3, #24
 8001e7e:	497c      	ldr	r1, [pc, #496]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
 8001e84:	e018      	b.n	8001eb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e86:	4b7a      	ldr	r3, [pc, #488]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a79      	ldr	r2, [pc, #484]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e92:	f7fe fa01 	bl	8000298 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9a:	f7fe f9fd 	bl	8000298 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e203      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eac:	4b70      	ldr	r3, [pc, #448]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f0      	bne.n	8001e9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d03c      	beq.n	8001f3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01c      	beq.n	8001f06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ecc:	4b68      	ldr	r3, [pc, #416]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed2:	4a67      	ldr	r2, [pc, #412]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001edc:	f7fe f9dc 	bl	8000298 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee4:	f7fe f9d8 	bl	8000298 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e1de      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef6:	4b5e      	ldr	r3, [pc, #376]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0ef      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x3ec>
 8001f04:	e01b      	b.n	8001f3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f06:	4b5a      	ldr	r3, [pc, #360]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0c:	4a58      	ldr	r2, [pc, #352]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001f0e:	f023 0301 	bic.w	r3, r3, #1
 8001f12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f16:	f7fe f9bf 	bl	8000298 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1e:	f7fe f9bb 	bl	8000298 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e1c1      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f30:	4b4f      	ldr	r3, [pc, #316]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1ef      	bne.n	8001f1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80a6 	beq.w	8002098 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f50:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10d      	bne.n	8001f78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5c:	4b44      	ldr	r3, [pc, #272]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	4a43      	ldr	r2, [pc, #268]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f66:	6593      	str	r3, [r2, #88]	; 0x58
 8001f68:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f74:	2301      	movs	r3, #1
 8001f76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f78:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <HAL_RCC_OscConfig+0x57c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d118      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f84:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <HAL_RCC_OscConfig+0x57c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a3a      	ldr	r2, [pc, #232]	; (8002074 <HAL_RCC_OscConfig+0x57c>)
 8001f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f90:	f7fe f982 	bl	8000298 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f98:	f7fe f97e 	bl	8000298 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e184      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001faa:	4b32      	ldr	r3, [pc, #200]	; (8002074 <HAL_RCC_OscConfig+0x57c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d108      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x4d8>
 8001fbe:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc4:	4a2a      	ldr	r2, [pc, #168]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fce:	e024      	b.n	800201a <HAL_RCC_OscConfig+0x522>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d110      	bne.n	8001ffa <HAL_RCC_OscConfig+0x502>
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fde:	4a24      	ldr	r2, [pc, #144]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fe8:	4b21      	ldr	r3, [pc, #132]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fee:	4a20      	ldr	r2, [pc, #128]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ff8:	e00f      	b.n	800201a <HAL_RCC_OscConfig+0x522>
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002000:	4a1b      	ldr	r2, [pc, #108]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 800200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002010:	4a17      	ldr	r2, [pc, #92]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8002012:	f023 0304 	bic.w	r3, r3, #4
 8002016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d016      	beq.n	8002050 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002022:	f7fe f939 	bl	8000298 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002028:	e00a      	b.n	8002040 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe f935 	bl	8000298 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	; 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e139      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_OscConfig+0x578>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0ed      	beq.n	800202a <HAL_RCC_OscConfig+0x532>
 800204e:	e01a      	b.n	8002086 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002050:	f7fe f922 	bl	8000298 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002056:	e00f      	b.n	8002078 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002058:	f7fe f91e 	bl	8000298 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	; 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d906      	bls.n	8002078 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e122      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002078:	4b90      	ldr	r3, [pc, #576]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1e8      	bne.n	8002058 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002086:	7ffb      	ldrb	r3, [r7, #31]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d105      	bne.n	8002098 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208c:	4b8b      	ldr	r3, [pc, #556]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	4a8a      	ldr	r2, [pc, #552]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 8002092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002096:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 8108 	beq.w	80022b2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	f040 80d0 	bne.w	800224c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020ac:	4b83      	ldr	r3, [pc, #524]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 0203 	and.w	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	429a      	cmp	r2, r3
 80020be:	d130      	bne.n	8002122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	3b01      	subs	r3, #1
 80020cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d127      	bne.n	8002122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d11f      	bne.n	8002122 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020ec:	2a07      	cmp	r2, #7
 80020ee:	bf14      	ite	ne
 80020f0:	2201      	movne	r2, #1
 80020f2:	2200      	moveq	r2, #0
 80020f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d113      	bne.n	8002122 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	3b01      	subs	r3, #1
 8002108:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d109      	bne.n	8002122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	085b      	lsrs	r3, r3, #1
 800211a:	3b01      	subs	r3, #1
 800211c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d06e      	beq.n	8002200 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2b0c      	cmp	r3, #12
 8002126:	d069      	beq.n	80021fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002128:	4b64      	ldr	r3, [pc, #400]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002134:	4b61      	ldr	r3, [pc, #388]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0b7      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002144:	4b5d      	ldr	r3, [pc, #372]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a5c      	ldr	r2, [pc, #368]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 800214a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800214e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002150:	f7fe f8a2 	bl	8000298 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe f89e 	bl	8000298 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e0a4      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800216a:	4b54      	ldr	r3, [pc, #336]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002176:	4b51      	ldr	r3, [pc, #324]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	4b51      	ldr	r3, [pc, #324]	; (80022c0 <HAL_RCC_OscConfig+0x7c8>)
 800217c:	4013      	ands	r3, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002186:	3a01      	subs	r2, #1
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	4311      	orrs	r1, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002190:	0212      	lsls	r2, r2, #8
 8002192:	4311      	orrs	r1, r2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002198:	0852      	lsrs	r2, r2, #1
 800219a:	3a01      	subs	r2, #1
 800219c:	0552      	lsls	r2, r2, #21
 800219e:	4311      	orrs	r1, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021a4:	0852      	lsrs	r2, r2, #1
 80021a6:	3a01      	subs	r2, #1
 80021a8:	0652      	lsls	r2, r2, #25
 80021aa:	4311      	orrs	r1, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021b0:	0912      	lsrs	r2, r2, #4
 80021b2:	0452      	lsls	r2, r2, #17
 80021b4:	430a      	orrs	r2, r1
 80021b6:	4941      	ldr	r1, [pc, #260]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021bc:	4b3f      	ldr	r3, [pc, #252]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a3e      	ldr	r2, [pc, #248]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 80021c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021c8:	4b3c      	ldr	r3, [pc, #240]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4a3b      	ldr	r2, [pc, #236]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 80021ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021d4:	f7fe f860 	bl	8000298 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021dc:	f7fe f85c 	bl	8000298 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e062      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ee:	4b33      	ldr	r3, [pc, #204]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021fa:	e05a      	b.n	80022b2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e059      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002200:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d152      	bne.n	80022b2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800220c:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a2a      	ldr	r2, [pc, #168]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 8002212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002216:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002218:	4b28      	ldr	r3, [pc, #160]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a27      	ldr	r2, [pc, #156]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 800221e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002222:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002224:	f7fe f838 	bl	8000298 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7fe f834 	bl	8000298 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e03a      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223e:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x734>
 800224a:	e032      	b.n	80022b2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d02d      	beq.n	80022ae <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a19      	ldr	r2, [pc, #100]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 8002258:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800225c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800225e:	4b17      	ldr	r3, [pc, #92]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800226a:	4b14      	ldr	r3, [pc, #80]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	4a13      	ldr	r2, [pc, #76]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 8002270:	f023 0303 	bic.w	r3, r3, #3
 8002274:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	4a10      	ldr	r2, [pc, #64]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 800227c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002284:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002286:	f7fe f807 	bl	8000298 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228e:	f7fe f803 	bl	8000298 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e009      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCC_OscConfig+0x7c4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f0      	bne.n	800228e <HAL_RCC_OscConfig+0x796>
 80022ac:	e001      	b.n	80022b2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3720      	adds	r7, #32
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40021000 	.word	0x40021000
 80022c0:	f99d808c 	.word	0xf99d808c

080022c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0c8      	b.n	800246a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022d8:	4b66      	ldr	r3, [pc, #408]	; (8002474 <HAL_RCC_ClockConfig+0x1b0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d910      	bls.n	8002308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e6:	4b63      	ldr	r3, [pc, #396]	; (8002474 <HAL_RCC_ClockConfig+0x1b0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 0207 	bic.w	r2, r3, #7
 80022ee:	4961      	ldr	r1, [pc, #388]	; (8002474 <HAL_RCC_ClockConfig+0x1b0>)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	4b5f      	ldr	r3, [pc, #380]	; (8002474 <HAL_RCC_ClockConfig+0x1b0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0b0      	b.n	800246a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d04c      	beq.n	80023ae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b03      	cmp	r3, #3
 800231a:	d107      	bne.n	800232c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231c:	4b56      	ldr	r3, [pc, #344]	; (8002478 <HAL_RCC_ClockConfig+0x1b4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d121      	bne.n	800236c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e09e      	b.n	800246a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d107      	bne.n	8002344 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002334:	4b50      	ldr	r3, [pc, #320]	; (8002478 <HAL_RCC_ClockConfig+0x1b4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d115      	bne.n	800236c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e092      	b.n	800246a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d107      	bne.n	800235c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800234c:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <HAL_RCC_ClockConfig+0x1b4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d109      	bne.n	800236c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e086      	b.n	800246a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800235c:	4b46      	ldr	r3, [pc, #280]	; (8002478 <HAL_RCC_ClockConfig+0x1b4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e07e      	b.n	800246a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800236c:	4b42      	ldr	r3, [pc, #264]	; (8002478 <HAL_RCC_ClockConfig+0x1b4>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f023 0203 	bic.w	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	493f      	ldr	r1, [pc, #252]	; (8002478 <HAL_RCC_ClockConfig+0x1b4>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800237e:	f7fd ff8b 	bl	8000298 <HAL_GetTick>
 8002382:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002384:	e00a      	b.n	800239c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002386:	f7fd ff87 	bl	8000298 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	; 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e066      	b.n	800246a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239c:	4b36      	ldr	r3, [pc, #216]	; (8002478 <HAL_RCC_ClockConfig+0x1b4>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 020c 	and.w	r2, r3, #12
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d1eb      	bne.n	8002386 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d008      	beq.n	80023cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ba:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <HAL_RCC_ClockConfig+0x1b4>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	492c      	ldr	r1, [pc, #176]	; (8002478 <HAL_RCC_ClockConfig+0x1b4>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023cc:	4b29      	ldr	r3, [pc, #164]	; (8002474 <HAL_RCC_ClockConfig+0x1b0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d210      	bcs.n	80023fc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <HAL_RCC_ClockConfig+0x1b0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 0207 	bic.w	r2, r3, #7
 80023e2:	4924      	ldr	r1, [pc, #144]	; (8002474 <HAL_RCC_ClockConfig+0x1b0>)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <HAL_RCC_ClockConfig+0x1b0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e036      	b.n	800246a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_RCC_ClockConfig+0x1b4>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4918      	ldr	r1, [pc, #96]	; (8002478 <HAL_RCC_ClockConfig+0x1b4>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002426:	4b14      	ldr	r3, [pc, #80]	; (8002478 <HAL_RCC_ClockConfig+0x1b4>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4910      	ldr	r1, [pc, #64]	; (8002478 <HAL_RCC_ClockConfig+0x1b4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800243a:	f000 f825 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 800243e:	4602      	mov	r2, r0
 8002440:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_RCC_ClockConfig+0x1b4>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	490c      	ldr	r1, [pc, #48]	; (800247c <HAL_RCC_ClockConfig+0x1b8>)
 800244c:	5ccb      	ldrb	r3, [r1, r3]
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	fa22 f303 	lsr.w	r3, r2, r3
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fd feca 	bl	80001f8 <HAL_InitTick>
 8002464:	4603      	mov	r3, r0
 8002466:	72fb      	strb	r3, [r7, #11]

  return status;
 8002468:	7afb      	ldrb	r3, [r7, #11]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40022000 	.word	0x40022000
 8002478:	40021000 	.word	0x40021000
 800247c:	08006a8c 	.word	0x08006a8c
 8002480:	20000104 	.word	0x20000104
 8002484:	20000000 	.word	0x20000000

08002488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002496:	4b3e      	ldr	r3, [pc, #248]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024a0:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0x34>
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	2b0c      	cmp	r3, #12
 80024b4:	d121      	bne.n	80024fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d11e      	bne.n	80024fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024bc:	4b34      	ldr	r3, [pc, #208]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d107      	bne.n	80024d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024c8:	4b31      	ldr	r3, [pc, #196]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	61fb      	str	r3, [r7, #28]
 80024d6:	e005      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024d8:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024e4:	4a2b      	ldr	r2, [pc, #172]	; (8002594 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10d      	bne.n	8002510 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d102      	bne.n	8002506 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002500:	4b25      	ldr	r3, [pc, #148]	; (8002598 <HAL_RCC_GetSysClockFreq+0x110>)
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	e004      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b08      	cmp	r3, #8
 800250a:	d101      	bne.n	8002510 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800250c:	4b23      	ldr	r3, [pc, #140]	; (800259c <HAL_RCC_GetSysClockFreq+0x114>)
 800250e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d134      	bne.n	8002580 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002516:	4b1e      	ldr	r3, [pc, #120]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d003      	beq.n	800252e <HAL_RCC_GetSysClockFreq+0xa6>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d003      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0xac>
 800252c:	e005      	b.n	800253a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800252e:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <HAL_RCC_GetSysClockFreq+0x110>)
 8002530:	617b      	str	r3, [r7, #20]
      break;
 8002532:	e005      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_RCC_GetSysClockFreq+0x114>)
 8002536:	617b      	str	r3, [r7, #20]
      break;
 8002538:	e002      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	617b      	str	r3, [r7, #20]
      break;
 800253e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	3301      	adds	r3, #1
 800254c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	fb02 f203 	mul.w	r2, r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_RCC_GetSysClockFreq+0x108>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	0e5b      	lsrs	r3, r3, #25
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	3301      	adds	r3, #1
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	fbb2 f3f3 	udiv	r3, r2, r3
 800257e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002580:	69bb      	ldr	r3, [r7, #24]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3724      	adds	r7, #36	; 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	08006a9c 	.word	0x08006a9c
 8002598:	00f42400 	.word	0x00f42400
 800259c:	007a1200 	.word	0x007a1200

080025a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000104 	.word	0x20000104

080025b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025c0:	2300      	movs	r3, #0
 80025c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025c4:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025d0:	f7ff fa1e 	bl	8001a10 <HAL_PWREx_GetVoltageRange>
 80025d4:	6178      	str	r0, [r7, #20]
 80025d6:	e014      	b.n	8002602 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b25      	ldr	r3, [pc, #148]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	4a24      	ldr	r2, [pc, #144]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e2:	6593      	str	r3, [r2, #88]	; 0x58
 80025e4:	4b22      	ldr	r3, [pc, #136]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025f0:	f7ff fa0e 	bl	8001a10 <HAL_PWREx_GetVoltageRange>
 80025f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025f6:	4b1e      	ldr	r3, [pc, #120]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	4a1d      	ldr	r2, [pc, #116]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002600:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002608:	d10b      	bne.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b80      	cmp	r3, #128	; 0x80
 800260e:	d919      	bls.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2ba0      	cmp	r3, #160	; 0xa0
 8002614:	d902      	bls.n	800261c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002616:	2302      	movs	r3, #2
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	e013      	b.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800261c:	2301      	movs	r3, #1
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	e010      	b.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d902      	bls.n	800262e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002628:	2303      	movs	r3, #3
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	e00a      	b.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b80      	cmp	r3, #128	; 0x80
 8002632:	d102      	bne.n	800263a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002634:	2302      	movs	r3, #2
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	e004      	b.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b70      	cmp	r3, #112	; 0x70
 800263e:	d101      	bne.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002640:	2301      	movs	r3, #1
 8002642:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 0207 	bic.w	r2, r3, #7
 800264c:	4909      	ldr	r1, [pc, #36]	; (8002674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002654:	4b07      	ldr	r3, [pc, #28]	; (8002674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	429a      	cmp	r2, r3
 8002660:	d001      	beq.n	8002666 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	40022000 	.word	0x40022000

08002678 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002680:	2300      	movs	r3, #0
 8002682:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002684:	2300      	movs	r3, #0
 8002686:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002690:	2b00      	cmp	r3, #0
 8002692:	d041      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002698:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800269c:	d02a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800269e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026a2:	d824      	bhi.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026a8:	d008      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026ae:	d81e      	bhi.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b8:	d010      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026ba:	e018      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026bc:	4b86      	ldr	r3, [pc, #536]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4a85      	ldr	r2, [pc, #532]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026c8:	e015      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3304      	adds	r3, #4
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fabb 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 80026d6:	4603      	mov	r3, r0
 80026d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026da:	e00c      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3320      	adds	r3, #32
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 fba6 	bl	8002e34 <RCCEx_PLLSAI2_Config>
 80026e8:	4603      	mov	r3, r0
 80026ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ec:	e003      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	74fb      	strb	r3, [r7, #19]
      break;
 80026f2:	e000      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10b      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026fc:	4b76      	ldr	r3, [pc, #472]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800270a:	4973      	ldr	r1, [pc, #460]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002712:	e001      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d041      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002728:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800272c:	d02a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800272e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002732:	d824      	bhi.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002734:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002738:	d008      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800273a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800273e:	d81e      	bhi.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002748:	d010      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800274a:	e018      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800274c:	4b62      	ldr	r3, [pc, #392]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a61      	ldr	r2, [pc, #388]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002756:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002758:	e015      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3304      	adds	r3, #4
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fa73 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800276a:	e00c      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3320      	adds	r3, #32
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fb5e 	bl	8002e34 <RCCEx_PLLSAI2_Config>
 8002778:	4603      	mov	r3, r0
 800277a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800277c:	e003      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	74fb      	strb	r3, [r7, #19]
      break;
 8002782:	e000      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002786:	7cfb      	ldrb	r3, [r7, #19]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10b      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800278c:	4b52      	ldr	r3, [pc, #328]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800279a:	494f      	ldr	r1, [pc, #316]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027a2:	e001      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80a0 	beq.w	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b6:	2300      	movs	r3, #0
 80027b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027ba:	4b47      	ldr	r3, [pc, #284]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027ca:	2300      	movs	r3, #0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d0:	4b41      	ldr	r3, [pc, #260]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	4a40      	ldr	r2, [pc, #256]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027da:	6593      	str	r3, [r2, #88]	; 0x58
 80027dc:	4b3e      	ldr	r3, [pc, #248]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e8:	2301      	movs	r3, #1
 80027ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ec:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a3a      	ldr	r2, [pc, #232]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027f8:	f7fd fd4e 	bl	8000298 <HAL_GetTick>
 80027fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027fe:	e009      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002800:	f7fd fd4a 	bl	8000298 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d902      	bls.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	74fb      	strb	r3, [r7, #19]
        break;
 8002812:	e005      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002814:	4b31      	ldr	r3, [pc, #196]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ef      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d15c      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002826:	4b2c      	ldr	r3, [pc, #176]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002830:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01f      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	429a      	cmp	r2, r3
 8002842:	d019      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002844:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800284e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002850:	4b21      	ldr	r3, [pc, #132]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	4a20      	ldr	r2, [pc, #128]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002860:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002866:	4a1c      	ldr	r2, [pc, #112]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002870:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d016      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fd fd09 	bl	8000298 <HAL_GetTick>
 8002886:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002888:	e00b      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7fd fd05 	bl	8000298 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	; 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d902      	bls.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	74fb      	strb	r3, [r7, #19]
            break;
 80028a0:	e006      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ec      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028c6:	4904      	ldr	r1, [pc, #16]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028ce:	e009      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	74bb      	strb	r3, [r7, #18]
 80028d4:	e006      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e4:	7c7b      	ldrb	r3, [r7, #17]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d105      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ea:	4b9e      	ldr	r3, [pc, #632]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ee:	4a9d      	ldr	r2, [pc, #628]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002902:	4b98      	ldr	r3, [pc, #608]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f023 0203 	bic.w	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	4994      	ldr	r1, [pc, #592]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002924:	4b8f      	ldr	r3, [pc, #572]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f023 020c 	bic.w	r2, r3, #12
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	498c      	ldr	r1, [pc, #560]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002946:	4b87      	ldr	r3, [pc, #540]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	4983      	ldr	r1, [pc, #524]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002968:	4b7e      	ldr	r3, [pc, #504]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	497b      	ldr	r1, [pc, #492]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800298a:	4b76      	ldr	r3, [pc, #472]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002998:	4972      	ldr	r1, [pc, #456]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029ac:	4b6d      	ldr	r3, [pc, #436]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ba:	496a      	ldr	r1, [pc, #424]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ce:	4b65      	ldr	r3, [pc, #404]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	4961      	ldr	r1, [pc, #388]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029f0:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fe:	4959      	ldr	r1, [pc, #356]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a12:	4b54      	ldr	r3, [pc, #336]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a20:	4950      	ldr	r1, [pc, #320]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a34:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	4948      	ldr	r1, [pc, #288]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a56:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	493f      	ldr	r1, [pc, #252]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d028      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a78:	4b3a      	ldr	r3, [pc, #232]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a86:	4937      	ldr	r1, [pc, #220]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a98:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a31      	ldr	r2, [pc, #196]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aa2:	60d3      	str	r3, [r2, #12]
 8002aa4:	e011      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aae:	d10c      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f8c8 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ac6:	7cfb      	ldrb	r3, [r7, #19]
 8002ac8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d028      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ad6:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002adc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	491f      	ldr	r1, [pc, #124]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002af4:	d106      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af6:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	4a1a      	ldr	r2, [pc, #104]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b00:	60d3      	str	r3, [r2, #12]
 8002b02:	e011      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2101      	movs	r1, #1
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 f899 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b1e:	7cfb      	ldrb	r3, [r7, #19]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d02b      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b42:	4908      	ldr	r1, [pc, #32]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b52:	d109      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a02      	ldr	r2, [pc, #8]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b5e:	60d3      	str	r3, [r2, #12]
 8002b60:	e014      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3304      	adds	r3, #4
 8002b76:	2101      	movs	r1, #1
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 f867 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b82:	7cfb      	ldrb	r3, [r7, #19]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d02f      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b98:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ba6:	4928      	ldr	r1, [pc, #160]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bb6:	d10d      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f844 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d014      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bce:	7cfb      	ldrb	r3, [r7, #19]
 8002bd0:	74bb      	strb	r3, [r7, #18]
 8002bd2:	e011      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3320      	adds	r3, #32
 8002be2:	2102      	movs	r1, #2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 f925 	bl	8002e34 <RCCEx_PLLSAI2_Config>
 8002bea:	4603      	mov	r3, r0
 8002bec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c04:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c12:	490d      	ldr	r1, [pc, #52]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00b      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c26:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c36:	4904      	ldr	r1, [pc, #16]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c3e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021000 	.word	0x40021000

08002c4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c5a:	4b75      	ldr	r3, [pc, #468]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d018      	beq.n	8002c98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c66:	4b72      	ldr	r3, [pc, #456]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f003 0203 	and.w	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d10d      	bne.n	8002c92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
       ||
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c7e:	4b6c      	ldr	r3, [pc, #432]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d047      	beq.n	8002d22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	e044      	b.n	8002d22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d018      	beq.n	8002cd2 <RCCEx_PLLSAI1_Config+0x86>
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d825      	bhi.n	8002cf0 <RCCEx_PLLSAI1_Config+0xa4>
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d002      	beq.n	8002cae <RCCEx_PLLSAI1_Config+0x62>
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d009      	beq.n	8002cc0 <RCCEx_PLLSAI1_Config+0x74>
 8002cac:	e020      	b.n	8002cf0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cae:	4b60      	ldr	r3, [pc, #384]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d11d      	bne.n	8002cf6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cbe:	e01a      	b.n	8002cf6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cc0:	4b5b      	ldr	r3, [pc, #364]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d116      	bne.n	8002cfa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd0:	e013      	b.n	8002cfa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cd2:	4b57      	ldr	r3, [pc, #348]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10f      	bne.n	8002cfe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cde:	4b54      	ldr	r3, [pc, #336]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cee:	e006      	b.n	8002cfe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf4:	e004      	b.n	8002d00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cf6:	bf00      	nop
 8002cf8:	e002      	b.n	8002d00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cfa:	bf00      	nop
 8002cfc:	e000      	b.n	8002d00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cfe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10d      	bne.n	8002d22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d06:	4b4a      	ldr	r3, [pc, #296]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6819      	ldr	r1, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	4944      	ldr	r1, [pc, #272]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d17d      	bne.n	8002e24 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d28:	4b41      	ldr	r3, [pc, #260]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a40      	ldr	r2, [pc, #256]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d34:	f7fd fab0 	bl	8000298 <HAL_GetTick>
 8002d38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d3a:	e009      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d3c:	f7fd faac 	bl	8000298 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d902      	bls.n	8002d50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d4e:	e005      	b.n	8002d5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d50:	4b37      	ldr	r3, [pc, #220]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1ef      	bne.n	8002d3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d160      	bne.n	8002e24 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d111      	bne.n	8002d8c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d68:	4b31      	ldr	r3, [pc, #196]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6892      	ldr	r2, [r2, #8]
 8002d78:	0211      	lsls	r1, r2, #8
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68d2      	ldr	r2, [r2, #12]
 8002d7e:	0912      	lsrs	r2, r2, #4
 8002d80:	0452      	lsls	r2, r2, #17
 8002d82:	430a      	orrs	r2, r1
 8002d84:	492a      	ldr	r1, [pc, #168]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	610b      	str	r3, [r1, #16]
 8002d8a:	e027      	b.n	8002ddc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d112      	bne.n	8002db8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d92:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6892      	ldr	r2, [r2, #8]
 8002da2:	0211      	lsls	r1, r2, #8
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6912      	ldr	r2, [r2, #16]
 8002da8:	0852      	lsrs	r2, r2, #1
 8002daa:	3a01      	subs	r2, #1
 8002dac:	0552      	lsls	r2, r2, #21
 8002dae:	430a      	orrs	r2, r1
 8002db0:	491f      	ldr	r1, [pc, #124]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	610b      	str	r3, [r1, #16]
 8002db6:	e011      	b.n	8002ddc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6892      	ldr	r2, [r2, #8]
 8002dc8:	0211      	lsls	r1, r2, #8
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6952      	ldr	r2, [r2, #20]
 8002dce:	0852      	lsrs	r2, r2, #1
 8002dd0:	3a01      	subs	r2, #1
 8002dd2:	0652      	lsls	r2, r2, #25
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	4916      	ldr	r1, [pc, #88]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a13      	ldr	r2, [pc, #76]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002de6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7fd fa56 	bl	8000298 <HAL_GetTick>
 8002dec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dee:	e009      	b.n	8002e04 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002df0:	f7fd fa52 	bl	8000298 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d902      	bls.n	8002e04 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	73fb      	strb	r3, [r7, #15]
          break;
 8002e02:	e005      	b.n	8002e10 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0ef      	beq.n	8002df0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	4904      	ldr	r1, [pc, #16]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000

08002e34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e42:	4b6a      	ldr	r3, [pc, #424]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d018      	beq.n	8002e80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e4e:	4b67      	ldr	r3, [pc, #412]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f003 0203 	and.w	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d10d      	bne.n	8002e7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
       ||
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d009      	beq.n	8002e7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e66:	4b61      	ldr	r3, [pc, #388]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
       ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d047      	beq.n	8002f0a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	73fb      	strb	r3, [r7, #15]
 8002e7e:	e044      	b.n	8002f0a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d018      	beq.n	8002eba <RCCEx_PLLSAI2_Config+0x86>
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d825      	bhi.n	8002ed8 <RCCEx_PLLSAI2_Config+0xa4>
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d002      	beq.n	8002e96 <RCCEx_PLLSAI2_Config+0x62>
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d009      	beq.n	8002ea8 <RCCEx_PLLSAI2_Config+0x74>
 8002e94:	e020      	b.n	8002ed8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e96:	4b55      	ldr	r3, [pc, #340]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d11d      	bne.n	8002ede <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea6:	e01a      	b.n	8002ede <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ea8:	4b50      	ldr	r3, [pc, #320]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d116      	bne.n	8002ee2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb8:	e013      	b.n	8002ee2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eba:	4b4c      	ldr	r3, [pc, #304]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10f      	bne.n	8002ee6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ec6:	4b49      	ldr	r3, [pc, #292]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ed6:	e006      	b.n	8002ee6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      break;
 8002edc:	e004      	b.n	8002ee8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ede:	bf00      	nop
 8002ee0:	e002      	b.n	8002ee8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ee6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10d      	bne.n	8002f0a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eee:	4b3f      	ldr	r3, [pc, #252]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6819      	ldr	r1, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	430b      	orrs	r3, r1
 8002f04:	4939      	ldr	r1, [pc, #228]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d167      	bne.n	8002fe0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f10:	4b36      	ldr	r3, [pc, #216]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a35      	ldr	r2, [pc, #212]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1c:	f7fd f9bc 	bl	8000298 <HAL_GetTick>
 8002f20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f22:	e009      	b.n	8002f38 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f24:	f7fd f9b8 	bl	8000298 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d902      	bls.n	8002f38 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	73fb      	strb	r3, [r7, #15]
        break;
 8002f36:	e005      	b.n	8002f44 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f38:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1ef      	bne.n	8002f24 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d14a      	bne.n	8002fe0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d111      	bne.n	8002f74 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f50:	4b26      	ldr	r3, [pc, #152]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6892      	ldr	r2, [r2, #8]
 8002f60:	0211      	lsls	r1, r2, #8
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68d2      	ldr	r2, [r2, #12]
 8002f66:	0912      	lsrs	r2, r2, #4
 8002f68:	0452      	lsls	r2, r2, #17
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	491f      	ldr	r1, [pc, #124]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	614b      	str	r3, [r1, #20]
 8002f72:	e011      	b.n	8002f98 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f74:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6892      	ldr	r2, [r2, #8]
 8002f84:	0211      	lsls	r1, r2, #8
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6912      	ldr	r2, [r2, #16]
 8002f8a:	0852      	lsrs	r2, r2, #1
 8002f8c:	3a01      	subs	r2, #1
 8002f8e:	0652      	lsls	r2, r2, #25
 8002f90:	430a      	orrs	r2, r1
 8002f92:	4916      	ldr	r1, [pc, #88]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a13      	ldr	r2, [pc, #76]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7fd f978 	bl	8000298 <HAL_GetTick>
 8002fa8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002faa:	e009      	b.n	8002fc0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fac:	f7fd f974 	bl	8000298 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d902      	bls.n	8002fc0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	73fb      	strb	r3, [r7, #15]
          break;
 8002fbe:	e005      	b.n	8002fcc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0ef      	beq.n	8002fac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	4904      	ldr	r1, [pc, #16]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000

08002ff0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	f107 001c 	add.w	r0, r7, #28
 8002ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f001 f9ce 	bl	80043b0 <USB_CoreReset>
 8003014:	4603      	mov	r3, r0
 8003016:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	639a      	str	r2, [r3, #56]	; 0x38
 800302a:	e005      	b.n	8003038 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003038:	7bfb      	ldrb	r3, [r7, #15]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003044:	b004      	add	sp, #16
 8003046:	4770      	bx	lr

08003048 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	4613      	mov	r3, r2
 8003054:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d165      	bne.n	8003128 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4a3e      	ldr	r2, [pc, #248]	; (8003158 <USB_SetTurnaroundTime+0x110>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d906      	bls.n	8003072 <USB_SetTurnaroundTime+0x2a>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4a3d      	ldr	r2, [pc, #244]	; (800315c <USB_SetTurnaroundTime+0x114>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d202      	bcs.n	8003072 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800306c:	230f      	movs	r3, #15
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	e05c      	b.n	800312c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4a39      	ldr	r2, [pc, #228]	; (800315c <USB_SetTurnaroundTime+0x114>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d306      	bcc.n	8003088 <USB_SetTurnaroundTime+0x40>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4a38      	ldr	r2, [pc, #224]	; (8003160 <USB_SetTurnaroundTime+0x118>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d202      	bcs.n	8003088 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003082:	230e      	movs	r3, #14
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	e051      	b.n	800312c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4a35      	ldr	r2, [pc, #212]	; (8003160 <USB_SetTurnaroundTime+0x118>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d306      	bcc.n	800309e <USB_SetTurnaroundTime+0x56>
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4a34      	ldr	r2, [pc, #208]	; (8003164 <USB_SetTurnaroundTime+0x11c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d202      	bcs.n	800309e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003098:	230d      	movs	r3, #13
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	e046      	b.n	800312c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4a30      	ldr	r2, [pc, #192]	; (8003164 <USB_SetTurnaroundTime+0x11c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d306      	bcc.n	80030b4 <USB_SetTurnaroundTime+0x6c>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4a2f      	ldr	r2, [pc, #188]	; (8003168 <USB_SetTurnaroundTime+0x120>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d802      	bhi.n	80030b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80030ae:	230c      	movs	r3, #12
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	e03b      	b.n	800312c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4a2c      	ldr	r2, [pc, #176]	; (8003168 <USB_SetTurnaroundTime+0x120>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d906      	bls.n	80030ca <USB_SetTurnaroundTime+0x82>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4a2b      	ldr	r2, [pc, #172]	; (800316c <USB_SetTurnaroundTime+0x124>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d802      	bhi.n	80030ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80030c4:	230b      	movs	r3, #11
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	e030      	b.n	800312c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4a27      	ldr	r2, [pc, #156]	; (800316c <USB_SetTurnaroundTime+0x124>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d906      	bls.n	80030e0 <USB_SetTurnaroundTime+0x98>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4a26      	ldr	r2, [pc, #152]	; (8003170 <USB_SetTurnaroundTime+0x128>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d802      	bhi.n	80030e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80030da:	230a      	movs	r3, #10
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	e025      	b.n	800312c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4a23      	ldr	r2, [pc, #140]	; (8003170 <USB_SetTurnaroundTime+0x128>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d906      	bls.n	80030f6 <USB_SetTurnaroundTime+0xae>
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4a22      	ldr	r2, [pc, #136]	; (8003174 <USB_SetTurnaroundTime+0x12c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d202      	bcs.n	80030f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80030f0:	2309      	movs	r3, #9
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e01a      	b.n	800312c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4a1e      	ldr	r2, [pc, #120]	; (8003174 <USB_SetTurnaroundTime+0x12c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d306      	bcc.n	800310c <USB_SetTurnaroundTime+0xc4>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <USB_SetTurnaroundTime+0x130>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d802      	bhi.n	800310c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003106:	2308      	movs	r3, #8
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e00f      	b.n	800312c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4a1a      	ldr	r2, [pc, #104]	; (8003178 <USB_SetTurnaroundTime+0x130>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d906      	bls.n	8003122 <USB_SetTurnaroundTime+0xda>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4a19      	ldr	r2, [pc, #100]	; (800317c <USB_SetTurnaroundTime+0x134>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d202      	bcs.n	8003122 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800311c:	2307      	movs	r3, #7
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	e004      	b.n	800312c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003122:	2306      	movs	r3, #6
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	e001      	b.n	800312c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003128:	2309      	movs	r3, #9
 800312a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	029b      	lsls	r3, r3, #10
 8003140:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003144:	431a      	orrs	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	00d8acbf 	.word	0x00d8acbf
 800315c:	00e4e1c0 	.word	0x00e4e1c0
 8003160:	00f42400 	.word	0x00f42400
 8003164:	01067380 	.word	0x01067380
 8003168:	011a499f 	.word	0x011a499f
 800316c:	01312cff 	.word	0x01312cff
 8003170:	014ca43f 	.word	0x014ca43f
 8003174:	016e3600 	.word	0x016e3600
 8003178:	01a6ab1f 	.word	0x01a6ab1f
 800317c:	01e84800 	.word	0x01e84800

08003180 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f043 0201 	orr.w	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f023 0201 	bic.w	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d106      	bne.n	80031f0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	e00b      	b.n	8003208 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	e001      	b.n	8003208 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e003      	b.n	8003210 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003208:	2032      	movs	r0, #50	; 0x32
 800320a:	f7fd f851 	bl	80002b0 <HAL_Delay>

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003218:	b084      	sub	sp, #16
 800321a:	b580      	push	{r7, lr}
 800321c:	b086      	sub	sp, #24
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	e009      	b.n	800324c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	3340      	adds	r3, #64	; 0x40
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	2200      	movs	r2, #0
 8003244:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	3301      	adds	r3, #1
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	2b0e      	cmp	r3, #14
 8003250:	d9f2      	bls.n	8003238 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003254:	2b00      	cmp	r3, #0
 8003256:	d11c      	bne.n	8003292 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003266:	f043 0302 	orr.w	r3, r3, #2
 800326a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e005      	b.n	800329e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80032a4:	461a      	mov	r2, r3
 80032a6:	2300      	movs	r3, #0
 80032a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b0:	4619      	mov	r1, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b8:	461a      	mov	r2, r3
 80032ba:	680b      	ldr	r3, [r1, #0]
 80032bc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80032be:	2103      	movs	r1, #3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f93d 	bl	8003540 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80032c6:	2110      	movs	r1, #16
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f8f1 	bl	80034b0 <USB_FlushTxFifo>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f90f 	bl	80034fc <USB_FlushRxFifo>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ee:	461a      	mov	r2, r3
 80032f0:	2300      	movs	r3, #0
 80032f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032fa:	461a      	mov	r2, r3
 80032fc:	2300      	movs	r3, #0
 80032fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003306:	461a      	mov	r2, r3
 8003308:	2300      	movs	r3, #0
 800330a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800330c:	2300      	movs	r3, #0
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	e043      	b.n	800339a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4413      	add	r3, r2
 800331a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003324:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003328:	d118      	bne.n	800335c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10a      	bne.n	8003346 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800333c:	461a      	mov	r2, r3
 800333e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	e013      	b.n	800336e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4413      	add	r3, r2
 800334e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003352:	461a      	mov	r2, r3
 8003354:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e008      	b.n	800336e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4413      	add	r3, r2
 8003364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003368:	461a      	mov	r2, r3
 800336a:	2300      	movs	r3, #0
 800336c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4413      	add	r3, r2
 8003376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800337a:	461a      	mov	r2, r3
 800337c:	2300      	movs	r3, #0
 800337e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800338c:	461a      	mov	r2, r3
 800338e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003392:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	3301      	adds	r3, #1
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d3b7      	bcc.n	8003312 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	e043      	b.n	8003430 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033be:	d118      	bne.n	80033f2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d2:	461a      	mov	r2, r3
 80033d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e013      	b.n	8003404 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e8:	461a      	mov	r2, r3
 80033ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	e008      	b.n	8003404 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fe:	461a      	mov	r2, r3
 8003400:	2300      	movs	r3, #0
 8003402:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4413      	add	r3, r2
 800340c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003410:	461a      	mov	r2, r3
 8003412:	2300      	movs	r3, #0
 8003414:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003422:	461a      	mov	r2, r3
 8003424:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003428:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	3301      	adds	r3, #1
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	429a      	cmp	r2, r3
 8003436:	d3b7      	bcc.n	80033a8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003446:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800344a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003458:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f043 0210 	orr.w	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <USB_DevInit+0x294>)
 800346c:	4313      	orrs	r3, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f043 0208 	orr.w	r2, r3, #8
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003486:	2b01      	cmp	r3, #1
 8003488:	d107      	bne.n	800349a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003492:	f043 0304 	orr.w	r3, r3, #4
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800349a:	7dfb      	ldrb	r3, [r7, #23]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034a6:	b004      	add	sp, #16
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	803c3800 	.word	0x803c3800

080034b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	019b      	lsls	r3, r3, #6
 80034c2:	f043 0220 	orr.w	r2, r3, #32
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3301      	adds	r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4a09      	ldr	r2, [pc, #36]	; (80034f8 <USB_FlushTxFifo+0x48>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d901      	bls.n	80034dc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e006      	b.n	80034ea <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d0f0      	beq.n	80034ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	00030d40 	.word	0x00030d40

080034fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2210      	movs	r2, #16
 800350c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3301      	adds	r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <USB_FlushRxFifo+0x40>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e006      	b.n	800352e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b10      	cmp	r3, #16
 800352a:	d0f0      	beq.n	800350e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	00030d40 	.word	0x00030d40

08003540 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	68f9      	ldr	r1, [r7, #12]
 800355c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003560:	4313      	orrs	r3, r2
 8003562:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003572:	b480      	push	{r7}
 8003574:	b087      	sub	sp, #28
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0306 	and.w	r3, r3, #6
 800358a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d002      	beq.n	8003598 <USB_GetDevSpeed+0x26>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b06      	cmp	r3, #6
 8003596:	d102      	bne.n	800359e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003598:	2302      	movs	r3, #2
 800359a:	75fb      	strb	r3, [r7, #23]
 800359c:	e001      	b.n	80035a2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800359e:	230f      	movs	r3, #15
 80035a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	371c      	adds	r7, #28
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	785b      	ldrb	r3, [r3, #1]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d13a      	bne.n	8003642 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d2:	69da      	ldr	r2, [r3, #28]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	2101      	movs	r1, #1
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	68f9      	ldr	r1, [r7, #12]
 80035e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d155      	bne.n	80036b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	78db      	ldrb	r3, [r3, #3]
 800361e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003620:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	059b      	lsls	r3, r3, #22
 8003626:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003628:	4313      	orrs	r3, r2
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	0151      	lsls	r1, r2, #5
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	440a      	add	r2, r1
 8003632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	e036      	b.n	80036b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003648:	69da      	ldr	r2, [r3, #28]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	2101      	movs	r1, #1
 8003654:	fa01 f303 	lsl.w	r3, r1, r3
 8003658:	041b      	lsls	r3, r3, #16
 800365a:	68f9      	ldr	r1, [r7, #12]
 800365c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003660:	4313      	orrs	r3, r2
 8003662:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d11a      	bne.n	80036b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	78db      	ldrb	r3, [r3, #3]
 8003694:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003696:	430b      	orrs	r3, r1
 8003698:	4313      	orrs	r3, r2
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	0151      	lsls	r1, r2, #5
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	440a      	add	r2, r1
 80036a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	785b      	ldrb	r3, [r3, #1]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d161      	bne.n	80037a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036f2:	d11f      	bne.n	8003734 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	015a      	lsls	r2, r3, #5
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	0151      	lsls	r1, r2, #5
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	440a      	add	r2, r1
 800370a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800370e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003712:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4413      	add	r3, r2
 800371c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	0151      	lsls	r1, r2, #5
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	440a      	add	r2, r1
 800372a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800372e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003732:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	2101      	movs	r1, #1
 8003746:	fa01 f303 	lsl.w	r3, r1, r3
 800374a:	b29b      	uxth	r3, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	68f9      	ldr	r1, [r7, #12]
 8003750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003754:	4013      	ands	r3, r2
 8003756:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375e:	69da      	ldr	r2, [r3, #28]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	2101      	movs	r1, #1
 800376a:	fa01 f303 	lsl.w	r3, r1, r3
 800376e:	b29b      	uxth	r3, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	68f9      	ldr	r1, [r7, #12]
 8003774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003778:	4013      	ands	r3, r2
 800377a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	0159      	lsls	r1, r3, #5
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	440b      	add	r3, r1
 8003792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003796:	4619      	mov	r1, r3
 8003798:	4b35      	ldr	r3, [pc, #212]	; (8003870 <USB_DeactivateEndpoint+0x1b0>)
 800379a:	4013      	ands	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
 800379e:	e060      	b.n	8003862 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037b6:	d11f      	bne.n	80037f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	0151      	lsls	r1, r2, #5
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	440a      	add	r2, r1
 80037ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	0151      	lsls	r1, r2, #5
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	440a      	add	r2, r1
 80037ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	2101      	movs	r1, #1
 800380a:	fa01 f303 	lsl.w	r3, r1, r3
 800380e:	041b      	lsls	r3, r3, #16
 8003810:	43db      	mvns	r3, r3
 8003812:	68f9      	ldr	r1, [r7, #12]
 8003814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003818:	4013      	ands	r3, r2
 800381a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003822:	69da      	ldr	r2, [r3, #28]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	2101      	movs	r1, #1
 800382e:	fa01 f303 	lsl.w	r3, r1, r3
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	43db      	mvns	r3, r3
 8003836:	68f9      	ldr	r1, [r7, #12]
 8003838:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800383c:	4013      	ands	r3, r2
 800383e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	0159      	lsls	r1, r3, #5
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	440b      	add	r3, r1
 8003856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385a:	4619      	mov	r1, r3
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <USB_DeactivateEndpoint+0x1b4>)
 800385e:	4013      	ands	r3, r2
 8003860:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	ec337800 	.word	0xec337800
 8003874:	eff37800 	.word	0xeff37800

08003878 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	785b      	ldrb	r3, [r3, #1]
 8003890:	2b01      	cmp	r3, #1
 8003892:	f040 810a 	bne.w	8003aaa <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d132      	bne.n	8003904 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	0151      	lsls	r1, r2, #5
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	440a      	add	r2, r1
 80038b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	0151      	lsls	r1, r2, #5
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	440a      	add	r2, r1
 80038d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	0151      	lsls	r1, r2, #5
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	440a      	add	r2, r1
 80038f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038fc:	0cdb      	lsrs	r3, r3, #19
 80038fe:	04db      	lsls	r3, r3, #19
 8003900:	6113      	str	r3, [r2, #16]
 8003902:	e074      	b.n	80039ee <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	0151      	lsls	r1, r2, #5
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	440a      	add	r2, r1
 800391a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800391e:	0cdb      	lsrs	r3, r3, #19
 8003920:	04db      	lsls	r3, r3, #19
 8003922:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	0151      	lsls	r1, r2, #5
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	440a      	add	r2, r1
 800393a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800393e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003942:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003946:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6959      	ldr	r1, [r3, #20]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	440b      	add	r3, r1
 8003960:	1e59      	subs	r1, r3, #1
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	fbb1 f3f3 	udiv	r3, r1, r3
 800396a:	04d9      	lsls	r1, r3, #19
 800396c:	4baf      	ldr	r3, [pc, #700]	; (8003c2c <USB_EPStartXfer+0x3b4>)
 800396e:	400b      	ands	r3, r1
 8003970:	6939      	ldr	r1, [r7, #16]
 8003972:	0148      	lsls	r0, r1, #5
 8003974:	6979      	ldr	r1, [r7, #20]
 8003976:	4401      	add	r1, r0
 8003978:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800397c:	4313      	orrs	r3, r2
 800397e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	4413      	add	r3, r2
 8003988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003996:	6939      	ldr	r1, [r7, #16]
 8003998:	0148      	lsls	r0, r1, #5
 800399a:	6979      	ldr	r1, [r7, #20]
 800399c:	4401      	add	r1, r0
 800399e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80039a2:	4313      	orrs	r3, r2
 80039a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	78db      	ldrb	r3, [r3, #3]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d11f      	bne.n	80039ee <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	0151      	lsls	r1, r2, #5
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	440a      	add	r2, r1
 80039c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80039cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	0151      	lsls	r1, r2, #5
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	440a      	add	r2, r1
 80039e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039ec:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	0151      	lsls	r1, r2, #5
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	440a      	add	r2, r1
 8003a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a0c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	78db      	ldrb	r3, [r3, #3]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d015      	beq.n	8003a42 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8100 	beq.w	8003c20 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	2101      	movs	r1, #1
 8003a32:	fa01 f303 	lsl.w	r3, r1, r3
 8003a36:	6979      	ldr	r1, [r7, #20]
 8003a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	634b      	str	r3, [r1, #52]	; 0x34
 8003a40:	e0ee      	b.n	8003c20 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d110      	bne.n	8003a74 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	0151      	lsls	r1, r2, #5
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	440a      	add	r2, r1
 8003a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	e00f      	b.n	8003a94 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	0151      	lsls	r1, r2, #5
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	440a      	add	r2, r1
 8003a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a92:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68d9      	ldr	r1, [r3, #12]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f9e2 	bl	8003e6c <USB_WritePacket>
 8003aa8:	e0ba      	b.n	8003c20 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	0151      	lsls	r1, r2, #5
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	440a      	add	r2, r1
 8003ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ac4:	0cdb      	lsrs	r3, r3, #19
 8003ac6:	04db      	lsls	r3, r3, #19
 8003ac8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	0151      	lsls	r1, r2, #5
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	440a      	add	r2, r1
 8003ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ae4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ae8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003aec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d123      	bne.n	8003b3e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0c:	6939      	ldr	r1, [r7, #16]
 8003b0e:	0148      	lsls	r0, r1, #5
 8003b10:	6979      	ldr	r1, [r7, #20]
 8003b12:	4401      	add	r1, r0
 8003b14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	0151      	lsls	r1, r2, #5
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	440a      	add	r2, r1
 8003b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b3a:	6113      	str	r3, [r2, #16]
 8003b3c:	e033      	b.n	8003ba6 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	4413      	add	r3, r2
 8003b48:	1e5a      	subs	r2, r3, #1
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b52:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	89fb      	ldrh	r3, [r7, #14]
 8003b64:	04d9      	lsls	r1, r3, #19
 8003b66:	4b31      	ldr	r3, [pc, #196]	; (8003c2c <USB_EPStartXfer+0x3b4>)
 8003b68:	400b      	ands	r3, r1
 8003b6a:	6939      	ldr	r1, [r7, #16]
 8003b6c:	0148      	lsls	r0, r1, #5
 8003b6e:	6979      	ldr	r1, [r7, #20]
 8003b70:	4401      	add	r1, r0
 8003b72:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b76:	4313      	orrs	r3, r2
 8003b78:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	89f9      	ldrh	r1, [r7, #14]
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b96:	6939      	ldr	r1, [r7, #16]
 8003b98:	0148      	lsls	r0, r1, #5
 8003b9a:	6979      	ldr	r1, [r7, #20]
 8003b9c:	4401      	add	r1, r0
 8003b9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	78db      	ldrb	r3, [r3, #3]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d128      	bne.n	8003c00 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d110      	bne.n	8003be0 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	0151      	lsls	r1, r2, #5
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	440a      	add	r2, r1
 8003bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	e00f      	b.n	8003c00 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	0151      	lsls	r1, r2, #5
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	440a      	add	r2, r1
 8003bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	0151      	lsls	r1, r2, #5
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	440a      	add	r2, r1
 8003c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	1ff80000 	.word	0x1ff80000

08003c30 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	785b      	ldrb	r3, [r3, #1]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	f040 80ab 	bne.w	8003da4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d132      	bne.n	8003cbc <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	0151      	lsls	r1, r2, #5
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	440a      	add	r2, r1
 8003c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	0151      	lsls	r1, r2, #5
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	440a      	add	r2, r1
 8003cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb4:	0cdb      	lsrs	r3, r3, #19
 8003cb6:	04db      	lsls	r3, r3, #19
 8003cb8:	6113      	str	r3, [r2, #16]
 8003cba:	e04e      	b.n	8003d5a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	0151      	lsls	r1, r2, #5
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	440a      	add	r2, r1
 8003cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cd6:	0cdb      	lsrs	r3, r3, #19
 8003cd8:	04db      	lsls	r3, r3, #19
 8003cda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	0151      	lsls	r1, r2, #5
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	440a      	add	r2, r1
 8003cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cfa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cfe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d903      	bls.n	8003d14 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	0151      	lsls	r1, r2, #5
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	440a      	add	r2, r1
 8003d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	0148      	lsls	r0, r1, #5
 8003d4e:	68f9      	ldr	r1, [r7, #12]
 8003d50:	4401      	add	r1, r0
 8003d52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d56:	4313      	orrs	r3, r2
 8003d58:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	0151      	lsls	r1, r2, #5
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	440a      	add	r2, r1
 8003d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d78:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d06d      	beq.n	8003e5e <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	2101      	movs	r1, #1
 8003d94:	fa01 f303 	lsl.w	r3, r1, r3
 8003d98:	68f9      	ldr	r1, [r7, #12]
 8003d9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	634b      	str	r3, [r1, #52]	; 0x34
 8003da2:	e05c      	b.n	8003e5e <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	0151      	lsls	r1, r2, #5
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	440a      	add	r2, r1
 8003dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dbe:	0cdb      	lsrs	r3, r3, #19
 8003dc0:	04db      	lsls	r3, r3, #19
 8003dc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	0151      	lsls	r1, r2, #5
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	440a      	add	r2, r1
 8003dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003de2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003de6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	0151      	lsls	r1, r2, #5
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	0148      	lsls	r0, r1, #5
 8003e32:	68f9      	ldr	r1, [r7, #12]
 8003e34:	4401      	add	r1, r0
 8003e36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	0151      	lsls	r1, r2, #5
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	440a      	add	r2, r1
 8003e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b089      	sub	sp, #36	; 0x24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	4611      	mov	r1, r2
 8003e78:	461a      	mov	r2, r3
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	71fb      	strb	r3, [r7, #7]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8003e8a:	88bb      	ldrh	r3, [r7, #4]
 8003e8c:	3303      	adds	r3, #3
 8003e8e:	089b      	lsrs	r3, r3, #2
 8003e90:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8003e92:	2300      	movs	r3, #0
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	e00f      	b.n	8003eb8 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	031a      	lsls	r2, r3, #12
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6013      	str	r3, [r2, #0]
    pSrc++;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d3eb      	bcc.n	8003e98 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3724      	adds	r7, #36	; 0x24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b089      	sub	sp, #36	; 0x24
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	3303      	adds	r3, #3
 8003ee8:	089b      	lsrs	r3, r3, #2
 8003eea:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003eec:	2300      	movs	r3, #0
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	e00b      	b.n	8003f0a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	601a      	str	r2, [r3, #0]
    pDest++;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3304      	adds	r3, #4
 8003f02:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	3301      	adds	r3, #1
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d3ef      	bcc.n	8003ef2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003f12:	69fb      	ldr	r3, [r7, #28]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3724      	adds	r7, #36	; 0x24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	785b      	ldrb	r3, [r3, #1]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d12c      	bne.n	8003f96 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	db12      	blt.n	8003f74 <USB_EPSetStall+0x54>
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00f      	beq.n	8003f74 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	0151      	lsls	r1, r2, #5
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	440a      	add	r2, r1
 8003f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f72:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	0151      	lsls	r1, r2, #5
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	440a      	add	r2, r1
 8003f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	e02b      	b.n	8003fee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	db12      	blt.n	8003fce <USB_EPSetStall+0xae>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00f      	beq.n	8003fce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fcc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	0151      	lsls	r1, r2, #5
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	785b      	ldrb	r3, [r3, #1]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d128      	bne.n	800406a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	0151      	lsls	r1, r2, #5
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	440a      	add	r2, r1
 800402e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004032:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004036:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	78db      	ldrb	r3, [r3, #3]
 800403c:	2b03      	cmp	r3, #3
 800403e:	d003      	beq.n	8004048 <USB_EPClearStall+0x4c>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	78db      	ldrb	r3, [r3, #3]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d138      	bne.n	80040ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	e027      	b.n	80040ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	0151      	lsls	r1, r2, #5
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	440a      	add	r2, r1
 8004080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004084:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004088:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	78db      	ldrb	r3, [r3, #3]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d003      	beq.n	800409a <USB_EPClearStall+0x9e>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	78db      	ldrb	r3, [r3, #3]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d10f      	bne.n	80040ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	0151      	lsls	r1, r2, #5
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	440a      	add	r2, r1
 80040b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80040ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80040fc:	68f9      	ldr	r1, [r7, #12]
 80040fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004102:	4313      	orrs	r3, r2
 8004104:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800412e:	f023 0303 	bic.w	r3, r3, #3
 8004132:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004142:	f023 0302 	bic.w	r3, r3, #2
 8004146:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004156:	b480      	push	{r7}
 8004158:	b085      	sub	sp, #20
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004170:	f023 0303 	bic.w	r3, r3, #3
 8004174:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004184:	f043 0302 	orr.w	r3, r3, #2
 8004188:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4013      	ands	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80041b0:	68fb      	ldr	r3, [r7, #12]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80041be:	b480      	push	{r7}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	4013      	ands	r3, r2
 80041e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	0c1b      	lsrs	r3, r3, #16
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b085      	sub	sp, #20
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	4013      	ands	r3, r2
 8004214:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	b29b      	uxth	r3, r3
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	460b      	mov	r3, r1
 8004230:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	4013      	ands	r3, r2
 8004252:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004254:	68bb      	ldr	r3, [r7, #8]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004262:	b480      	push	{r7}
 8004264:	b087      	sub	sp, #28
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	460b      	mov	r3, r1
 800426c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004284:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004286:	78fb      	ldrb	r3, [r7, #3]
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	fa22 f303 	lsr.w	r3, r2, r3
 8004292:	01db      	lsls	r3, r3, #7
 8004294:	b2db      	uxtb	r3, r3
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4013      	ands	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80042b0:	68bb      	ldr	r3, [r7, #8]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f003 0301 	and.w	r3, r3, #1
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80042da:	b480      	push	{r7}
 80042dc:	b085      	sub	sp, #20
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80042f8:	f023 0307 	bic.w	r3, r3, #7
 80042fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800430c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004310:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	333c      	adds	r3, #60	; 0x3c
 8004332:	3304      	adds	r3, #4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4a1c      	ldr	r2, [pc, #112]	; (80043ac <USB_EP0_OutStart+0x8c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d90a      	bls.n	8004356 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800434c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004350:	d101      	bne.n	8004356 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	e024      	b.n	80043a0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435c:	461a      	mov	r2, r3
 800435e:	2300      	movs	r3, #0
 8004360:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004374:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004384:	f043 0318 	orr.w	r3, r3, #24
 8004388:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004398:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800439c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	4f54300a 	.word	0x4f54300a

080043b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3301      	adds	r3, #1
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4a13      	ldr	r2, [pc, #76]	; (8004414 <USB_CoreReset+0x64>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e01b      	b.n	8004406 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	daf2      	bge.n	80043bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f043 0201 	orr.w	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3301      	adds	r3, #1
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4a09      	ldr	r2, [pc, #36]	; (8004414 <USB_CoreReset+0x64>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e006      	b.n	8004406 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b01      	cmp	r3, #1
 8004402:	d0f0      	beq.n	80043e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	00030d40 	.word	0x00030d40

08004418 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004424:	2010      	movs	r0, #16
 8004426:	f002 f96b 	bl	8006700 <USBD_static_malloc>
 800442a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d105      	bne.n	800443e <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800443a:	2302      	movs	r3, #2
 800443c:	e01b      	b.n	8004476 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	7c1b      	ldrb	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d103      	bne.n	8004456 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2207      	movs	r2, #7
 8004452:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004454:	e002      	b.n	800445c <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	220a      	movs	r2, #10
 800445a:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800445c:	2304      	movs	r3, #4
 800445e:	2203      	movs	r2, #3
 8004460:	2181      	movs	r1, #129	; 0x81
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f001 ff4c 	bl	8006300 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	460b      	mov	r3, r1
 8004488:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800448a:	2181      	movs	r1, #129	; 0x81
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f001 ff75 	bl	800637c <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d009      	beq.n	80044bc <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044ae:	4618      	mov	r0, r3
 80044b0:	f002 f934 	bl	800671c <USBD_static_free>
    pdev->pClassData = NULL;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044d8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e0e8      	b.n	80046be <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d046      	beq.n	8004586 <USBD_HID_Setup+0xbe>
 80044f8:	2b20      	cmp	r3, #32
 80044fa:	f040 80d8 	bne.w	80046ae <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	785b      	ldrb	r3, [r3, #1]
 8004502:	3b02      	subs	r3, #2
 8004504:	2b09      	cmp	r3, #9
 8004506:	d836      	bhi.n	8004576 <USBD_HID_Setup+0xae>
 8004508:	a201      	add	r2, pc, #4	; (adr r2, 8004510 <USBD_HID_Setup+0x48>)
 800450a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450e:	bf00      	nop
 8004510:	08004567 	.word	0x08004567
 8004514:	08004547 	.word	0x08004547
 8004518:	08004577 	.word	0x08004577
 800451c:	08004577 	.word	0x08004577
 8004520:	08004577 	.word	0x08004577
 8004524:	08004577 	.word	0x08004577
 8004528:	08004577 	.word	0x08004577
 800452c:	08004577 	.word	0x08004577
 8004530:	08004555 	.word	0x08004555
 8004534:	08004539 	.word	0x08004539
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	885b      	ldrh	r3, [r3, #2]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	601a      	str	r2, [r3, #0]
          break;
 8004544:	e01e      	b.n	8004584 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	4619      	mov	r1, r3
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f001 fa4c 	bl	80059ea <USBD_CtlSendData>
          break;
 8004552:	e017      	b.n	8004584 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	885b      	ldrh	r3, [r3, #2]
 8004558:	0a1b      	lsrs	r3, r3, #8
 800455a:	b29b      	uxth	r3, r3
 800455c:	b2db      	uxtb	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	605a      	str	r2, [r3, #4]
          break;
 8004564:	e00e      	b.n	8004584 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3304      	adds	r3, #4
 800456a:	2201      	movs	r2, #1
 800456c:	4619      	mov	r1, r3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f001 fa3b 	bl	80059ea <USBD_CtlSendData>
          break;
 8004574:	e006      	b.n	8004584 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004576:	6839      	ldr	r1, [r7, #0]
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f001 f9c5 	bl	8005908 <USBD_CtlError>
          ret = USBD_FAIL;
 800457e:	2303      	movs	r3, #3
 8004580:	75fb      	strb	r3, [r7, #23]
          break;
 8004582:	bf00      	nop
      }
      break;
 8004584:	e09a      	b.n	80046bc <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	785b      	ldrb	r3, [r3, #1]
 800458a:	2b0b      	cmp	r3, #11
 800458c:	f200 8086 	bhi.w	800469c <USBD_HID_Setup+0x1d4>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <USBD_HID_Setup+0xd0>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045c9 	.word	0x080045c9
 800459c:	080046ab 	.word	0x080046ab
 80045a0:	0800469d 	.word	0x0800469d
 80045a4:	0800469d 	.word	0x0800469d
 80045a8:	0800469d 	.word	0x0800469d
 80045ac:	0800469d 	.word	0x0800469d
 80045b0:	080045f3 	.word	0x080045f3
 80045b4:	0800469d 	.word	0x0800469d
 80045b8:	0800469d 	.word	0x0800469d
 80045bc:	0800469d 	.word	0x0800469d
 80045c0:	0800464b 	.word	0x0800464b
 80045c4:	08004675 	.word	0x08004675
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d107      	bne.n	80045e4 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80045d4:	f107 030a 	add.w	r3, r7, #10
 80045d8:	2202      	movs	r2, #2
 80045da:	4619      	mov	r1, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f001 fa04 	bl	80059ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80045e2:	e063      	b.n	80046ac <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80045e4:	6839      	ldr	r1, [r7, #0]
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f001 f98e 	bl	8005908 <USBD_CtlError>
            ret = USBD_FAIL;
 80045ec:	2303      	movs	r3, #3
 80045ee:	75fb      	strb	r3, [r7, #23]
          break;
 80045f0:	e05c      	b.n	80046ac <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	885b      	ldrh	r3, [r3, #2]
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b22      	cmp	r3, #34	; 0x22
 80045fc:	d108      	bne.n	8004610 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	88db      	ldrh	r3, [r3, #6]
 8004602:	2b3f      	cmp	r3, #63	; 0x3f
 8004604:	bf28      	it	cs
 8004606:	233f      	movcs	r3, #63	; 0x3f
 8004608:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800460a:	4b2f      	ldr	r3, [pc, #188]	; (80046c8 <USBD_HID_Setup+0x200>)
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	e015      	b.n	800463c <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	885b      	ldrh	r3, [r3, #2]
 8004614:	0a1b      	lsrs	r3, r3, #8
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b21      	cmp	r3, #33	; 0x21
 800461a:	d108      	bne.n	800462e <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800461c:	4b2b      	ldr	r3, [pc, #172]	; (80046cc <USBD_HID_Setup+0x204>)
 800461e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	88db      	ldrh	r3, [r3, #6]
 8004624:	2b09      	cmp	r3, #9
 8004626:	bf28      	it	cs
 8004628:	2309      	movcs	r3, #9
 800462a:	82bb      	strh	r3, [r7, #20]
 800462c:	e006      	b.n	800463c <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800462e:	6839      	ldr	r1, [r7, #0]
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f001 f969 	bl	8005908 <USBD_CtlError>
            ret = USBD_FAIL;
 8004636:	2303      	movs	r3, #3
 8004638:	75fb      	strb	r3, [r7, #23]
            break;
 800463a:	e037      	b.n	80046ac <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800463c:	8abb      	ldrh	r3, [r7, #20]
 800463e:	461a      	mov	r2, r3
 8004640:	6939      	ldr	r1, [r7, #16]
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f001 f9d1 	bl	80059ea <USBD_CtlSendData>
          break;
 8004648:	e030      	b.n	80046ac <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b03      	cmp	r3, #3
 8004654:	d107      	bne.n	8004666 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3308      	adds	r3, #8
 800465a:	2201      	movs	r2, #1
 800465c:	4619      	mov	r1, r3
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f001 f9c3 	bl	80059ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004664:	e022      	b.n	80046ac <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004666:	6839      	ldr	r1, [r7, #0]
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f001 f94d 	bl	8005908 <USBD_CtlError>
            ret = USBD_FAIL;
 800466e:	2303      	movs	r3, #3
 8004670:	75fb      	strb	r3, [r7, #23]
          break;
 8004672:	e01b      	b.n	80046ac <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b03      	cmp	r3, #3
 800467e:	d106      	bne.n	800468e <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	885b      	ldrh	r3, [r3, #2]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	461a      	mov	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800468c:	e00e      	b.n	80046ac <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800468e:	6839      	ldr	r1, [r7, #0]
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f001 f939 	bl	8005908 <USBD_CtlError>
            ret = USBD_FAIL;
 8004696:	2303      	movs	r3, #3
 8004698:	75fb      	strb	r3, [r7, #23]
          break;
 800469a:	e007      	b.n	80046ac <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800469c:	6839      	ldr	r1, [r7, #0]
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f001 f932 	bl	8005908 <USBD_CtlError>
          ret = USBD_FAIL;
 80046a4:	2303      	movs	r3, #3
 80046a6:	75fb      	strb	r3, [r7, #23]
          break;
 80046a8:	e000      	b.n	80046ac <USBD_HID_Setup+0x1e4>
          break;
 80046aa:	bf00      	nop
      }
      break;
 80046ac:	e006      	b.n	80046bc <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80046ae:	6839      	ldr	r1, [r7, #0]
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f001 f929 	bl	8005908 <USBD_CtlError>
      ret = USBD_FAIL;
 80046b6:	2303      	movs	r3, #3
 80046b8:	75fb      	strb	r3, [r7, #23]
      break;
 80046ba:	bf00      	nop
  }

  return (uint8_t)ret;
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	200000c4 	.word	0x200000c4
 80046cc:	200000ac 	.word	0x200000ac

080046d0 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	4613      	mov	r3, r2
 80046dc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046e4:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e013      	b.n	8004718 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d10c      	bne.n	8004716 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	7b1b      	ldrb	r3, [r3, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d108      	bne.n	8004716 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2201      	movs	r2, #1
 8004708:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800470a:	88fb      	ldrh	r3, [r7, #6]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	2181      	movs	r1, #129	; 0x81
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f001 ff37 	bl	8006584 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2222      	movs	r2, #34	; 0x22
 800472c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800472e:	4b03      	ldr	r3, [pc, #12]	; (800473c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004730:	4618      	mov	r0, r3
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	20000040 	.word	0x20000040

08004740 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2222      	movs	r2, #34	; 0x22
 800474c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800474e:	4b03      	ldr	r3, [pc, #12]	; (800475c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	20000064 	.word	0x20000064

08004760 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2222      	movs	r2, #34	; 0x22
 800476c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800476e:	4b03      	ldr	r3, [pc, #12]	; (800477c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	20000088 	.word	0x20000088

08004780 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004792:	2200      	movs	r2, #0
 8004794:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	220a      	movs	r2, #10
 80047b0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80047b2:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	200000b8 	.word	0x200000b8

080047c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	4613      	mov	r3, r2
 80047d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80047d8:	2303      	movs	r3, #3
 80047da:	e01f      	b.n	800481c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	79fa      	ldrb	r2, [r7, #7]
 800480e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f001 fcf7 	bl	8006204 <USBD_LL_Init>
 8004816:	4603      	mov	r3, r0
 8004818:	75fb      	strb	r3, [r7, #23]

  return ret;
 800481a:	7dfb      	ldrb	r3, [r7, #23]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004838:	2303      	movs	r3, #3
 800483a:	e016      	b.n	800486a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00b      	beq.n	8004868 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	f107 020e 	add.w	r2, r7, #14
 800485c:	4610      	mov	r0, r2
 800485e:	4798      	blx	r3
 8004860:	4602      	mov	r2, r0
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b082      	sub	sp, #8
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f001 fd0e 	bl	800629c <USBD_LL_Start>
 8004880:	4603      	mov	r3, r0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80048ac:	2303      	movs	r3, #3
 80048ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	78fa      	ldrb	r2, [r7, #3]
 80048c4:	4611      	mov	r1, r2
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	4798      	blx	r3
 80048ca:	4603      	mov	r3, r0
 80048cc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	78fa      	ldrb	r2, [r7, #3]
 80048f8:	4611      	mov	r1, r2
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	4798      	blx	r3
  }

  return USBD_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004918:	6839      	ldr	r1, [r7, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f000 ffba 	bl	8005894 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800492e:	461a      	mov	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	2b02      	cmp	r3, #2
 8004942:	d01a      	beq.n	800497a <USBD_LL_SetupStage+0x72>
 8004944:	2b02      	cmp	r3, #2
 8004946:	d822      	bhi.n	800498e <USBD_LL_SetupStage+0x86>
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <USBD_LL_SetupStage+0x4a>
 800494c:	2b01      	cmp	r3, #1
 800494e:	d00a      	beq.n	8004966 <USBD_LL_SetupStage+0x5e>
 8004950:	e01d      	b.n	800498e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004958:	4619      	mov	r1, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fa62 	bl	8004e24 <USBD_StdDevReq>
 8004960:	4603      	mov	r3, r0
 8004962:	73fb      	strb	r3, [r7, #15]
      break;
 8004964:	e020      	b.n	80049a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800496c:	4619      	mov	r1, r3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fac6 	bl	8004f00 <USBD_StdItfReq>
 8004974:	4603      	mov	r3, r0
 8004976:	73fb      	strb	r3, [r7, #15]
      break;
 8004978:	e016      	b.n	80049a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004980:	4619      	mov	r1, r3
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fb05 	bl	8004f92 <USBD_StdEPReq>
 8004988:	4603      	mov	r3, r0
 800498a:	73fb      	strb	r3, [r7, #15]
      break;
 800498c:	e00c      	b.n	80049a8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004994:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004998:	b2db      	uxtb	r3, r3
 800499a:	4619      	mov	r1, r3
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f001 fd23 	bl	80063e8 <USBD_LL_StallEP>
 80049a2:	4603      	mov	r3, r0
 80049a4:	73fb      	strb	r3, [r7, #15]
      break;
 80049a6:	bf00      	nop
  }

  return ret;
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b086      	sub	sp, #24
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	460b      	mov	r3, r1
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80049c0:	7afb      	ldrb	r3, [r7, #11]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d138      	bne.n	8004a38 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80049cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d14a      	bne.n	8004a6e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d913      	bls.n	8004a0c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	1ad2      	subs	r2, r2, r3
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	4293      	cmp	r3, r2
 80049fc:	bf28      	it	cs
 80049fe:	4613      	movcs	r3, r2
 8004a00:	461a      	mov	r2, r3
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f001 f81c 	bl	8005a42 <USBD_CtlContinueRx>
 8004a0a:	e030      	b.n	8004a6e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d10b      	bne.n	8004a30 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f001 f817 	bl	8005a64 <USBD_CtlSendStatus>
 8004a36:	e01a      	b.n	8004a6e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d114      	bne.n	8004a6e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00e      	beq.n	8004a6e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	7afa      	ldrb	r2, [r7, #11]
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	4798      	blx	r3
 8004a60:	4603      	mov	r3, r0
 8004a62:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
 8004a6c:	e000      	b.n	8004a70 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	460b      	mov	r3, r1
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004a86:	7afb      	ldrb	r3, [r7, #11]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d16b      	bne.n	8004b64 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	3314      	adds	r3, #20
 8004a90:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d156      	bne.n	8004b4a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d914      	bls.n	8004ad2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	1ad2      	subs	r2, r2, r3
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	461a      	mov	r2, r3
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 ffae 	bl	8005a20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2100      	movs	r1, #0
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f001 fd92 	bl	80065f4 <USBD_LL_PrepareReceive>
 8004ad0:	e03b      	b.n	8004b4a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d11c      	bne.n	8004b18 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d316      	bcc.n	8004b18 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d20f      	bcs.n	8004b18 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004af8:	2200      	movs	r2, #0
 8004afa:	2100      	movs	r1, #0
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 ff8f 	bl	8005a20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2100      	movs	r1, #0
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f001 fd6f 	bl	80065f4 <USBD_LL_PrepareReceive>
 8004b16:	e018      	b.n	8004b4a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d10b      	bne.n	8004b3c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d005      	beq.n	8004b3c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004b3c:	2180      	movs	r1, #128	; 0x80
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f001 fc52 	bl	80063e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 ffa0 	bl	8005a8a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d122      	bne.n	8004b9a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f7ff fe98 	bl	800488a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004b62:	e01a      	b.n	8004b9a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d114      	bne.n	8004b9a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00e      	beq.n	8004b9a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	7afa      	ldrb	r2, [r7, #11]
 8004b86:	4611      	mov	r1, r2
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	4798      	blx	r3
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004b90:	7dfb      	ldrb	r3, [r7, #23]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004b96:	7dfb      	ldrb	r3, [r7, #23]
 8004b98:	e000      	b.n	8004b9c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e02f      	b.n	8004c38 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00f      	beq.n	8004c02 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6852      	ldr	r2, [r2, #4]
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c02:	2340      	movs	r3, #64	; 0x40
 8004c04:	2200      	movs	r2, #0
 8004c06:	2100      	movs	r1, #0
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f001 fb79 	bl	8006300 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2240      	movs	r2, #64	; 0x40
 8004c1a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c1e:	2340      	movs	r3, #64	; 0x40
 8004c20:	2200      	movs	r2, #0
 8004c22:	2180      	movs	r1, #128	; 0x80
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f001 fb6b 	bl	8006300 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2240      	movs	r2, #64	; 0x40
 8004c34:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2204      	movs	r2, #4
 8004c7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d106      	bne.n	8004cae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e012      	b.n	8004cf8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d10b      	bne.n	8004cf6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e014      	b.n	8004d44 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d10d      	bne.n	8004d42 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d007      	beq.n	8004d42 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e014      	b.n	8004d90 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d10d      	bne.n	8004d8e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	78fa      	ldrb	r2, [r7, #3]
 8004d88:	4611      	mov	r1, r2
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d009      	beq.n	8004ddc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6852      	ldr	r2, [r2, #4]
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	4798      	blx	r3
  }

  return USBD_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b087      	sub	sp, #28
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004e04:	8a3b      	ldrh	r3, [r7, #16]
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	b21a      	sxth	r2, r3
 8004e0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	b21b      	sxth	r3, r3
 8004e12:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004e14:	89fb      	ldrh	r3, [r7, #14]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	371c      	adds	r7, #28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
	...

08004e24 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e3a:	2b40      	cmp	r3, #64	; 0x40
 8004e3c:	d005      	beq.n	8004e4a <USBD_StdDevReq+0x26>
 8004e3e:	2b40      	cmp	r3, #64	; 0x40
 8004e40:	d853      	bhi.n	8004eea <USBD_StdDevReq+0xc6>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00b      	beq.n	8004e5e <USBD_StdDevReq+0x3a>
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d14f      	bne.n	8004eea <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	6839      	ldr	r1, [r7, #0]
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	4798      	blx	r3
 8004e58:	4603      	mov	r3, r0
 8004e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e5c:	e04a      	b.n	8004ef4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	785b      	ldrb	r3, [r3, #1]
 8004e62:	2b09      	cmp	r3, #9
 8004e64:	d83b      	bhi.n	8004ede <USBD_StdDevReq+0xba>
 8004e66:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <USBD_StdDevReq+0x48>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004ec1 	.word	0x08004ec1
 8004e70:	08004ed5 	.word	0x08004ed5
 8004e74:	08004edf 	.word	0x08004edf
 8004e78:	08004ecb 	.word	0x08004ecb
 8004e7c:	08004edf 	.word	0x08004edf
 8004e80:	08004e9f 	.word	0x08004e9f
 8004e84:	08004e95 	.word	0x08004e95
 8004e88:	08004edf 	.word	0x08004edf
 8004e8c:	08004eb7 	.word	0x08004eb7
 8004e90:	08004ea9 	.word	0x08004ea9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f9de 	bl	8005258 <USBD_GetDescriptor>
          break;
 8004e9c:	e024      	b.n	8004ee8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fb6d 	bl	8005580 <USBD_SetAddress>
          break;
 8004ea6:	e01f      	b.n	8004ee8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004ea8:	6839      	ldr	r1, [r7, #0]
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fbac 	bl	8005608 <USBD_SetConfig>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	73fb      	strb	r3, [r7, #15]
          break;
 8004eb4:	e018      	b.n	8004ee8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004eb6:	6839      	ldr	r1, [r7, #0]
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fc4b 	bl	8005754 <USBD_GetConfig>
          break;
 8004ebe:	e013      	b.n	8004ee8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004ec0:	6839      	ldr	r1, [r7, #0]
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fc7c 	bl	80057c0 <USBD_GetStatus>
          break;
 8004ec8:	e00e      	b.n	8004ee8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004eca:	6839      	ldr	r1, [r7, #0]
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fcab 	bl	8005828 <USBD_SetFeature>
          break;
 8004ed2:	e009      	b.n	8004ee8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004ed4:	6839      	ldr	r1, [r7, #0]
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fcba 	bl	8005850 <USBD_ClrFeature>
          break;
 8004edc:	e004      	b.n	8004ee8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004ede:	6839      	ldr	r1, [r7, #0]
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fd11 	bl	8005908 <USBD_CtlError>
          break;
 8004ee6:	bf00      	nop
      }
      break;
 8004ee8:	e004      	b.n	8004ef4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004eea:	6839      	ldr	r1, [r7, #0]
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fd0b 	bl	8005908 <USBD_CtlError>
      break;
 8004ef2:	bf00      	nop
  }

  return ret;
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop

08004f00 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f16:	2b40      	cmp	r3, #64	; 0x40
 8004f18:	d005      	beq.n	8004f26 <USBD_StdItfReq+0x26>
 8004f1a:	2b40      	cmp	r3, #64	; 0x40
 8004f1c:	d82f      	bhi.n	8004f7e <USBD_StdItfReq+0x7e>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <USBD_StdItfReq+0x26>
 8004f22:	2b20      	cmp	r3, #32
 8004f24:	d12b      	bne.n	8004f7e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d81d      	bhi.n	8004f70 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	889b      	ldrh	r3, [r3, #4]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d813      	bhi.n	8004f66 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	4798      	blx	r3
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	88db      	ldrh	r3, [r3, #6]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d110      	bne.n	8004f7a <USBD_StdItfReq+0x7a>
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10d      	bne.n	8004f7a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fd80 	bl	8005a64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004f64:	e009      	b.n	8004f7a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8004f66:	6839      	ldr	r1, [r7, #0]
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fccd 	bl	8005908 <USBD_CtlError>
          break;
 8004f6e:	e004      	b.n	8004f7a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8004f70:	6839      	ldr	r1, [r7, #0]
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fcc8 	bl	8005908 <USBD_CtlError>
          break;
 8004f78:	e000      	b.n	8004f7c <USBD_StdItfReq+0x7c>
          break;
 8004f7a:	bf00      	nop
      }
      break;
 8004f7c:	e004      	b.n	8004f88 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8004f7e:	6839      	ldr	r1, [r7, #0]
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fcc1 	bl	8005908 <USBD_CtlError>
      break;
 8004f86:	bf00      	nop
  }

  return ret;
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	889b      	ldrh	r3, [r3, #4]
 8004fa4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fae:	2b40      	cmp	r3, #64	; 0x40
 8004fb0:	d007      	beq.n	8004fc2 <USBD_StdEPReq+0x30>
 8004fb2:	2b40      	cmp	r3, #64	; 0x40
 8004fb4:	f200 8145 	bhi.w	8005242 <USBD_StdEPReq+0x2b0>
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00c      	beq.n	8004fd6 <USBD_StdEPReq+0x44>
 8004fbc:	2b20      	cmp	r3, #32
 8004fbe:	f040 8140 	bne.w	8005242 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	6839      	ldr	r1, [r7, #0]
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	4798      	blx	r3
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd4:	e13a      	b.n	800524c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	785b      	ldrb	r3, [r3, #1]
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d007      	beq.n	8004fee <USBD_StdEPReq+0x5c>
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	f300 8129 	bgt.w	8005236 <USBD_StdEPReq+0x2a4>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d07f      	beq.n	80050e8 <USBD_StdEPReq+0x156>
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d03c      	beq.n	8005066 <USBD_StdEPReq+0xd4>
 8004fec:	e123      	b.n	8005236 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d002      	beq.n	8005000 <USBD_StdEPReq+0x6e>
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	d016      	beq.n	800502c <USBD_StdEPReq+0x9a>
 8004ffe:	e02c      	b.n	800505a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005000:	7bbb      	ldrb	r3, [r7, #14]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00d      	beq.n	8005022 <USBD_StdEPReq+0x90>
 8005006:	7bbb      	ldrb	r3, [r7, #14]
 8005008:	2b80      	cmp	r3, #128	; 0x80
 800500a:	d00a      	beq.n	8005022 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800500c:	7bbb      	ldrb	r3, [r7, #14]
 800500e:	4619      	mov	r1, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f001 f9e9 	bl	80063e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005016:	2180      	movs	r1, #128	; 0x80
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f001 f9e5 	bl	80063e8 <USBD_LL_StallEP>
 800501e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005020:	e020      	b.n	8005064 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005022:	6839      	ldr	r1, [r7, #0]
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fc6f 	bl	8005908 <USBD_CtlError>
              break;
 800502a:	e01b      	b.n	8005064 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	885b      	ldrh	r3, [r3, #2]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10e      	bne.n	8005052 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005034:	7bbb      	ldrb	r3, [r7, #14]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00b      	beq.n	8005052 <USBD_StdEPReq+0xc0>
 800503a:	7bbb      	ldrb	r3, [r7, #14]
 800503c:	2b80      	cmp	r3, #128	; 0x80
 800503e:	d008      	beq.n	8005052 <USBD_StdEPReq+0xc0>
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	88db      	ldrh	r3, [r3, #6]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d104      	bne.n	8005052 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005048:	7bbb      	ldrb	r3, [r7, #14]
 800504a:	4619      	mov	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f001 f9cb 	bl	80063e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fd06 	bl	8005a64 <USBD_CtlSendStatus>

              break;
 8005058:	e004      	b.n	8005064 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800505a:	6839      	ldr	r1, [r7, #0]
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fc53 	bl	8005908 <USBD_CtlError>
              break;
 8005062:	bf00      	nop
          }
          break;
 8005064:	e0ec      	b.n	8005240 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d002      	beq.n	8005078 <USBD_StdEPReq+0xe6>
 8005072:	2b03      	cmp	r3, #3
 8005074:	d016      	beq.n	80050a4 <USBD_StdEPReq+0x112>
 8005076:	e030      	b.n	80050da <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005078:	7bbb      	ldrb	r3, [r7, #14]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00d      	beq.n	800509a <USBD_StdEPReq+0x108>
 800507e:	7bbb      	ldrb	r3, [r7, #14]
 8005080:	2b80      	cmp	r3, #128	; 0x80
 8005082:	d00a      	beq.n	800509a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005084:	7bbb      	ldrb	r3, [r7, #14]
 8005086:	4619      	mov	r1, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f001 f9ad 	bl	80063e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800508e:	2180      	movs	r1, #128	; 0x80
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f001 f9a9 	bl	80063e8 <USBD_LL_StallEP>
 8005096:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005098:	e025      	b.n	80050e6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800509a:	6839      	ldr	r1, [r7, #0]
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fc33 	bl	8005908 <USBD_CtlError>
              break;
 80050a2:	e020      	b.n	80050e6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	885b      	ldrh	r3, [r3, #2]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d11b      	bne.n	80050e4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80050ac:	7bbb      	ldrb	r3, [r7, #14]
 80050ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d004      	beq.n	80050c0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80050b6:	7bbb      	ldrb	r3, [r7, #14]
 80050b8:	4619      	mov	r1, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f001 f9ca 	bl	8006454 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fccf 	bl	8005a64 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	4798      	blx	r3
 80050d4:	4603      	mov	r3, r0
 80050d6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80050d8:	e004      	b.n	80050e4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80050da:	6839      	ldr	r1, [r7, #0]
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fc13 	bl	8005908 <USBD_CtlError>
              break;
 80050e2:	e000      	b.n	80050e6 <USBD_StdEPReq+0x154>
              break;
 80050e4:	bf00      	nop
          }
          break;
 80050e6:	e0ab      	b.n	8005240 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d002      	beq.n	80050fa <USBD_StdEPReq+0x168>
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d032      	beq.n	800515e <USBD_StdEPReq+0x1cc>
 80050f8:	e097      	b.n	800522a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80050fa:	7bbb      	ldrb	r3, [r7, #14]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d007      	beq.n	8005110 <USBD_StdEPReq+0x17e>
 8005100:	7bbb      	ldrb	r3, [r7, #14]
 8005102:	2b80      	cmp	r3, #128	; 0x80
 8005104:	d004      	beq.n	8005110 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005106:	6839      	ldr	r1, [r7, #0]
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 fbfd 	bl	8005908 <USBD_CtlError>
                break;
 800510e:	e091      	b.n	8005234 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005114:	2b00      	cmp	r3, #0
 8005116:	da0b      	bge.n	8005130 <USBD_StdEPReq+0x19e>
 8005118:	7bbb      	ldrb	r3, [r7, #14]
 800511a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800511e:	4613      	mov	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	3310      	adds	r3, #16
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	4413      	add	r3, r2
 800512c:	3304      	adds	r3, #4
 800512e:	e00b      	b.n	8005148 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005130:	7bbb      	ldrb	r3, [r7, #14]
 8005132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	4413      	add	r3, r2
 8005146:	3304      	adds	r3, #4
 8005148:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2202      	movs	r2, #2
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fc47 	bl	80059ea <USBD_CtlSendData>
              break;
 800515c:	e06a      	b.n	8005234 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800515e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005162:	2b00      	cmp	r3, #0
 8005164:	da11      	bge.n	800518a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005166:	7bbb      	ldrb	r3, [r7, #14]
 8005168:	f003 020f 	and.w	r2, r3, #15
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	3324      	adds	r3, #36	; 0x24
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d117      	bne.n	80051b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005180:	6839      	ldr	r1, [r7, #0]
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fbc0 	bl	8005908 <USBD_CtlError>
                  break;
 8005188:	e054      	b.n	8005234 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800518a:	7bbb      	ldrb	r3, [r7, #14]
 800518c:	f003 020f 	and.w	r2, r3, #15
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d104      	bne.n	80051b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80051a6:	6839      	ldr	r1, [r7, #0]
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fbad 	bl	8005908 <USBD_CtlError>
                  break;
 80051ae:	e041      	b.n	8005234 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	da0b      	bge.n	80051d0 <USBD_StdEPReq+0x23e>
 80051b8:	7bbb      	ldrb	r3, [r7, #14]
 80051ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	3310      	adds	r3, #16
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	4413      	add	r3, r2
 80051cc:	3304      	adds	r3, #4
 80051ce:	e00b      	b.n	80051e8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80051d0:	7bbb      	ldrb	r3, [r7, #14]
 80051d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	4413      	add	r3, r2
 80051e6:	3304      	adds	r3, #4
 80051e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80051ea:	7bbb      	ldrb	r3, [r7, #14]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <USBD_StdEPReq+0x264>
 80051f0:	7bbb      	ldrb	r3, [r7, #14]
 80051f2:	2b80      	cmp	r3, #128	; 0x80
 80051f4:	d103      	bne.n	80051fe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	e00e      	b.n	800521c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80051fe:	7bbb      	ldrb	r3, [r7, #14]
 8005200:	4619      	mov	r1, r3
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f001 f95c 	bl	80064c0 <USBD_LL_IsStallEP>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2201      	movs	r2, #1
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	e002      	b.n	800521c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2202      	movs	r2, #2
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fbe1 	bl	80059ea <USBD_CtlSendData>
              break;
 8005228:	e004      	b.n	8005234 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800522a:	6839      	ldr	r1, [r7, #0]
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fb6b 	bl	8005908 <USBD_CtlError>
              break;
 8005232:	bf00      	nop
          }
          break;
 8005234:	e004      	b.n	8005240 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005236:	6839      	ldr	r1, [r7, #0]
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fb65 	bl	8005908 <USBD_CtlError>
          break;
 800523e:	bf00      	nop
      }
      break;
 8005240:	e004      	b.n	800524c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005242:	6839      	ldr	r1, [r7, #0]
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fb5f 	bl	8005908 <USBD_CtlError>
      break;
 800524a:	bf00      	nop
  }

  return ret;
 800524c:	7bfb      	ldrb	r3, [r7, #15]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	885b      	ldrh	r3, [r3, #2]
 8005272:	0a1b      	lsrs	r3, r3, #8
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	2b0e      	cmp	r3, #14
 800527a:	f200 8152 	bhi.w	8005522 <USBD_GetDescriptor+0x2ca>
 800527e:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <USBD_GetDescriptor+0x2c>)
 8005280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005284:	080052f5 	.word	0x080052f5
 8005288:	0800530d 	.word	0x0800530d
 800528c:	0800534d 	.word	0x0800534d
 8005290:	08005523 	.word	0x08005523
 8005294:	08005523 	.word	0x08005523
 8005298:	080054c3 	.word	0x080054c3
 800529c:	080054ef 	.word	0x080054ef
 80052a0:	08005523 	.word	0x08005523
 80052a4:	08005523 	.word	0x08005523
 80052a8:	08005523 	.word	0x08005523
 80052ac:	08005523 	.word	0x08005523
 80052b0:	08005523 	.word	0x08005523
 80052b4:	08005523 	.word	0x08005523
 80052b8:	08005523 	.word	0x08005523
 80052bc:	080052c1 	.word	0x080052c1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00b      	beq.n	80052e4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	7c12      	ldrb	r2, [r2, #16]
 80052d8:	f107 0108 	add.w	r1, r7, #8
 80052dc:	4610      	mov	r0, r2
 80052de:	4798      	blx	r3
 80052e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80052e2:	e126      	b.n	8005532 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80052e4:	6839      	ldr	r1, [r7, #0]
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fb0e 	bl	8005908 <USBD_CtlError>
        err++;
 80052ec:	7afb      	ldrb	r3, [r7, #11]
 80052ee:	3301      	adds	r3, #1
 80052f0:	72fb      	strb	r3, [r7, #11]
      break;
 80052f2:	e11e      	b.n	8005532 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	7c12      	ldrb	r2, [r2, #16]
 8005300:	f107 0108 	add.w	r1, r7, #8
 8005304:	4610      	mov	r0, r2
 8005306:	4798      	blx	r3
 8005308:	60f8      	str	r0, [r7, #12]
      break;
 800530a:	e112      	b.n	8005532 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	7c1b      	ldrb	r3, [r3, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10d      	bne.n	8005330 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531c:	f107 0208 	add.w	r2, r7, #8
 8005320:	4610      	mov	r0, r2
 8005322:	4798      	blx	r3
 8005324:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3301      	adds	r3, #1
 800532a:	2202      	movs	r2, #2
 800532c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800532e:	e100      	b.n	8005532 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	f107 0208 	add.w	r2, r7, #8
 800533c:	4610      	mov	r0, r2
 800533e:	4798      	blx	r3
 8005340:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3301      	adds	r3, #1
 8005346:	2202      	movs	r2, #2
 8005348:	701a      	strb	r2, [r3, #0]
      break;
 800534a:	e0f2      	b.n	8005532 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	885b      	ldrh	r3, [r3, #2]
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b05      	cmp	r3, #5
 8005354:	f200 80ac 	bhi.w	80054b0 <USBD_GetDescriptor+0x258>
 8005358:	a201      	add	r2, pc, #4	; (adr r2, 8005360 <USBD_GetDescriptor+0x108>)
 800535a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535e:	bf00      	nop
 8005360:	08005379 	.word	0x08005379
 8005364:	080053ad 	.word	0x080053ad
 8005368:	080053e1 	.word	0x080053e1
 800536c:	08005415 	.word	0x08005415
 8005370:	08005449 	.word	0x08005449
 8005374:	0800547d 	.word	0x0800547d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00b      	beq.n	800539c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	7c12      	ldrb	r2, [r2, #16]
 8005390:	f107 0108 	add.w	r1, r7, #8
 8005394:	4610      	mov	r0, r2
 8005396:	4798      	blx	r3
 8005398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800539a:	e091      	b.n	80054c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fab2 	bl	8005908 <USBD_CtlError>
            err++;
 80053a4:	7afb      	ldrb	r3, [r7, #11]
 80053a6:	3301      	adds	r3, #1
 80053a8:	72fb      	strb	r3, [r7, #11]
          break;
 80053aa:	e089      	b.n	80054c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00b      	beq.n	80053d0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	7c12      	ldrb	r2, [r2, #16]
 80053c4:	f107 0108 	add.w	r1, r7, #8
 80053c8:	4610      	mov	r0, r2
 80053ca:	4798      	blx	r3
 80053cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80053ce:	e077      	b.n	80054c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fa98 	bl	8005908 <USBD_CtlError>
            err++;
 80053d8:	7afb      	ldrb	r3, [r7, #11]
 80053da:	3301      	adds	r3, #1
 80053dc:	72fb      	strb	r3, [r7, #11]
          break;
 80053de:	e06f      	b.n	80054c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00b      	beq.n	8005404 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	7c12      	ldrb	r2, [r2, #16]
 80053f8:	f107 0108 	add.w	r1, r7, #8
 80053fc:	4610      	mov	r0, r2
 80053fe:	4798      	blx	r3
 8005400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005402:	e05d      	b.n	80054c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005404:	6839      	ldr	r1, [r7, #0]
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fa7e 	bl	8005908 <USBD_CtlError>
            err++;
 800540c:	7afb      	ldrb	r3, [r7, #11]
 800540e:	3301      	adds	r3, #1
 8005410:	72fb      	strb	r3, [r7, #11]
          break;
 8005412:	e055      	b.n	80054c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	7c12      	ldrb	r2, [r2, #16]
 800542c:	f107 0108 	add.w	r1, r7, #8
 8005430:	4610      	mov	r0, r2
 8005432:	4798      	blx	r3
 8005434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005436:	e043      	b.n	80054c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005438:	6839      	ldr	r1, [r7, #0]
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fa64 	bl	8005908 <USBD_CtlError>
            err++;
 8005440:	7afb      	ldrb	r3, [r7, #11]
 8005442:	3301      	adds	r3, #1
 8005444:	72fb      	strb	r3, [r7, #11]
          break;
 8005446:	e03b      	b.n	80054c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00b      	beq.n	800546c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	7c12      	ldrb	r2, [r2, #16]
 8005460:	f107 0108 	add.w	r1, r7, #8
 8005464:	4610      	mov	r0, r2
 8005466:	4798      	blx	r3
 8005468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800546a:	e029      	b.n	80054c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fa4a 	bl	8005908 <USBD_CtlError>
            err++;
 8005474:	7afb      	ldrb	r3, [r7, #11]
 8005476:	3301      	adds	r3, #1
 8005478:	72fb      	strb	r3, [r7, #11]
          break;
 800547a:	e021      	b.n	80054c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00b      	beq.n	80054a0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	7c12      	ldrb	r2, [r2, #16]
 8005494:	f107 0108 	add.w	r1, r7, #8
 8005498:	4610      	mov	r0, r2
 800549a:	4798      	blx	r3
 800549c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800549e:	e00f      	b.n	80054c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fa30 	bl	8005908 <USBD_CtlError>
            err++;
 80054a8:	7afb      	ldrb	r3, [r7, #11]
 80054aa:	3301      	adds	r3, #1
 80054ac:	72fb      	strb	r3, [r7, #11]
          break;
 80054ae:	e007      	b.n	80054c0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80054b0:	6839      	ldr	r1, [r7, #0]
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fa28 	bl	8005908 <USBD_CtlError>
          err++;
 80054b8:	7afb      	ldrb	r3, [r7, #11]
 80054ba:	3301      	adds	r3, #1
 80054bc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80054be:	bf00      	nop
      }
      break;
 80054c0:	e037      	b.n	8005532 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	7c1b      	ldrb	r3, [r3, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d109      	bne.n	80054de <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d2:	f107 0208 	add.w	r2, r7, #8
 80054d6:	4610      	mov	r0, r2
 80054d8:	4798      	blx	r3
 80054da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80054dc:	e029      	b.n	8005532 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80054de:	6839      	ldr	r1, [r7, #0]
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fa11 	bl	8005908 <USBD_CtlError>
        err++;
 80054e6:	7afb      	ldrb	r3, [r7, #11]
 80054e8:	3301      	adds	r3, #1
 80054ea:	72fb      	strb	r3, [r7, #11]
      break;
 80054ec:	e021      	b.n	8005532 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	7c1b      	ldrb	r3, [r3, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10d      	bne.n	8005512 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fe:	f107 0208 	add.w	r2, r7, #8
 8005502:	4610      	mov	r0, r2
 8005504:	4798      	blx	r3
 8005506:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3301      	adds	r3, #1
 800550c:	2207      	movs	r2, #7
 800550e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005510:	e00f      	b.n	8005532 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005512:	6839      	ldr	r1, [r7, #0]
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f9f7 	bl	8005908 <USBD_CtlError>
        err++;
 800551a:	7afb      	ldrb	r3, [r7, #11]
 800551c:	3301      	adds	r3, #1
 800551e:	72fb      	strb	r3, [r7, #11]
      break;
 8005520:	e007      	b.n	8005532 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f9ef 	bl	8005908 <USBD_CtlError>
      err++;
 800552a:	7afb      	ldrb	r3, [r7, #11]
 800552c:	3301      	adds	r3, #1
 800552e:	72fb      	strb	r3, [r7, #11]
      break;
 8005530:	bf00      	nop
  }

  if (err != 0U)
 8005532:	7afb      	ldrb	r3, [r7, #11]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d11e      	bne.n	8005576 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	88db      	ldrh	r3, [r3, #6]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d016      	beq.n	800556e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8005540:	893b      	ldrh	r3, [r7, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00e      	beq.n	8005564 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	88da      	ldrh	r2, [r3, #6]
 800554a:	893b      	ldrh	r3, [r7, #8]
 800554c:	4293      	cmp	r3, r2
 800554e:	bf28      	it	cs
 8005550:	4613      	movcs	r3, r2
 8005552:	b29b      	uxth	r3, r3
 8005554:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005556:	893b      	ldrh	r3, [r7, #8]
 8005558:	461a      	mov	r2, r3
 800555a:	68f9      	ldr	r1, [r7, #12]
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fa44 	bl	80059ea <USBD_CtlSendData>
 8005562:	e009      	b.n	8005578 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005564:	6839      	ldr	r1, [r7, #0]
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f9ce 	bl	8005908 <USBD_CtlError>
 800556c:	e004      	b.n	8005578 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fa78 	bl	8005a64 <USBD_CtlSendStatus>
 8005574:	e000      	b.n	8005578 <USBD_GetDescriptor+0x320>
    return;
 8005576:	bf00      	nop
  }
}
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop

08005580 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	889b      	ldrh	r3, [r3, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d131      	bne.n	80055f6 <USBD_SetAddress+0x76>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	88db      	ldrh	r3, [r3, #6]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d12d      	bne.n	80055f6 <USBD_SetAddress+0x76>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	885b      	ldrh	r3, [r3, #2]
 800559e:	2b7f      	cmp	r3, #127	; 0x7f
 80055a0:	d829      	bhi.n	80055f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	885b      	ldrh	r3, [r3, #2]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d104      	bne.n	80055c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80055ba:	6839      	ldr	r1, [r7, #0]
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f9a3 	bl	8005908 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055c2:	e01d      	b.n	8005600 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	7bfa      	ldrb	r2, [r7, #15]
 80055c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 ffa1 	bl	8006518 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa44 	bl	8005a64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d004      	beq.n	80055ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2202      	movs	r2, #2
 80055e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ea:	e009      	b.n	8005600 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055f4:	e004      	b.n	8005600 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80055f6:	6839      	ldr	r1, [r7, #0]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f985 	bl	8005908 <USBD_CtlError>
  }
}
 80055fe:	bf00      	nop
 8005600:	bf00      	nop
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	885b      	ldrh	r3, [r3, #2]
 800561a:	b2da      	uxtb	r2, r3
 800561c:	4b4c      	ldr	r3, [pc, #304]	; (8005750 <USBD_SetConfig+0x148>)
 800561e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005620:	4b4b      	ldr	r3, [pc, #300]	; (8005750 <USBD_SetConfig+0x148>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d905      	bls.n	8005634 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005628:	6839      	ldr	r1, [r7, #0]
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f96c 	bl	8005908 <USBD_CtlError>
    return USBD_FAIL;
 8005630:	2303      	movs	r3, #3
 8005632:	e088      	b.n	8005746 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d002      	beq.n	8005646 <USBD_SetConfig+0x3e>
 8005640:	2b03      	cmp	r3, #3
 8005642:	d025      	beq.n	8005690 <USBD_SetConfig+0x88>
 8005644:	e071      	b.n	800572a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005646:	4b42      	ldr	r3, [pc, #264]	; (8005750 <USBD_SetConfig+0x148>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d01c      	beq.n	8005688 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800564e:	4b40      	ldr	r3, [pc, #256]	; (8005750 <USBD_SetConfig+0x148>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005658:	4b3d      	ldr	r3, [pc, #244]	; (8005750 <USBD_SetConfig+0x148>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7ff f91e 	bl	80048a0 <USBD_SetClassConfig>
 8005664:	4603      	mov	r3, r0
 8005666:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d004      	beq.n	8005678 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800566e:	6839      	ldr	r1, [r7, #0]
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f949 	bl	8005908 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005676:	e065      	b.n	8005744 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f9f3 	bl	8005a64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2203      	movs	r2, #3
 8005682:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005686:	e05d      	b.n	8005744 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f9eb 	bl	8005a64 <USBD_CtlSendStatus>
      break;
 800568e:	e059      	b.n	8005744 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005690:	4b2f      	ldr	r3, [pc, #188]	; (8005750 <USBD_SetConfig+0x148>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d112      	bne.n	80056be <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80056a0:	4b2b      	ldr	r3, [pc, #172]	; (8005750 <USBD_SetConfig+0x148>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	461a      	mov	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80056aa:	4b29      	ldr	r3, [pc, #164]	; (8005750 <USBD_SetConfig+0x148>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	4619      	mov	r1, r3
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff f911 	bl	80048d8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f9d4 	bl	8005a64 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80056bc:	e042      	b.n	8005744 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80056be:	4b24      	ldr	r3, [pc, #144]	; (8005750 <USBD_SetConfig+0x148>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d02a      	beq.n	8005722 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	4619      	mov	r1, r3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff f8ff 	bl	80048d8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80056da:	4b1d      	ldr	r3, [pc, #116]	; (8005750 <USBD_SetConfig+0x148>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80056e4:	4b1a      	ldr	r3, [pc, #104]	; (8005750 <USBD_SetConfig+0x148>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff f8d8 	bl	80048a0 <USBD_SetClassConfig>
 80056f0:	4603      	mov	r3, r0
 80056f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00f      	beq.n	800571a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80056fa:	6839      	ldr	r1, [r7, #0]
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f903 	bl	8005908 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff f8e4 	bl	80048d8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005718:	e014      	b.n	8005744 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f9a2 	bl	8005a64 <USBD_CtlSendStatus>
      break;
 8005720:	e010      	b.n	8005744 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f99e 	bl	8005a64 <USBD_CtlSendStatus>
      break;
 8005728:	e00c      	b.n	8005744 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800572a:	6839      	ldr	r1, [r7, #0]
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f8eb 	bl	8005908 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005732:	4b07      	ldr	r3, [pc, #28]	; (8005750 <USBD_SetConfig+0x148>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	4619      	mov	r1, r3
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7ff f8cd 	bl	80048d8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800573e:	2303      	movs	r3, #3
 8005740:	73fb      	strb	r3, [r7, #15]
      break;
 8005742:	bf00      	nop
  }

  return ret;
 8005744:	7bfb      	ldrb	r3, [r7, #15]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20000184 	.word	0x20000184

08005754 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	88db      	ldrh	r3, [r3, #6]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d004      	beq.n	8005770 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005766:	6839      	ldr	r1, [r7, #0]
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f8cd 	bl	8005908 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800576e:	e023      	b.n	80057b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	dc02      	bgt.n	8005782 <USBD_GetConfig+0x2e>
 800577c:	2b00      	cmp	r3, #0
 800577e:	dc03      	bgt.n	8005788 <USBD_GetConfig+0x34>
 8005780:	e015      	b.n	80057ae <USBD_GetConfig+0x5a>
 8005782:	2b03      	cmp	r3, #3
 8005784:	d00b      	beq.n	800579e <USBD_GetConfig+0x4a>
 8005786:	e012      	b.n	80057ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3308      	adds	r3, #8
 8005792:	2201      	movs	r2, #1
 8005794:	4619      	mov	r1, r3
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f927 	bl	80059ea <USBD_CtlSendData>
        break;
 800579c:	e00c      	b.n	80057b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	3304      	adds	r3, #4
 80057a2:	2201      	movs	r2, #1
 80057a4:	4619      	mov	r1, r3
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f91f 	bl	80059ea <USBD_CtlSendData>
        break;
 80057ac:	e004      	b.n	80057b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80057ae:	6839      	ldr	r1, [r7, #0]
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f8a9 	bl	8005908 <USBD_CtlError>
        break;
 80057b6:	bf00      	nop
}
 80057b8:	bf00      	nop
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d81e      	bhi.n	8005816 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	88db      	ldrh	r3, [r3, #6]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d004      	beq.n	80057ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80057e0:	6839      	ldr	r1, [r7, #0]
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f890 	bl	8005908 <USBD_CtlError>
        break;
 80057e8:	e01a      	b.n	8005820 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f043 0202 	orr.w	r2, r3, #2
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	330c      	adds	r3, #12
 800580a:	2202      	movs	r2, #2
 800580c:	4619      	mov	r1, r3
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f8eb 	bl	80059ea <USBD_CtlSendData>
      break;
 8005814:	e004      	b.n	8005820 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005816:	6839      	ldr	r1, [r7, #0]
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f875 	bl	8005908 <USBD_CtlError>
      break;
 800581e:	bf00      	nop
  }
}
 8005820:	bf00      	nop
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	885b      	ldrh	r3, [r3, #2]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d106      	bne.n	8005848 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f90e 	bl	8005a64 <USBD_CtlSendStatus>
  }
}
 8005848:	bf00      	nop
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005860:	b2db      	uxtb	r3, r3
 8005862:	3b01      	subs	r3, #1
 8005864:	2b02      	cmp	r3, #2
 8005866:	d80b      	bhi.n	8005880 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	885b      	ldrh	r3, [r3, #2]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d10c      	bne.n	800588a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f8f3 	bl	8005a64 <USBD_CtlSendStatus>
      }
      break;
 800587e:	e004      	b.n	800588a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005880:	6839      	ldr	r1, [r7, #0]
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f840 	bl	8005908 <USBD_CtlError>
      break;
 8005888:	e000      	b.n	800588c <USBD_ClrFeature+0x3c>
      break;
 800588a:	bf00      	nop
  }
}
 800588c:	bf00      	nop
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	781a      	ldrb	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3301      	adds	r3, #1
 80058ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	781a      	ldrb	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3301      	adds	r3, #1
 80058bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f7ff fa91 	bl	8004de6 <SWAPBYTE>
 80058c4:	4603      	mov	r3, r0
 80058c6:	461a      	mov	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3301      	adds	r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3301      	adds	r3, #1
 80058d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f7ff fa84 	bl	8004de6 <SWAPBYTE>
 80058de:	4603      	mov	r3, r0
 80058e0:	461a      	mov	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3301      	adds	r3, #1
 80058ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3301      	adds	r3, #1
 80058f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f7ff fa77 	bl	8004de6 <SWAPBYTE>
 80058f8:	4603      	mov	r3, r0
 80058fa:	461a      	mov	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	80da      	strh	r2, [r3, #6]
}
 8005900:	bf00      	nop
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005912:	2180      	movs	r1, #128	; 0x80
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fd67 	bl	80063e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800591a:	2100      	movs	r1, #0
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fd63 	bl	80063e8 <USBD_LL_StallEP>
}
 8005922:	bf00      	nop
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b086      	sub	sp, #24
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d036      	beq.n	80059ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005944:	6938      	ldr	r0, [r7, #16]
 8005946:	f000 f836 	bl	80059b6 <USBD_GetLen>
 800594a:	4603      	mov	r3, r0
 800594c:	3301      	adds	r3, #1
 800594e:	b29b      	uxth	r3, r3
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005958:	7dfb      	ldrb	r3, [r7, #23]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	4413      	add	r3, r2
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	7812      	ldrb	r2, [r2, #0]
 8005962:	701a      	strb	r2, [r3, #0]
  idx++;
 8005964:	7dfb      	ldrb	r3, [r7, #23]
 8005966:	3301      	adds	r3, #1
 8005968:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800596a:	7dfb      	ldrb	r3, [r7, #23]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	4413      	add	r3, r2
 8005970:	2203      	movs	r2, #3
 8005972:	701a      	strb	r2, [r3, #0]
  idx++;
 8005974:	7dfb      	ldrb	r3, [r7, #23]
 8005976:	3301      	adds	r3, #1
 8005978:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800597a:	e013      	b.n	80059a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800597c:	7dfb      	ldrb	r3, [r7, #23]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	4413      	add	r3, r2
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	7812      	ldrb	r2, [r2, #0]
 8005986:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	3301      	adds	r3, #1
 800598c:	613b      	str	r3, [r7, #16]
    idx++;
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	3301      	adds	r3, #1
 8005992:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005994:	7dfb      	ldrb	r3, [r7, #23]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	4413      	add	r3, r2
 800599a:	2200      	movs	r2, #0
 800599c:	701a      	strb	r2, [r3, #0]
    idx++;
 800599e:	7dfb      	ldrb	r3, [r7, #23]
 80059a0:	3301      	adds	r3, #1
 80059a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1e7      	bne.n	800597c <USBD_GetString+0x52>
 80059ac:	e000      	b.n	80059b0 <USBD_GetString+0x86>
    return;
 80059ae:	bf00      	nop
  }
}
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80059c6:	e005      	b.n	80059d4 <USBD_GetLen+0x1e>
  {
    len++;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	3301      	adds	r3, #1
 80059cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	3301      	adds	r3, #1
 80059d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1f5      	bne.n	80059c8 <USBD_GetLen+0x12>
  }

  return len;
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	60f8      	str	r0, [r7, #12]
 80059f2:	60b9      	str	r1, [r7, #8]
 80059f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2202      	movs	r2, #2
 80059fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	2100      	movs	r1, #0
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fdb7 	bl	8006584 <USBD_LL_Transmit>

  return USBD_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	2100      	movs	r1, #0
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 fda6 	bl	8006584 <USBD_LL_Transmit>

  return USBD_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	2100      	movs	r1, #0
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 fdcd 	bl	80065f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2204      	movs	r2, #4
 8005a70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005a74:	2300      	movs	r3, #0
 8005a76:	2200      	movs	r2, #0
 8005a78:	2100      	movs	r1, #0
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fd82 	bl	8006584 <USBD_LL_Transmit>

  return USBD_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2205      	movs	r2, #5
 8005a96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fda7 	bl	80065f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ab4:	f7fa fb88 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ab8:	f000 f81a 	bl	8005af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005abc:	f000 f86a 	bl	8005b94 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8005ac0:	f000 f9e6 	bl	8005e90 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(kb_flag == 1) {
 8005ac4:	4b07      	ldr	r3, [pc, #28]	; (8005ae4 <main+0x34>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d1fb      	bne.n	8005ac4 <main+0x14>
		  USBD_HID_SendReport(&hUsbDeviceFS, &HID_buffer, sizeof (HID_buffer));
 8005acc:	2208      	movs	r2, #8
 8005ace:	4906      	ldr	r1, [pc, #24]	; (8005ae8 <main+0x38>)
 8005ad0:	4806      	ldr	r0, [pc, #24]	; (8005aec <main+0x3c>)
 8005ad2:	f7fe fdfd 	bl	80046d0 <USBD_HID_SendReport>
		  HAL_Delay(50);
 8005ad6:	2032      	movs	r0, #50	; 0x32
 8005ad8:	f7fa fbea 	bl	80002b0 <HAL_Delay>
		  kb_flag = 0;
 8005adc:	4b01      	ldr	r3, [pc, #4]	; (8005ae4 <main+0x34>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	701a      	strb	r2, [r3, #0]
	  if(kb_flag == 1) {
 8005ae2:	e7ef      	b.n	8005ac4 <main+0x14>
 8005ae4:	20000185 	.word	0x20000185
 8005ae8:	20000188 	.word	0x20000188
 8005aec:	200001a8 	.word	0x200001a8

08005af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b096      	sub	sp, #88	; 0x58
 8005af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005af6:	f107 0314 	add.w	r3, r7, #20
 8005afa:	2244      	movs	r2, #68	; 0x44
 8005afc:	2100      	movs	r1, #0
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 ff8c 	bl	8006a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b04:	463b      	mov	r3, r7
 8005b06:	2200      	movs	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	605a      	str	r2, [r3, #4]
 8005b0c:	609a      	str	r2, [r3, #8]
 8005b0e:	60da      	str	r2, [r3, #12]
 8005b10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005b12:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005b16:	f7fb ff89 	bl	8001a2c <HAL_PWREx_ControlVoltageScaling>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005b20:	f000 f90a 	bl	8005d38 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005b24:	2310      	movs	r3, #16
 8005b26:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005b30:	2360      	movs	r3, #96	; 0x60
 8005b32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b34:	2302      	movs	r3, #2
 8005b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8005b40:	2328      	movs	r3, #40	; 0x28
 8005b42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005b44:	2307      	movs	r3, #7
 8005b46:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005b48:	2302      	movs	r3, #2
 8005b4a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b50:	f107 0314 	add.w	r3, r7, #20
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fb ffcf 	bl	8001af8 <HAL_RCC_OscConfig>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8005b60:	f000 f8ea 	bl	8005d38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b64:	230f      	movs	r3, #15
 8005b66:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005b74:	2300      	movs	r3, #0
 8005b76:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005b78:	463b      	mov	r3, r7
 8005b7a:	2104      	movs	r1, #4
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fc fba1 	bl	80022c4 <HAL_RCC_ClockConfig>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8005b88:	f000 f8d6 	bl	8005d38 <Error_Handler>
  }
}
 8005b8c:	bf00      	nop
 8005b8e:	3758      	adds	r7, #88	; 0x58
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b9a:	f107 030c 	add.w	r3, r7, #12
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	605a      	str	r2, [r3, #4]
 8005ba4:	609a      	str	r2, [r3, #8]
 8005ba6:	60da      	str	r2, [r3, #12]
 8005ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005baa:	4b34      	ldr	r3, [pc, #208]	; (8005c7c <MX_GPIO_Init+0xe8>)
 8005bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bae:	4a33      	ldr	r2, [pc, #204]	; (8005c7c <MX_GPIO_Init+0xe8>)
 8005bb0:	f043 0304 	orr.w	r3, r3, #4
 8005bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bb6:	4b31      	ldr	r3, [pc, #196]	; (8005c7c <MX_GPIO_Init+0xe8>)
 8005bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	60bb      	str	r3, [r7, #8]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bc2:	4b2e      	ldr	r3, [pc, #184]	; (8005c7c <MX_GPIO_Init+0xe8>)
 8005bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc6:	4a2d      	ldr	r2, [pc, #180]	; (8005c7c <MX_GPIO_Init+0xe8>)
 8005bc8:	f043 0302 	orr.w	r3, r3, #2
 8005bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bce:	4b2b      	ldr	r3, [pc, #172]	; (8005c7c <MX_GPIO_Init+0xe8>)
 8005bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	607b      	str	r3, [r7, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bda:	4b28      	ldr	r3, [pc, #160]	; (8005c7c <MX_GPIO_Init+0xe8>)
 8005bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bde:	4a27      	ldr	r2, [pc, #156]	; (8005c7c <MX_GPIO_Init+0xe8>)
 8005be0:	f043 0301 	orr.w	r3, r3, #1
 8005be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005be6:	4b25      	ldr	r3, [pc, #148]	; (8005c7c <MX_GPIO_Init+0xe8>)
 8005be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	603b      	str	r3, [r7, #0]
 8005bf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bf8:	4821      	ldr	r0, [pc, #132]	; (8005c80 <MX_GPIO_Init+0xec>)
 8005bfa:	f7fa fe51 	bl	80008a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005bfe:	230f      	movs	r3, #15
 8005c00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005c02:	4b20      	ldr	r3, [pc, #128]	; (8005c84 <MX_GPIO_Init+0xf0>)
 8005c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005c06:	2302      	movs	r3, #2
 8005c08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c0a:	f107 030c 	add.w	r3, r7, #12
 8005c0e:	4619      	mov	r1, r3
 8005c10:	481d      	ldr	r0, [pc, #116]	; (8005c88 <MX_GPIO_Init+0xf4>)
 8005c12:	f7fa fc83 	bl	800051c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005c16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c24:	2300      	movs	r3, #0
 8005c26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005c28:	f107 030c 	add.w	r3, r7, #12
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4814      	ldr	r0, [pc, #80]	; (8005c80 <MX_GPIO_Init+0xec>)
 8005c30:	f7fa fc74 	bl	800051c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005c34:	2200      	movs	r2, #0
 8005c36:	2100      	movs	r1, #0
 8005c38:	2006      	movs	r0, #6
 8005c3a:	f7fa fc38 	bl	80004ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005c3e:	2006      	movs	r0, #6
 8005c40:	f7fa fc51 	bl	80004e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8005c44:	2200      	movs	r2, #0
 8005c46:	2100      	movs	r1, #0
 8005c48:	2007      	movs	r0, #7
 8005c4a:	f7fa fc30 	bl	80004ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8005c4e:	2007      	movs	r0, #7
 8005c50:	f7fa fc49 	bl	80004e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005c54:	2200      	movs	r2, #0
 8005c56:	2100      	movs	r1, #0
 8005c58:	2008      	movs	r0, #8
 8005c5a:	f7fa fc28 	bl	80004ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005c5e:	2008      	movs	r0, #8
 8005c60:	f7fa fc41 	bl	80004e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8005c64:	2200      	movs	r2, #0
 8005c66:	2100      	movs	r1, #0
 8005c68:	2009      	movs	r0, #9
 8005c6a:	f7fa fc20 	bl	80004ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8005c6e:	2009      	movs	r0, #9
 8005c70:	f7fa fc39 	bl	80004e6 <HAL_NVIC_EnableIRQ>

}
 8005c74:	bf00      	nop
 8005c76:	3720      	adds	r7, #32
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	48000400 	.word	0x48000400
 8005c84:	10310000 	.word	0x10310000
 8005c88:	48000800 	.word	0x48000800

08005c8c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t  GPIO_Pin){
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	80fb      	strh	r3, [r7, #6]

	kb_flag = 1;
 8005c96:	4b25      	ldr	r3, [pc, #148]	; (8005d2c <HAL_GPIO_EXTI_Callback+0xa0>)
 8005c98:	2201      	movs	r2, #1
 8005c9a:	701a      	strb	r2, [r3, #0]

	if(GPIO_Pin == GPIO_PIN_0){
 8005c9c:	88fb      	ldrh	r3, [r7, #6]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d10d      	bne.n	8005cbe <HAL_GPIO_EXTI_Callback+0x32>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 1){
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	4822      	ldr	r0, [pc, #136]	; (8005d30 <HAL_GPIO_EXTI_Callback+0xa4>)
 8005ca6:	f7fa fde3 	bl	8000870 <HAL_GPIO_ReadPin>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d103      	bne.n	8005cb8 <HAL_GPIO_EXTI_Callback+0x2c>
			HID_buffer[2] = 26;
 8005cb0:	4b20      	ldr	r3, [pc, #128]	; (8005d34 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005cb2:	221a      	movs	r2, #26
 8005cb4:	709a      	strb	r2, [r3, #2]
 8005cb6:	e002      	b.n	8005cbe <HAL_GPIO_EXTI_Callback+0x32>
		} else {
			HID_buffer[2] = 0;
 8005cb8:	4b1e      	ldr	r3, [pc, #120]	; (8005d34 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	709a      	strb	r2, [r3, #2]
		}
	}

	if(GPIO_Pin == GPIO_PIN_1){
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d10d      	bne.n	8005ce0 <HAL_GPIO_EXTI_Callback+0x54>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 1){
 8005cc4:	2102      	movs	r1, #2
 8005cc6:	481a      	ldr	r0, [pc, #104]	; (8005d30 <HAL_GPIO_EXTI_Callback+0xa4>)
 8005cc8:	f7fa fdd2 	bl	8000870 <HAL_GPIO_ReadPin>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d103      	bne.n	8005cda <HAL_GPIO_EXTI_Callback+0x4e>
			HID_buffer[2] = 4;
 8005cd2:	4b18      	ldr	r3, [pc, #96]	; (8005d34 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	709a      	strb	r2, [r3, #2]
 8005cd8:	e002      	b.n	8005ce0 <HAL_GPIO_EXTI_Callback+0x54>
		} else {
			HID_buffer[2] = 0;
 8005cda:	4b16      	ldr	r3, [pc, #88]	; (8005d34 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	709a      	strb	r2, [r3, #2]
		}
	}

	if(GPIO_Pin == GPIO_PIN_2){
 8005ce0:	88fb      	ldrh	r3, [r7, #6]
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d10d      	bne.n	8005d02 <HAL_GPIO_EXTI_Callback+0x76>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 1){
 8005ce6:	2104      	movs	r1, #4
 8005ce8:	4811      	ldr	r0, [pc, #68]	; (8005d30 <HAL_GPIO_EXTI_Callback+0xa4>)
 8005cea:	f7fa fdc1 	bl	8000870 <HAL_GPIO_ReadPin>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d103      	bne.n	8005cfc <HAL_GPIO_EXTI_Callback+0x70>
			HID_buffer[2] = 22;
 8005cf4:	4b0f      	ldr	r3, [pc, #60]	; (8005d34 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005cf6:	2216      	movs	r2, #22
 8005cf8:	709a      	strb	r2, [r3, #2]
 8005cfa:	e002      	b.n	8005d02 <HAL_GPIO_EXTI_Callback+0x76>
		} else {
			HID_buffer[2] = 0;
 8005cfc:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	709a      	strb	r2, [r3, #2]
		}
	}

	if(GPIO_Pin == GPIO_PIN_3){
 8005d02:	88fb      	ldrh	r3, [r7, #6]
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d10d      	bne.n	8005d24 <HAL_GPIO_EXTI_Callback+0x98>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 1){
 8005d08:	2108      	movs	r1, #8
 8005d0a:	4809      	ldr	r0, [pc, #36]	; (8005d30 <HAL_GPIO_EXTI_Callback+0xa4>)
 8005d0c:	f7fa fdb0 	bl	8000870 <HAL_GPIO_ReadPin>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d103      	bne.n	8005d1e <HAL_GPIO_EXTI_Callback+0x92>
			HID_buffer[2] = 7;
 8005d16:	4b07      	ldr	r3, [pc, #28]	; (8005d34 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005d18:	2207      	movs	r2, #7
 8005d1a:	709a      	strb	r2, [r3, #2]
		} else {
			HID_buffer[2] = 0;
		}
	}
}
 8005d1c:	e002      	b.n	8005d24 <HAL_GPIO_EXTI_Callback+0x98>
			HID_buffer[2] = 0;
 8005d1e:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	709a      	strb	r2, [r3, #2]
}
 8005d24:	bf00      	nop
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20000185 	.word	0x20000185
 8005d30:	48000800 	.word	0x48000800
 8005d34:	20000188 	.word	0x20000188

08005d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005d3c:	b672      	cpsid	i
}
 8005d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005d40:	e7fe      	b.n	8005d40 <Error_Handler+0x8>
	...

08005d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d4a:	4b0f      	ldr	r3, [pc, #60]	; (8005d88 <HAL_MspInit+0x44>)
 8005d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d4e:	4a0e      	ldr	r2, [pc, #56]	; (8005d88 <HAL_MspInit+0x44>)
 8005d50:	f043 0301 	orr.w	r3, r3, #1
 8005d54:	6613      	str	r3, [r2, #96]	; 0x60
 8005d56:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <HAL_MspInit+0x44>)
 8005d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	607b      	str	r3, [r7, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d62:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <HAL_MspInit+0x44>)
 8005d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d66:	4a08      	ldr	r2, [pc, #32]	; (8005d88 <HAL_MspInit+0x44>)
 8005d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8005d6e:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <HAL_MspInit+0x44>)
 8005d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40021000 	.word	0x40021000

08005d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005d90:	e7fe      	b.n	8005d90 <NMI_Handler+0x4>

08005d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d92:	b480      	push	{r7}
 8005d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d96:	e7fe      	b.n	8005d96 <HardFault_Handler+0x4>

08005d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d9c:	e7fe      	b.n	8005d9c <MemManage_Handler+0x4>

08005d9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005da2:	e7fe      	b.n	8005da2 <BusFault_Handler+0x4>

08005da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005da8:	e7fe      	b.n	8005da8 <UsageFault_Handler+0x4>

08005daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005daa:	b480      	push	{r7}
 8005dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005dae:	bf00      	nop
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005dbc:	bf00      	nop
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005dca:	bf00      	nop
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005dd8:	f7fa fa4a 	bl	8000270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ddc:	bf00      	nop
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005de4:	2001      	movs	r0, #1
 8005de6:	f7fa fd73 	bl	80008d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005dea:	bf00      	nop
 8005dec:	bd80      	pop	{r7, pc}

08005dee <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005df2:	2002      	movs	r0, #2
 8005df4:	f7fa fd6c 	bl	80008d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005df8:	bf00      	nop
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005e00:	2004      	movs	r0, #4
 8005e02:	f7fa fd65 	bl	80008d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005e06:	bf00      	nop
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005e0e:	2008      	movs	r0, #8
 8005e10:	f7fa fd5e 	bl	80008d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005e14:	bf00      	nop
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005e1c:	4802      	ldr	r0, [pc, #8]	; (8005e28 <OTG_FS_IRQHandler+0x10>)
 8005e1e:	f7fa fec2 	bl	8000ba6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005e22:	bf00      	nop
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000478 	.word	0x20000478

08005e2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005e30:	4b15      	ldr	r3, [pc, #84]	; (8005e88 <SystemInit+0x5c>)
 8005e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e36:	4a14      	ldr	r2, [pc, #80]	; (8005e88 <SystemInit+0x5c>)
 8005e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005e40:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <SystemInit+0x60>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a11      	ldr	r2, [pc, #68]	; (8005e8c <SystemInit+0x60>)
 8005e46:	f043 0301 	orr.w	r3, r3, #1
 8005e4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005e4c:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <SystemInit+0x60>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005e52:	4b0e      	ldr	r3, [pc, #56]	; (8005e8c <SystemInit+0x60>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a0d      	ldr	r2, [pc, #52]	; (8005e8c <SystemInit+0x60>)
 8005e58:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005e5c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005e60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005e62:	4b0a      	ldr	r3, [pc, #40]	; (8005e8c <SystemInit+0x60>)
 8005e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005e6a:	4b08      	ldr	r3, [pc, #32]	; (8005e8c <SystemInit+0x60>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a07      	ldr	r2, [pc, #28]	; (8005e8c <SystemInit+0x60>)
 8005e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005e76:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <SystemInit+0x60>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	619a      	str	r2, [r3, #24]
}
 8005e7c:	bf00      	nop
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	e000ed00 	.word	0xe000ed00
 8005e8c:	40021000 	.word	0x40021000

08005e90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005e94:	2200      	movs	r2, #0
 8005e96:	490e      	ldr	r1, [pc, #56]	; (8005ed0 <MX_USB_DEVICE_Init+0x40>)
 8005e98:	480e      	ldr	r0, [pc, #56]	; (8005ed4 <MX_USB_DEVICE_Init+0x44>)
 8005e9a:	f7fe fc93 	bl	80047c4 <USBD_Init>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005ea4:	f7ff ff48 	bl	8005d38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005ea8:	490b      	ldr	r1, [pc, #44]	; (8005ed8 <MX_USB_DEVICE_Init+0x48>)
 8005eaa:	480a      	ldr	r0, [pc, #40]	; (8005ed4 <MX_USB_DEVICE_Init+0x44>)
 8005eac:	f7fe fcba 	bl	8004824 <USBD_RegisterClass>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005eb6:	f7ff ff3f 	bl	8005d38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005eba:	4806      	ldr	r0, [pc, #24]	; (8005ed4 <MX_USB_DEVICE_Init+0x44>)
 8005ebc:	f7fe fcd9 	bl	8004872 <USBD_Start>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005ec6:	f7ff ff37 	bl	8005d38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005eca:	bf00      	nop
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	20000108 	.word	0x20000108
 8005ed4:	200001a8 	.word	0x200001a8
 8005ed8:	20000008 	.word	0x20000008

08005edc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b0ac      	sub	sp, #176	; 0xb0
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ee4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	605a      	str	r2, [r3, #4]
 8005eee:	609a      	str	r2, [r3, #8]
 8005ef0:	60da      	str	r2, [r3, #12]
 8005ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ef4:	f107 0314 	add.w	r3, r7, #20
 8005ef8:	2288      	movs	r2, #136	; 0x88
 8005efa:	2100      	movs	r1, #0
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 fd8d 	bl	8006a1c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f0a:	d173      	bne.n	8005ff4 <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f10:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8005f12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005f16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8005f22:	2318      	movs	r3, #24
 8005f24:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8005f26:	2307      	movs	r3, #7
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8005f2e:	2302      	movs	r3, #2
 8005f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8005f32:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005f36:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f38:	f107 0314 	add.w	r3, r7, #20
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fc fb9b 	bl	8002678 <HAL_RCCEx_PeriphCLKConfig>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8005f48:	f7ff fef6 	bl	8005d38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f4c:	4b2b      	ldr	r3, [pc, #172]	; (8005ffc <HAL_PCD_MspInit+0x120>)
 8005f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f50:	4a2a      	ldr	r2, [pc, #168]	; (8005ffc <HAL_PCD_MspInit+0x120>)
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f58:	4b28      	ldr	r3, [pc, #160]	; (8005ffc <HAL_PCD_MspInit+0x120>)
 8005f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	613b      	str	r3, [r7, #16]
 8005f62:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005f64:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005f68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005f7e:	230a      	movs	r3, #10
 8005f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005f88:	4619      	mov	r1, r3
 8005f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f8e:	f7fa fac5 	bl	800051c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005f92:	4b1a      	ldr	r3, [pc, #104]	; (8005ffc <HAL_PCD_MspInit+0x120>)
 8005f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f96:	4a19      	ldr	r2, [pc, #100]	; (8005ffc <HAL_PCD_MspInit+0x120>)
 8005f98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f9e:	4b17      	ldr	r3, [pc, #92]	; (8005ffc <HAL_PCD_MspInit+0x120>)
 8005fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005faa:	4b14      	ldr	r3, [pc, #80]	; (8005ffc <HAL_PCD_MspInit+0x120>)
 8005fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d114      	bne.n	8005fe0 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fb6:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <HAL_PCD_MspInit+0x120>)
 8005fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fba:	4a10      	ldr	r2, [pc, #64]	; (8005ffc <HAL_PCD_MspInit+0x120>)
 8005fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc0:	6593      	str	r3, [r2, #88]	; 0x58
 8005fc2:	4b0e      	ldr	r3, [pc, #56]	; (8005ffc <HAL_PCD_MspInit+0x120>)
 8005fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fca:	60bb      	str	r3, [r7, #8]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8005fce:	f7fb fd83 	bl	8001ad8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fd2:	4b0a      	ldr	r3, [pc, #40]	; (8005ffc <HAL_PCD_MspInit+0x120>)
 8005fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd6:	4a09      	ldr	r2, [pc, #36]	; (8005ffc <HAL_PCD_MspInit+0x120>)
 8005fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8005fde:	e001      	b.n	8005fe4 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8005fe0:	f7fb fd7a 	bl	8001ad8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	2043      	movs	r0, #67	; 0x43
 8005fea:	f7fa fa60 	bl	80004ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005fee:	2043      	movs	r0, #67	; 0x43
 8005ff0:	f7fa fa79 	bl	80004e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005ff4:	bf00      	nop
 8005ff6:	37b0      	adds	r7, #176	; 0xb0
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40021000 	.word	0x40021000

08006000 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006014:	4619      	mov	r1, r3
 8006016:	4610      	mov	r0, r2
 8006018:	f7fe fc76 	bl	8004908 <USBD_LL_SetupStage>
}
 800601c:	bf00      	nop
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	4613      	mov	r3, r2
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	1a9b      	subs	r3, r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	440b      	add	r3, r1
 8006044:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	4619      	mov	r1, r3
 800604e:	f7fe fcb0 	bl	80049b2 <USBD_LL_DataOutStage>
}
 8006052:	bf00      	nop
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b082      	sub	sp, #8
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	460b      	mov	r3, r1
 8006064:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800606c:	78fa      	ldrb	r2, [r7, #3]
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	4613      	mov	r3, r2
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	1a9b      	subs	r3, r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	440b      	add	r3, r1
 800607a:	3348      	adds	r3, #72	; 0x48
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	78fb      	ldrb	r3, [r7, #3]
 8006080:	4619      	mov	r1, r3
 8006082:	f7fe fcf9 	bl	8004a78 <USBD_LL_DataInStage>
}
 8006086:	bf00      	nop
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b082      	sub	sp, #8
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800609c:	4618      	mov	r0, r3
 800609e:	f7fe fe0d 	bl	8004cbc <USBD_LL_SOF>
}
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80060b2:	2301      	movs	r3, #1
 80060b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d001      	beq.n	80060c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80060be:	f7ff fe3b 	bl	8005d38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060c8:	7bfa      	ldrb	r2, [r7, #15]
 80060ca:	4611      	mov	r1, r2
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fe fdb7 	bl	8004c40 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fe fd63 	bl	8004ba4 <USBD_LL_Reset>
}
 80060de:	bf00      	nop
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
	...

080060e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6812      	ldr	r2, [r2, #0]
 80060fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006102:	f043 0301 	orr.w	r3, r3, #1
 8006106:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800610e:	4618      	mov	r0, r3
 8006110:	f7fe fda6 	bl	8004c60 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800611c:	4b04      	ldr	r3, [pc, #16]	; (8006130 <HAL_PCD_SuspendCallback+0x48>)
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	4a03      	ldr	r2, [pc, #12]	; (8006130 <HAL_PCD_SuspendCallback+0x48>)
 8006122:	f043 0306 	orr.w	r3, r3, #6
 8006126:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006128:	bf00      	nop
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	e000ed00 	.word	0xe000ed00

08006134 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6812      	ldr	r2, [r2, #0]
 800614a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800614e:	f023 0301 	bic.w	r3, r3, #1
 8006152:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800615c:	4b08      	ldr	r3, [pc, #32]	; (8006180 <HAL_PCD_ResumeCallback+0x4c>)
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	4a07      	ldr	r2, [pc, #28]	; (8006180 <HAL_PCD_ResumeCallback+0x4c>)
 8006162:	f023 0306 	bic.w	r3, r3, #6
 8006166:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006168:	f000 fae2 	bl	8006730 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006172:	4618      	mov	r0, r3
 8006174:	f7fe fd8a 	bl	8004c8c <USBD_LL_Resume>
}
 8006178:	bf00      	nop
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	e000ed00 	.word	0xe000ed00

08006184 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006196:	78fa      	ldrb	r2, [r7, #3]
 8006198:	4611      	mov	r1, r2
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe fdd6 	bl	8004d4c <USBD_LL_IsoOUTIncomplete>
}
 80061a0:	bf00      	nop
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061ba:	78fa      	ldrb	r2, [r7, #3]
 80061bc:	4611      	mov	r1, r2
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe fd9e 	bl	8004d00 <USBD_LL_IsoINIncomplete>
}
 80061c4:	bf00      	nop
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fe fddc 	bl	8004d98 <USBD_LL_DevConnected>
}
 80061e0:	bf00      	nop
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fe fdd9 	bl	8004dae <USBD_LL_DevDisconnected>
}
 80061fc:	bf00      	nop
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d13c      	bne.n	800628e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006214:	4a20      	ldr	r2, [pc, #128]	; (8006298 <USBD_LL_Init+0x94>)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a1e      	ldr	r2, [pc, #120]	; (8006298 <USBD_LL_Init+0x94>)
 8006220:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006224:	4b1c      	ldr	r3, [pc, #112]	; (8006298 <USBD_LL_Init+0x94>)
 8006226:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800622a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800622c:	4b1a      	ldr	r3, [pc, #104]	; (8006298 <USBD_LL_Init+0x94>)
 800622e:	2206      	movs	r2, #6
 8006230:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006232:	4b19      	ldr	r3, [pc, #100]	; (8006298 <USBD_LL_Init+0x94>)
 8006234:	2202      	movs	r2, #2
 8006236:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006238:	4b17      	ldr	r3, [pc, #92]	; (8006298 <USBD_LL_Init+0x94>)
 800623a:	2202      	movs	r2, #2
 800623c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800623e:	4b16      	ldr	r3, [pc, #88]	; (8006298 <USBD_LL_Init+0x94>)
 8006240:	2200      	movs	r2, #0
 8006242:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006244:	4b14      	ldr	r3, [pc, #80]	; (8006298 <USBD_LL_Init+0x94>)
 8006246:	2200      	movs	r2, #0
 8006248:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800624a:	4b13      	ldr	r3, [pc, #76]	; (8006298 <USBD_LL_Init+0x94>)
 800624c:	2200      	movs	r2, #0
 800624e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006250:	4b11      	ldr	r3, [pc, #68]	; (8006298 <USBD_LL_Init+0x94>)
 8006252:	2200      	movs	r2, #0
 8006254:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006256:	4b10      	ldr	r3, [pc, #64]	; (8006298 <USBD_LL_Init+0x94>)
 8006258:	2200      	movs	r2, #0
 800625a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800625c:	4b0e      	ldr	r3, [pc, #56]	; (8006298 <USBD_LL_Init+0x94>)
 800625e:	2200      	movs	r2, #0
 8006260:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006262:	480d      	ldr	r0, [pc, #52]	; (8006298 <USBD_LL_Init+0x94>)
 8006264:	f7fa fb4c 	bl	8000900 <HAL_PCD_Init>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800626e:	f7ff fd63 	bl	8005d38 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006272:	2180      	movs	r1, #128	; 0x80
 8006274:	4808      	ldr	r0, [pc, #32]	; (8006298 <USBD_LL_Init+0x94>)
 8006276:	f7fb fb96 	bl	80019a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800627a:	2240      	movs	r2, #64	; 0x40
 800627c:	2100      	movs	r1, #0
 800627e:	4806      	ldr	r0, [pc, #24]	; (8006298 <USBD_LL_Init+0x94>)
 8006280:	f7fb fb4a 	bl	8001918 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006284:	2280      	movs	r2, #128	; 0x80
 8006286:	2101      	movs	r1, #1
 8006288:	4803      	ldr	r0, [pc, #12]	; (8006298 <USBD_LL_Init+0x94>)
 800628a:	f7fb fb45 	bl	8001918 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	20000478 	.word	0x20000478

0800629c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062a8:	2300      	movs	r3, #0
 80062aa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fa fc48 	bl	8000b48 <HAL_PCD_Start>
 80062b8:	4603      	mov	r3, r0
 80062ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80062bc:	7bbb      	ldrb	r3, [r7, #14]
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d816      	bhi.n	80062f0 <USBD_LL_Start+0x54>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <USBD_LL_Start+0x2c>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062d9 	.word	0x080062d9
 80062cc:	080062df 	.word	0x080062df
 80062d0:	080062e5 	.word	0x080062e5
 80062d4:	080062eb 	.word	0x080062eb
    case HAL_OK :
      usb_status = USBD_OK;
 80062d8:	2300      	movs	r3, #0
 80062da:	73fb      	strb	r3, [r7, #15]
    break;
 80062dc:	e00b      	b.n	80062f6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80062de:	2303      	movs	r3, #3
 80062e0:	73fb      	strb	r3, [r7, #15]
    break;
 80062e2:	e008      	b.n	80062f6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80062e4:	2301      	movs	r3, #1
 80062e6:	73fb      	strb	r3, [r7, #15]
    break;
 80062e8:	e005      	b.n	80062f6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80062ea:	2303      	movs	r3, #3
 80062ec:	73fb      	strb	r3, [r7, #15]
    break;
 80062ee:	e002      	b.n	80062f6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80062f0:	2303      	movs	r3, #3
 80062f2:	73fb      	strb	r3, [r7, #15]
    break;
 80062f4:	bf00      	nop
  }
  return usb_status;
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	4608      	mov	r0, r1
 800630a:	4611      	mov	r1, r2
 800630c:	461a      	mov	r2, r3
 800630e:	4603      	mov	r3, r0
 8006310:	70fb      	strb	r3, [r7, #3]
 8006312:	460b      	mov	r3, r1
 8006314:	70bb      	strb	r3, [r7, #2]
 8006316:	4613      	mov	r3, r2
 8006318:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006328:	78bb      	ldrb	r3, [r7, #2]
 800632a:	883a      	ldrh	r2, [r7, #0]
 800632c:	78f9      	ldrb	r1, [r7, #3]
 800632e:	f7fb f803 	bl	8001338 <HAL_PCD_EP_Open>
 8006332:	4603      	mov	r3, r0
 8006334:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	2b03      	cmp	r3, #3
 800633a:	d817      	bhi.n	800636c <USBD_LL_OpenEP+0x6c>
 800633c:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <USBD_LL_OpenEP+0x44>)
 800633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006342:	bf00      	nop
 8006344:	08006355 	.word	0x08006355
 8006348:	0800635b 	.word	0x0800635b
 800634c:	08006361 	.word	0x08006361
 8006350:	08006367 	.word	0x08006367
    case HAL_OK :
      usb_status = USBD_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	73fb      	strb	r3, [r7, #15]
    break;
 8006358:	e00b      	b.n	8006372 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800635a:	2303      	movs	r3, #3
 800635c:	73fb      	strb	r3, [r7, #15]
    break;
 800635e:	e008      	b.n	8006372 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006360:	2301      	movs	r3, #1
 8006362:	73fb      	strb	r3, [r7, #15]
    break;
 8006364:	e005      	b.n	8006372 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006366:	2303      	movs	r3, #3
 8006368:	73fb      	strb	r3, [r7, #15]
    break;
 800636a:	e002      	b.n	8006372 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800636c:	2303      	movs	r3, #3
 800636e:	73fb      	strb	r3, [r7, #15]
    break;
 8006370:	bf00      	nop
  }
  return usb_status;
 8006372:	7bfb      	ldrb	r3, [r7, #15]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006396:	78fa      	ldrb	r2, [r7, #3]
 8006398:	4611      	mov	r1, r2
 800639a:	4618      	mov	r0, r3
 800639c:	f7fb f834 	bl	8001408 <HAL_PCD_EP_Close>
 80063a0:	4603      	mov	r3, r0
 80063a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80063a4:	7bbb      	ldrb	r3, [r7, #14]
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d816      	bhi.n	80063d8 <USBD_LL_CloseEP+0x5c>
 80063aa:	a201      	add	r2, pc, #4	; (adr r2, 80063b0 <USBD_LL_CloseEP+0x34>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	080063c1 	.word	0x080063c1
 80063b4:	080063c7 	.word	0x080063c7
 80063b8:	080063cd 	.word	0x080063cd
 80063bc:	080063d3 	.word	0x080063d3
    case HAL_OK :
      usb_status = USBD_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	73fb      	strb	r3, [r7, #15]
    break;
 80063c4:	e00b      	b.n	80063de <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80063c6:	2303      	movs	r3, #3
 80063c8:	73fb      	strb	r3, [r7, #15]
    break;
 80063ca:	e008      	b.n	80063de <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80063cc:	2301      	movs	r3, #1
 80063ce:	73fb      	strb	r3, [r7, #15]
    break;
 80063d0:	e005      	b.n	80063de <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80063d2:	2303      	movs	r3, #3
 80063d4:	73fb      	strb	r3, [r7, #15]
    break;
 80063d6:	e002      	b.n	80063de <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80063d8:	2303      	movs	r3, #3
 80063da:	73fb      	strb	r3, [r7, #15]
    break;
 80063dc:	bf00      	nop
  }
  return usb_status;
 80063de:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006402:	78fa      	ldrb	r2, [r7, #3]
 8006404:	4611      	mov	r1, r2
 8006406:	4618      	mov	r0, r3
 8006408:	f7fb f8c3 	bl	8001592 <HAL_PCD_EP_SetStall>
 800640c:	4603      	mov	r3, r0
 800640e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006410:	7bbb      	ldrb	r3, [r7, #14]
 8006412:	2b03      	cmp	r3, #3
 8006414:	d816      	bhi.n	8006444 <USBD_LL_StallEP+0x5c>
 8006416:	a201      	add	r2, pc, #4	; (adr r2, 800641c <USBD_LL_StallEP+0x34>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	0800642d 	.word	0x0800642d
 8006420:	08006433 	.word	0x08006433
 8006424:	08006439 	.word	0x08006439
 8006428:	0800643f 	.word	0x0800643f
    case HAL_OK :
      usb_status = USBD_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	73fb      	strb	r3, [r7, #15]
    break;
 8006430:	e00b      	b.n	800644a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006432:	2303      	movs	r3, #3
 8006434:	73fb      	strb	r3, [r7, #15]
    break;
 8006436:	e008      	b.n	800644a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006438:	2301      	movs	r3, #1
 800643a:	73fb      	strb	r3, [r7, #15]
    break;
 800643c:	e005      	b.n	800644a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800643e:	2303      	movs	r3, #3
 8006440:	73fb      	strb	r3, [r7, #15]
    break;
 8006442:	e002      	b.n	800644a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006444:	2303      	movs	r3, #3
 8006446:	73fb      	strb	r3, [r7, #15]
    break;
 8006448:	bf00      	nop
  }
  return usb_status;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800646e:	78fa      	ldrb	r2, [r7, #3]
 8006470:	4611      	mov	r1, r2
 8006472:	4618      	mov	r0, r3
 8006474:	f7fb f8ef 	bl	8001656 <HAL_PCD_EP_ClrStall>
 8006478:	4603      	mov	r3, r0
 800647a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800647c:	7bbb      	ldrb	r3, [r7, #14]
 800647e:	2b03      	cmp	r3, #3
 8006480:	d816      	bhi.n	80064b0 <USBD_LL_ClearStallEP+0x5c>
 8006482:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <USBD_LL_ClearStallEP+0x34>)
 8006484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006488:	08006499 	.word	0x08006499
 800648c:	0800649f 	.word	0x0800649f
 8006490:	080064a5 	.word	0x080064a5
 8006494:	080064ab 	.word	0x080064ab
    case HAL_OK :
      usb_status = USBD_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	73fb      	strb	r3, [r7, #15]
    break;
 800649c:	e00b      	b.n	80064b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800649e:	2303      	movs	r3, #3
 80064a0:	73fb      	strb	r3, [r7, #15]
    break;
 80064a2:	e008      	b.n	80064b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80064a4:	2301      	movs	r3, #1
 80064a6:	73fb      	strb	r3, [r7, #15]
    break;
 80064a8:	e005      	b.n	80064b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80064aa:	2303      	movs	r3, #3
 80064ac:	73fb      	strb	r3, [r7, #15]
    break;
 80064ae:	e002      	b.n	80064b6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80064b0:	2303      	movs	r3, #3
 80064b2:	73fb      	strb	r3, [r7, #15]
    break;
 80064b4:	bf00      	nop
  }
  return usb_status;
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	460b      	mov	r3, r1
 80064ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80064d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80064d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	da0b      	bge.n	80064f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80064dc:	78fb      	ldrb	r3, [r7, #3]
 80064de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064e2:	68f9      	ldr	r1, [r7, #12]
 80064e4:	4613      	mov	r3, r2
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	1a9b      	subs	r3, r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	440b      	add	r3, r1
 80064ee:	333e      	adds	r3, #62	; 0x3e
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	e00b      	b.n	800650c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80064f4:	78fb      	ldrb	r3, [r7, #3]
 80064f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064fa:	68f9      	ldr	r1, [r7, #12]
 80064fc:	4613      	mov	r3, r2
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	1a9b      	subs	r3, r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	440b      	add	r3, r1
 8006506:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800650a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	460b      	mov	r3, r1
 8006522:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006532:	78fa      	ldrb	r2, [r7, #3]
 8006534:	4611      	mov	r1, r2
 8006536:	4618      	mov	r0, r3
 8006538:	f7fa fed9 	bl	80012ee <HAL_PCD_SetAddress>
 800653c:	4603      	mov	r3, r0
 800653e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006540:	7bbb      	ldrb	r3, [r7, #14]
 8006542:	2b03      	cmp	r3, #3
 8006544:	d816      	bhi.n	8006574 <USBD_LL_SetUSBAddress+0x5c>
 8006546:	a201      	add	r2, pc, #4	; (adr r2, 800654c <USBD_LL_SetUSBAddress+0x34>)
 8006548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654c:	0800655d 	.word	0x0800655d
 8006550:	08006563 	.word	0x08006563
 8006554:	08006569 	.word	0x08006569
 8006558:	0800656f 	.word	0x0800656f
    case HAL_OK :
      usb_status = USBD_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	73fb      	strb	r3, [r7, #15]
    break;
 8006560:	e00b      	b.n	800657a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006562:	2303      	movs	r3, #3
 8006564:	73fb      	strb	r3, [r7, #15]
    break;
 8006566:	e008      	b.n	800657a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006568:	2301      	movs	r3, #1
 800656a:	73fb      	strb	r3, [r7, #15]
    break;
 800656c:	e005      	b.n	800657a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800656e:	2303      	movs	r3, #3
 8006570:	73fb      	strb	r3, [r7, #15]
    break;
 8006572:	e002      	b.n	800657a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006574:	2303      	movs	r3, #3
 8006576:	73fb      	strb	r3, [r7, #15]
    break;
 8006578:	bf00      	nop
  }
  return usb_status;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	607a      	str	r2, [r7, #4]
 800658e:	603b      	str	r3, [r7, #0]
 8006590:	460b      	mov	r3, r1
 8006592:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006598:	2300      	movs	r3, #0
 800659a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80065a2:	7af9      	ldrb	r1, [r7, #11]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	f7fa ffb6 	bl	8001518 <HAL_PCD_EP_Transmit>
 80065ac:	4603      	mov	r3, r0
 80065ae:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80065b0:	7dbb      	ldrb	r3, [r7, #22]
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d816      	bhi.n	80065e4 <USBD_LL_Transmit+0x60>
 80065b6:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <USBD_LL_Transmit+0x38>)
 80065b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065bc:	080065cd 	.word	0x080065cd
 80065c0:	080065d3 	.word	0x080065d3
 80065c4:	080065d9 	.word	0x080065d9
 80065c8:	080065df 	.word	0x080065df
    case HAL_OK :
      usb_status = USBD_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	75fb      	strb	r3, [r7, #23]
    break;
 80065d0:	e00b      	b.n	80065ea <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80065d2:	2303      	movs	r3, #3
 80065d4:	75fb      	strb	r3, [r7, #23]
    break;
 80065d6:	e008      	b.n	80065ea <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80065d8:	2301      	movs	r3, #1
 80065da:	75fb      	strb	r3, [r7, #23]
    break;
 80065dc:	e005      	b.n	80065ea <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80065de:	2303      	movs	r3, #3
 80065e0:	75fb      	strb	r3, [r7, #23]
    break;
 80065e2:	e002      	b.n	80065ea <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80065e4:	2303      	movs	r3, #3
 80065e6:	75fb      	strb	r3, [r7, #23]
    break;
 80065e8:	bf00      	nop
  }
  return usb_status;
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	607a      	str	r2, [r7, #4]
 80065fe:	603b      	str	r3, [r7, #0]
 8006600:	460b      	mov	r3, r1
 8006602:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006604:	2300      	movs	r3, #0
 8006606:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006612:	7af9      	ldrb	r1, [r7, #11]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	f7fa ff40 	bl	800149c <HAL_PCD_EP_Receive>
 800661c:	4603      	mov	r3, r0
 800661e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8006620:	7dbb      	ldrb	r3, [r7, #22]
 8006622:	2b03      	cmp	r3, #3
 8006624:	d816      	bhi.n	8006654 <USBD_LL_PrepareReceive+0x60>
 8006626:	a201      	add	r2, pc, #4	; (adr r2, 800662c <USBD_LL_PrepareReceive+0x38>)
 8006628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662c:	0800663d 	.word	0x0800663d
 8006630:	08006643 	.word	0x08006643
 8006634:	08006649 	.word	0x08006649
 8006638:	0800664f 	.word	0x0800664f
    case HAL_OK :
      usb_status = USBD_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	75fb      	strb	r3, [r7, #23]
    break;
 8006640:	e00b      	b.n	800665a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006642:	2303      	movs	r3, #3
 8006644:	75fb      	strb	r3, [r7, #23]
    break;
 8006646:	e008      	b.n	800665a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006648:	2301      	movs	r3, #1
 800664a:	75fb      	strb	r3, [r7, #23]
    break;
 800664c:	e005      	b.n	800665a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800664e:	2303      	movs	r3, #3
 8006650:	75fb      	strb	r3, [r7, #23]
    break;
 8006652:	e002      	b.n	800665a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8006654:	2303      	movs	r3, #3
 8006656:	75fb      	strb	r3, [r7, #23]
    break;
 8006658:	bf00      	nop
  }
  return usb_status;
 800665a:	7dfb      	ldrb	r3, [r7, #23]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	460b      	mov	r3, r1
 800666e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <HAL_PCDEx_LPM_Callback+0x18>
 8006676:	2b01      	cmp	r3, #1
 8006678:	d01f      	beq.n	80066ba <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800667a:	e03b      	b.n	80066f4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d007      	beq.n	8006694 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8006684:	f000 f854 	bl	8006730 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006688:	4b1c      	ldr	r3, [pc, #112]	; (80066fc <HAL_PCDEx_LPM_Callback+0x98>)
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	4a1b      	ldr	r2, [pc, #108]	; (80066fc <HAL_PCDEx_LPM_Callback+0x98>)
 800668e:	f023 0306 	bic.w	r3, r3, #6
 8006692:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6812      	ldr	r2, [r2, #0]
 80066a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066a6:	f023 0301 	bic.w	r3, r3, #1
 80066aa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fe faea 	bl	8004c8c <USBD_LL_Resume>
    break;
 80066b8:	e01c      	b.n	80066f4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	6812      	ldr	r2, [r2, #0]
 80066c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066cc:	f043 0301 	orr.w	r3, r3, #1
 80066d0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fe fac1 	bl	8004c60 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d005      	beq.n	80066f2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80066e6:	4b05      	ldr	r3, [pc, #20]	; (80066fc <HAL_PCDEx_LPM_Callback+0x98>)
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	4a04      	ldr	r2, [pc, #16]	; (80066fc <HAL_PCDEx_LPM_Callback+0x98>)
 80066ec:	f043 0306 	orr.w	r3, r3, #6
 80066f0:	6113      	str	r3, [r2, #16]
    break;
 80066f2:	bf00      	nop
}
 80066f4:	bf00      	nop
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	e000ed00 	.word	0xe000ed00

08006700 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006708:	4b03      	ldr	r3, [pc, #12]	; (8006718 <USBD_static_malloc+0x18>)
}
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20000190 	.word	0x20000190

0800671c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]

}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8006734:	f7ff f9dc 	bl	8005af0 <SystemClock_Config>
}
 8006738:	bf00      	nop
 800673a:	bd80      	pop	{r7, pc}

0800673c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	6039      	str	r1, [r7, #0]
 8006746:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2212      	movs	r2, #18
 800674c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800674e:	4b03      	ldr	r3, [pc, #12]	; (800675c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006750:	4618      	mov	r0, r3
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	20000128 	.word	0x20000128

08006760 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	6039      	str	r1, [r7, #0]
 800676a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2204      	movs	r2, #4
 8006770:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006772:	4b03      	ldr	r3, [pc, #12]	; (8006780 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006774:	4618      	mov	r0, r3
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	20000148 	.word	0x20000148

08006784 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	4603      	mov	r3, r0
 800678c:	6039      	str	r1, [r7, #0]
 800678e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d105      	bne.n	80067a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	4907      	ldr	r1, [pc, #28]	; (80067b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800679a:	4808      	ldr	r0, [pc, #32]	; (80067bc <USBD_FS_ProductStrDescriptor+0x38>)
 800679c:	f7ff f8c5 	bl	800592a <USBD_GetString>
 80067a0:	e004      	b.n	80067ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	4904      	ldr	r1, [pc, #16]	; (80067b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80067a6:	4805      	ldr	r0, [pc, #20]	; (80067bc <USBD_FS_ProductStrDescriptor+0x38>)
 80067a8:	f7ff f8bf 	bl	800592a <USBD_GetString>
  }
  return USBD_StrDesc;
 80067ac:	4b02      	ldr	r3, [pc, #8]	; (80067b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20000880 	.word	0x20000880
 80067bc:	08006a44 	.word	0x08006a44

080067c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	4603      	mov	r3, r0
 80067c8:	6039      	str	r1, [r7, #0]
 80067ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	4904      	ldr	r1, [pc, #16]	; (80067e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80067d0:	4804      	ldr	r0, [pc, #16]	; (80067e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80067d2:	f7ff f8aa 	bl	800592a <USBD_GetString>
  return USBD_StrDesc;
 80067d6:	4b02      	ldr	r3, [pc, #8]	; (80067e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	20000880 	.word	0x20000880
 80067e4:	08006a5c 	.word	0x08006a5c

080067e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	6039      	str	r1, [r7, #0]
 80067f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	221a      	movs	r2, #26
 80067f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80067fa:	f000 f855 	bl	80068a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80067fe:	4b02      	ldr	r3, [pc, #8]	; (8006808 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006800:	4618      	mov	r0, r3
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	2000014c 	.word	0x2000014c

0800680c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	6039      	str	r1, [r7, #0]
 8006816:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006818:	79fb      	ldrb	r3, [r7, #7]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d105      	bne.n	800682a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	4907      	ldr	r1, [pc, #28]	; (8006840 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006822:	4808      	ldr	r0, [pc, #32]	; (8006844 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006824:	f7ff f881 	bl	800592a <USBD_GetString>
 8006828:	e004      	b.n	8006834 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	4904      	ldr	r1, [pc, #16]	; (8006840 <USBD_FS_ConfigStrDescriptor+0x34>)
 800682e:	4805      	ldr	r0, [pc, #20]	; (8006844 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006830:	f7ff f87b 	bl	800592a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006834:	4b02      	ldr	r3, [pc, #8]	; (8006840 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000880 	.word	0x20000880
 8006844:	08006a70 	.word	0x08006a70

08006848 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	4603      	mov	r3, r0
 8006850:	6039      	str	r1, [r7, #0]
 8006852:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006854:	79fb      	ldrb	r3, [r7, #7]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d105      	bne.n	8006866 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	4907      	ldr	r1, [pc, #28]	; (800687c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800685e:	4808      	ldr	r0, [pc, #32]	; (8006880 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006860:	f7ff f863 	bl	800592a <USBD_GetString>
 8006864:	e004      	b.n	8006870 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	4904      	ldr	r1, [pc, #16]	; (800687c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800686a:	4805      	ldr	r0, [pc, #20]	; (8006880 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800686c:	f7ff f85d 	bl	800592a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006870:	4b02      	ldr	r3, [pc, #8]	; (800687c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006872:	4618      	mov	r0, r3
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000880 	.word	0x20000880
 8006880:	08006a7c 	.word	0x08006a7c

08006884 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	4603      	mov	r3, r0
 800688c:	6039      	str	r1, [r7, #0]
 800688e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	220c      	movs	r2, #12
 8006894:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006896:	4b03      	ldr	r3, [pc, #12]	; (80068a4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	2000013c 	.word	0x2000013c

080068a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80068ae:	4b0f      	ldr	r3, [pc, #60]	; (80068ec <Get_SerialNum+0x44>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80068b4:	4b0e      	ldr	r3, [pc, #56]	; (80068f0 <Get_SerialNum+0x48>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80068ba:	4b0e      	ldr	r3, [pc, #56]	; (80068f4 <Get_SerialNum+0x4c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4413      	add	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d009      	beq.n	80068e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80068ce:	2208      	movs	r2, #8
 80068d0:	4909      	ldr	r1, [pc, #36]	; (80068f8 <Get_SerialNum+0x50>)
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 f814 	bl	8006900 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80068d8:	2204      	movs	r2, #4
 80068da:	4908      	ldr	r1, [pc, #32]	; (80068fc <Get_SerialNum+0x54>)
 80068dc:	68b8      	ldr	r0, [r7, #8]
 80068de:	f000 f80f 	bl	8006900 <IntToUnicode>
  }
}
 80068e2:	bf00      	nop
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	1fff7590 	.word	0x1fff7590
 80068f0:	1fff7594 	.word	0x1fff7594
 80068f4:	1fff7598 	.word	0x1fff7598
 80068f8:	2000014e 	.word	0x2000014e
 80068fc:	2000015e 	.word	0x2000015e

08006900 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	4613      	mov	r3, r2
 800690c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006912:	2300      	movs	r3, #0
 8006914:	75fb      	strb	r3, [r7, #23]
 8006916:	e027      	b.n	8006968 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	0f1b      	lsrs	r3, r3, #28
 800691c:	2b09      	cmp	r3, #9
 800691e:	d80b      	bhi.n	8006938 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	0f1b      	lsrs	r3, r3, #28
 8006924:	b2da      	uxtb	r2, r3
 8006926:	7dfb      	ldrb	r3, [r7, #23]
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	4619      	mov	r1, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	440b      	add	r3, r1
 8006930:	3230      	adds	r2, #48	; 0x30
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	e00a      	b.n	800694e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	0f1b      	lsrs	r3, r3, #28
 800693c:	b2da      	uxtb	r2, r3
 800693e:	7dfb      	ldrb	r3, [r7, #23]
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	4619      	mov	r1, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	440b      	add	r3, r1
 8006948:	3237      	adds	r2, #55	; 0x37
 800694a:	b2d2      	uxtb	r2, r2
 800694c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	011b      	lsls	r3, r3, #4
 8006952:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006954:	7dfb      	ldrb	r3, [r7, #23]
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	3301      	adds	r3, #1
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	4413      	add	r3, r2
 800695e:	2200      	movs	r2, #0
 8006960:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006962:	7dfb      	ldrb	r3, [r7, #23]
 8006964:	3301      	adds	r3, #1
 8006966:	75fb      	strb	r3, [r7, #23]
 8006968:	7dfa      	ldrb	r2, [r7, #23]
 800696a:	79fb      	ldrb	r3, [r7, #7]
 800696c:	429a      	cmp	r2, r3
 800696e:	d3d3      	bcc.n	8006918 <IntToUnicode+0x18>
  }
}
 8006970:	bf00      	nop
 8006972:	bf00      	nop
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
	...

08006980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80069b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006984:	f7ff fa52 	bl	8005e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006988:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800698a:	e003      	b.n	8006994 <LoopCopyDataInit>

0800698c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800698c:	4b0b      	ldr	r3, [pc, #44]	; (80069bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800698e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006990:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006992:	3104      	adds	r1, #4

08006994 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006994:	480a      	ldr	r0, [pc, #40]	; (80069c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006996:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006998:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800699a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800699c:	d3f6      	bcc.n	800698c <CopyDataInit>
	ldr	r2, =_sbss
 800699e:	4a0a      	ldr	r2, [pc, #40]	; (80069c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80069a0:	e002      	b.n	80069a8 <LoopFillZerobss>

080069a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80069a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80069a4:	f842 3b04 	str.w	r3, [r2], #4

080069a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80069a8:	4b08      	ldr	r3, [pc, #32]	; (80069cc <LoopForever+0x16>)
	cmp	r2, r3
 80069aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80069ac:	d3f9      	bcc.n	80069a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80069ae:	f000 f811 	bl	80069d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80069b2:	f7ff f87d 	bl	8005ab0 <main>

080069b6 <LoopForever>:

LoopForever:
    b LoopForever
 80069b6:	e7fe      	b.n	80069b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80069b8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80069bc:	08006ad4 	.word	0x08006ad4
	ldr	r0, =_sdata
 80069c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80069c4:	20000168 	.word	0x20000168
	ldr	r2, =_sbss
 80069c8:	20000168 	.word	0x20000168
	ldr	r3, = _ebss
 80069cc:	20000a80 	.word	0x20000a80

080069d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80069d0:	e7fe      	b.n	80069d0 <ADC1_2_IRQHandler>
	...

080069d4 <__libc_init_array>:
 80069d4:	b570      	push	{r4, r5, r6, lr}
 80069d6:	4d0d      	ldr	r5, [pc, #52]	; (8006a0c <__libc_init_array+0x38>)
 80069d8:	4c0d      	ldr	r4, [pc, #52]	; (8006a10 <__libc_init_array+0x3c>)
 80069da:	1b64      	subs	r4, r4, r5
 80069dc:	10a4      	asrs	r4, r4, #2
 80069de:	2600      	movs	r6, #0
 80069e0:	42a6      	cmp	r6, r4
 80069e2:	d109      	bne.n	80069f8 <__libc_init_array+0x24>
 80069e4:	4d0b      	ldr	r5, [pc, #44]	; (8006a14 <__libc_init_array+0x40>)
 80069e6:	4c0c      	ldr	r4, [pc, #48]	; (8006a18 <__libc_init_array+0x44>)
 80069e8:	f000 f820 	bl	8006a2c <_init>
 80069ec:	1b64      	subs	r4, r4, r5
 80069ee:	10a4      	asrs	r4, r4, #2
 80069f0:	2600      	movs	r6, #0
 80069f2:	42a6      	cmp	r6, r4
 80069f4:	d105      	bne.n	8006a02 <__libc_init_array+0x2e>
 80069f6:	bd70      	pop	{r4, r5, r6, pc}
 80069f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069fc:	4798      	blx	r3
 80069fe:	3601      	adds	r6, #1
 8006a00:	e7ee      	b.n	80069e0 <__libc_init_array+0xc>
 8006a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a06:	4798      	blx	r3
 8006a08:	3601      	adds	r6, #1
 8006a0a:	e7f2      	b.n	80069f2 <__libc_init_array+0x1e>
 8006a0c:	08006acc 	.word	0x08006acc
 8006a10:	08006acc 	.word	0x08006acc
 8006a14:	08006acc 	.word	0x08006acc
 8006a18:	08006ad0 	.word	0x08006ad0

08006a1c <memset>:
 8006a1c:	4402      	add	r2, r0
 8006a1e:	4603      	mov	r3, r0
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d100      	bne.n	8006a26 <memset+0xa>
 8006a24:	4770      	bx	lr
 8006a26:	f803 1b01 	strb.w	r1, [r3], #1
 8006a2a:	e7f9      	b.n	8006a20 <memset+0x4>

08006a2c <_init>:
 8006a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2e:	bf00      	nop
 8006a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a32:	bc08      	pop	{r3}
 8006a34:	469e      	mov	lr, r3
 8006a36:	4770      	bx	lr

08006a38 <_fini>:
 8006a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3a:	bf00      	nop
 8006a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a3e:	bc08      	pop	{r3}
 8006a40:	469e      	mov	lr, r3
 8006a42:	4770      	bx	lr
