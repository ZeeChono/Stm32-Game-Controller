
2021-11-13-Keyboard-Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800a67c  0800a67c  0001a67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a70c  0800a70c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a70c  0800a70c  0001a70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a714  0800a714  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a714  0800a714  0001a714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a718  0800a718  0001a718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a71c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bec  200001d8  0800a8f4  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dc4  0800a8f4  00020dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ddc  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000442b  00000000  00000000  00042fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  00047410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  00048cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc45  00000000  00000000  0004a3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb76  00000000  00000000  0007600d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001029a6  00000000  00000000  00092b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00195529  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006780  00000000  00000000  0019557c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d8 	.word	0x200001d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a664 	.word	0x0800a664

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001dc 	.word	0x200001dc
 80001c4:	0800a664 	.word	0x0800a664

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ca:	2003      	movs	r0, #3
 80004cc:	f001 fb1a 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004d0:	2000      	movs	r0, #0
 80004d2:	f000 f80d 	bl	80004f0 <HAL_InitTick>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d002      	beq.n	80004e2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004dc:	2301      	movs	r3, #1
 80004de:	71fb      	strb	r3, [r7, #7]
 80004e0:	e001      	b.n	80004e6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004e2:	f009 f91d 	bl	8009720 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004e6:	79fb      	ldrb	r3, [r7, #7]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004f8:	2300      	movs	r3, #0
 80004fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <HAL_InitTick+0x6c>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d023      	beq.n	800054c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000504:	4b16      	ldr	r3, [pc, #88]	; (8000560 <HAL_InitTick+0x70>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b14      	ldr	r3, [pc, #80]	; (800055c <HAL_InitTick+0x6c>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	4619      	mov	r1, r3
 800050e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000512:	fbb3 f3f1 	udiv	r3, r3, r1
 8000516:	fbb2 f3f3 	udiv	r3, r2, r3
 800051a:	4618      	mov	r0, r3
 800051c:	f001 fb27 	bl	8001b6e <HAL_SYSTICK_Config>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d10f      	bne.n	8000546 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b0f      	cmp	r3, #15
 800052a:	d809      	bhi.n	8000540 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800052c:	2200      	movs	r2, #0
 800052e:	6879      	ldr	r1, [r7, #4]
 8000530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000534:	f001 faf1 	bl	8001b1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000538:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <HAL_InitTick+0x74>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]
 800053e:	e007      	b.n	8000550 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000540:	2301      	movs	r3, #1
 8000542:	73fb      	strb	r3, [r7, #15]
 8000544:	e004      	b.n	8000550 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	73fb      	strb	r3, [r7, #15]
 800054a:	e001      	b.n	8000550 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800054c:	2301      	movs	r3, #1
 800054e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000550:	7bfb      	ldrb	r3, [r7, #15]
}
 8000552:	4618      	mov	r0, r3
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000004 	.word	0x20000004
 8000560:	20000174 	.word	0x20000174
 8000564:	20000000 	.word	0x20000000

08000568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <HAL_IncTick+0x20>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	461a      	mov	r2, r3
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x24>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4413      	add	r3, r2
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <HAL_IncTick+0x24>)
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000004 	.word	0x20000004
 800058c:	20000210 	.word	0x20000210

08000590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  return uwTick;
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <HAL_GetTick+0x14>)
 8000596:	681b      	ldr	r3, [r3, #0]
}
 8000598:	4618      	mov	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000210 	.word	0x20000210

080005a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b0:	f7ff ffee 	bl	8000590 <HAL_GetTick>
 80005b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005c0:	d005      	beq.n	80005ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <HAL_Delay+0x44>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	461a      	mov	r2, r3
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005ce:	bf00      	nop
 80005d0:	f7ff ffde 	bl	8000590 <HAL_GetTick>
 80005d4:	4602      	mov	r2, r0
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d8f7      	bhi.n	80005d0 <HAL_Delay+0x28>
  {
  }
}
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000004 	.word	0x20000004

080005f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	431a      	orrs	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	609a      	str	r2, [r3, #8]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000616:	b480      	push	{r7}
 8000618:	b083      	sub	sp, #12
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
 800061e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	431a      	orrs	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	609a      	str	r2, [r3, #8]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800064c:	4618      	mov	r0, r3
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000658:	b480      	push	{r7}
 800065a:	b087      	sub	sp, #28
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
 8000664:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	3360      	adds	r3, #96	; 0x60
 800066a:	461a      	mov	r2, r3
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <LL_ADC_SetOffset+0x44>)
 800067a:	4013      	ands	r3, r2
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	430a      	orrs	r2, r1
 8000686:	4313      	orrs	r3, r2
 8000688:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000690:	bf00      	nop
 8000692:	371c      	adds	r7, #28
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	03fff000 	.word	0x03fff000

080006a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3360      	adds	r3, #96	; 0x60
 80006ae:	461a      	mov	r2, r3
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4413      	add	r3, r2
 80006b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3360      	adds	r3, #96	; 0x60
 80006dc:	461a      	mov	r2, r3
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4413      	add	r3, r2
 80006e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	431a      	orrs	r2, r3
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80006f6:	bf00      	nop
 80006f8:	371c      	adds	r7, #28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	68db      	ldr	r3, [r3, #12]
 800070e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000712:	2b00      	cmp	r3, #0
 8000714:	d101      	bne.n	800071a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000716:	2301      	movs	r3, #1
 8000718:	e000      	b.n	800071c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800071a:	2300      	movs	r3, #0
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000728:	b480      	push	{r7}
 800072a:	b087      	sub	sp, #28
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3330      	adds	r3, #48	; 0x30
 8000738:	461a      	mov	r2, r3
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	f003 030c 	and.w	r3, r3, #12
 8000744:	4413      	add	r3, r2
 8000746:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	f003 031f 	and.w	r3, r3, #31
 8000752:	211f      	movs	r1, #31
 8000754:	fa01 f303 	lsl.w	r3, r1, r3
 8000758:	43db      	mvns	r3, r3
 800075a:	401a      	ands	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	0e9b      	lsrs	r3, r3, #26
 8000760:	f003 011f 	and.w	r1, r3, #31
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	f003 031f 	and.w	r3, r3, #31
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	431a      	orrs	r2, r3
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000774:	bf00      	nop
 8000776:	371c      	adds	r7, #28
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000780:	b480      	push	{r7}
 8000782:	b087      	sub	sp, #28
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3314      	adds	r3, #20
 8000790:	461a      	mov	r2, r3
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	0e5b      	lsrs	r3, r3, #25
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	4413      	add	r3, r2
 800079e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	0d1b      	lsrs	r3, r3, #20
 80007a8:	f003 031f 	and.w	r3, r3, #31
 80007ac:	2107      	movs	r1, #7
 80007ae:	fa01 f303 	lsl.w	r3, r1, r3
 80007b2:	43db      	mvns	r3, r3
 80007b4:	401a      	ands	r2, r3
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	0d1b      	lsrs	r3, r3, #20
 80007ba:	f003 031f 	and.w	r3, r3, #31
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	fa01 f303 	lsl.w	r3, r1, r3
 80007c4:	431a      	orrs	r2, r3
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80007ca:	bf00      	nop
 80007cc:	371c      	adds	r7, #28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80007f0:	43db      	mvns	r3, r3
 80007f2:	401a      	ands	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f003 0318 	and.w	r3, r3, #24
 80007fa:	4908      	ldr	r1, [pc, #32]	; (800081c <LL_ADC_SetChannelSingleDiff+0x44>)
 80007fc:	40d9      	lsrs	r1, r3
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	400b      	ands	r3, r1
 8000802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000806:	431a      	orrs	r2, r3
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	0007ffff 	.word	0x0007ffff

08000820 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	f003 031f 	and.w	r3, r3, #31
}
 8000830:	4618      	mov	r0, r3
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800084c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	6093      	str	r3, [r2, #8]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000874:	d101      	bne.n	800087a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000876:	2301      	movs	r3, #1
 8000878:	e000      	b.n	800087c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000898:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800089c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008c4:	d101      	bne.n	80008ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80008c6:	2301      	movs	r3, #1
 80008c8:	e000      	b.n	80008cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80008ca:	2300      	movs	r3, #0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80008e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008ec:	f043 0201 	orr.w	r2, r3, #1
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	2b01      	cmp	r3, #1
 8000912:	d101      	bne.n	8000918 <LL_ADC_IsEnabled+0x18>
 8000914:	2301      	movs	r3, #1
 8000916:	e000      	b.n	800091a <LL_ADC_IsEnabled+0x1a>
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000936:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800093a:	f043 0204 	orr.w	r2, r3, #4
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	2b04      	cmp	r3, #4
 8000960:	d101      	bne.n	8000966 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000962:	2301      	movs	r3, #1
 8000964:	e000      	b.n	8000968 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	f003 0308 	and.w	r3, r3, #8
 8000984:	2b08      	cmp	r3, #8
 8000986:	d101      	bne.n	800098c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000988:	2301      	movs	r3, #1
 800098a:	e000      	b.n	800098e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d101      	bne.n	80009b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e136      	b.n	8000c24 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	691b      	ldr	r3, [r3, #16]
 80009ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d109      	bne.n	80009d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f008 fecf 	bl	8009768 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff3f 	bl	8000860 <LL_ADC_IsDeepPowerDownEnabled>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d004      	beq.n	80009f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff25 	bl	800083c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff5a 	bl	80008b0 <LL_ADC_IsInternalRegulatorEnabled>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d115      	bne.n	8000a2e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ff3e 	bl	8000888 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000a0c:	4b87      	ldr	r3, [pc, #540]	; (8000c2c <HAL_ADC_Init+0x290>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	099b      	lsrs	r3, r3, #6
 8000a12:	4a87      	ldr	r2, [pc, #540]	; (8000c30 <HAL_ADC_Init+0x294>)
 8000a14:	fba2 2303 	umull	r2, r3, r2, r3
 8000a18:	099b      	lsrs	r3, r3, #6
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000a20:	e002      	b.n	8000a28 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1f9      	bne.n	8000a22 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff3c 	bl	80008b0 <LL_ADC_IsInternalRegulatorEnabled>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d10d      	bne.n	8000a5a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a42:	f043 0210 	orr.w	r2, r3, #16
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	f043 0201 	orr.w	r2, r3, #1
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff75 	bl	800094e <LL_ADC_REG_IsConversionOngoing>
 8000a64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f040 80cf 	bne.w	8000c12 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f040 80cb 	bne.w	8000c12 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000a84:	f043 0202 	orr.w	r2, r3, #2
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff35 	bl	8000900 <LL_ADC_IsEnabled>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d115      	bne.n	8000ac8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000a9c:	4865      	ldr	r0, [pc, #404]	; (8000c34 <HAL_ADC_Init+0x298>)
 8000a9e:	f7ff ff2f 	bl	8000900 <LL_ADC_IsEnabled>
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4864      	ldr	r0, [pc, #400]	; (8000c38 <HAL_ADC_Init+0x29c>)
 8000aa6:	f7ff ff2b 	bl	8000900 <LL_ADC_IsEnabled>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	431c      	orrs	r4, r3
 8000aae:	4863      	ldr	r0, [pc, #396]	; (8000c3c <HAL_ADC_Init+0x2a0>)
 8000ab0:	f7ff ff26 	bl	8000900 <LL_ADC_IsEnabled>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4323      	orrs	r3, r4
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d105      	bne.n	8000ac8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	485f      	ldr	r0, [pc, #380]	; (8000c40 <HAL_ADC_Init+0x2a4>)
 8000ac4:	f7ff fd94 	bl	80005f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7e5b      	ldrb	r3, [r3, #25]
 8000acc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ad2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000ad8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000ade:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ae6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d106      	bne.n	8000b04 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afa:	3b01      	subs	r3, #1
 8000afc:	045b      	lsls	r3, r3, #17
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d009      	beq.n	8000b20 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b10:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b18:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	4b47      	ldr	r3, [pc, #284]	; (8000c44 <HAL_ADC_Init+0x2a8>)
 8000b28:	4013      	ands	r3, r2
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	6812      	ldr	r2, [r2, #0]
 8000b2e:	69b9      	ldr	r1, [r7, #24]
 8000b30:	430b      	orrs	r3, r1
 8000b32:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff08 	bl	800094e <LL_ADC_REG_IsConversionOngoing>
 8000b3e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff15 	bl	8000974 <LL_ADC_INJ_IsConversionOngoing>
 8000b4a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d13d      	bne.n	8000bce <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d13a      	bne.n	8000bce <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000b5c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b64:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000b66:	4313      	orrs	r3, r2
 8000b68:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b74:	f023 0302 	bic.w	r3, r3, #2
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	69b9      	ldr	r1, [r7, #24]
 8000b7e:	430b      	orrs	r3, r1
 8000b80:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d118      	bne.n	8000bbe <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000b96:	f023 0304 	bic.w	r3, r3, #4
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000ba2:	4311      	orrs	r1, r2
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000ba8:	4311      	orrs	r1, r2
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f042 0201 	orr.w	r2, r2, #1
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	e007      	b.n	8000bce <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	691a      	ldr	r2, [r3, #16]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 0201 	bic.w	r2, r2, #1
 8000bcc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	691b      	ldr	r3, [r3, #16]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d10c      	bne.n	8000bf0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	f023 010f 	bic.w	r1, r3, #15
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	1e5a      	subs	r2, r3, #1
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	430a      	orrs	r2, r1
 8000bec:	631a      	str	r2, [r3, #48]	; 0x30
 8000bee:	e007      	b.n	8000c00 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f022 020f 	bic.w	r2, r2, #15
 8000bfe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c04:	f023 0303 	bic.w	r3, r3, #3
 8000c08:	f043 0201 	orr.w	r2, r3, #1
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	655a      	str	r2, [r3, #84]	; 0x54
 8000c10:	e007      	b.n	8000c22 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c16:	f043 0210 	orr.w	r2, r3, #16
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000c22:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3724      	adds	r7, #36	; 0x24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	20000174 	.word	0x20000174
 8000c30:	053e2d63 	.word	0x053e2d63
 8000c34:	50040000 	.word	0x50040000
 8000c38:	50040100 	.word	0x50040100
 8000c3c:	50040200 	.word	0x50040200
 8000c40:	50040300 	.word	0x50040300
 8000c44:	fff0c007 	.word	0xfff0c007

08000c48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000c54:	4850      	ldr	r0, [pc, #320]	; (8000d98 <HAL_ADC_Start_DMA+0x150>)
 8000c56:	f7ff fde3 	bl	8000820 <LL_ADC_GetMultimode>
 8000c5a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fe74 	bl	800094e <LL_ADC_REG_IsConversionOngoing>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f040 808e 	bne.w	8000d8a <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d101      	bne.n	8000c7c <HAL_ADC_Start_DMA+0x34>
 8000c78:	2302      	movs	r3, #2
 8000c7a:	e089      	b.n	8000d90 <HAL_ADC_Start_DMA+0x148>
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d005      	beq.n	8000c96 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	2b05      	cmp	r3, #5
 8000c8e:	d002      	beq.n	8000c96 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	2b09      	cmp	r3, #9
 8000c94:	d172      	bne.n	8000d7c <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000c96:	68f8      	ldr	r0, [r7, #12]
 8000c98:	f000 fc98 	bl	80015cc <ADC_Enable>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000ca0:	7dfb      	ldrb	r3, [r7, #23]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d165      	bne.n	8000d72 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000caa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000cae:	f023 0301 	bic.w	r3, r3, #1
 8000cb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a37      	ldr	r2, [pc, #220]	; (8000d9c <HAL_ADC_Start_DMA+0x154>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d002      	beq.n	8000cca <HAL_ADC_Start_DMA+0x82>
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	e000      	b.n	8000ccc <HAL_ADC_Start_DMA+0x84>
 8000cca:	4b35      	ldr	r3, [pc, #212]	; (8000da0 <HAL_ADC_Start_DMA+0x158>)
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	6812      	ldr	r2, [r2, #0]
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d002      	beq.n	8000cda <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d105      	bne.n	8000ce6 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d006      	beq.n	8000d00 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	f023 0206 	bic.w	r2, r3, #6
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	659a      	str	r2, [r3, #88]	; 0x58
 8000cfe:	e002      	b.n	8000d06 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2200      	movs	r2, #0
 8000d04:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	4a26      	ldr	r2, [pc, #152]	; (8000da4 <HAL_ADC_Start_DMA+0x15c>)
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a25      	ldr	r2, [pc, #148]	; (8000da8 <HAL_ADC_Start_DMA+0x160>)
 8000d14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	4a24      	ldr	r2, [pc, #144]	; (8000dac <HAL_ADC_Start_DMA+0x164>)
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	221c      	movs	r2, #28
 8000d24:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f042 0210 	orr.w	r2, r2, #16
 8000d3c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	68da      	ldr	r2, [r3, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f042 0201 	orr.w	r2, r2, #1
 8000d4c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	3340      	adds	r3, #64	; 0x40
 8000d58:	4619      	mov	r1, r3
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f000 ffcb 	bl	8001cf8 <HAL_DMA_Start_IT>
 8000d62:	4603      	mov	r3, r0
 8000d64:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fddb 	bl	8000926 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8000d70:	e00d      	b.n	8000d8e <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8000d7a:	e008      	b.n	8000d8e <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000d88:	e001      	b.n	8000d8e <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	50040300 	.word	0x50040300
 8000d9c:	50040100 	.word	0x50040100
 8000da0:	50040000 	.word	0x50040000
 8000da4:	08001691 	.word	0x08001691
 8000da8:	08001769 	.word	0x08001769
 8000dac:	08001785 	.word	0x08001785

08000db0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0b6      	sub	sp, #216	; 0xd8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d101      	bne.n	8000e0e <HAL_ADC_ConfigChannel+0x22>
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	e3c7      	b.n	800159e <HAL_ADC_ConfigChannel+0x7b2>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fd97 	bl	800094e <LL_ADC_REG_IsConversionOngoing>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f040 83a8 	bne.w	8001578 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b05      	cmp	r3, #5
 8000e2e:	d824      	bhi.n	8000e7a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	3b02      	subs	r3, #2
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d81b      	bhi.n	8000e72 <HAL_ADC_ConfigChannel+0x86>
 8000e3a:	a201      	add	r2, pc, #4	; (adr r2, 8000e40 <HAL_ADC_ConfigChannel+0x54>)
 8000e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e40:	08000e51 	.word	0x08000e51
 8000e44:	08000e59 	.word	0x08000e59
 8000e48:	08000e61 	.word	0x08000e61
 8000e4c:	08000e69 	.word	0x08000e69
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	220c      	movs	r2, #12
 8000e54:	605a      	str	r2, [r3, #4]
          break;
 8000e56:	e011      	b.n	8000e7c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	2212      	movs	r2, #18
 8000e5c:	605a      	str	r2, [r3, #4]
          break;
 8000e5e:	e00d      	b.n	8000e7c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	2218      	movs	r2, #24
 8000e64:	605a      	str	r2, [r3, #4]
          break;
 8000e66:	e009      	b.n	8000e7c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e6e:	605a      	str	r2, [r3, #4]
          break;
 8000e70:	e004      	b.n	8000e7c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	2206      	movs	r2, #6
 8000e76:	605a      	str	r2, [r3, #4]
          break;
 8000e78:	e000      	b.n	8000e7c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8000e7a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	6859      	ldr	r1, [r3, #4]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	f7ff fc4d 	bl	8000728 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fd5b 	bl	800094e <LL_ADC_REG_IsConversionOngoing>
 8000e98:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fd67 	bl	8000974 <LL_ADC_INJ_IsConversionOngoing>
 8000ea6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000eaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 81a6 	bne.w	8001200 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000eb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f040 81a1 	bne.w	8001200 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6818      	ldr	r0, [r3, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	6819      	ldr	r1, [r3, #0]
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	f7ff fc58 	bl	8000780 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	695a      	ldr	r2, [r3, #20]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	08db      	lsrs	r3, r3, #3
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	d00a      	beq.n	8000f08 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6818      	ldr	r0, [r3, #0]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	6919      	ldr	r1, [r3, #16]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000f02:	f7ff fba9 	bl	8000658 <LL_ADC_SetOffset>
 8000f06:	e17b      	b.n	8001200 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fbc6 	bl	80006a0 <LL_ADC_GetOffsetChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10a      	bne.n	8000f34 <HAL_ADC_ConfigChannel+0x148>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fbbb 	bl	80006a0 <LL_ADC_GetOffsetChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	0e9b      	lsrs	r3, r3, #26
 8000f2e:	f003 021f 	and.w	r2, r3, #31
 8000f32:	e01e      	b.n	8000f72 <HAL_ADC_ConfigChannel+0x186>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fbb0 	bl	80006a0 <LL_ADC_GetOffsetChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f4a:	fa93 f3a3 	rbit	r3, r3
 8000f4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000f56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8000f62:	2320      	movs	r3, #32
 8000f64:	e004      	b.n	8000f70 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8000f66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000f6a:	fab3 f383 	clz	r3, r3
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d105      	bne.n	8000f8a <HAL_ADC_ConfigChannel+0x19e>
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	0e9b      	lsrs	r3, r3, #26
 8000f84:	f003 031f 	and.w	r3, r3, #31
 8000f88:	e018      	b.n	8000fbc <HAL_ADC_ConfigChannel+0x1d0>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8000f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8000fa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8000fae:	2320      	movs	r3, #32
 8000fb0:	e004      	b.n	8000fbc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8000fb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000fb6:	fab3 f383 	clz	r3, r3
 8000fba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d106      	bne.n	8000fce <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fb7f 	bl	80006cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fb63 	bl	80006a0 <LL_ADC_GetOffsetChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10a      	bne.n	8000ffa <HAL_ADC_ConfigChannel+0x20e>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fb58 	bl	80006a0 <LL_ADC_GetOffsetChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	0e9b      	lsrs	r3, r3, #26
 8000ff4:	f003 021f 	and.w	r2, r3, #31
 8000ff8:	e01e      	b.n	8001038 <HAL_ADC_ConfigChannel+0x24c>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2101      	movs	r1, #1
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fb4d 	bl	80006a0 <LL_ADC_GetOffsetChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001010:	fa93 f3a3 	rbit	r3, r3
 8001014:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001018:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800101c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001020:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001028:	2320      	movs	r3, #32
 800102a:	e004      	b.n	8001036 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800102c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001030:	fab3 f383 	clz	r3, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001040:	2b00      	cmp	r3, #0
 8001042:	d105      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x264>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	0e9b      	lsrs	r3, r3, #26
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	e018      	b.n	8001082 <HAL_ADC_ConfigChannel+0x296>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800105c:	fa93 f3a3 	rbit	r3, r3
 8001060:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001064:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001068:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800106c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001074:	2320      	movs	r3, #32
 8001076:	e004      	b.n	8001082 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800107c:	fab3 f383 	clz	r3, r3
 8001080:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001082:	429a      	cmp	r2, r3
 8001084:	d106      	bne.n	8001094 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2200      	movs	r2, #0
 800108c:	2101      	movs	r1, #1
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fb1c 	bl	80006cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2102      	movs	r1, #2
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fb00 	bl	80006a0 <LL_ADC_GetOffsetChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10a      	bne.n	80010c0 <HAL_ADC_ConfigChannel+0x2d4>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2102      	movs	r1, #2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff faf5 	bl	80006a0 <LL_ADC_GetOffsetChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	0e9b      	lsrs	r3, r3, #26
 80010ba:	f003 021f 	and.w	r2, r3, #31
 80010be:	e01e      	b.n	80010fe <HAL_ADC_ConfigChannel+0x312>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2102      	movs	r1, #2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff faea 	bl	80006a0 <LL_ADC_GetOffsetChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80010de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80010e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80010ee:	2320      	movs	r3, #32
 80010f0:	e004      	b.n	80010fc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80010f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001106:	2b00      	cmp	r3, #0
 8001108:	d105      	bne.n	8001116 <HAL_ADC_ConfigChannel+0x32a>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	0e9b      	lsrs	r3, r3, #26
 8001110:	f003 031f 	and.w	r3, r3, #31
 8001114:	e016      	b.n	8001144 <HAL_ADC_ConfigChannel+0x358>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001122:	fa93 f3a3 	rbit	r3, r3
 8001126:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001128:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800112a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800112e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001136:	2320      	movs	r3, #32
 8001138:	e004      	b.n	8001144 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800113a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800113e:	fab3 f383 	clz	r3, r3
 8001142:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001144:	429a      	cmp	r2, r3
 8001146:	d106      	bne.n	8001156 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2200      	movs	r2, #0
 800114e:	2102      	movs	r1, #2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fabb 	bl	80006cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2103      	movs	r1, #3
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fa9f 	bl	80006a0 <LL_ADC_GetOffsetChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10a      	bne.n	8001182 <HAL_ADC_ConfigChannel+0x396>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2103      	movs	r1, #3
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fa94 	bl	80006a0 <LL_ADC_GetOffsetChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	0e9b      	lsrs	r3, r3, #26
 800117c:	f003 021f 	and.w	r2, r3, #31
 8001180:	e017      	b.n	80011b2 <HAL_ADC_ConfigChannel+0x3c6>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2103      	movs	r1, #3
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fa89 	bl	80006a0 <LL_ADC_GetOffsetChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001194:	fa93 f3a3 	rbit	r3, r3
 8001198:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800119a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800119c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800119e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80011a4:	2320      	movs	r3, #32
 80011a6:	e003      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80011a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011aa:	fab3 f383 	clz	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <HAL_ADC_ConfigChannel+0x3de>
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	0e9b      	lsrs	r3, r3, #26
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	e011      	b.n	80011ee <HAL_ADC_ConfigChannel+0x402>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011d2:	fa93 f3a3 	rbit	r3, r3
 80011d6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80011d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80011dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80011e2:	2320      	movs	r3, #32
 80011e4:	e003      	b.n	80011ee <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80011e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011e8:	fab3 f383 	clz	r3, r3
 80011ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d106      	bne.n	8001200 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2200      	movs	r2, #0
 80011f8:	2103      	movs	r1, #3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fa66 	bl	80006cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fb7b 	bl	8000900 <LL_ADC_IsEnabled>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	f040 813f 	bne.w	8001490 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	6819      	ldr	r1, [r3, #0]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	461a      	mov	r2, r3
 8001220:	f7ff fada 	bl	80007d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	4a8e      	ldr	r2, [pc, #568]	; (8001464 <HAL_ADC_ConfigChannel+0x678>)
 800122a:	4293      	cmp	r3, r2
 800122c:	f040 8130 	bne.w	8001490 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10b      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x46c>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	0e9b      	lsrs	r3, r3, #26
 8001246:	3301      	adds	r3, #1
 8001248:	f003 031f 	and.w	r3, r3, #31
 800124c:	2b09      	cmp	r3, #9
 800124e:	bf94      	ite	ls
 8001250:	2301      	movls	r3, #1
 8001252:	2300      	movhi	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	e019      	b.n	800128c <HAL_ADC_ConfigChannel+0x4a0>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001260:	fa93 f3a3 	rbit	r3, r3
 8001264:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001268:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800126a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001270:	2320      	movs	r3, #32
 8001272:	e003      	b.n	800127c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001274:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001276:	fab3 f383 	clz	r3, r3
 800127a:	b2db      	uxtb	r3, r3
 800127c:	3301      	adds	r3, #1
 800127e:	f003 031f 	and.w	r3, r3, #31
 8001282:	2b09      	cmp	r3, #9
 8001284:	bf94      	ite	ls
 8001286:	2301      	movls	r3, #1
 8001288:	2300      	movhi	r3, #0
 800128a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800128c:	2b00      	cmp	r3, #0
 800128e:	d079      	beq.n	8001384 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001298:	2b00      	cmp	r3, #0
 800129a:	d107      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x4c0>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0e9b      	lsrs	r3, r3, #26
 80012a2:	3301      	adds	r3, #1
 80012a4:	069b      	lsls	r3, r3, #26
 80012a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012aa:	e015      	b.n	80012d8 <HAL_ADC_ConfigChannel+0x4ec>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80012ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80012be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80012c4:	2320      	movs	r3, #32
 80012c6:	e003      	b.n	80012d0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80012c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ca:	fab3 f383 	clz	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	3301      	adds	r3, #1
 80012d2:	069b      	lsls	r3, r3, #26
 80012d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d109      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x50c>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	0e9b      	lsrs	r3, r3, #26
 80012ea:	3301      	adds	r3, #1
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	2101      	movs	r1, #1
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	e017      	b.n	8001328 <HAL_ADC_ConfigChannel+0x53c>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001300:	fa93 f3a3 	rbit	r3, r3
 8001304:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001308:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800130a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001310:	2320      	movs	r3, #32
 8001312:	e003      	b.n	800131c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001316:	fab3 f383 	clz	r3, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	3301      	adds	r3, #1
 800131e:	f003 031f 	and.w	r3, r3, #31
 8001322:	2101      	movs	r1, #1
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	ea42 0103 	orr.w	r1, r2, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10a      	bne.n	800134e <HAL_ADC_ConfigChannel+0x562>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	0e9b      	lsrs	r3, r3, #26
 800133e:	3301      	adds	r3, #1
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	051b      	lsls	r3, r3, #20
 800134c:	e018      	b.n	8001380 <HAL_ADC_ConfigChannel+0x594>
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001356:	fa93 f3a3 	rbit	r3, r3
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800135c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800135e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001366:	2320      	movs	r3, #32
 8001368:	e003      	b.n	8001372 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800136a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800136c:	fab3 f383 	clz	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	3301      	adds	r3, #1
 8001374:	f003 021f 	and.w	r2, r3, #31
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001380:	430b      	orrs	r3, r1
 8001382:	e080      	b.n	8001486 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800138c:	2b00      	cmp	r3, #0
 800138e:	d107      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x5b4>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	0e9b      	lsrs	r3, r3, #26
 8001396:	3301      	adds	r3, #1
 8001398:	069b      	lsls	r3, r3, #26
 800139a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800139e:	e015      	b.n	80013cc <HAL_ADC_ConfigChannel+0x5e0>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a8:	fa93 f3a3 	rbit	r3, r3
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80013ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80013b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80013b8:	2320      	movs	r3, #32
 80013ba:	e003      	b.n	80013c4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80013bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013be:	fab3 f383 	clz	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	3301      	adds	r3, #1
 80013c6:	069b      	lsls	r3, r3, #26
 80013c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d109      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x600>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	0e9b      	lsrs	r3, r3, #26
 80013de:	3301      	adds	r3, #1
 80013e0:	f003 031f 	and.w	r3, r3, #31
 80013e4:	2101      	movs	r1, #1
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	e017      	b.n	800141c <HAL_ADC_ConfigChannel+0x630>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	fa93 f3a3 	rbit	r3, r3
 80013f8:	61fb      	str	r3, [r7, #28]
  return result;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001404:	2320      	movs	r3, #32
 8001406:	e003      	b.n	8001410 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	fab3 f383 	clz	r3, r3
 800140e:	b2db      	uxtb	r3, r3
 8001410:	3301      	adds	r3, #1
 8001412:	f003 031f 	and.w	r3, r3, #31
 8001416:	2101      	movs	r1, #1
 8001418:	fa01 f303 	lsl.w	r3, r1, r3
 800141c:	ea42 0103 	orr.w	r1, r2, r3
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10d      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x65c>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	0e9b      	lsrs	r3, r3, #26
 8001432:	3301      	adds	r3, #1
 8001434:	f003 021f 	and.w	r2, r3, #31
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	3b1e      	subs	r3, #30
 8001440:	051b      	lsls	r3, r3, #20
 8001442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001446:	e01d      	b.n	8001484 <HAL_ADC_ConfigChannel+0x698>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	fa93 f3a3 	rbit	r3, r3
 8001454:	613b      	str	r3, [r7, #16]
  return result;
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d103      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001460:	2320      	movs	r3, #32
 8001462:	e005      	b.n	8001470 <HAL_ADC_ConfigChannel+0x684>
 8001464:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fab3 f383 	clz	r3, r3
 800146e:	b2db      	uxtb	r3, r3
 8001470:	3301      	adds	r3, #1
 8001472:	f003 021f 	and.w	r2, r3, #31
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	3b1e      	subs	r3, #30
 800147e:	051b      	lsls	r3, r3, #20
 8001480:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001484:	430b      	orrs	r3, r1
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	6892      	ldr	r2, [r2, #8]
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff f978 	bl	8000780 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d07a      	beq.n	8001592 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800149c:	4843      	ldr	r0, [pc, #268]	; (80015ac <HAL_ADC_ConfigChannel+0x7c0>)
 800149e:	f7ff f8cd 	bl	800063c <LL_ADC_GetCommonPathInternalCh>
 80014a2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a41      	ldr	r2, [pc, #260]	; (80015b0 <HAL_ADC_ConfigChannel+0x7c4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d12c      	bne.n	800150a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80014b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80014b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d126      	bne.n	800150a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a3c      	ldr	r2, [pc, #240]	; (80015b4 <HAL_ADC_ConfigChannel+0x7c8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d004      	beq.n	80014d0 <HAL_ADC_ConfigChannel+0x6e4>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a3b      	ldr	r2, [pc, #236]	; (80015b8 <HAL_ADC_ConfigChannel+0x7cc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d15d      	bne.n	800158c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80014d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014d8:	4619      	mov	r1, r3
 80014da:	4834      	ldr	r0, [pc, #208]	; (80015ac <HAL_ADC_ConfigChannel+0x7c0>)
 80014dc:	f7ff f89b 	bl	8000616 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014e0:	4b36      	ldr	r3, [pc, #216]	; (80015bc <HAL_ADC_ConfigChannel+0x7d0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	4a36      	ldr	r2, [pc, #216]	; (80015c0 <HAL_ADC_ConfigChannel+0x7d4>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	099b      	lsrs	r3, r3, #6
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014fa:	e002      	b.n	8001502 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3b01      	subs	r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f9      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001508:	e040      	b.n	800158c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a2d      	ldr	r2, [pc, #180]	; (80015c4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d118      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x75a>
 8001514:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d112      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a23      	ldr	r2, [pc, #140]	; (80015b4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d004      	beq.n	8001534 <HAL_ADC_ConfigChannel+0x748>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a22      	ldr	r2, [pc, #136]	; (80015b8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d12d      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001534:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001538:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800153c:	4619      	mov	r1, r3
 800153e:	481b      	ldr	r0, [pc, #108]	; (80015ac <HAL_ADC_ConfigChannel+0x7c0>)
 8001540:	f7ff f869 	bl	8000616 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001544:	e024      	b.n	8001590 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a1f      	ldr	r2, [pc, #124]	; (80015c8 <HAL_ADC_ConfigChannel+0x7dc>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d120      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001550:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d11a      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d115      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001566:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800156a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800156e:	4619      	mov	r1, r3
 8001570:	480e      	ldr	r0, [pc, #56]	; (80015ac <HAL_ADC_ConfigChannel+0x7c0>)
 8001572:	f7ff f850 	bl	8000616 <LL_ADC_SetCommonPathInternalCh>
 8001576:	e00c      	b.n	8001592 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157c:	f043 0220 	orr.w	r2, r3, #32
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800158a:	e002      	b.n	8001592 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800158c:	bf00      	nop
 800158e:	e000      	b.n	8001592 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001590:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800159a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800159e:	4618      	mov	r0, r3
 80015a0:	37d8      	adds	r7, #216	; 0xd8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	80080000 	.word	0x80080000
 80015ac:	50040300 	.word	0x50040300
 80015b0:	c7520000 	.word	0xc7520000
 80015b4:	50040000 	.word	0x50040000
 80015b8:	50040200 	.word	0x50040200
 80015bc:	20000174 	.word	0x20000174
 80015c0:	053e2d63 	.word	0x053e2d63
 80015c4:	cb840000 	.word	0xcb840000
 80015c8:	80000001 	.word	0x80000001

080015cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff f991 	bl	8000900 <LL_ADC_IsEnabled>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d14d      	bne.n	8001680 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	4b28      	ldr	r3, [pc, #160]	; (800168c <ADC_Enable+0xc0>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00d      	beq.n	800160e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f6:	f043 0210 	orr.w	r2, r3, #16
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	f043 0201 	orr.w	r2, r3, #1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e039      	b.n	8001682 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff f960 	bl	80008d8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001618:	f7fe ffba 	bl	8000590 <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800161e:	e028      	b.n	8001672 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff f96b 	bl	8000900 <LL_ADC_IsEnabled>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d104      	bne.n	800163a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff f94f 	bl	80008d8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800163a:	f7fe ffa9 	bl	8000590 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d914      	bls.n	8001672 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b01      	cmp	r3, #1
 8001654:	d00d      	beq.n	8001672 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165a:	f043 0210 	orr.w	r2, r3, #16
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	f043 0201 	orr.w	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e007      	b.n	8001682 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b01      	cmp	r3, #1
 800167e:	d1cf      	bne.n	8001620 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	8000003f 	.word	0x8000003f

08001690 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d14b      	bne.n	8001742 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d021      	beq.n	8001708 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff f81a 	bl	8000702 <LL_ADC_REG_IsTriggerSourceSWStart>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d032      	beq.n	800173a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d12b      	bne.n	800173a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d11f      	bne.n	800173a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fe:	f043 0201 	orr.w	r2, r3, #1
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	655a      	str	r2, [r3, #84]	; 0x54
 8001706:	e018      	b.n	800173a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d111      	bne.n	800173a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d105      	bne.n	800173a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001732:	f043 0201 	orr.w	r2, r3, #1
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f7ff fb38 	bl	8000db0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001740:	e00e      	b.n	8001760 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f7ff fb42 	bl	8000dd8 <HAL_ADC_ErrorCallback>
}
 8001754:	e004      	b.n	8001760 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	4798      	blx	r3
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f7ff fb24 	bl	8000dc4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001796:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	f043 0204 	orr.w	r2, r3, #4
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f7ff fb14 	bl	8000dd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <LL_ADC_IsEnabled>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <LL_ADC_IsEnabled+0x18>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <LL_ADC_IsEnabled+0x1a>
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <LL_ADC_REG_IsConversionOngoing>:
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d101      	bne.n	80017f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b09f      	sub	sp, #124	; 0x7c
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800181e:	2302      	movs	r3, #2
 8001820:	e093      	b.n	800194a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800182a:	2300      	movs	r3, #0
 800182c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800182e:	2300      	movs	r3, #0
 8001830:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a47      	ldr	r2, [pc, #284]	; (8001954 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d102      	bne.n	8001842 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800183c:	4b46      	ldr	r3, [pc, #280]	; (8001958 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	e001      	b.n	8001846 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10b      	bne.n	8001864 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001850:	f043 0220 	orr.w	r2, r3, #32
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e072      	b.n	800194a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ffb9 	bl	80017de <LL_ADC_REG_IsConversionOngoing>
 800186c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ffb3 	bl	80017de <LL_ADC_REG_IsConversionOngoing>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d154      	bne.n	8001928 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800187e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001880:	2b00      	cmp	r3, #0
 8001882:	d151      	bne.n	8001928 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001884:	4b35      	ldr	r3, [pc, #212]	; (800195c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001886:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d02c      	beq.n	80018ea <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6859      	ldr	r1, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018a2:	035b      	lsls	r3, r3, #13
 80018a4:	430b      	orrs	r3, r1
 80018a6:	431a      	orrs	r2, r3
 80018a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018ac:	4829      	ldr	r0, [pc, #164]	; (8001954 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80018ae:	f7ff ff83 	bl	80017b8 <LL_ADC_IsEnabled>
 80018b2:	4604      	mov	r4, r0
 80018b4:	4828      	ldr	r0, [pc, #160]	; (8001958 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80018b6:	f7ff ff7f 	bl	80017b8 <LL_ADC_IsEnabled>
 80018ba:	4603      	mov	r3, r0
 80018bc:	431c      	orrs	r4, r3
 80018be:	4828      	ldr	r0, [pc, #160]	; (8001960 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80018c0:	f7ff ff7a 	bl	80017b8 <LL_ADC_IsEnabled>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4323      	orrs	r3, r4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d137      	bne.n	800193c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80018cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80018d4:	f023 030f 	bic.w	r3, r3, #15
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	6811      	ldr	r1, [r2, #0]
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	6892      	ldr	r2, [r2, #8]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	431a      	orrs	r2, r3
 80018e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018e6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80018e8:	e028      	b.n	800193c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80018ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018f4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018f6:	4817      	ldr	r0, [pc, #92]	; (8001954 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80018f8:	f7ff ff5e 	bl	80017b8 <LL_ADC_IsEnabled>
 80018fc:	4604      	mov	r4, r0
 80018fe:	4816      	ldr	r0, [pc, #88]	; (8001958 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001900:	f7ff ff5a 	bl	80017b8 <LL_ADC_IsEnabled>
 8001904:	4603      	mov	r3, r0
 8001906:	431c      	orrs	r4, r3
 8001908:	4815      	ldr	r0, [pc, #84]	; (8001960 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800190a:	f7ff ff55 	bl	80017b8 <LL_ADC_IsEnabled>
 800190e:	4603      	mov	r3, r0
 8001910:	4323      	orrs	r3, r4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d112      	bne.n	800193c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800191e:	f023 030f 	bic.w	r3, r3, #15
 8001922:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001924:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001926:	e009      	b.n	800193c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192c:	f043 0220 	orr.w	r2, r3, #32
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800193a:	e000      	b.n	800193e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800193c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001946:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800194a:	4618      	mov	r0, r3
 800194c:	377c      	adds	r7, #124	; 0x7c
 800194e:	46bd      	mov	sp, r7
 8001950:	bd90      	pop	{r4, r7, pc}
 8001952:	bf00      	nop
 8001954:	50040000 	.word	0x50040000
 8001958:	50040100 	.word	0x50040100
 800195c:	50040300 	.word	0x50040300
 8001960:	50040200 	.word	0x50040200

08001964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800198c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001996:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <__NVIC_GetPriorityGrouping+0x18>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	f003 0307 	and.w	r3, r3, #7
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db0b      	blt.n	80019f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	4907      	ldr	r1, [pc, #28]	; (8001a00 <__NVIC_EnableIRQ+0x38>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	2001      	movs	r0, #1
 80019ea:	fa00 f202 	lsl.w	r2, r0, r2
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad0:	d301      	bcc.n	8001ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00f      	b.n	8001af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <SysTick_Config+0x40>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ade:	210f      	movs	r1, #15
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ae4:	f7ff ff8e 	bl	8001a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <SysTick_Config+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <SysTick_Config+0x40>)
 8001af0:	2207      	movs	r2, #7
 8001af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	e000e010 	.word	0xe000e010

08001b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff29 	bl	8001964 <__NVIC_SetPriorityGrouping>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2c:	f7ff ff3e 	bl	80019ac <__NVIC_GetPriorityGrouping>
 8001b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	6978      	ldr	r0, [r7, #20]
 8001b38:	f7ff ff8e 	bl	8001a58 <NVIC_EncodePriority>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff5d 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff31 	bl	80019c8 <__NVIC_EnableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ffa2 	bl	8001ac0 <SysTick_Config>
 8001b7c:	4603      	mov	r3, r0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e098      	b.n	8001ccc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4b4d      	ldr	r3, [pc, #308]	; (8001cd8 <HAL_DMA_Init+0x150>)
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d80f      	bhi.n	8001bc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <HAL_DMA_Init+0x154>)
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a4b      	ldr	r2, [pc, #300]	; (8001ce0 <HAL_DMA_Init+0x158>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	009a      	lsls	r2, r3, #2
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a48      	ldr	r2, [pc, #288]	; (8001ce4 <HAL_DMA_Init+0x15c>)
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40
 8001bc4:	e00e      	b.n	8001be4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b46      	ldr	r3, [pc, #280]	; (8001ce8 <HAL_DMA_Init+0x160>)
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a43      	ldr	r2, [pc, #268]	; (8001ce0 <HAL_DMA_Init+0x158>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	009a      	lsls	r2, r3, #2
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a42      	ldr	r2, [pc, #264]	; (8001cec <HAL_DMA_Init+0x164>)
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c3e:	d039      	beq.n	8001cb4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	4a27      	ldr	r2, [pc, #156]	; (8001ce4 <HAL_DMA_Init+0x15c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d11a      	bne.n	8001c80 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c4a:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <HAL_DMA_Init+0x168>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f003 031c 	and.w	r3, r3, #28
 8001c56:	210f      	movs	r1, #15
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	4924      	ldr	r1, [pc, #144]	; (8001cf0 <HAL_DMA_Init+0x168>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c64:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <HAL_DMA_Init+0x168>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c70:	f003 031c 	and.w	r3, r3, #28
 8001c74:	fa01 f303 	lsl.w	r3, r1, r3
 8001c78:	491d      	ldr	r1, [pc, #116]	; (8001cf0 <HAL_DMA_Init+0x168>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]
 8001c7e:	e019      	b.n	8001cb4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c80:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <HAL_DMA_Init+0x16c>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	f003 031c 	and.w	r3, r3, #28
 8001c8c:	210f      	movs	r1, #15
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	4917      	ldr	r1, [pc, #92]	; (8001cf4 <HAL_DMA_Init+0x16c>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <HAL_DMA_Init+0x16c>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6859      	ldr	r1, [r3, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f003 031c 	and.w	r3, r3, #28
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	4911      	ldr	r1, [pc, #68]	; (8001cf4 <HAL_DMA_Init+0x16c>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	40020407 	.word	0x40020407
 8001cdc:	bffdfff8 	.word	0xbffdfff8
 8001ce0:	cccccccd 	.word	0xcccccccd
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	bffdfbf8 	.word	0xbffdfbf8
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	400200a8 	.word	0x400200a8
 8001cf4:	400204a8 	.word	0x400204a8

08001cf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_DMA_Start_IT+0x20>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e04b      	b.n	8001db0 <HAL_DMA_Start_IT+0xb8>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d13a      	bne.n	8001da2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 f8e0 	bl	8001f16 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d008      	beq.n	8001d70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 020e 	orr.w	r2, r2, #14
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	e00f      	b.n	8001d90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0204 	bic.w	r2, r2, #4
 8001d7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 020a 	orr.w	r2, r2, #10
 8001d8e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	e005      	b.n	8001dae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001daa:	2302      	movs	r3, #2
 8001dac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	f003 031c 	and.w	r3, r3, #28
 8001dd8:	2204      	movs	r2, #4
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d026      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x7a>
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d021      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d107      	bne.n	8001e0c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0204 	bic.w	r2, r2, #4
 8001e0a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e10:	f003 021c 	and.w	r2, r3, #28
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	2104      	movs	r1, #4
 8001e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d071      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001e30:	e06c      	b.n	8001f0c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f003 031c 	and.w	r3, r3, #28
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d02e      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0xec>
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d029      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10b      	bne.n	8001e76 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 020a 	bic.w	r2, r2, #10
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f003 021c 	and.w	r2, r3, #28
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	2102      	movs	r1, #2
 8001e84:	fa01 f202 	lsl.w	r2, r1, r2
 8001e88:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d038      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ea2:	e033      	b.n	8001f0c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea8:	f003 031c 	and.w	r3, r3, #28
 8001eac:	2208      	movs	r2, #8
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d02a      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x156>
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d025      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 020e 	bic.w	r2, r2, #14
 8001ed0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f003 021c 	and.w	r2, r3, #28
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	2101      	movs	r1, #1
 8001ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d004      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
}
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b085      	sub	sp, #20
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	f003 021c 	and.w	r2, r3, #28
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	2101      	movs	r1, #1
 8001f32:	fa01 f202 	lsl.w	r2, r1, r2
 8001f36:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b10      	cmp	r3, #16
 8001f46:	d108      	bne.n	8001f5a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f58:	e007      	b.n	8001f6a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	60da      	str	r2, [r3, #12]
}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f86:	e17f      	b.n	8002288 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	4013      	ands	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8171 	beq.w	8002282 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d00b      	beq.n	8001fc0 <HAL_GPIO_Init+0x48>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d007      	beq.n	8001fc0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fb4:	2b11      	cmp	r3, #17
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b12      	cmp	r3, #18
 8001fbe:	d130      	bne.n	8002022 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	f003 0201 	and.w	r2, r3, #1
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b03      	cmp	r3, #3
 800202c:	d118      	bne.n	8002060 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002034:	2201      	movs	r2, #1
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	08db      	lsrs	r3, r3, #3
 800204a:	f003 0201 	and.w	r2, r3, #1
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x128>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b12      	cmp	r3, #18
 800209e:	d123      	bne.n	80020e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	08da      	lsrs	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3208      	adds	r2, #8
 80020a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	08da      	lsrs	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3208      	adds	r2, #8
 80020e2:	6939      	ldr	r1, [r7, #16]
 80020e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0203 	and.w	r2, r3, #3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80ac 	beq.w	8002282 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x330>)
 800212c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x330>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6613      	str	r3, [r2, #96]	; 0x60
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x330>)
 8002138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x334>)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800216c:	d025      	beq.n	80021ba <HAL_GPIO_Init+0x242>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4f      	ldr	r2, [pc, #316]	; (80022b0 <HAL_GPIO_Init+0x338>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01f      	beq.n	80021b6 <HAL_GPIO_Init+0x23e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4e      	ldr	r2, [pc, #312]	; (80022b4 <HAL_GPIO_Init+0x33c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d019      	beq.n	80021b2 <HAL_GPIO_Init+0x23a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4d      	ldr	r2, [pc, #308]	; (80022b8 <HAL_GPIO_Init+0x340>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d013      	beq.n	80021ae <HAL_GPIO_Init+0x236>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4c      	ldr	r2, [pc, #304]	; (80022bc <HAL_GPIO_Init+0x344>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00d      	beq.n	80021aa <HAL_GPIO_Init+0x232>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4b      	ldr	r2, [pc, #300]	; (80022c0 <HAL_GPIO_Init+0x348>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <HAL_GPIO_Init+0x22e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4a      	ldr	r2, [pc, #296]	; (80022c4 <HAL_GPIO_Init+0x34c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_GPIO_Init+0x22a>
 800219e:	2306      	movs	r3, #6
 80021a0:	e00c      	b.n	80021bc <HAL_GPIO_Init+0x244>
 80021a2:	2307      	movs	r3, #7
 80021a4:	e00a      	b.n	80021bc <HAL_GPIO_Init+0x244>
 80021a6:	2305      	movs	r3, #5
 80021a8:	e008      	b.n	80021bc <HAL_GPIO_Init+0x244>
 80021aa:	2304      	movs	r3, #4
 80021ac:	e006      	b.n	80021bc <HAL_GPIO_Init+0x244>
 80021ae:	2303      	movs	r3, #3
 80021b0:	e004      	b.n	80021bc <HAL_GPIO_Init+0x244>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e002      	b.n	80021bc <HAL_GPIO_Init+0x244>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_GPIO_Init+0x244>
 80021ba:	2300      	movs	r3, #0
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	f002 0203 	and.w	r2, r2, #3
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	4093      	lsls	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021cc:	4937      	ldr	r1, [pc, #220]	; (80022ac <HAL_GPIO_Init+0x334>)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_GPIO_Init+0x350>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021fe:	4a32      	ldr	r2, [pc, #200]	; (80022c8 <HAL_GPIO_Init+0x350>)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002204:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <HAL_GPIO_Init+0x350>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43db      	mvns	r3, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002228:	4a27      	ldr	r2, [pc, #156]	; (80022c8 <HAL_GPIO_Init+0x350>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800222e:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <HAL_GPIO_Init+0x350>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002252:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <HAL_GPIO_Init+0x350>)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002258:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_GPIO_Init+0x350>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800227c:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <HAL_GPIO_Init+0x350>)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3301      	adds	r3, #1
 8002286:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	f47f ae78 	bne.w	8001f88 <HAL_GPIO_Init+0x10>
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	371c      	adds	r7, #28
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40010000 	.word	0x40010000
 80022b0:	48000400 	.word	0x48000400
 80022b4:	48000800 	.word	0x48000800
 80022b8:	48000c00 	.word	0x48000c00
 80022bc:	48001000 	.word	0x48001000
 80022c0:	48001400 	.word	0x48001400
 80022c4:	48001800 	.word	0x48001800
 80022c8:	40010400 	.word	0x40010400

080022cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80022da:	e0cd      	b.n	8002478 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80022dc:	2201      	movs	r2, #1
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80c0 	beq.w	8002472 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80022f2:	4a68      	ldr	r2, [pc, #416]	; (8002494 <HAL_GPIO_DeInit+0x1c8>)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	220f      	movs	r2, #15
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800231a:	d025      	beq.n	8002368 <HAL_GPIO_DeInit+0x9c>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a5e      	ldr	r2, [pc, #376]	; (8002498 <HAL_GPIO_DeInit+0x1cc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d01f      	beq.n	8002364 <HAL_GPIO_DeInit+0x98>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a5d      	ldr	r2, [pc, #372]	; (800249c <HAL_GPIO_DeInit+0x1d0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d019      	beq.n	8002360 <HAL_GPIO_DeInit+0x94>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a5c      	ldr	r2, [pc, #368]	; (80024a0 <HAL_GPIO_DeInit+0x1d4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d013      	beq.n	800235c <HAL_GPIO_DeInit+0x90>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a5b      	ldr	r2, [pc, #364]	; (80024a4 <HAL_GPIO_DeInit+0x1d8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00d      	beq.n	8002358 <HAL_GPIO_DeInit+0x8c>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a5a      	ldr	r2, [pc, #360]	; (80024a8 <HAL_GPIO_DeInit+0x1dc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d007      	beq.n	8002354 <HAL_GPIO_DeInit+0x88>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a59      	ldr	r2, [pc, #356]	; (80024ac <HAL_GPIO_DeInit+0x1e0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d101      	bne.n	8002350 <HAL_GPIO_DeInit+0x84>
 800234c:	2306      	movs	r3, #6
 800234e:	e00c      	b.n	800236a <HAL_GPIO_DeInit+0x9e>
 8002350:	2307      	movs	r3, #7
 8002352:	e00a      	b.n	800236a <HAL_GPIO_DeInit+0x9e>
 8002354:	2305      	movs	r3, #5
 8002356:	e008      	b.n	800236a <HAL_GPIO_DeInit+0x9e>
 8002358:	2304      	movs	r3, #4
 800235a:	e006      	b.n	800236a <HAL_GPIO_DeInit+0x9e>
 800235c:	2303      	movs	r3, #3
 800235e:	e004      	b.n	800236a <HAL_GPIO_DeInit+0x9e>
 8002360:	2302      	movs	r3, #2
 8002362:	e002      	b.n	800236a <HAL_GPIO_DeInit+0x9e>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_GPIO_DeInit+0x9e>
 8002368:	2300      	movs	r3, #0
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	f002 0203 	and.w	r2, r2, #3
 8002370:	0092      	lsls	r2, r2, #2
 8002372:	4093      	lsls	r3, r2
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	429a      	cmp	r2, r3
 8002378:	d132      	bne.n	80023e0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800237a:	4b4d      	ldr	r3, [pc, #308]	; (80024b0 <HAL_GPIO_DeInit+0x1e4>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	494b      	ldr	r1, [pc, #300]	; (80024b0 <HAL_GPIO_DeInit+0x1e4>)
 8002384:	4013      	ands	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002388:	4b49      	ldr	r3, [pc, #292]	; (80024b0 <HAL_GPIO_DeInit+0x1e4>)
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	4947      	ldr	r1, [pc, #284]	; (80024b0 <HAL_GPIO_DeInit+0x1e4>)
 8002392:	4013      	ands	r3, r2
 8002394:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002396:	4b46      	ldr	r3, [pc, #280]	; (80024b0 <HAL_GPIO_DeInit+0x1e4>)
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	43db      	mvns	r3, r3
 800239e:	4944      	ldr	r1, [pc, #272]	; (80024b0 <HAL_GPIO_DeInit+0x1e4>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80023a4:	4b42      	ldr	r3, [pc, #264]	; (80024b0 <HAL_GPIO_DeInit+0x1e4>)
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	4940      	ldr	r1, [pc, #256]	; (80024b0 <HAL_GPIO_DeInit+0x1e4>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	220f      	movs	r2, #15
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80023c2:	4a34      	ldr	r2, [pc, #208]	; (8002494 <HAL_GPIO_DeInit+0x1c8>)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	3302      	adds	r3, #2
 80023ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	43da      	mvns	r2, r3
 80023d2:	4830      	ldr	r0, [pc, #192]	; (8002494 <HAL_GPIO_DeInit+0x1c8>)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	400a      	ands	r2, r1
 80023da:	3302      	adds	r3, #2
 80023dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	2103      	movs	r1, #3
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	220f      	movs	r2, #15
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	08d2      	lsrs	r2, r2, #3
 8002414:	4019      	ands	r1, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3208      	adds	r2, #8
 800241a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2103      	movs	r1, #3
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	401a      	ands	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	2101      	movs	r1, #1
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	401a      	ands	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	2103      	movs	r1, #3
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	401a      	ands	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002462:	2101      	movs	r1, #1
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	401a      	ands	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	3301      	adds	r3, #1
 8002476:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	f47f af2b 	bne.w	80022dc <HAL_GPIO_DeInit+0x10>
  }
}
 8002486:	bf00      	nop
 8002488:	bf00      	nop
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40010000 	.word	0x40010000
 8002498:	48000400 	.word	0x48000400
 800249c:	48000800 	.word	0x48000800
 80024a0:	48000c00 	.word	0x48000c00
 80024a4:	48001000 	.word	0x48001000
 80024a8:	48001400 	.word	0x48001400
 80024ac:	48001800 	.word	0x48001800
 80024b0:	40010400 	.word	0x40010400

080024b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	887b      	ldrh	r3, [r7, #2]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	e001      	b.n	80024d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	807b      	strh	r3, [r7, #2]
 80024f0:	4613      	mov	r3, r2
 80024f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f4:	787b      	ldrb	r3, [r7, #1]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024fa:	887a      	ldrh	r2, [r7, #2]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002500:	e002      	b.n	8002508 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800251e:	4b08      	ldr	r3, [pc, #32]	; (8002540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d006      	beq.n	8002538 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800252a:	4a05      	ldr	r2, [pc, #20]	; (8002540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	4618      	mov	r0, r3
 8002534:	f006 fef0 	bl	8009318 <HAL_GPIO_EXTI_Callback>
  }
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40010400 	.word	0x40010400

08002544 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e081      	b.n	800265a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f007 f96a 	bl	8009844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2224      	movs	r2, #36	; 0x24
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002594:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	e006      	b.n	80025cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d104      	bne.n	80025de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002600:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	ea42 0103 	orr.w	r1, r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	021a      	lsls	r2, r3, #8
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69d9      	ldr	r1, [r3, #28]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1a      	ldr	r2, [r3, #32]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e021      	b.n	80026b8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2224      	movs	r2, #36	; 0x24
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f007 f937 	bl	8009900 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	817b      	strh	r3, [r7, #10]
 80026d2:	460b      	mov	r3, r1
 80026d4:	813b      	strh	r3, [r7, #8]
 80026d6:	4613      	mov	r3, r2
 80026d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b20      	cmp	r3, #32
 80026e4:	f040 80f9 	bne.w	80028da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_I2C_Mem_Write+0x34>
 80026ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d105      	bne.n	8002700 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0ed      	b.n	80028dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_I2C_Mem_Write+0x4e>
 800270a:	2302      	movs	r3, #2
 800270c:	e0e6      	b.n	80028dc <HAL_I2C_Mem_Write+0x21c>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002716:	f7fd ff3b 	bl	8000590 <HAL_GetTick>
 800271a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2319      	movs	r3, #25
 8002722:	2201      	movs	r2, #1
 8002724:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fac3 	bl	8002cb4 <I2C_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0d1      	b.n	80028dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2221      	movs	r2, #33	; 0x21
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2240      	movs	r2, #64	; 0x40
 8002744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a3a      	ldr	r2, [r7, #32]
 8002752:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002758:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002760:	88f8      	ldrh	r0, [r7, #6]
 8002762:	893a      	ldrh	r2, [r7, #8]
 8002764:	8979      	ldrh	r1, [r7, #10]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	4603      	mov	r3, r0
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f9d3 	bl	8002b1c <I2C_RequestMemoryWrite>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0a9      	b.n	80028dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278c:	b29b      	uxth	r3, r3
 800278e:	2bff      	cmp	r3, #255	; 0xff
 8002790:	d90e      	bls.n	80027b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	22ff      	movs	r2, #255	; 0xff
 8002796:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	b2da      	uxtb	r2, r3
 800279e:	8979      	ldrh	r1, [r7, #10]
 80027a0:	2300      	movs	r3, #0
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 fba5 	bl	8002ef8 <I2C_TransferConfig>
 80027ae:	e00f      	b.n	80027d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	8979      	ldrh	r1, [r7, #10]
 80027c2:	2300      	movs	r3, #0
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fb94 	bl	8002ef8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 faad 	bl	8002d34 <I2C_WaitOnTXISFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e07b      	b.n	80028dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d034      	beq.n	8002888 <HAL_I2C_Mem_Write+0x1c8>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002822:	2b00      	cmp	r3, #0
 8002824:	d130      	bne.n	8002888 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	2200      	movs	r2, #0
 800282e:	2180      	movs	r1, #128	; 0x80
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 fa3f 	bl	8002cb4 <I2C_WaitOnFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e04d      	b.n	80028dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	2bff      	cmp	r3, #255	; 0xff
 8002848:	d90e      	bls.n	8002868 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	22ff      	movs	r2, #255	; 0xff
 800284e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002854:	b2da      	uxtb	r2, r3
 8002856:	8979      	ldrh	r1, [r7, #10]
 8002858:	2300      	movs	r3, #0
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 fb49 	bl	8002ef8 <I2C_TransferConfig>
 8002866:	e00f      	b.n	8002888 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002876:	b2da      	uxtb	r2, r3
 8002878:	8979      	ldrh	r1, [r7, #10]
 800287a:	2300      	movs	r3, #0
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fb38 	bl	8002ef8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d19e      	bne.n	80027d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fa8c 	bl	8002db4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e01a      	b.n	80028dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2220      	movs	r2, #32
 80028ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_I2C_Mem_Write+0x224>)
 80028ba:	400b      	ands	r3, r1
 80028bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e000      	b.n	80028dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80028da:	2302      	movs	r3, #2
  }
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	fe00e800 	.word	0xfe00e800

080028e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b088      	sub	sp, #32
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	4608      	mov	r0, r1
 80028f2:	4611      	mov	r1, r2
 80028f4:	461a      	mov	r2, r3
 80028f6:	4603      	mov	r3, r0
 80028f8:	817b      	strh	r3, [r7, #10]
 80028fa:	460b      	mov	r3, r1
 80028fc:	813b      	strh	r3, [r7, #8]
 80028fe:	4613      	mov	r3, r2
 8002900:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b20      	cmp	r3, #32
 800290c:	f040 80fd 	bne.w	8002b0a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_I2C_Mem_Read+0x34>
 8002916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002918:	2b00      	cmp	r3, #0
 800291a:	d105      	bne.n	8002928 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002922:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0f1      	b.n	8002b0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_I2C_Mem_Read+0x4e>
 8002932:	2302      	movs	r3, #2
 8002934:	e0ea      	b.n	8002b0c <HAL_I2C_Mem_Read+0x224>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800293e:	f7fd fe27 	bl	8000590 <HAL_GetTick>
 8002942:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	2319      	movs	r3, #25
 800294a:	2201      	movs	r2, #1
 800294c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f9af 	bl	8002cb4 <I2C_WaitOnFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0d5      	b.n	8002b0c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2222      	movs	r2, #34	; 0x22
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2240      	movs	r2, #64	; 0x40
 800296c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a3a      	ldr	r2, [r7, #32]
 800297a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002980:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002988:	88f8      	ldrh	r0, [r7, #6]
 800298a:	893a      	ldrh	r2, [r7, #8]
 800298c:	8979      	ldrh	r1, [r7, #10]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	4603      	mov	r3, r0
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f913 	bl	8002bc4 <I2C_RequestMemoryRead>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0ad      	b.n	8002b0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2bff      	cmp	r3, #255	; 0xff
 80029b8:	d90e      	bls.n	80029d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	22ff      	movs	r2, #255	; 0xff
 80029be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	8979      	ldrh	r1, [r7, #10]
 80029c8:	4b52      	ldr	r3, [pc, #328]	; (8002b14 <HAL_I2C_Mem_Read+0x22c>)
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 fa91 	bl	8002ef8 <I2C_TransferConfig>
 80029d6:	e00f      	b.n	80029f8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	8979      	ldrh	r1, [r7, #10]
 80029ea:	4b4a      	ldr	r3, [pc, #296]	; (8002b14 <HAL_I2C_Mem_Read+0x22c>)
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 fa80 	bl	8002ef8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	2200      	movs	r2, #0
 8002a00:	2104      	movs	r1, #4
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f956 	bl	8002cb4 <I2C_WaitOnFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e07c      	b.n	8002b0c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d034      	beq.n	8002ab8 <HAL_I2C_Mem_Read+0x1d0>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d130      	bne.n	8002ab8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f927 	bl	8002cb4 <I2C_WaitOnFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e04d      	b.n	8002b0c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2bff      	cmp	r3, #255	; 0xff
 8002a78:	d90e      	bls.n	8002a98 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	22ff      	movs	r2, #255	; 0xff
 8002a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	8979      	ldrh	r1, [r7, #10]
 8002a88:	2300      	movs	r3, #0
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fa31 	bl	8002ef8 <I2C_TransferConfig>
 8002a96:	e00f      	b.n	8002ab8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	8979      	ldrh	r1, [r7, #10]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fa20 	bl	8002ef8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d19a      	bne.n	80029f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f974 	bl	8002db4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e01a      	b.n	8002b0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2220      	movs	r2, #32
 8002adc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6859      	ldr	r1, [r3, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_I2C_Mem_Read+0x230>)
 8002aea:	400b      	ands	r3, r1
 8002aec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e000      	b.n	8002b0c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b0a:	2302      	movs	r3, #2
  }
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	80002400 	.word	0x80002400
 8002b18:	fe00e800 	.word	0xfe00e800

08002b1c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	4608      	mov	r0, r1
 8002b26:	4611      	mov	r1, r2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	817b      	strh	r3, [r7, #10]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	813b      	strh	r3, [r7, #8]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	8979      	ldrh	r1, [r7, #10]
 8002b3c:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <I2C_RequestMemoryWrite+0xa4>)
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f9d7 	bl	8002ef8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	69b9      	ldr	r1, [r7, #24]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f8f0 	bl	8002d34 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e02c      	b.n	8002bb8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b64:	893b      	ldrh	r3, [r7, #8]
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	629a      	str	r2, [r3, #40]	; 0x28
 8002b6e:	e015      	b.n	8002b9c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b70:	893b      	ldrh	r3, [r7, #8]
 8002b72:	0a1b      	lsrs	r3, r3, #8
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	69b9      	ldr	r1, [r7, #24]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f8d6 	bl	8002d34 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e012      	b.n	8002bb8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b92:	893b      	ldrh	r3, [r7, #8]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2180      	movs	r1, #128	; 0x80
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f884 	bl	8002cb4 <I2C_WaitOnFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	80002000 	.word	0x80002000

08002bc4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	4608      	mov	r0, r1
 8002bce:	4611      	mov	r1, r2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	817b      	strh	r3, [r7, #10]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	813b      	strh	r3, [r7, #8]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	8979      	ldrh	r1, [r7, #10]
 8002be4:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <I2C_RequestMemoryRead+0xa4>)
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	2300      	movs	r3, #0
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f984 	bl	8002ef8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	69b9      	ldr	r1, [r7, #24]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f89d 	bl	8002d34 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e02c      	b.n	8002c5e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d105      	bne.n	8002c16 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c0a:	893b      	ldrh	r3, [r7, #8]
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
 8002c14:	e015      	b.n	8002c42 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c16:	893b      	ldrh	r3, [r7, #8]
 8002c18:	0a1b      	lsrs	r3, r3, #8
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	69b9      	ldr	r1, [r7, #24]
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f883 	bl	8002d34 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e012      	b.n	8002c5e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c38:	893b      	ldrh	r3, [r7, #8]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2140      	movs	r1, #64	; 0x40
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f831 	bl	8002cb4 <I2C_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	80002000 	.word	0x80002000

08002c6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d103      	bne.n	8002c8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2200      	movs	r2, #0
 8002c88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d007      	beq.n	8002ca8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	619a      	str	r2, [r3, #24]
  }
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cc4:	e022      	b.n	8002d0c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ccc:	d01e      	beq.n	8002d0c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cce:	f7fd fc5f 	bl	8000590 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d113      	bne.n	8002d0c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	f043 0220 	orr.w	r2, r3, #32
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e00f      	b.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	4013      	ands	r3, r2
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d0cd      	beq.n	8002cc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d40:	e02c      	b.n	8002d9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f870 	bl	8002e2c <I2C_IsAcknowledgeFailed>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e02a      	b.n	8002dac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d5c:	d01e      	beq.n	8002d9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5e:	f7fd fc17 	bl	8000590 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d302      	bcc.n	8002d74 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d113      	bne.n	8002d9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d78:	f043 0220 	orr.w	r2, r3, #32
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e007      	b.n	8002dac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d1cb      	bne.n	8002d42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dc0:	e028      	b.n	8002e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f830 	bl	8002e2c <I2C_IsAcknowledgeFailed>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e026      	b.n	8002e24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd6:	f7fd fbdb 	bl	8000590 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d113      	bne.n	8002e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	f043 0220 	orr.w	r2, r3, #32
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e007      	b.n	8002e24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d1cf      	bne.n	8002dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b10      	cmp	r3, #16
 8002e44:	d151      	bne.n	8002eea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e46:	e022      	b.n	8002e8e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e4e:	d01e      	beq.n	8002e8e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e50:	f7fd fb9e 	bl	8000590 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d302      	bcc.n	8002e66 <I2C_IsAcknowledgeFailed+0x3a>
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d113      	bne.n	8002e8e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	f043 0220 	orr.w	r2, r3, #32
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e02e      	b.n	8002eec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d1d5      	bne.n	8002e48 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f7ff fedd 	bl	8002c6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <I2C_IsAcknowledgeFailed+0xc8>)
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f043 0204 	orr.w	r2, r3, #4
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	fe00e800 	.word	0xfe00e800

08002ef8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	607b      	str	r3, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	817b      	strh	r3, [r7, #10]
 8002f06:	4613      	mov	r3, r2
 8002f08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	0d5b      	lsrs	r3, r3, #21
 8002f14:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f18:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <I2C_TransferConfig+0x58>)
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	ea02 0103 	and.w	r1, r2, r3
 8002f22:	897b      	ldrh	r3, [r7, #10]
 8002f24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f28:	7a7b      	ldrb	r3, [r7, #9]
 8002f2a:	041b      	lsls	r3, r3, #16
 8002f2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	03ff63ff 	.word	0x03ff63ff

08002f54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b20      	cmp	r3, #32
 8002f68:	d138      	bne.n	8002fdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e032      	b.n	8002fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2224      	movs	r2, #36	; 0x24
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0201 	bic.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6819      	ldr	r1, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	e000      	b.n	8002fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fdc:	2302      	movs	r3, #2
  }
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b085      	sub	sp, #20
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d139      	bne.n	8003074 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800300a:	2302      	movs	r3, #2
 800300c:	e033      	b.n	8003076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2224      	movs	r2, #36	; 0x24
 800301a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0201 	bic.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800303c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4313      	orrs	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	e000      	b.n	8003076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003074:	2302      	movs	r3, #2
  }
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003082:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003084:	b08f      	sub	sp, #60	; 0x3c
 8003086:	af0a      	add	r7, sp, #40	; 0x28
 8003088:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e116      	b.n	80032c2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f006 fd5c 	bl	8009b6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2203      	movs	r2, #3
 80030b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 f891 	bl	80061fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	687e      	ldr	r6, [r7, #4]
 80030e0:	466d      	mov	r5, sp
 80030e2:	f106 0410 	add.w	r4, r6, #16
 80030e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80030f6:	1d33      	adds	r3, r6, #4
 80030f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030fa:	6838      	ldr	r0, [r7, #0]
 80030fc:	f002 ffa3 	bl	8006046 <USB_CoreInit>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2202      	movs	r2, #2
 800310a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e0d7      	b.n	80032c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f003 f87f 	bl	800621c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]
 8003122:	e04a      	b.n	80031ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	333d      	adds	r3, #61	; 0x3d
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	333c      	adds	r3, #60	; 0x3c
 8003148:	7bfa      	ldrb	r2, [r7, #15]
 800314a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	b298      	uxth	r0, r3
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3342      	adds	r3, #66	; 0x42
 8003160:	4602      	mov	r2, r0
 8003162:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	333f      	adds	r3, #63	; 0x3f
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3344      	adds	r3, #68	; 0x44
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	3348      	adds	r3, #72	; 0x48
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031a0:	7bfa      	ldrb	r2, [r7, #15]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3350      	adds	r3, #80	; 0x50
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	3301      	adds	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d3af      	bcc.n	8003124 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c4:	2300      	movs	r3, #0
 80031c6:	73fb      	strb	r3, [r7, #15]
 80031c8:	e044      	b.n	8003254 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003222:	7bfa      	ldrb	r2, [r7, #15]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	3301      	adds	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	429a      	cmp	r2, r3
 800325c:	d3b5      	bcc.n	80031ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	687e      	ldr	r6, [r7, #4]
 8003266:	466d      	mov	r5, sp
 8003268:	f106 0410 	add.w	r4, r6, #16
 800326c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800326e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003274:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003278:	e885 0003 	stmia.w	r5, {r0, r1}
 800327c:	1d33      	adds	r3, r6, #4
 800327e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003280:	6838      	ldr	r0, [r7, #0]
 8003282:	f002 fff5 	bl	8006270 <USB_DevInit>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e014      	b.n	80032c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d102      	bne.n	80032b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 ff49 	bl	8004148 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f003 ff77 	bl	80071ae <USB_DevDisconnect>

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_PCD_Start+0x1c>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e01c      	b.n	8003320 <HAL_PCD_Start+0x56>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d105      	bne.n	8003302 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f002 ff66 	bl	80061d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f003 ff2b 	bl	800716c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b08d      	sub	sp, #52	; 0x34
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f003 ffe9 	bl	8007316 <USB_GetMode>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	f040 838f 	bne.w	8003a6a <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f003 ff4d 	bl	80071f0 <USB_ReadInterrupts>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8385 	beq.w	8003a68 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f003 ff44 	bl	80071f0 <USB_ReadInterrupts>
 8003368:	4603      	mov	r3, r0
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b02      	cmp	r3, #2
 8003370:	d107      	bne.n	8003382 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f002 0202 	and.w	r2, r2, #2
 8003380:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f003 ff32 	bl	80071f0 <USB_ReadInterrupts>
 800338c:	4603      	mov	r3, r0
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b10      	cmp	r3, #16
 8003394:	d161      	bne.n	800345a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699a      	ldr	r2, [r3, #24]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0210 	bic.w	r2, r2, #16
 80033a4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	f003 020f 	and.w	r2, r3, #15
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	3304      	adds	r3, #4
 80033c4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	0c5b      	lsrs	r3, r3, #17
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d124      	bne.n	800341c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d035      	beq.n	800344a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	6a38      	ldr	r0, [r7, #32]
 80033f2:	f003 fd98 	bl	8006f26 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003402:	441a      	add	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	699a      	ldr	r2, [r3, #24]
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	091b      	lsrs	r3, r3, #4
 8003410:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003414:	441a      	add	r2, r3
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	619a      	str	r2, [r3, #24]
 800341a:	e016      	b.n	800344a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	0c5b      	lsrs	r3, r3, #17
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	2b06      	cmp	r3, #6
 8003426:	d110      	bne.n	800344a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800342e:	2208      	movs	r2, #8
 8003430:	4619      	mov	r1, r3
 8003432:	6a38      	ldr	r0, [r7, #32]
 8003434:	f003 fd77 	bl	8006f26 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	699a      	ldr	r2, [r3, #24]
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003444:	441a      	add	r2, r3
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699a      	ldr	r2, [r3, #24]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0210 	orr.w	r2, r2, #16
 8003458:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f003 fec6 	bl	80071f0 <USB_ReadInterrupts>
 8003464:	4603      	mov	r3, r0
 8003466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800346a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800346e:	d16e      	bne.n	800354e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f003 fecc 	bl	8007216 <USB_ReadDevAllOutEpInterrupt>
 800347e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003480:	e062      	b.n	8003548 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d057      	beq.n	800353c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	4611      	mov	r1, r2
 8003496:	4618      	mov	r0, r3
 8003498:	f003 fef1 	bl	800727e <USB_ReadDevOutEPInterrupt>
 800349c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00c      	beq.n	80034c2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b4:	461a      	mov	r2, r3
 80034b6:	2301      	movs	r3, #1
 80034b8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fd69 	bl	8003f94 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00c      	beq.n	80034e6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d8:	461a      	mov	r2, r3
 80034da:	2308      	movs	r3, #8
 80034dc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fda5 	bl	8004030 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fc:	461a      	mov	r2, r3
 80034fe:	2310      	movs	r3, #16
 8003500:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	4413      	add	r3, r2
 8003514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003518:	461a      	mov	r2, r3
 800351a:	2320      	movs	r3, #32
 800351c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d009      	beq.n	800353c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003534:	461a      	mov	r2, r3
 8003536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800353a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	3301      	adds	r3, #1
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	085b      	lsrs	r3, r3, #1
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	2b00      	cmp	r3, #0
 800354c:	d199      	bne.n	8003482 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f003 fe4c 	bl	80071f0 <USB_ReadInterrupts>
 8003558:	4603      	mov	r3, r0
 800355a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800355e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003562:	f040 8087 	bne.w	8003674 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f003 fe6d 	bl	800724a <USB_ReadDevAllInEpInterrupt>
 8003570:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003576:	e07a      	b.n	800366e <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d06f      	beq.n	8003662 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f003 fe94 	bl	80072ba <USB_ReadDevInEPInterrupt>
 8003592:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d020      	beq.n	80035e0 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	2201      	movs	r2, #1
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69f9      	ldr	r1, [r7, #28]
 80035ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035be:	4013      	ands	r3, r2
 80035c0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ce:	461a      	mov	r2, r3
 80035d0:	2301      	movs	r3, #1
 80035d2:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	4619      	mov	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f006 fb59 	bl	8009c92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f6:	461a      	mov	r2, r3
 80035f8:	2308      	movs	r3, #8
 80035fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003612:	461a      	mov	r2, r3
 8003614:	2310      	movs	r3, #16
 8003616:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d008      	beq.n	8003634 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362e:	461a      	mov	r2, r3
 8003630:	2340      	movs	r3, #64	; 0x40
 8003632:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	4413      	add	r3, r2
 8003646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364a:	461a      	mov	r2, r3
 800364c:	2302      	movs	r3, #2
 800364e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800365a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fc11 	bl	8003e84 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	3301      	adds	r3, #1
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	d181      	bne.n	8003578 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f003 fdb9 	bl	80071f0 <USB_ReadInterrupts>
 800367e:	4603      	mov	r3, r0
 8003680:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003688:	d122      	bne.n	80036d0 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d108      	bne.n	80036ba <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036b0:	2100      	movs	r1, #0
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f006 fdf2 	bl	800a29c <HAL_PCDEx_LPM_Callback>
 80036b8:	e002      	b.n	80036c0 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f006 fb56 	bl	8009d6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80036ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f003 fd8b 	bl	80071f0 <USB_ReadInterrupts>
 80036da:	4603      	mov	r3, r0
 80036dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e4:	d112      	bne.n	800370c <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d102      	bne.n	80036fc <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f006 fb12 	bl	8009d20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800370a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f003 fd6d 	bl	80071f0 <USB_ReadInterrupts>
 8003716:	4603      	mov	r3, r0
 8003718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800371c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003720:	d121      	bne.n	8003766 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003730:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d111      	bne.n	8003760 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374a:	089b      	lsrs	r3, r3, #2
 800374c:	f003 020f 	and.w	r2, r3, #15
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003756:	2101      	movs	r1, #1
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f006 fd9f 	bl	800a29c <HAL_PCDEx_LPM_Callback>
 800375e:	e002      	b.n	8003766 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f006 fadd 	bl	8009d20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f003 fd40 	bl	80071f0 <USB_ReadInterrupts>
 8003770:	4603      	mov	r3, r0
 8003772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377a:	f040 80c5 	bne.w	8003908 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2110      	movs	r1, #16
 8003798:	4618      	mov	r0, r3
 800379a:	f002 feb5 	bl	8006508 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800379e:	2300      	movs	r3, #0
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a2:	e056      	b.n	8003852 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b0:	461a      	mov	r2, r3
 80037b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037b6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c8:	0151      	lsls	r1, r2, #5
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	440a      	add	r2, r1
 80037ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037d6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e8:	0151      	lsls	r1, r2, #5
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	440a      	add	r2, r1
 80037ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003804:	461a      	mov	r2, r3
 8003806:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800380a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800380c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800381c:	0151      	lsls	r1, r2, #5
 800381e:	69fa      	ldr	r2, [r7, #28]
 8003820:	440a      	add	r2, r1
 8003822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800382a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800383c:	0151      	lsls	r1, r2, #5
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	440a      	add	r2, r1
 8003842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003846:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800384a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384e:	3301      	adds	r3, #1
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003858:	429a      	cmp	r2, r3
 800385a:	d3a3      	bcc.n	80037a4 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800386a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800386e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	2b00      	cmp	r3, #0
 8003876:	d016      	beq.n	80038a6 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003888:	f043 030b 	orr.w	r3, r3, #11
 800388c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800389e:	f043 030b 	orr.w	r3, r3, #11
 80038a2:	6453      	str	r3, [r2, #68]	; 0x44
 80038a4:	e015      	b.n	80038d2 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038b8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80038bc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038cc:	f043 030b 	orr.w	r3, r3, #11
 80038d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69fa      	ldr	r2, [r7, #28]
 80038dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038f0:	4619      	mov	r1, r3
 80038f2:	4610      	mov	r0, r2
 80038f4:	f003 fd40 	bl	8007378 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003906:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f003 fc6f 	bl	80071f0 <USB_ReadInterrupts>
 8003912:	4603      	mov	r3, r0
 8003914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391c:	d124      	bne.n	8003968 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f003 fd05 	bl	8007332 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f002 fe4c 	bl	80065ca <USB_GetDevSpeed>
 8003932:	4603      	mov	r3, r0
 8003934:	461a      	mov	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681c      	ldr	r4, [r3, #0]
 800393e:	f001 f9ef 	bl	8004d20 <HAL_RCC_GetHCLKFreq>
 8003942:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003948:	b2db      	uxtb	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	4620      	mov	r0, r4
 800394e:	f002 fba7 	bl	80060a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f006 f9c5 	bl	8009ce2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003966:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f003 fc3f 	bl	80071f0 <USB_ReadInterrupts>
 8003972:	4603      	mov	r3, r0
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b08      	cmp	r3, #8
 800397a:	d10a      	bne.n	8003992 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f006 f9a2 	bl	8009cc6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695a      	ldr	r2, [r3, #20]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f002 0208 	and.w	r2, r2, #8
 8003990:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f003 fc2a 	bl	80071f0 <USB_ReadInterrupts>
 800399c:	4603      	mov	r3, r0
 800399e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a6:	d10f      	bne.n	80039c8 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	4619      	mov	r1, r3
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f006 fa14 	bl	8009de0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80039c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f003 fc0f 	bl	80071f0 <USB_ReadInterrupts>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039dc:	d10f      	bne.n	80039fe <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	4619      	mov	r1, r3
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f006 f9e7 	bl	8009dbc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695a      	ldr	r2, [r3, #20]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80039fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f003 fbf4 	bl	80071f0 <USB_ReadInterrupts>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a12:	d10a      	bne.n	8003a2a <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f006 f9f5 	bl	8009e04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f003 fbde 	bl	80071f0 <USB_ReadInterrupts>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d115      	bne.n	8003a6a <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f006 f9e5 	bl	8009e20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6859      	ldr	r1, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	e000      	b.n	8003a6a <HAL_PCD_IRQHandler+0x742>
      return;
 8003a68:	bf00      	nop
    }
  }
}
 8003a6a:	3734      	adds	r7, #52	; 0x34
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd90      	pop	{r4, r7, pc}

08003a70 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_PCD_SetAddress+0x1a>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e013      	b.n	8003ab2 <HAL_PCD_SetAddress+0x42>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f003 fb3c 	bl	8007120 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	4608      	mov	r0, r1
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4603      	mov	r3, r0
 8003aca:	70fb      	strb	r3, [r7, #3]
 8003acc:	460b      	mov	r3, r1
 8003ace:	803b      	strh	r3, [r7, #0]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	da0f      	bge.n	8003b00 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	f003 020f 	and.w	r2, r3, #15
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	3338      	adds	r3, #56	; 0x38
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	3304      	adds	r3, #4
 8003af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	705a      	strb	r2, [r3, #1]
 8003afe:	e00f      	b.n	8003b20 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	f003 020f 	and.w	r2, r3, #15
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	1a9b      	subs	r3, r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4413      	add	r3, r2
 8003b16:	3304      	adds	r3, #4
 8003b18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b2c:	883a      	ldrh	r2, [r7, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	78ba      	ldrb	r2, [r7, #2]
 8003b36:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	785b      	ldrb	r3, [r3, #1]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d004      	beq.n	8003b4a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b4a:	78bb      	ldrb	r3, [r7, #2]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d102      	bne.n	8003b56 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_PCD_EP_Open+0xaa>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e00e      	b.n	8003b82 <HAL_PCD_EP_Open+0xc8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68f9      	ldr	r1, [r7, #12]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f002 fd48 	bl	8006608 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003b80:	7afb      	ldrb	r3, [r7, #11]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b084      	sub	sp, #16
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	460b      	mov	r3, r1
 8003b94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	da0f      	bge.n	8003bbe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	f003 020f 	and.w	r2, r3, #15
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	3338      	adds	r3, #56	; 0x38
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	705a      	strb	r2, [r3, #1]
 8003bbc:	e00f      	b.n	8003bde <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	f003 020f 	and.w	r2, r3, #15
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	f003 030f 	and.w	r3, r3, #15
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_PCD_EP_Close+0x6e>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e00e      	b.n	8003c16 <HAL_PCD_EP_Close+0x8c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68f9      	ldr	r1, [r7, #12]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f002 fd86 	bl	8006718 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b086      	sub	sp, #24
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c2e:	7afb      	ldrb	r3, [r7, #11]
 8003c30:	f003 020f 	and.w	r2, r3, #15
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	3304      	adds	r3, #4
 8003c46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2200      	movs	r2, #0
 8003c58:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c60:	7afb      	ldrb	r3, [r7, #11]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c6c:	7afb      	ldrb	r3, [r7, #11]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d106      	bne.n	8003c84 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6979      	ldr	r1, [r7, #20]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f003 f803 	bl	8006c88 <USB_EP0StartXfer>
 8003c82:	e005      	b.n	8003c90 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6979      	ldr	r1, [r7, #20]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f002 fe20 	bl	80068d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b086      	sub	sp, #24
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003caa:	7afb      	ldrb	r3, [r7, #11]
 8003cac:	f003 020f 	and.w	r2, r3, #15
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	3338      	adds	r3, #56	; 0x38
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cda:	7afb      	ldrb	r3, [r7, #11]
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ce6:	7afb      	ldrb	r3, [r7, #11]
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d106      	bne.n	8003cfe <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6979      	ldr	r1, [r7, #20]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f002 ffc6 	bl	8006c88 <USB_EP0StartXfer>
 8003cfc:	e005      	b.n	8003d0a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6979      	ldr	r1, [r7, #20]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f002 fde3 	bl	80068d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	f003 020f 	and.w	r2, r3, #15
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d901      	bls.n	8003d32 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e04e      	b.n	8003dd0 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	da0f      	bge.n	8003d5a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	f003 020f 	and.w	r2, r3, #15
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	3338      	adds	r3, #56	; 0x38
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3304      	adds	r3, #4
 8003d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	705a      	strb	r2, [r3, #1]
 8003d58:	e00d      	b.n	8003d76 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d5a:	78fa      	ldrb	r2, [r7, #3]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_PCD_EP_SetStall+0x82>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e01c      	b.n	8003dd0 <HAL_PCD_EP_SetStall+0xbc>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68f9      	ldr	r1, [r7, #12]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f003 f8e7 	bl	8006f78 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d108      	bne.n	8003dc6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	f003 fad9 	bl	8007378 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	f003 020f 	and.w	r2, r3, #15
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d901      	bls.n	8003df6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e042      	b.n	8003e7c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003df6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	da0f      	bge.n	8003e1e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	f003 020f 	and.w	r2, r3, #15
 8003e04:	4613      	mov	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	3338      	adds	r3, #56	; 0x38
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	3304      	adds	r3, #4
 8003e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	705a      	strb	r2, [r3, #1]
 8003e1c:	e00f      	b.n	8003e3e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e1e:	78fb      	ldrb	r3, [r7, #3]
 8003e20:	f003 020f 	and.w	r2, r3, #15
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	4413      	add	r3, r2
 8003e34:	3304      	adds	r3, #4
 8003e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_PCD_EP_ClrStall+0x86>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e00e      	b.n	8003e7c <HAL_PCD_EP_ClrStall+0xa4>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68f9      	ldr	r1, [r7, #12]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f003 f8f1 	bl	8007054 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	3338      	adds	r3, #56	; 0x38
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	699a      	ldr	r2, [r3, #24]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d901      	bls.n	8003ebc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e067      	b.n	8003f8c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d902      	bls.n	8003ed8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	3303      	adds	r3, #3
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ee0:	e026      	b.n	8003f30 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d902      	bls.n	8003efe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3303      	adds	r3, #3
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	68d9      	ldr	r1, [r3, #12]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	6978      	ldr	r0, [r7, #20]
 8003f14:	f002 ffd6 	bl	8006ec4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	441a      	add	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	699a      	ldr	r2, [r3, #24]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	441a      	add	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d809      	bhi.n	8003f5a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	699a      	ldr	r2, [r3, #24]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d203      	bcs.n	8003f5a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1c3      	bne.n	8003ee2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	695a      	ldr	r2, [r3, #20]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d811      	bhi.n	8003f8a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	6939      	ldr	r1, [r7, #16]
 8003f82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f86:	4013      	ands	r3, r2
 8003f88:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3720      	adds	r7, #32
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	333c      	adds	r3, #60	; 0x3c
 8003fac:	3304      	adds	r3, #4
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4a19      	ldr	r2, [pc, #100]	; (800402c <PCD_EP_OutXfrComplete_int+0x98>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d124      	bne.n	8004014 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe6:	6093      	str	r3, [r2, #8]
 8003fe8:	e01a      	b.n	8004020 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004000:	461a      	mov	r2, r3
 8004002:	2320      	movs	r3, #32
 8004004:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	4619      	mov	r1, r3
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f005 fe25 	bl	8009c5c <HAL_PCD_DataOutStageCallback>
 8004012:	e005      	b.n	8004020 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f005 fe1e 	bl	8009c5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	4f54310a 	.word	0x4f54310a

08004030 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	333c      	adds	r3, #60	; 0x3c
 8004048:	3304      	adds	r3, #4
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4a0c      	ldr	r2, [pc, #48]	; (8004094 <PCD_EP_OutSetupPacket_int+0x64>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d90e      	bls.n	8004084 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800406c:	2b00      	cmp	r3, #0
 800406e:	d009      	beq.n	8004084 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407c:	461a      	mov	r2, r3
 800407e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004082:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f005 fdd7 	bl	8009c38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	4f54300a 	.word	0x4f54300a

08004098 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
 80040a4:	4613      	mov	r3, r2
 80040a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d107      	bne.n	80040c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80040b6:	883b      	ldrh	r3, [r7, #0]
 80040b8:	0419      	lsls	r1, r3, #16
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	629a      	str	r2, [r3, #40]	; 0x28
 80040c4:	e028      	b.n	8004118 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	0c1b      	lsrs	r3, r3, #16
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	4413      	add	r3, r2
 80040d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040d4:	2300      	movs	r3, #0
 80040d6:	73fb      	strb	r3, [r7, #15]
 80040d8:	e00d      	b.n	80040f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	3340      	adds	r3, #64	; 0x40
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	0c1b      	lsrs	r3, r3, #16
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	4413      	add	r3, r2
 80040ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	3301      	adds	r3, #1
 80040f4:	73fb      	strb	r3, [r7, #15]
 80040f6:	7bfa      	ldrb	r2, [r7, #15]
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d3ec      	bcc.n	80040da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004100:	883b      	ldrh	r3, [r7, #0]
 8004102:	0418      	lsls	r0, r3, #16
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6819      	ldr	r1, [r3, #0]
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	3b01      	subs	r3, #1
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	4302      	orrs	r2, r0
 8004110:	3340      	adds	r3, #64	; 0x40
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	460b      	mov	r3, r1
 8004130:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	887a      	ldrh	r2, [r7, #2]
 8004138:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417a:	f043 0303 	orr.w	r3, r3, #3
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800419c:	4618      	mov	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40007000 	.word	0x40007000

080041ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ba:	d130      	bne.n	800421e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041bc:	4b23      	ldr	r3, [pc, #140]	; (800424c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c8:	d038      	beq.n	800423c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041ca:	4b20      	ldr	r3, [pc, #128]	; (800424c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041d2:	4a1e      	ldr	r2, [pc, #120]	; (800424c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041da:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2232      	movs	r2, #50	; 0x32
 80041e0:	fb02 f303 	mul.w	r3, r2, r3
 80041e4:	4a1b      	ldr	r2, [pc, #108]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041e6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ea:	0c9b      	lsrs	r3, r3, #18
 80041ec:	3301      	adds	r3, #1
 80041ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041f0:	e002      	b.n	80041f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041f8:	4b14      	ldr	r3, [pc, #80]	; (800424c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004204:	d102      	bne.n	800420c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f2      	bne.n	80041f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800420c:	4b0f      	ldr	r3, [pc, #60]	; (800424c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004218:	d110      	bne.n	800423c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e00f      	b.n	800423e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800421e:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422a:	d007      	beq.n	800423c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800422c:	4b07      	ldr	r3, [pc, #28]	; (800424c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004234:	4a05      	ldr	r2, [pc, #20]	; (800424c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800423a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40007000 	.word	0x40007000
 8004250:	20000174 	.word	0x20000174
 8004254:	431bde83 	.word	0x431bde83

08004258 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_PWREx_EnableVddUSB+0x1c>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4a04      	ldr	r2, [pc, #16]	; (8004274 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004266:	6053      	str	r3, [r2, #4]
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40007000 	.word	0x40007000

08004278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e3d4      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800428a:	4ba1      	ldr	r3, [pc, #644]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004294:	4b9e      	ldr	r3, [pc, #632]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0310 	and.w	r3, r3, #16
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80e4 	beq.w	8004474 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d007      	beq.n	80042c2 <HAL_RCC_OscConfig+0x4a>
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	2b0c      	cmp	r3, #12
 80042b6:	f040 808b 	bne.w	80043d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	f040 8087 	bne.w	80043d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042c2:	4b93      	ldr	r3, [pc, #588]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <HAL_RCC_OscConfig+0x62>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e3ac      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1a      	ldr	r2, [r3, #32]
 80042de:	4b8c      	ldr	r3, [pc, #560]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d004      	beq.n	80042f4 <HAL_RCC_OscConfig+0x7c>
 80042ea:	4b89      	ldr	r3, [pc, #548]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042f2:	e005      	b.n	8004300 <HAL_RCC_OscConfig+0x88>
 80042f4:	4b86      	ldr	r3, [pc, #536]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80042f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042fa:	091b      	lsrs	r3, r3, #4
 80042fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004300:	4293      	cmp	r3, r2
 8004302:	d223      	bcs.n	800434c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fd41 	bl	8004d90 <RCC_SetFlashLatencyFromMSIRange>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e38d      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004318:	4b7d      	ldr	r3, [pc, #500]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a7c      	ldr	r2, [pc, #496]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800431e:	f043 0308 	orr.w	r3, r3, #8
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	4b7a      	ldr	r3, [pc, #488]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	4977      	ldr	r1, [pc, #476]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004332:	4313      	orrs	r3, r2
 8004334:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004336:	4b76      	ldr	r3, [pc, #472]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	021b      	lsls	r3, r3, #8
 8004344:	4972      	ldr	r1, [pc, #456]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004346:	4313      	orrs	r3, r2
 8004348:	604b      	str	r3, [r1, #4]
 800434a:	e025      	b.n	8004398 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800434c:	4b70      	ldr	r3, [pc, #448]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a6f      	ldr	r2, [pc, #444]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004352:	f043 0308 	orr.w	r3, r3, #8
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4b6d      	ldr	r3, [pc, #436]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	496a      	ldr	r1, [pc, #424]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800436a:	4b69      	ldr	r3, [pc, #420]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	4965      	ldr	r1, [pc, #404]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800437a:	4313      	orrs	r3, r2
 800437c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d109      	bne.n	8004398 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fd01 	bl	8004d90 <RCC_SetFlashLatencyFromMSIRange>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e34d      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004398:	f000 fc36 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 800439c:	4602      	mov	r2, r0
 800439e:	4b5c      	ldr	r3, [pc, #368]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	091b      	lsrs	r3, r3, #4
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	495a      	ldr	r1, [pc, #360]	; (8004514 <HAL_RCC_OscConfig+0x29c>)
 80043aa:	5ccb      	ldrb	r3, [r1, r3]
 80043ac:	f003 031f 	and.w	r3, r3, #31
 80043b0:	fa22 f303 	lsr.w	r3, r2, r3
 80043b4:	4a58      	ldr	r2, [pc, #352]	; (8004518 <HAL_RCC_OscConfig+0x2a0>)
 80043b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043b8:	4b58      	ldr	r3, [pc, #352]	; (800451c <HAL_RCC_OscConfig+0x2a4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fc f897 	bl	80004f0 <HAL_InitTick>
 80043c2:	4603      	mov	r3, r0
 80043c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d052      	beq.n	8004472 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
 80043ce:	e331      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d032      	beq.n	800443e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043d8:	4b4d      	ldr	r3, [pc, #308]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a4c      	ldr	r2, [pc, #304]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043e4:	f7fc f8d4 	bl	8000590 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043ec:	f7fc f8d0 	bl	8000590 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e31a      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043fe:	4b44      	ldr	r3, [pc, #272]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800440a:	4b41      	ldr	r3, [pc, #260]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a40      	ldr	r2, [pc, #256]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004410:	f043 0308 	orr.w	r3, r3, #8
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	4b3e      	ldr	r3, [pc, #248]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	493b      	ldr	r1, [pc, #236]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004424:	4313      	orrs	r3, r2
 8004426:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004428:	4b39      	ldr	r3, [pc, #228]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	4936      	ldr	r1, [pc, #216]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004438:	4313      	orrs	r3, r2
 800443a:	604b      	str	r3, [r1, #4]
 800443c:	e01a      	b.n	8004474 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800443e:	4b34      	ldr	r3, [pc, #208]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a33      	ldr	r2, [pc, #204]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004444:	f023 0301 	bic.w	r3, r3, #1
 8004448:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800444a:	f7fc f8a1 	bl	8000590 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004452:	f7fc f89d 	bl	8000590 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e2e7      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004464:	4b2a      	ldr	r3, [pc, #168]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f0      	bne.n	8004452 <HAL_RCC_OscConfig+0x1da>
 8004470:	e000      	b.n	8004474 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004472:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d074      	beq.n	800456a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b08      	cmp	r3, #8
 8004484:	d005      	beq.n	8004492 <HAL_RCC_OscConfig+0x21a>
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b0c      	cmp	r3, #12
 800448a:	d10e      	bne.n	80044aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2b03      	cmp	r3, #3
 8004490:	d10b      	bne.n	80044aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004492:	4b1f      	ldr	r3, [pc, #124]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d064      	beq.n	8004568 <HAL_RCC_OscConfig+0x2f0>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d160      	bne.n	8004568 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e2c4      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b2:	d106      	bne.n	80044c2 <HAL_RCC_OscConfig+0x24a>
 80044b4:	4b16      	ldr	r3, [pc, #88]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a15      	ldr	r2, [pc, #84]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	e01d      	b.n	80044fe <HAL_RCC_OscConfig+0x286>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044ca:	d10c      	bne.n	80044e6 <HAL_RCC_OscConfig+0x26e>
 80044cc:	4b10      	ldr	r3, [pc, #64]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a0f      	ldr	r2, [pc, #60]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a0c      	ldr	r2, [pc, #48]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	e00b      	b.n	80044fe <HAL_RCC_OscConfig+0x286>
 80044e6:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a09      	ldr	r2, [pc, #36]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4b07      	ldr	r3, [pc, #28]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a06      	ldr	r2, [pc, #24]	; (8004510 <HAL_RCC_OscConfig+0x298>)
 80044f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d01c      	beq.n	8004540 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004506:	f7fc f843 	bl	8000590 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800450c:	e011      	b.n	8004532 <HAL_RCC_OscConfig+0x2ba>
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000
 8004514:	0800a6c4 	.word	0x0800a6c4
 8004518:	20000174 	.word	0x20000174
 800451c:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004520:	f7fc f836 	bl	8000590 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b64      	cmp	r3, #100	; 0x64
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e280      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004532:	4baf      	ldr	r3, [pc, #700]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x2a8>
 800453e:	e014      	b.n	800456a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fc f826 	bl	8000590 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004548:	f7fc f822 	bl	8000590 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e26c      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800455a:	4ba5      	ldr	r3, [pc, #660]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x2d0>
 8004566:	e000      	b.n	800456a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d060      	beq.n	8004638 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b04      	cmp	r3, #4
 800457a:	d005      	beq.n	8004588 <HAL_RCC_OscConfig+0x310>
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b0c      	cmp	r3, #12
 8004580:	d119      	bne.n	80045b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d116      	bne.n	80045b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004588:	4b99      	ldr	r3, [pc, #612]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_OscConfig+0x328>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e249      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a0:	4b93      	ldr	r3, [pc, #588]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	061b      	lsls	r3, r3, #24
 80045ae:	4990      	ldr	r1, [pc, #576]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045b4:	e040      	b.n	8004638 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d023      	beq.n	8004606 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045be:	4b8c      	ldr	r3, [pc, #560]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a8b      	ldr	r2, [pc, #556]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80045c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ca:	f7fb ffe1 	bl	8000590 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d2:	f7fb ffdd 	bl	8000590 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e227      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045e4:	4b82      	ldr	r3, [pc, #520]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f0:	4b7f      	ldr	r3, [pc, #508]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	061b      	lsls	r3, r3, #24
 80045fe:	497c      	ldr	r1, [pc, #496]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]
 8004604:	e018      	b.n	8004638 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004606:	4b7a      	ldr	r3, [pc, #488]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a79      	ldr	r2, [pc, #484]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800460c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004612:	f7fb ffbd 	bl	8000590 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461a:	f7fb ffb9 	bl	8000590 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e203      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800462c:	4b70      	ldr	r3, [pc, #448]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1f0      	bne.n	800461a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b00      	cmp	r3, #0
 8004642:	d03c      	beq.n	80046be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01c      	beq.n	8004686 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800464c:	4b68      	ldr	r3, [pc, #416]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800464e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004652:	4a67      	ldr	r2, [pc, #412]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465c:	f7fb ff98 	bl	8000590 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004664:	f7fb ff94 	bl	8000590 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e1de      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004676:	4b5e      	ldr	r3, [pc, #376]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ef      	beq.n	8004664 <HAL_RCC_OscConfig+0x3ec>
 8004684:	e01b      	b.n	80046be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004686:	4b5a      	ldr	r3, [pc, #360]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800468c:	4a58      	ldr	r2, [pc, #352]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800468e:	f023 0301 	bic.w	r3, r3, #1
 8004692:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004696:	f7fb ff7b 	bl	8000590 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469e:	f7fb ff77 	bl	8000590 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e1c1      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046b0:	4b4f      	ldr	r3, [pc, #316]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80046b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1ef      	bne.n	800469e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 80a6 	beq.w	8004818 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046cc:	2300      	movs	r3, #0
 80046ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046d0:	4b47      	ldr	r3, [pc, #284]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80046d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10d      	bne.n	80046f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046dc:	4b44      	ldr	r3, [pc, #272]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80046de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e0:	4a43      	ldr	r2, [pc, #268]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80046e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e6:	6593      	str	r3, [r2, #88]	; 0x58
 80046e8:	4b41      	ldr	r3, [pc, #260]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80046ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f4:	2301      	movs	r3, #1
 80046f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f8:	4b3e      	ldr	r3, [pc, #248]	; (80047f4 <HAL_RCC_OscConfig+0x57c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d118      	bne.n	8004736 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004704:	4b3b      	ldr	r3, [pc, #236]	; (80047f4 <HAL_RCC_OscConfig+0x57c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a3a      	ldr	r2, [pc, #232]	; (80047f4 <HAL_RCC_OscConfig+0x57c>)
 800470a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800470e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004710:	f7fb ff3e 	bl	8000590 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004718:	f7fb ff3a 	bl	8000590 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e184      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800472a:	4b32      	ldr	r3, [pc, #200]	; (80047f4 <HAL_RCC_OscConfig+0x57c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d108      	bne.n	8004750 <HAL_RCC_OscConfig+0x4d8>
 800473e:	4b2c      	ldr	r3, [pc, #176]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004744:	4a2a      	ldr	r2, [pc, #168]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800474e:	e024      	b.n	800479a <HAL_RCC_OscConfig+0x522>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b05      	cmp	r3, #5
 8004756:	d110      	bne.n	800477a <HAL_RCC_OscConfig+0x502>
 8004758:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475e:	4a24      	ldr	r2, [pc, #144]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004760:	f043 0304 	orr.w	r3, r3, #4
 8004764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004768:	4b21      	ldr	r3, [pc, #132]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800476a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476e:	4a20      	ldr	r2, [pc, #128]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004778:	e00f      	b.n	800479a <HAL_RCC_OscConfig+0x522>
 800477a:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004780:	4a1b      	ldr	r2, [pc, #108]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800478a:	4b19      	ldr	r3, [pc, #100]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004790:	4a17      	ldr	r2, [pc, #92]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 8004792:	f023 0304 	bic.w	r3, r3, #4
 8004796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d016      	beq.n	80047d0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a2:	f7fb fef5 	bl	8000590 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a8:	e00a      	b.n	80047c0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047aa:	f7fb fef1 	bl	8000590 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e139      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <HAL_RCC_OscConfig+0x578>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0ed      	beq.n	80047aa <HAL_RCC_OscConfig+0x532>
 80047ce:	e01a      	b.n	8004806 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d0:	f7fb fede 	bl	8000590 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d6:	e00f      	b.n	80047f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d8:	f7fb feda 	bl	8000590 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d906      	bls.n	80047f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e122      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
 80047ee:	bf00      	nop
 80047f0:	40021000 	.word	0x40021000
 80047f4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047f8:	4b90      	ldr	r3, [pc, #576]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e8      	bne.n	80047d8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004806:	7ffb      	ldrb	r3, [r7, #31]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d105      	bne.n	8004818 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800480c:	4b8b      	ldr	r3, [pc, #556]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 800480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004810:	4a8a      	ldr	r2, [pc, #552]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 8004812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004816:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8108 	beq.w	8004a32 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	2b02      	cmp	r3, #2
 8004828:	f040 80d0 	bne.w	80049cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800482c:	4b83      	ldr	r3, [pc, #524]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f003 0203 	and.w	r2, r3, #3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	429a      	cmp	r2, r3
 800483e:	d130      	bne.n	80048a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	3b01      	subs	r3, #1
 800484c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800484e:	429a      	cmp	r2, r3
 8004850:	d127      	bne.n	80048a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800485e:	429a      	cmp	r2, r3
 8004860:	d11f      	bne.n	80048a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800486c:	2a07      	cmp	r2, #7
 800486e:	bf14      	ite	ne
 8004870:	2201      	movne	r2, #1
 8004872:	2200      	moveq	r2, #0
 8004874:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004876:	4293      	cmp	r3, r2
 8004878:	d113      	bne.n	80048a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	3b01      	subs	r3, #1
 8004888:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800488a:	429a      	cmp	r2, r3
 800488c:	d109      	bne.n	80048a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	3b01      	subs	r3, #1
 800489c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d06e      	beq.n	8004980 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b0c      	cmp	r3, #12
 80048a6:	d069      	beq.n	800497c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048a8:	4b64      	ldr	r3, [pc, #400]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d105      	bne.n	80048c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048b4:	4b61      	ldr	r3, [pc, #388]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0b7      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048c4:	4b5d      	ldr	r3, [pc, #372]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a5c      	ldr	r2, [pc, #368]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 80048ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048d0:	f7fb fe5e 	bl	8000590 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fb fe5a 	bl	8000590 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e0a4      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ea:	4b54      	ldr	r3, [pc, #336]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048f6:	4b51      	ldr	r3, [pc, #324]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	4b51      	ldr	r3, [pc, #324]	; (8004a40 <HAL_RCC_OscConfig+0x7c8>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004906:	3a01      	subs	r2, #1
 8004908:	0112      	lsls	r2, r2, #4
 800490a:	4311      	orrs	r1, r2
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004910:	0212      	lsls	r2, r2, #8
 8004912:	4311      	orrs	r1, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004918:	0852      	lsrs	r2, r2, #1
 800491a:	3a01      	subs	r2, #1
 800491c:	0552      	lsls	r2, r2, #21
 800491e:	4311      	orrs	r1, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004924:	0852      	lsrs	r2, r2, #1
 8004926:	3a01      	subs	r2, #1
 8004928:	0652      	lsls	r2, r2, #25
 800492a:	4311      	orrs	r1, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004930:	0912      	lsrs	r2, r2, #4
 8004932:	0452      	lsls	r2, r2, #17
 8004934:	430a      	orrs	r2, r1
 8004936:	4941      	ldr	r1, [pc, #260]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 8004938:	4313      	orrs	r3, r2
 800493a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800493c:	4b3f      	ldr	r3, [pc, #252]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a3e      	ldr	r2, [pc, #248]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 8004942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004946:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004948:	4b3c      	ldr	r3, [pc, #240]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	4a3b      	ldr	r2, [pc, #236]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 800494e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004952:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004954:	f7fb fe1c 	bl	8000590 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495c:	f7fb fe18 	bl	8000590 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e062      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800496e:	4b33      	ldr	r3, [pc, #204]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800497a:	e05a      	b.n	8004a32 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e059      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004980:	4b2e      	ldr	r3, [pc, #184]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d152      	bne.n	8004a32 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800498c:	4b2b      	ldr	r3, [pc, #172]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a2a      	ldr	r2, [pc, #168]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 8004992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004996:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004998:	4b28      	ldr	r3, [pc, #160]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4a27      	ldr	r2, [pc, #156]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 800499e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049a4:	f7fb fdf4 	bl	8000590 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ac:	f7fb fdf0 	bl	8000590 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e03a      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049be:	4b1f      	ldr	r3, [pc, #124]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCC_OscConfig+0x734>
 80049ca:	e032      	b.n	8004a32 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b0c      	cmp	r3, #12
 80049d0:	d02d      	beq.n	8004a2e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d2:	4b1a      	ldr	r3, [pc, #104]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a19      	ldr	r2, [pc, #100]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 80049d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049dc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80049de:	4b17      	ldr	r3, [pc, #92]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d105      	bne.n	80049f6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	4a13      	ldr	r2, [pc, #76]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 80049f0:	f023 0303 	bic.w	r3, r3, #3
 80049f4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049f6:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	4a10      	ldr	r2, [pc, #64]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 80049fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a04:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a06:	f7fb fdc3 	bl	8000590 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a0e:	f7fb fdbf 	bl	8000590 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e009      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a20:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <HAL_RCC_OscConfig+0x7c4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f0      	bne.n	8004a0e <HAL_RCC_OscConfig+0x796>
 8004a2c:	e001      	b.n	8004a32 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3720      	adds	r7, #32
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	f99d808c 	.word	0xf99d808c

08004a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0c8      	b.n	8004bea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a58:	4b66      	ldr	r3, [pc, #408]	; (8004bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d910      	bls.n	8004a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a66:	4b63      	ldr	r3, [pc, #396]	; (8004bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f023 0207 	bic.w	r2, r3, #7
 8004a6e:	4961      	ldr	r1, [pc, #388]	; (8004bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a76:	4b5f      	ldr	r3, [pc, #380]	; (8004bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d001      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0b0      	b.n	8004bea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d04c      	beq.n	8004b2e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d107      	bne.n	8004aac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9c:	4b56      	ldr	r3, [pc, #344]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d121      	bne.n	8004aec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e09e      	b.n	8004bea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d107      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ab4:	4b50      	ldr	r3, [pc, #320]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d115      	bne.n	8004aec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e092      	b.n	8004bea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d107      	bne.n	8004adc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004acc:	4b4a      	ldr	r3, [pc, #296]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d109      	bne.n	8004aec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e086      	b.n	8004bea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004adc:	4b46      	ldr	r3, [pc, #280]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e07e      	b.n	8004bea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004aec:	4b42      	ldr	r3, [pc, #264]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f023 0203 	bic.w	r2, r3, #3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	493f      	ldr	r1, [pc, #252]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004afe:	f7fb fd47 	bl	8000590 <HAL_GetTick>
 8004b02:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b06:	f7fb fd43 	bl	8000590 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e066      	b.n	8004bea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1c:	4b36      	ldr	r3, [pc, #216]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 020c 	and.w	r2, r3, #12
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d1eb      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b3a:	4b2f      	ldr	r3, [pc, #188]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	492c      	ldr	r1, [pc, #176]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b4c:	4b29      	ldr	r3, [pc, #164]	; (8004bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d210      	bcs.n	8004b7c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5a:	4b26      	ldr	r3, [pc, #152]	; (8004bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f023 0207 	bic.w	r2, r3, #7
 8004b62:	4924      	ldr	r1, [pc, #144]	; (8004bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6a:	4b22      	ldr	r3, [pc, #136]	; (8004bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e036      	b.n	8004bea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b88:	4b1b      	ldr	r3, [pc, #108]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4918      	ldr	r1, [pc, #96]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ba6:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4910      	ldr	r1, [pc, #64]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bba:	f000 f825 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	490c      	ldr	r1, [pc, #48]	; (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004bcc:	5ccb      	ldrb	r3, [r1, r3]
 8004bce:	f003 031f 	and.w	r3, r3, #31
 8004bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd6:	4a0a      	ldr	r2, [pc, #40]	; (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bda:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <HAL_RCC_ClockConfig+0x1c0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fb fc86 	bl	80004f0 <HAL_InitTick>
 8004be4:	4603      	mov	r3, r0
 8004be6:	72fb      	strb	r3, [r7, #11]

  return status;
 8004be8:	7afb      	ldrb	r3, [r7, #11]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40022000 	.word	0x40022000
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	0800a6c4 	.word	0x0800a6c4
 8004c00:	20000174 	.word	0x20000174
 8004c04:	20000000 	.word	0x20000000

08004c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b089      	sub	sp, #36	; 0x24
 8004c0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c16:	4b3e      	ldr	r3, [pc, #248]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
 8004c1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c20:	4b3b      	ldr	r3, [pc, #236]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f003 0303 	and.w	r3, r3, #3
 8004c28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_GetSysClockFreq+0x34>
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	2b0c      	cmp	r3, #12
 8004c34:	d121      	bne.n	8004c7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d11e      	bne.n	8004c7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c3c:	4b34      	ldr	r3, [pc, #208]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d107      	bne.n	8004c58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c48:	4b31      	ldr	r3, [pc, #196]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4e:	0a1b      	lsrs	r3, r3, #8
 8004c50:	f003 030f 	and.w	r3, r3, #15
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	e005      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c58:	4b2d      	ldr	r3, [pc, #180]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	091b      	lsrs	r3, r3, #4
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c64:	4a2b      	ldr	r2, [pc, #172]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10d      	bne.n	8004c90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c78:	e00a      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d102      	bne.n	8004c86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c80:	4b25      	ldr	r3, [pc, #148]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	e004      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d101      	bne.n	8004c90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c8c:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x114>)
 8004c8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2b0c      	cmp	r3, #12
 8004c94:	d134      	bne.n	8004d00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c96:	4b1e      	ldr	r3, [pc, #120]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d003      	beq.n	8004cae <HAL_RCC_GetSysClockFreq+0xa6>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d003      	beq.n	8004cb4 <HAL_RCC_GetSysClockFreq+0xac>
 8004cac:	e005      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cae:	4b1a      	ldr	r3, [pc, #104]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cb0:	617b      	str	r3, [r7, #20]
      break;
 8004cb2:	e005      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004cb4:	4b19      	ldr	r3, [pc, #100]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x114>)
 8004cb6:	617b      	str	r3, [r7, #20]
      break;
 8004cb8:	e002      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	617b      	str	r3, [r7, #20]
      break;
 8004cbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cc0:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	3301      	adds	r3, #1
 8004ccc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cce:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	0a1b      	lsrs	r3, r3, #8
 8004cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	fb02 f203 	mul.w	r2, r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ce6:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	0e5b      	lsrs	r3, r3, #25
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d00:	69bb      	ldr	r3, [r7, #24]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3724      	adds	r7, #36	; 0x24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40021000 	.word	0x40021000
 8004d14:	0800a6dc 	.word	0x0800a6dc
 8004d18:	00f42400 	.word	0x00f42400
 8004d1c:	007a1200 	.word	0x007a1200

08004d20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d24:	4b03      	ldr	r3, [pc, #12]	; (8004d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d26:	681b      	ldr	r3, [r3, #0]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	20000174 	.word	0x20000174

08004d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d3c:	f7ff fff0 	bl	8004d20 <HAL_RCC_GetHCLKFreq>
 8004d40:	4602      	mov	r2, r0
 8004d42:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	4904      	ldr	r1, [pc, #16]	; (8004d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d4e:	5ccb      	ldrb	r3, [r1, r3]
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	0800a6d4 	.word	0x0800a6d4

08004d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d68:	f7ff ffda 	bl	8004d20 <HAL_RCC_GetHCLKFreq>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	0adb      	lsrs	r3, r3, #11
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	4904      	ldr	r1, [pc, #16]	; (8004d8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d7a:	5ccb      	ldrb	r3, [r1, r3]
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	0800a6d4 	.word	0x0800a6d4

08004d90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d98:	2300      	movs	r3, #0
 8004d9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d9c:	4b2a      	ldr	r3, [pc, #168]	; (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004da8:	f7ff f9f2 	bl	8004190 <HAL_PWREx_GetVoltageRange>
 8004dac:	6178      	str	r0, [r7, #20]
 8004dae:	e014      	b.n	8004dda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004db0:	4b25      	ldr	r3, [pc, #148]	; (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db4:	4a24      	ldr	r2, [pc, #144]	; (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dba:	6593      	str	r3, [r2, #88]	; 0x58
 8004dbc:	4b22      	ldr	r3, [pc, #136]	; (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004dc8:	f7ff f9e2 	bl	8004190 <HAL_PWREx_GetVoltageRange>
 8004dcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dce:	4b1e      	ldr	r3, [pc, #120]	; (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd2:	4a1d      	ldr	r2, [pc, #116]	; (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de0:	d10b      	bne.n	8004dfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b80      	cmp	r3, #128	; 0x80
 8004de6:	d919      	bls.n	8004e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2ba0      	cmp	r3, #160	; 0xa0
 8004dec:	d902      	bls.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dee:	2302      	movs	r3, #2
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	e013      	b.n	8004e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004df4:	2301      	movs	r3, #1
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	e010      	b.n	8004e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b80      	cmp	r3, #128	; 0x80
 8004dfe:	d902      	bls.n	8004e06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e00:	2303      	movs	r3, #3
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	e00a      	b.n	8004e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b80      	cmp	r3, #128	; 0x80
 8004e0a:	d102      	bne.n	8004e12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	e004      	b.n	8004e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b70      	cmp	r3, #112	; 0x70
 8004e16:	d101      	bne.n	8004e1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e18:	2301      	movs	r3, #1
 8004e1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f023 0207 	bic.w	r2, r3, #7
 8004e24:	4909      	ldr	r1, [pc, #36]	; (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e2c:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d001      	beq.n	8004e3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	40022000 	.word	0x40022000

08004e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e58:	2300      	movs	r3, #0
 8004e5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d041      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e74:	d02a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e7a:	d824      	bhi.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e80:	d008      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e86:	d81e      	bhi.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e90:	d010      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e92:	e018      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e94:	4b86      	ldr	r3, [pc, #536]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	4a85      	ldr	r2, [pc, #532]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ea0:	e015      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fabb 	bl	8005424 <RCCEx_PLLSAI1_Config>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004eb2:	e00c      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3320      	adds	r3, #32
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fba6 	bl	800560c <RCCEx_PLLSAI2_Config>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ec4:	e003      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	74fb      	strb	r3, [r7, #19]
      break;
 8004eca:	e000      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ece:	7cfb      	ldrb	r3, [r7, #19]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10b      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ed4:	4b76      	ldr	r3, [pc, #472]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee2:	4973      	ldr	r1, [pc, #460]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004eea:	e001      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eec:	7cfb      	ldrb	r3, [r7, #19]
 8004eee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d041      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f04:	d02a      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f0a:	d824      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f10:	d008      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f16:	d81e      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f20:	d010      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f22:	e018      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f24:	4b62      	ldr	r3, [pc, #392]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	4a61      	ldr	r2, [pc, #388]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f30:	e015      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3304      	adds	r3, #4
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fa73 	bl	8005424 <RCCEx_PLLSAI1_Config>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f42:	e00c      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3320      	adds	r3, #32
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fb5e 	bl	800560c <RCCEx_PLLSAI2_Config>
 8004f50:	4603      	mov	r3, r0
 8004f52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f54:	e003      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	74fb      	strb	r3, [r7, #19]
      break;
 8004f5a:	e000      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f5e:	7cfb      	ldrb	r3, [r7, #19]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10b      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f64:	4b52      	ldr	r3, [pc, #328]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f72:	494f      	ldr	r1, [pc, #316]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f7a:	e001      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7c:	7cfb      	ldrb	r3, [r7, #19]
 8004f7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80a0 	beq.w	80050ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f92:	4b47      	ldr	r3, [pc, #284]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00d      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fa8:	4b41      	ldr	r3, [pc, #260]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fac:	4a40      	ldr	r2, [pc, #256]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fb4:	4b3e      	ldr	r3, [pc, #248]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fc4:	4b3b      	ldr	r3, [pc, #236]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a3a      	ldr	r2, [pc, #232]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fd0:	f7fb fade 	bl	8000590 <HAL_GetTick>
 8004fd4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fd6:	e009      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd8:	f7fb fada 	bl	8000590 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d902      	bls.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	74fb      	strb	r3, [r7, #19]
        break;
 8004fea:	e005      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fec:	4b31      	ldr	r3, [pc, #196]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0ef      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ff8:	7cfb      	ldrb	r3, [r7, #19]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d15c      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ffe:	4b2c      	ldr	r3, [pc, #176]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005008:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01f      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	429a      	cmp	r2, r3
 800501a:	d019      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800501c:	4b24      	ldr	r3, [pc, #144]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005026:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005028:	4b21      	ldr	r3, [pc, #132]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502e:	4a20      	ldr	r2, [pc, #128]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005038:	4b1d      	ldr	r3, [pc, #116]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503e:	4a1c      	ldr	r2, [pc, #112]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005048:	4a19      	ldr	r2, [pc, #100]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505a:	f7fb fa99 	bl	8000590 <HAL_GetTick>
 800505e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005060:	e00b      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005062:	f7fb fa95 	bl	8000590 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005070:	4293      	cmp	r3, r2
 8005072:	d902      	bls.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	74fb      	strb	r3, [r7, #19]
            break;
 8005078:	e006      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800507a:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0ec      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005088:	7cfb      	ldrb	r3, [r7, #19]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10c      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800508e:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800509e:	4904      	ldr	r1, [pc, #16]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050a6:	e009      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050a8:	7cfb      	ldrb	r3, [r7, #19]
 80050aa:	74bb      	strb	r3, [r7, #18]
 80050ac:	e006      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b8:	7cfb      	ldrb	r3, [r7, #19]
 80050ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050bc:	7c7b      	ldrb	r3, [r7, #17]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d105      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c2:	4b9e      	ldr	r3, [pc, #632]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c6:	4a9d      	ldr	r2, [pc, #628]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050da:	4b98      	ldr	r3, [pc, #608]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e0:	f023 0203 	bic.w	r2, r3, #3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	4994      	ldr	r1, [pc, #592]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050fc:	4b8f      	ldr	r3, [pc, #572]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	f023 020c 	bic.w	r2, r3, #12
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510a:	498c      	ldr	r1, [pc, #560]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800511e:	4b87      	ldr	r3, [pc, #540]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005124:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	4983      	ldr	r1, [pc, #524]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005140:	4b7e      	ldr	r3, [pc, #504]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005146:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514e:	497b      	ldr	r1, [pc, #492]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005162:	4b76      	ldr	r3, [pc, #472]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005170:	4972      	ldr	r1, [pc, #456]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005184:	4b6d      	ldr	r3, [pc, #436]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005192:	496a      	ldr	r1, [pc, #424]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051a6:	4b65      	ldr	r3, [pc, #404]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b4:	4961      	ldr	r1, [pc, #388]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051c8:	4b5c      	ldr	r3, [pc, #368]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d6:	4959      	ldr	r1, [pc, #356]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051ea:	4b54      	ldr	r3, [pc, #336]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f8:	4950      	ldr	r1, [pc, #320]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800520c:	4b4b      	ldr	r3, [pc, #300]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005212:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521a:	4948      	ldr	r1, [pc, #288]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800522e:	4b43      	ldr	r3, [pc, #268]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523c:	493f      	ldr	r1, [pc, #252]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d028      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005250:	4b3a      	ldr	r3, [pc, #232]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005256:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800525e:	4937      	ldr	r1, [pc, #220]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800526a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800526e:	d106      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005270:	4b32      	ldr	r3, [pc, #200]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	4a31      	ldr	r2, [pc, #196]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800527a:	60d3      	str	r3, [r2, #12]
 800527c:	e011      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005282:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005286:	d10c      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3304      	adds	r3, #4
 800528c:	2101      	movs	r1, #1
 800528e:	4618      	mov	r0, r3
 8005290:	f000 f8c8 	bl	8005424 <RCCEx_PLLSAI1_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005298:	7cfb      	ldrb	r3, [r7, #19]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800529e:	7cfb      	ldrb	r3, [r7, #19]
 80052a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d028      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052ae:	4b23      	ldr	r3, [pc, #140]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052bc:	491f      	ldr	r1, [pc, #124]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052cc:	d106      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052ce:	4b1b      	ldr	r3, [pc, #108]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	4a1a      	ldr	r2, [pc, #104]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052d8:	60d3      	str	r3, [r2, #12]
 80052da:	e011      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052e4:	d10c      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3304      	adds	r3, #4
 80052ea:	2101      	movs	r1, #1
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 f899 	bl	8005424 <RCCEx_PLLSAI1_Config>
 80052f2:	4603      	mov	r3, r0
 80052f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052f6:	7cfb      	ldrb	r3, [r7, #19]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d02b      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800530c:	4b0b      	ldr	r3, [pc, #44]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005312:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800531a:	4908      	ldr	r1, [pc, #32]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800532a:	d109      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800532c:	4b03      	ldr	r3, [pc, #12]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	4a02      	ldr	r2, [pc, #8]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005336:	60d3      	str	r3, [r2, #12]
 8005338:	e014      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800533a:	bf00      	nop
 800533c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005348:	d10c      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3304      	adds	r3, #4
 800534e:	2101      	movs	r1, #1
 8005350:	4618      	mov	r0, r3
 8005352:	f000 f867 	bl	8005424 <RCCEx_PLLSAI1_Config>
 8005356:	4603      	mov	r3, r0
 8005358:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800535a:	7cfb      	ldrb	r3, [r7, #19]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005360:	7cfb      	ldrb	r3, [r7, #19]
 8005362:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d02f      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005370:	4b2b      	ldr	r3, [pc, #172]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005376:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800537e:	4928      	ldr	r1, [pc, #160]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800538a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800538e:	d10d      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3304      	adds	r3, #4
 8005394:	2102      	movs	r1, #2
 8005396:	4618      	mov	r0, r3
 8005398:	f000 f844 	bl	8005424 <RCCEx_PLLSAI1_Config>
 800539c:	4603      	mov	r3, r0
 800539e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053a0:	7cfb      	ldrb	r3, [r7, #19]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d014      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053a6:	7cfb      	ldrb	r3, [r7, #19]
 80053a8:	74bb      	strb	r3, [r7, #18]
 80053aa:	e011      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053b4:	d10c      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	3320      	adds	r3, #32
 80053ba:	2102      	movs	r1, #2
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 f925 	bl	800560c <RCCEx_PLLSAI2_Config>
 80053c2:	4603      	mov	r3, r0
 80053c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053c6:	7cfb      	ldrb	r3, [r7, #19]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053cc:	7cfb      	ldrb	r3, [r7, #19]
 80053ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053dc:	4b10      	ldr	r3, [pc, #64]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053ea:	490d      	ldr	r1, [pc, #52]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053fe:	4b08      	ldr	r3, [pc, #32]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005404:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800540e:	4904      	ldr	r1, [pc, #16]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005410:	4313      	orrs	r3, r2
 8005412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005416:	7cbb      	ldrb	r3, [r7, #18]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40021000 	.word	0x40021000

08005424 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005432:	4b75      	ldr	r3, [pc, #468]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d018      	beq.n	8005470 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800543e:	4b72      	ldr	r3, [pc, #456]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f003 0203 	and.w	r2, r3, #3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d10d      	bne.n	800546a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
       ||
 8005452:	2b00      	cmp	r3, #0
 8005454:	d009      	beq.n	800546a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005456:	4b6c      	ldr	r3, [pc, #432]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	091b      	lsrs	r3, r3, #4
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
       ||
 8005466:	429a      	cmp	r2, r3
 8005468:	d047      	beq.n	80054fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	73fb      	strb	r3, [r7, #15]
 800546e:	e044      	b.n	80054fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b03      	cmp	r3, #3
 8005476:	d018      	beq.n	80054aa <RCCEx_PLLSAI1_Config+0x86>
 8005478:	2b03      	cmp	r3, #3
 800547a:	d825      	bhi.n	80054c8 <RCCEx_PLLSAI1_Config+0xa4>
 800547c:	2b01      	cmp	r3, #1
 800547e:	d002      	beq.n	8005486 <RCCEx_PLLSAI1_Config+0x62>
 8005480:	2b02      	cmp	r3, #2
 8005482:	d009      	beq.n	8005498 <RCCEx_PLLSAI1_Config+0x74>
 8005484:	e020      	b.n	80054c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005486:	4b60      	ldr	r3, [pc, #384]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d11d      	bne.n	80054ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005496:	e01a      	b.n	80054ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005498:	4b5b      	ldr	r3, [pc, #364]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d116      	bne.n	80054d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054a8:	e013      	b.n	80054d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054aa:	4b57      	ldr	r3, [pc, #348]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10f      	bne.n	80054d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054b6:	4b54      	ldr	r3, [pc, #336]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d109      	bne.n	80054d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054c6:	e006      	b.n	80054d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	73fb      	strb	r3, [r7, #15]
      break;
 80054cc:	e004      	b.n	80054d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054ce:	bf00      	nop
 80054d0:	e002      	b.n	80054d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054d2:	bf00      	nop
 80054d4:	e000      	b.n	80054d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10d      	bne.n	80054fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054de:	4b4a      	ldr	r3, [pc, #296]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6819      	ldr	r1, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	430b      	orrs	r3, r1
 80054f4:	4944      	ldr	r1, [pc, #272]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d17d      	bne.n	80055fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005500:	4b41      	ldr	r3, [pc, #260]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a40      	ldr	r2, [pc, #256]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005506:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800550a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800550c:	f7fb f840 	bl	8000590 <HAL_GetTick>
 8005510:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005512:	e009      	b.n	8005528 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005514:	f7fb f83c 	bl	8000590 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d902      	bls.n	8005528 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	73fb      	strb	r3, [r7, #15]
        break;
 8005526:	e005      	b.n	8005534 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005528:	4b37      	ldr	r3, [pc, #220]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1ef      	bne.n	8005514 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d160      	bne.n	80055fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d111      	bne.n	8005564 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005540:	4b31      	ldr	r3, [pc, #196]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6892      	ldr	r2, [r2, #8]
 8005550:	0211      	lsls	r1, r2, #8
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	68d2      	ldr	r2, [r2, #12]
 8005556:	0912      	lsrs	r2, r2, #4
 8005558:	0452      	lsls	r2, r2, #17
 800555a:	430a      	orrs	r2, r1
 800555c:	492a      	ldr	r1, [pc, #168]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800555e:	4313      	orrs	r3, r2
 8005560:	610b      	str	r3, [r1, #16]
 8005562:	e027      	b.n	80055b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d112      	bne.n	8005590 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800556a:	4b27      	ldr	r3, [pc, #156]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005572:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6892      	ldr	r2, [r2, #8]
 800557a:	0211      	lsls	r1, r2, #8
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6912      	ldr	r2, [r2, #16]
 8005580:	0852      	lsrs	r2, r2, #1
 8005582:	3a01      	subs	r2, #1
 8005584:	0552      	lsls	r2, r2, #21
 8005586:	430a      	orrs	r2, r1
 8005588:	491f      	ldr	r1, [pc, #124]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800558a:	4313      	orrs	r3, r2
 800558c:	610b      	str	r3, [r1, #16]
 800558e:	e011      	b.n	80055b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005590:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005598:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6892      	ldr	r2, [r2, #8]
 80055a0:	0211      	lsls	r1, r2, #8
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6952      	ldr	r2, [r2, #20]
 80055a6:	0852      	lsrs	r2, r2, #1
 80055a8:	3a01      	subs	r2, #1
 80055aa:	0652      	lsls	r2, r2, #25
 80055ac:	430a      	orrs	r2, r1
 80055ae:	4916      	ldr	r1, [pc, #88]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055b4:	4b14      	ldr	r3, [pc, #80]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a13      	ldr	r2, [pc, #76]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c0:	f7fa ffe6 	bl	8000590 <HAL_GetTick>
 80055c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055c6:	e009      	b.n	80055dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055c8:	f7fa ffe2 	bl	8000590 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d902      	bls.n	80055dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	73fb      	strb	r3, [r7, #15]
          break;
 80055da:	e005      	b.n	80055e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055dc:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0ef      	beq.n	80055c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055ee:	4b06      	ldr	r3, [pc, #24]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	4904      	ldr	r1, [pc, #16]	; (8005608 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000

0800560c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800561a:	4b6a      	ldr	r3, [pc, #424]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d018      	beq.n	8005658 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005626:	4b67      	ldr	r3, [pc, #412]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f003 0203 	and.w	r2, r3, #3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d10d      	bne.n	8005652 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
       ||
 800563a:	2b00      	cmp	r3, #0
 800563c:	d009      	beq.n	8005652 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800563e:	4b61      	ldr	r3, [pc, #388]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	091b      	lsrs	r3, r3, #4
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
       ||
 800564e:	429a      	cmp	r2, r3
 8005650:	d047      	beq.n	80056e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	73fb      	strb	r3, [r7, #15]
 8005656:	e044      	b.n	80056e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b03      	cmp	r3, #3
 800565e:	d018      	beq.n	8005692 <RCCEx_PLLSAI2_Config+0x86>
 8005660:	2b03      	cmp	r3, #3
 8005662:	d825      	bhi.n	80056b0 <RCCEx_PLLSAI2_Config+0xa4>
 8005664:	2b01      	cmp	r3, #1
 8005666:	d002      	beq.n	800566e <RCCEx_PLLSAI2_Config+0x62>
 8005668:	2b02      	cmp	r3, #2
 800566a:	d009      	beq.n	8005680 <RCCEx_PLLSAI2_Config+0x74>
 800566c:	e020      	b.n	80056b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800566e:	4b55      	ldr	r3, [pc, #340]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d11d      	bne.n	80056b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800567e:	e01a      	b.n	80056b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005680:	4b50      	ldr	r3, [pc, #320]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005688:	2b00      	cmp	r3, #0
 800568a:	d116      	bne.n	80056ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005690:	e013      	b.n	80056ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005692:	4b4c      	ldr	r3, [pc, #304]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10f      	bne.n	80056be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800569e:	4b49      	ldr	r3, [pc, #292]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056ae:	e006      	b.n	80056be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
      break;
 80056b4:	e004      	b.n	80056c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056b6:	bf00      	nop
 80056b8:	e002      	b.n	80056c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056ba:	bf00      	nop
 80056bc:	e000      	b.n	80056c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056be:	bf00      	nop
    }

    if(status == HAL_OK)
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10d      	bne.n	80056e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056c6:	4b3f      	ldr	r3, [pc, #252]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6819      	ldr	r1, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	430b      	orrs	r3, r1
 80056dc:	4939      	ldr	r1, [pc, #228]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d167      	bne.n	80057b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80056e8:	4b36      	ldr	r3, [pc, #216]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a35      	ldr	r2, [pc, #212]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f4:	f7fa ff4c 	bl	8000590 <HAL_GetTick>
 80056f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056fa:	e009      	b.n	8005710 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056fc:	f7fa ff48 	bl	8000590 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d902      	bls.n	8005710 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	73fb      	strb	r3, [r7, #15]
        break;
 800570e:	e005      	b.n	800571c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005710:	4b2c      	ldr	r3, [pc, #176]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1ef      	bne.n	80056fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d14a      	bne.n	80057b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d111      	bne.n	800574c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005728:	4b26      	ldr	r3, [pc, #152]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6892      	ldr	r2, [r2, #8]
 8005738:	0211      	lsls	r1, r2, #8
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	68d2      	ldr	r2, [r2, #12]
 800573e:	0912      	lsrs	r2, r2, #4
 8005740:	0452      	lsls	r2, r2, #17
 8005742:	430a      	orrs	r2, r1
 8005744:	491f      	ldr	r1, [pc, #124]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005746:	4313      	orrs	r3, r2
 8005748:	614b      	str	r3, [r1, #20]
 800574a:	e011      	b.n	8005770 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800574c:	4b1d      	ldr	r3, [pc, #116]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005754:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6892      	ldr	r2, [r2, #8]
 800575c:	0211      	lsls	r1, r2, #8
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6912      	ldr	r2, [r2, #16]
 8005762:	0852      	lsrs	r2, r2, #1
 8005764:	3a01      	subs	r2, #1
 8005766:	0652      	lsls	r2, r2, #25
 8005768:	430a      	orrs	r2, r1
 800576a:	4916      	ldr	r1, [pc, #88]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800576c:	4313      	orrs	r3, r2
 800576e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005770:	4b14      	ldr	r3, [pc, #80]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a13      	ldr	r2, [pc, #76]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800577a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577c:	f7fa ff08 	bl	8000590 <HAL_GetTick>
 8005780:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005782:	e009      	b.n	8005798 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005784:	f7fa ff04 	bl	8000590 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d902      	bls.n	8005798 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	73fb      	strb	r3, [r7, #15]
          break;
 8005796:	e005      	b.n	80057a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005798:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0ef      	beq.n	8005784 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d106      	bne.n	80057b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057aa:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ac:	695a      	ldr	r2, [r3, #20]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	4904      	ldr	r1, [pc, #16]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40021000 	.word	0x40021000

080057c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e040      	b.n	800585c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f004 f8ac 	bl	8009948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2224      	movs	r2, #36	; 0x24
 80057f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0201 	bic.w	r2, r2, #1
 8005804:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f82c 	bl	8005864 <UART_SetConfig>
 800580c:	4603      	mov	r3, r0
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e022      	b.n	800585c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 faaa 	bl	8005d78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005832:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005842:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fb31 	bl	8005ebc <UART_CheckIdleState>
 800585a:	4603      	mov	r3, r0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005864:	b5b0      	push	{r4, r5, r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	4313      	orrs	r3, r2
 8005886:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4bad      	ldr	r3, [pc, #692]	; (8005b44 <UART_SetConfig+0x2e0>)
 8005890:	4013      	ands	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6812      	ldr	r2, [r2, #0]
 8005896:	69f9      	ldr	r1, [r7, #28]
 8005898:	430b      	orrs	r3, r1
 800589a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4aa2      	ldr	r2, [pc, #648]	; (8005b48 <UART_SetConfig+0x2e4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d004      	beq.n	80058cc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	430a      	orrs	r2, r1
 80058de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a99      	ldr	r2, [pc, #612]	; (8005b4c <UART_SetConfig+0x2e8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d121      	bne.n	800592e <UART_SetConfig+0xca>
 80058ea:	4b99      	ldr	r3, [pc, #612]	; (8005b50 <UART_SetConfig+0x2ec>)
 80058ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d817      	bhi.n	8005928 <UART_SetConfig+0xc4>
 80058f8:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <UART_SetConfig+0x9c>)
 80058fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fe:	bf00      	nop
 8005900:	08005911 	.word	0x08005911
 8005904:	0800591d 	.word	0x0800591d
 8005908:	08005917 	.word	0x08005917
 800590c:	08005923 	.word	0x08005923
 8005910:	2301      	movs	r3, #1
 8005912:	76fb      	strb	r3, [r7, #27]
 8005914:	e0e7      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005916:	2302      	movs	r3, #2
 8005918:	76fb      	strb	r3, [r7, #27]
 800591a:	e0e4      	b.n	8005ae6 <UART_SetConfig+0x282>
 800591c:	2304      	movs	r3, #4
 800591e:	76fb      	strb	r3, [r7, #27]
 8005920:	e0e1      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005922:	2308      	movs	r3, #8
 8005924:	76fb      	strb	r3, [r7, #27]
 8005926:	e0de      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005928:	2310      	movs	r3, #16
 800592a:	76fb      	strb	r3, [r7, #27]
 800592c:	e0db      	b.n	8005ae6 <UART_SetConfig+0x282>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a88      	ldr	r2, [pc, #544]	; (8005b54 <UART_SetConfig+0x2f0>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d132      	bne.n	800599e <UART_SetConfig+0x13a>
 8005938:	4b85      	ldr	r3, [pc, #532]	; (8005b50 <UART_SetConfig+0x2ec>)
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593e:	f003 030c 	and.w	r3, r3, #12
 8005942:	2b0c      	cmp	r3, #12
 8005944:	d828      	bhi.n	8005998 <UART_SetConfig+0x134>
 8005946:	a201      	add	r2, pc, #4	; (adr r2, 800594c <UART_SetConfig+0xe8>)
 8005948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594c:	08005981 	.word	0x08005981
 8005950:	08005999 	.word	0x08005999
 8005954:	08005999 	.word	0x08005999
 8005958:	08005999 	.word	0x08005999
 800595c:	0800598d 	.word	0x0800598d
 8005960:	08005999 	.word	0x08005999
 8005964:	08005999 	.word	0x08005999
 8005968:	08005999 	.word	0x08005999
 800596c:	08005987 	.word	0x08005987
 8005970:	08005999 	.word	0x08005999
 8005974:	08005999 	.word	0x08005999
 8005978:	08005999 	.word	0x08005999
 800597c:	08005993 	.word	0x08005993
 8005980:	2300      	movs	r3, #0
 8005982:	76fb      	strb	r3, [r7, #27]
 8005984:	e0af      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005986:	2302      	movs	r3, #2
 8005988:	76fb      	strb	r3, [r7, #27]
 800598a:	e0ac      	b.n	8005ae6 <UART_SetConfig+0x282>
 800598c:	2304      	movs	r3, #4
 800598e:	76fb      	strb	r3, [r7, #27]
 8005990:	e0a9      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005992:	2308      	movs	r3, #8
 8005994:	76fb      	strb	r3, [r7, #27]
 8005996:	e0a6      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005998:	2310      	movs	r3, #16
 800599a:	76fb      	strb	r3, [r7, #27]
 800599c:	e0a3      	b.n	8005ae6 <UART_SetConfig+0x282>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a6d      	ldr	r2, [pc, #436]	; (8005b58 <UART_SetConfig+0x2f4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d120      	bne.n	80059ea <UART_SetConfig+0x186>
 80059a8:	4b69      	ldr	r3, [pc, #420]	; (8005b50 <UART_SetConfig+0x2ec>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059b2:	2b30      	cmp	r3, #48	; 0x30
 80059b4:	d013      	beq.n	80059de <UART_SetConfig+0x17a>
 80059b6:	2b30      	cmp	r3, #48	; 0x30
 80059b8:	d814      	bhi.n	80059e4 <UART_SetConfig+0x180>
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	d009      	beq.n	80059d2 <UART_SetConfig+0x16e>
 80059be:	2b20      	cmp	r3, #32
 80059c0:	d810      	bhi.n	80059e4 <UART_SetConfig+0x180>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <UART_SetConfig+0x168>
 80059c6:	2b10      	cmp	r3, #16
 80059c8:	d006      	beq.n	80059d8 <UART_SetConfig+0x174>
 80059ca:	e00b      	b.n	80059e4 <UART_SetConfig+0x180>
 80059cc:	2300      	movs	r3, #0
 80059ce:	76fb      	strb	r3, [r7, #27]
 80059d0:	e089      	b.n	8005ae6 <UART_SetConfig+0x282>
 80059d2:	2302      	movs	r3, #2
 80059d4:	76fb      	strb	r3, [r7, #27]
 80059d6:	e086      	b.n	8005ae6 <UART_SetConfig+0x282>
 80059d8:	2304      	movs	r3, #4
 80059da:	76fb      	strb	r3, [r7, #27]
 80059dc:	e083      	b.n	8005ae6 <UART_SetConfig+0x282>
 80059de:	2308      	movs	r3, #8
 80059e0:	76fb      	strb	r3, [r7, #27]
 80059e2:	e080      	b.n	8005ae6 <UART_SetConfig+0x282>
 80059e4:	2310      	movs	r3, #16
 80059e6:	76fb      	strb	r3, [r7, #27]
 80059e8:	e07d      	b.n	8005ae6 <UART_SetConfig+0x282>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a5b      	ldr	r2, [pc, #364]	; (8005b5c <UART_SetConfig+0x2f8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d120      	bne.n	8005a36 <UART_SetConfig+0x1d2>
 80059f4:	4b56      	ldr	r3, [pc, #344]	; (8005b50 <UART_SetConfig+0x2ec>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059fe:	2bc0      	cmp	r3, #192	; 0xc0
 8005a00:	d013      	beq.n	8005a2a <UART_SetConfig+0x1c6>
 8005a02:	2bc0      	cmp	r3, #192	; 0xc0
 8005a04:	d814      	bhi.n	8005a30 <UART_SetConfig+0x1cc>
 8005a06:	2b80      	cmp	r3, #128	; 0x80
 8005a08:	d009      	beq.n	8005a1e <UART_SetConfig+0x1ba>
 8005a0a:	2b80      	cmp	r3, #128	; 0x80
 8005a0c:	d810      	bhi.n	8005a30 <UART_SetConfig+0x1cc>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <UART_SetConfig+0x1b4>
 8005a12:	2b40      	cmp	r3, #64	; 0x40
 8005a14:	d006      	beq.n	8005a24 <UART_SetConfig+0x1c0>
 8005a16:	e00b      	b.n	8005a30 <UART_SetConfig+0x1cc>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	76fb      	strb	r3, [r7, #27]
 8005a1c:	e063      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	76fb      	strb	r3, [r7, #27]
 8005a22:	e060      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005a24:	2304      	movs	r3, #4
 8005a26:	76fb      	strb	r3, [r7, #27]
 8005a28:	e05d      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005a2a:	2308      	movs	r3, #8
 8005a2c:	76fb      	strb	r3, [r7, #27]
 8005a2e:	e05a      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005a30:	2310      	movs	r3, #16
 8005a32:	76fb      	strb	r3, [r7, #27]
 8005a34:	e057      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a49      	ldr	r2, [pc, #292]	; (8005b60 <UART_SetConfig+0x2fc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d125      	bne.n	8005a8c <UART_SetConfig+0x228>
 8005a40:	4b43      	ldr	r3, [pc, #268]	; (8005b50 <UART_SetConfig+0x2ec>)
 8005a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a4e:	d017      	beq.n	8005a80 <UART_SetConfig+0x21c>
 8005a50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a54:	d817      	bhi.n	8005a86 <UART_SetConfig+0x222>
 8005a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a5a:	d00b      	beq.n	8005a74 <UART_SetConfig+0x210>
 8005a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a60:	d811      	bhi.n	8005a86 <UART_SetConfig+0x222>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <UART_SetConfig+0x20a>
 8005a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a6a:	d006      	beq.n	8005a7a <UART_SetConfig+0x216>
 8005a6c:	e00b      	b.n	8005a86 <UART_SetConfig+0x222>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	76fb      	strb	r3, [r7, #27]
 8005a72:	e038      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005a74:	2302      	movs	r3, #2
 8005a76:	76fb      	strb	r3, [r7, #27]
 8005a78:	e035      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005a7a:	2304      	movs	r3, #4
 8005a7c:	76fb      	strb	r3, [r7, #27]
 8005a7e:	e032      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005a80:	2308      	movs	r3, #8
 8005a82:	76fb      	strb	r3, [r7, #27]
 8005a84:	e02f      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005a86:	2310      	movs	r3, #16
 8005a88:	76fb      	strb	r3, [r7, #27]
 8005a8a:	e02c      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a2d      	ldr	r2, [pc, #180]	; (8005b48 <UART_SetConfig+0x2e4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d125      	bne.n	8005ae2 <UART_SetConfig+0x27e>
 8005a96:	4b2e      	ldr	r3, [pc, #184]	; (8005b50 <UART_SetConfig+0x2ec>)
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005aa0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aa4:	d017      	beq.n	8005ad6 <UART_SetConfig+0x272>
 8005aa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aaa:	d817      	bhi.n	8005adc <UART_SetConfig+0x278>
 8005aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ab0:	d00b      	beq.n	8005aca <UART_SetConfig+0x266>
 8005ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ab6:	d811      	bhi.n	8005adc <UART_SetConfig+0x278>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <UART_SetConfig+0x260>
 8005abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac0:	d006      	beq.n	8005ad0 <UART_SetConfig+0x26c>
 8005ac2:	e00b      	b.n	8005adc <UART_SetConfig+0x278>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	76fb      	strb	r3, [r7, #27]
 8005ac8:	e00d      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005aca:	2302      	movs	r3, #2
 8005acc:	76fb      	strb	r3, [r7, #27]
 8005ace:	e00a      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	76fb      	strb	r3, [r7, #27]
 8005ad4:	e007      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005ad6:	2308      	movs	r3, #8
 8005ad8:	76fb      	strb	r3, [r7, #27]
 8005ada:	e004      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005adc:	2310      	movs	r3, #16
 8005ade:	76fb      	strb	r3, [r7, #27]
 8005ae0:	e001      	b.n	8005ae6 <UART_SetConfig+0x282>
 8005ae2:	2310      	movs	r3, #16
 8005ae4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a17      	ldr	r2, [pc, #92]	; (8005b48 <UART_SetConfig+0x2e4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	f040 8087 	bne.w	8005c00 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005af2:	7efb      	ldrb	r3, [r7, #27]
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d837      	bhi.n	8005b68 <UART_SetConfig+0x304>
 8005af8:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <UART_SetConfig+0x29c>)
 8005afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afe:	bf00      	nop
 8005b00:	08005b25 	.word	0x08005b25
 8005b04:	08005b69 	.word	0x08005b69
 8005b08:	08005b2d 	.word	0x08005b2d
 8005b0c:	08005b69 	.word	0x08005b69
 8005b10:	08005b33 	.word	0x08005b33
 8005b14:	08005b69 	.word	0x08005b69
 8005b18:	08005b69 	.word	0x08005b69
 8005b1c:	08005b69 	.word	0x08005b69
 8005b20:	08005b3b 	.word	0x08005b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b24:	f7ff f908 	bl	8004d38 <HAL_RCC_GetPCLK1Freq>
 8005b28:	6178      	str	r0, [r7, #20]
        break;
 8005b2a:	e022      	b.n	8005b72 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b2c:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <UART_SetConfig+0x300>)
 8005b2e:	617b      	str	r3, [r7, #20]
        break;
 8005b30:	e01f      	b.n	8005b72 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b32:	f7ff f869 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8005b36:	6178      	str	r0, [r7, #20]
        break;
 8005b38:	e01b      	b.n	8005b72 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b3e:	617b      	str	r3, [r7, #20]
        break;
 8005b40:	e017      	b.n	8005b72 <UART_SetConfig+0x30e>
 8005b42:	bf00      	nop
 8005b44:	efff69f3 	.word	0xefff69f3
 8005b48:	40008000 	.word	0x40008000
 8005b4c:	40013800 	.word	0x40013800
 8005b50:	40021000 	.word	0x40021000
 8005b54:	40004400 	.word	0x40004400
 8005b58:	40004800 	.word	0x40004800
 8005b5c:	40004c00 	.word	0x40004c00
 8005b60:	40005000 	.word	0x40005000
 8005b64:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	76bb      	strb	r3, [r7, #26]
        break;
 8005b70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 80f1 	beq.w	8005d5c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	4413      	add	r3, r2
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d305      	bcc.n	8005b96 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d902      	bls.n	8005b9c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	76bb      	strb	r3, [r7, #26]
 8005b9a:	e0df      	b.n	8005d5c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f04f 0100 	mov.w	r1, #0
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	020b      	lsls	r3, r1, #8
 8005bae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bb2:	0202      	lsls	r2, r0, #8
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	6849      	ldr	r1, [r1, #4]
 8005bb8:	0849      	lsrs	r1, r1, #1
 8005bba:	4608      	mov	r0, r1
 8005bbc:	f04f 0100 	mov.w	r1, #0
 8005bc0:	1814      	adds	r4, r2, r0
 8005bc2:	eb43 0501 	adc.w	r5, r3, r1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f04f 0300 	mov.w	r3, #0
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	f7fa faf8 	bl	80001c8 <__aeabi_uldivmod>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4613      	mov	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005be6:	d308      	bcc.n	8005bfa <UART_SetConfig+0x396>
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bee:	d204      	bcs.n	8005bfa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	60da      	str	r2, [r3, #12]
 8005bf8:	e0b0      	b.n	8005d5c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	76bb      	strb	r3, [r7, #26]
 8005bfe:	e0ad      	b.n	8005d5c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c08:	d15c      	bne.n	8005cc4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005c0a:	7efb      	ldrb	r3, [r7, #27]
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d828      	bhi.n	8005c62 <UART_SetConfig+0x3fe>
 8005c10:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <UART_SetConfig+0x3b4>)
 8005c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c16:	bf00      	nop
 8005c18:	08005c3d 	.word	0x08005c3d
 8005c1c:	08005c45 	.word	0x08005c45
 8005c20:	08005c4d 	.word	0x08005c4d
 8005c24:	08005c63 	.word	0x08005c63
 8005c28:	08005c53 	.word	0x08005c53
 8005c2c:	08005c63 	.word	0x08005c63
 8005c30:	08005c63 	.word	0x08005c63
 8005c34:	08005c63 	.word	0x08005c63
 8005c38:	08005c5b 	.word	0x08005c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c3c:	f7ff f87c 	bl	8004d38 <HAL_RCC_GetPCLK1Freq>
 8005c40:	6178      	str	r0, [r7, #20]
        break;
 8005c42:	e013      	b.n	8005c6c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c44:	f7ff f88e 	bl	8004d64 <HAL_RCC_GetPCLK2Freq>
 8005c48:	6178      	str	r0, [r7, #20]
        break;
 8005c4a:	e00f      	b.n	8005c6c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c4c:	4b49      	ldr	r3, [pc, #292]	; (8005d74 <UART_SetConfig+0x510>)
 8005c4e:	617b      	str	r3, [r7, #20]
        break;
 8005c50:	e00c      	b.n	8005c6c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c52:	f7fe ffd9 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8005c56:	6178      	str	r0, [r7, #20]
        break;
 8005c58:	e008      	b.n	8005c6c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c5e:	617b      	str	r3, [r7, #20]
        break;
 8005c60:	e004      	b.n	8005c6c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	76bb      	strb	r3, [r7, #26]
        break;
 8005c6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d074      	beq.n	8005d5c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	005a      	lsls	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	441a      	add	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b0f      	cmp	r3, #15
 8005c8e:	d916      	bls.n	8005cbe <UART_SetConfig+0x45a>
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c96:	d212      	bcs.n	8005cbe <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f023 030f 	bic.w	r3, r3, #15
 8005ca0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	085b      	lsrs	r3, r3, #1
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	89fb      	ldrh	r3, [r7, #14]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	89fa      	ldrh	r2, [r7, #14]
 8005cba:	60da      	str	r2, [r3, #12]
 8005cbc:	e04e      	b.n	8005d5c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	76bb      	strb	r3, [r7, #26]
 8005cc2:	e04b      	b.n	8005d5c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cc4:	7efb      	ldrb	r3, [r7, #27]
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d827      	bhi.n	8005d1a <UART_SetConfig+0x4b6>
 8005cca:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <UART_SetConfig+0x46c>)
 8005ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd0:	08005cf5 	.word	0x08005cf5
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005d05 	.word	0x08005d05
 8005cdc:	08005d1b 	.word	0x08005d1b
 8005ce0:	08005d0b 	.word	0x08005d0b
 8005ce4:	08005d1b 	.word	0x08005d1b
 8005ce8:	08005d1b 	.word	0x08005d1b
 8005cec:	08005d1b 	.word	0x08005d1b
 8005cf0:	08005d13 	.word	0x08005d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf4:	f7ff f820 	bl	8004d38 <HAL_RCC_GetPCLK1Freq>
 8005cf8:	6178      	str	r0, [r7, #20]
        break;
 8005cfa:	e013      	b.n	8005d24 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cfc:	f7ff f832 	bl	8004d64 <HAL_RCC_GetPCLK2Freq>
 8005d00:	6178      	str	r0, [r7, #20]
        break;
 8005d02:	e00f      	b.n	8005d24 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d04:	4b1b      	ldr	r3, [pc, #108]	; (8005d74 <UART_SetConfig+0x510>)
 8005d06:	617b      	str	r3, [r7, #20]
        break;
 8005d08:	e00c      	b.n	8005d24 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d0a:	f7fe ff7d 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8005d0e:	6178      	str	r0, [r7, #20]
        break;
 8005d10:	e008      	b.n	8005d24 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d16:	617b      	str	r3, [r7, #20]
        break;
 8005d18:	e004      	b.n	8005d24 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	76bb      	strb	r3, [r7, #26]
        break;
 8005d22:	bf00      	nop
    }

    if (pclk != 0U)
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d018      	beq.n	8005d5c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	085a      	lsrs	r2, r3, #1
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	441a      	add	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b0f      	cmp	r3, #15
 8005d44:	d908      	bls.n	8005d58 <UART_SetConfig+0x4f4>
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4c:	d204      	bcs.n	8005d58 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	60da      	str	r2, [r3, #12]
 8005d56:	e001      	b.n	8005d5c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d68:	7ebb      	ldrb	r3, [r7, #26]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3720      	adds	r7, #32
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bdb0      	pop	{r4, r5, r7, pc}
 8005d72:	bf00      	nop
 8005d74:	00f42400 	.word	0x00f42400

08005d78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d01a      	beq.n	8005e8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e76:	d10a      	bne.n	8005e8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	605a      	str	r2, [r3, #4]
  }
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ecc:	f7fa fb60 	bl	8000590 <HAL_GetTick>
 8005ed0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d10e      	bne.n	8005efe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f82d 	bl	8005f4e <UART_WaitOnFlagUntilTimeout>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e023      	b.n	8005f46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b04      	cmp	r3, #4
 8005f0a:	d10e      	bne.n	8005f2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f817 	bl	8005f4e <UART_WaitOnFlagUntilTimeout>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e00d      	b.n	8005f46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2220      	movs	r2, #32
 8005f34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	603b      	str	r3, [r7, #0]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f5e:	e05e      	b.n	800601e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f66:	d05a      	beq.n	800601e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f68:	f7fa fb12 	bl	8000590 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d302      	bcc.n	8005f7e <UART_WaitOnFlagUntilTimeout+0x30>
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d11b      	bne.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f8c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0201 	bic.w	r2, r2, #1
 8005f9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e043      	b.n	800603e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d02c      	beq.n	800601e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fd2:	d124      	bne.n	800601e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fdc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fec:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0201 	bic.w	r2, r2, #1
 8005ffc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2220      	movs	r2, #32
 8006002:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2220      	movs	r2, #32
 8006008:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e00f      	b.n	800603e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69da      	ldr	r2, [r3, #28]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	4013      	ands	r3, r2
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	429a      	cmp	r2, r3
 800602c:	bf0c      	ite	eq
 800602e:	2301      	moveq	r3, #1
 8006030:	2300      	movne	r3, #0
 8006032:	b2db      	uxtb	r3, r3
 8006034:	461a      	mov	r2, r3
 8006036:	79fb      	ldrb	r3, [r7, #7]
 8006038:	429a      	cmp	r2, r3
 800603a:	d091      	beq.n	8005f60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006046:	b084      	sub	sp, #16
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	f107 001c 	add.w	r0, r7, #28
 8006054:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f001 f9cf 	bl	8007408 <USB_CoreReset>
 800606a:	4603      	mov	r3, r0
 800606c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800606e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006070:	2b00      	cmp	r3, #0
 8006072:	d106      	bne.n	8006082 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006078:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	639a      	str	r2, [r3, #56]	; 0x38
 8006080:	e005      	b.n	800608e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800608e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800609a:	b004      	add	sp, #16
 800609c:	4770      	bx	lr
	...

080060a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	4613      	mov	r3, r2
 80060ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d165      	bne.n	8006180 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4a3e      	ldr	r2, [pc, #248]	; (80061b0 <USB_SetTurnaroundTime+0x110>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d906      	bls.n	80060ca <USB_SetTurnaroundTime+0x2a>
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	4a3d      	ldr	r2, [pc, #244]	; (80061b4 <USB_SetTurnaroundTime+0x114>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d202      	bcs.n	80060ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80060c4:	230f      	movs	r3, #15
 80060c6:	617b      	str	r3, [r7, #20]
 80060c8:	e05c      	b.n	8006184 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	4a39      	ldr	r2, [pc, #228]	; (80061b4 <USB_SetTurnaroundTime+0x114>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d306      	bcc.n	80060e0 <USB_SetTurnaroundTime+0x40>
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	4a38      	ldr	r2, [pc, #224]	; (80061b8 <USB_SetTurnaroundTime+0x118>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d202      	bcs.n	80060e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80060da:	230e      	movs	r3, #14
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	e051      	b.n	8006184 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	4a35      	ldr	r2, [pc, #212]	; (80061b8 <USB_SetTurnaroundTime+0x118>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d306      	bcc.n	80060f6 <USB_SetTurnaroundTime+0x56>
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4a34      	ldr	r2, [pc, #208]	; (80061bc <USB_SetTurnaroundTime+0x11c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d202      	bcs.n	80060f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80060f0:	230d      	movs	r3, #13
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	e046      	b.n	8006184 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	4a30      	ldr	r2, [pc, #192]	; (80061bc <USB_SetTurnaroundTime+0x11c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d306      	bcc.n	800610c <USB_SetTurnaroundTime+0x6c>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	4a2f      	ldr	r2, [pc, #188]	; (80061c0 <USB_SetTurnaroundTime+0x120>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d802      	bhi.n	800610c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006106:	230c      	movs	r3, #12
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	e03b      	b.n	8006184 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4a2c      	ldr	r2, [pc, #176]	; (80061c0 <USB_SetTurnaroundTime+0x120>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d906      	bls.n	8006122 <USB_SetTurnaroundTime+0x82>
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4a2b      	ldr	r2, [pc, #172]	; (80061c4 <USB_SetTurnaroundTime+0x124>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d802      	bhi.n	8006122 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800611c:	230b      	movs	r3, #11
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	e030      	b.n	8006184 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	4a27      	ldr	r2, [pc, #156]	; (80061c4 <USB_SetTurnaroundTime+0x124>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d906      	bls.n	8006138 <USB_SetTurnaroundTime+0x98>
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	4a26      	ldr	r2, [pc, #152]	; (80061c8 <USB_SetTurnaroundTime+0x128>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d802      	bhi.n	8006138 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006132:	230a      	movs	r3, #10
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	e025      	b.n	8006184 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4a23      	ldr	r2, [pc, #140]	; (80061c8 <USB_SetTurnaroundTime+0x128>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d906      	bls.n	800614e <USB_SetTurnaroundTime+0xae>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4a22      	ldr	r2, [pc, #136]	; (80061cc <USB_SetTurnaroundTime+0x12c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d202      	bcs.n	800614e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006148:	2309      	movs	r3, #9
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	e01a      	b.n	8006184 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	4a1e      	ldr	r2, [pc, #120]	; (80061cc <USB_SetTurnaroundTime+0x12c>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d306      	bcc.n	8006164 <USB_SetTurnaroundTime+0xc4>
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	4a1d      	ldr	r2, [pc, #116]	; (80061d0 <USB_SetTurnaroundTime+0x130>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d802      	bhi.n	8006164 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800615e:	2308      	movs	r3, #8
 8006160:	617b      	str	r3, [r7, #20]
 8006162:	e00f      	b.n	8006184 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4a1a      	ldr	r2, [pc, #104]	; (80061d0 <USB_SetTurnaroundTime+0x130>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d906      	bls.n	800617a <USB_SetTurnaroundTime+0xda>
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	4a19      	ldr	r2, [pc, #100]	; (80061d4 <USB_SetTurnaroundTime+0x134>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d202      	bcs.n	800617a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006174:	2307      	movs	r3, #7
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	e004      	b.n	8006184 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800617a:	2306      	movs	r3, #6
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	e001      	b.n	8006184 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006180:	2309      	movs	r3, #9
 8006182:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	029b      	lsls	r3, r3, #10
 8006198:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800619c:	431a      	orrs	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	00d8acbf 	.word	0x00d8acbf
 80061b4:	00e4e1c0 	.word	0x00e4e1c0
 80061b8:	00f42400 	.word	0x00f42400
 80061bc:	01067380 	.word	0x01067380
 80061c0:	011a499f 	.word	0x011a499f
 80061c4:	01312cff 	.word	0x01312cff
 80061c8:	014ca43f 	.word	0x014ca43f
 80061cc:	016e3600 	.word	0x016e3600
 80061d0:	01a6ab1f 	.word	0x01a6ab1f
 80061d4:	01e84800 	.word	0x01e84800

080061d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f043 0201 	orr.w	r2, r3, #1
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f023 0201 	bic.w	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006234:	78fb      	ldrb	r3, [r7, #3]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d106      	bne.n	8006248 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	60da      	str	r2, [r3, #12]
 8006246:	e00b      	b.n	8006260 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d106      	bne.n	800625c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	60da      	str	r2, [r3, #12]
 800625a:	e001      	b.n	8006260 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e003      	b.n	8006268 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006260:	2032      	movs	r0, #50	; 0x32
 8006262:	f7fa f9a1 	bl	80005a8 <HAL_Delay>

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006270:	b084      	sub	sp, #16
 8006272:	b580      	push	{r7, lr}
 8006274:	b086      	sub	sp, #24
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800627e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800628a:	2300      	movs	r3, #0
 800628c:	613b      	str	r3, [r7, #16]
 800628e:	e009      	b.n	80062a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	3340      	adds	r3, #64	; 0x40
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	2200      	movs	r2, #0
 800629c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	3301      	adds	r3, #1
 80062a2:	613b      	str	r3, [r7, #16]
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	2b0e      	cmp	r3, #14
 80062a8:	d9f2      	bls.n	8006290 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d11c      	bne.n	80062ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062be:	f043 0302 	orr.w	r3, r3, #2
 80062c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	e005      	b.n	80062f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062fc:	461a      	mov	r2, r3
 80062fe:	2300      	movs	r3, #0
 8006300:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006308:	4619      	mov	r1, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006310:	461a      	mov	r2, r3
 8006312:	680b      	ldr	r3, [r1, #0]
 8006314:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006316:	2103      	movs	r1, #3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f93d 	bl	8006598 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800631e:	2110      	movs	r1, #16
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f8f1 	bl	8006508 <USB_FlushTxFifo>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f90f 	bl	8006554 <USB_FlushRxFifo>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006346:	461a      	mov	r2, r3
 8006348:	2300      	movs	r3, #0
 800634a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006352:	461a      	mov	r2, r3
 8006354:	2300      	movs	r3, #0
 8006356:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635e:	461a      	mov	r2, r3
 8006360:	2300      	movs	r3, #0
 8006362:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006364:	2300      	movs	r3, #0
 8006366:	613b      	str	r3, [r7, #16]
 8006368:	e043      	b.n	80063f2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800637c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006380:	d118      	bne.n	80063b4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10a      	bne.n	800639e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006394:	461a      	mov	r2, r3
 8006396:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	e013      	b.n	80063c6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063aa:	461a      	mov	r2, r3
 80063ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	e008      	b.n	80063c6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c0:	461a      	mov	r2, r3
 80063c2:	2300      	movs	r3, #0
 80063c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d2:	461a      	mov	r2, r3
 80063d4:	2300      	movs	r3, #0
 80063d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e4:	461a      	mov	r2, r3
 80063e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	3301      	adds	r3, #1
 80063f0:	613b      	str	r3, [r7, #16]
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d3b7      	bcc.n	800636a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063fa:	2300      	movs	r3, #0
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	e043      	b.n	8006488 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006416:	d118      	bne.n	800644a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10a      	bne.n	8006434 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642a:	461a      	mov	r2, r3
 800642c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	e013      	b.n	800645c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006440:	461a      	mov	r2, r3
 8006442:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	e008      	b.n	800645c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006456:	461a      	mov	r2, r3
 8006458:	2300      	movs	r3, #0
 800645a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006468:	461a      	mov	r2, r3
 800646a:	2300      	movs	r3, #0
 800646c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647a:	461a      	mov	r2, r3
 800647c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006480:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	3301      	adds	r3, #1
 8006486:	613b      	str	r3, [r7, #16]
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	429a      	cmp	r2, r3
 800648e:	d3b7      	bcc.n	8006400 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800649e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80064b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	f043 0210 	orr.w	r2, r3, #16
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	4b10      	ldr	r3, [pc, #64]	; (8006504 <USB_DevInit+0x294>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	f043 0208 	orr.w	r2, r3, #8
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d107      	bne.n	80064f2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ea:	f043 0304 	orr.w	r3, r3, #4
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064fe:	b004      	add	sp, #16
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	803c3800 	.word	0x803c3800

08006508 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	019b      	lsls	r3, r3, #6
 800651a:	f043 0220 	orr.w	r2, r3, #32
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3301      	adds	r3, #1
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4a09      	ldr	r2, [pc, #36]	; (8006550 <USB_FlushTxFifo+0x48>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d901      	bls.n	8006534 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e006      	b.n	8006542 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b20      	cmp	r3, #32
 800653e:	d0f0      	beq.n	8006522 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	00030d40 	.word	0x00030d40

08006554 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2210      	movs	r2, #16
 8006564:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3301      	adds	r3, #1
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4a09      	ldr	r2, [pc, #36]	; (8006594 <USB_FlushRxFifo+0x40>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d901      	bls.n	8006578 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e006      	b.n	8006586 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	2b10      	cmp	r3, #16
 8006582:	d0f0      	beq.n	8006566 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	00030d40 	.word	0x00030d40

08006598 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	68f9      	ldr	r1, [r7, #12]
 80065b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065b8:	4313      	orrs	r3, r2
 80065ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b087      	sub	sp, #28
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f003 0306 	and.w	r3, r3, #6
 80065e2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d002      	beq.n	80065f0 <USB_GetDevSpeed+0x26>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b06      	cmp	r3, #6
 80065ee:	d102      	bne.n	80065f6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80065f0:	2302      	movs	r3, #2
 80065f2:	75fb      	strb	r3, [r7, #23]
 80065f4:	e001      	b.n	80065fa <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80065f6:	230f      	movs	r3, #15
 80065f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d13a      	bne.n	800669a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662a:	69da      	ldr	r2, [r3, #28]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	f003 030f 	and.w	r3, r3, #15
 8006634:	2101      	movs	r1, #1
 8006636:	fa01 f303 	lsl.w	r3, r1, r3
 800663a:	b29b      	uxth	r3, r3
 800663c:	68f9      	ldr	r1, [r7, #12]
 800663e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006642:	4313      	orrs	r3, r2
 8006644:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d155      	bne.n	8006708 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	78db      	ldrb	r3, [r3, #3]
 8006676:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006678:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	059b      	lsls	r3, r3, #22
 800667e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006680:	4313      	orrs	r3, r2
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	0151      	lsls	r1, r2, #5
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	440a      	add	r2, r1
 800668a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800668e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	e036      	b.n	8006708 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a0:	69da      	ldr	r2, [r3, #28]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	f003 030f 	and.w	r3, r3, #15
 80066aa:	2101      	movs	r1, #1
 80066ac:	fa01 f303 	lsl.w	r3, r1, r3
 80066b0:	041b      	lsls	r3, r3, #16
 80066b2:	68f9      	ldr	r1, [r7, #12]
 80066b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066b8:	4313      	orrs	r3, r2
 80066ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d11a      	bne.n	8006708 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	78db      	ldrb	r3, [r3, #3]
 80066ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066ee:	430b      	orrs	r3, r1
 80066f0:	4313      	orrs	r3, r2
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006706:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
	...

08006718 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	785b      	ldrb	r3, [r3, #1]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d161      	bne.n	80067f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800674a:	d11f      	bne.n	800678c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	0151      	lsls	r1, r2, #5
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	440a      	add	r2, r1
 8006762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006766:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800676a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	0151      	lsls	r1, r2, #5
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	440a      	add	r2, r1
 8006782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006786:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800678a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	f003 030f 	and.w	r3, r3, #15
 800679c:	2101      	movs	r1, #1
 800679e:	fa01 f303 	lsl.w	r3, r1, r3
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	43db      	mvns	r3, r3
 80067a6:	68f9      	ldr	r1, [r7, #12]
 80067a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067ac:	4013      	ands	r3, r2
 80067ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b6:	69da      	ldr	r2, [r3, #28]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	f003 030f 	and.w	r3, r3, #15
 80067c0:	2101      	movs	r1, #1
 80067c2:	fa01 f303 	lsl.w	r3, r1, r3
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	43db      	mvns	r3, r3
 80067ca:	68f9      	ldr	r1, [r7, #12]
 80067cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067d0:	4013      	ands	r3, r2
 80067d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	0159      	lsls	r1, r3, #5
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	440b      	add	r3, r1
 80067ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ee:	4619      	mov	r1, r3
 80067f0:	4b35      	ldr	r3, [pc, #212]	; (80068c8 <USB_DeactivateEndpoint+0x1b0>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	600b      	str	r3, [r1, #0]
 80067f6:	e060      	b.n	80068ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800680a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800680e:	d11f      	bne.n	8006850 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	0151      	lsls	r1, r2, #5
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	440a      	add	r2, r1
 8006826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800682a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800682e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	440a      	add	r2, r1
 8006846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800684a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800684e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	f003 030f 	and.w	r3, r3, #15
 8006860:	2101      	movs	r1, #1
 8006862:	fa01 f303 	lsl.w	r3, r1, r3
 8006866:	041b      	lsls	r3, r3, #16
 8006868:	43db      	mvns	r3, r3
 800686a:	68f9      	ldr	r1, [r7, #12]
 800686c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006870:	4013      	ands	r3, r2
 8006872:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687a:	69da      	ldr	r2, [r3, #28]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	f003 030f 	and.w	r3, r3, #15
 8006884:	2101      	movs	r1, #1
 8006886:	fa01 f303 	lsl.w	r3, r1, r3
 800688a:	041b      	lsls	r3, r3, #16
 800688c:	43db      	mvns	r3, r3
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006894:	4013      	ands	r3, r2
 8006896:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	0159      	lsls	r1, r3, #5
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	440b      	add	r3, r1
 80068ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b2:	4619      	mov	r1, r3
 80068b4:	4b05      	ldr	r3, [pc, #20]	; (80068cc <USB_DeactivateEndpoint+0x1b4>)
 80068b6:	4013      	ands	r3, r2
 80068b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	ec337800 	.word	0xec337800
 80068cc:	eff37800 	.word	0xeff37800

080068d0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	785b      	ldrb	r3, [r3, #1]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	f040 810a 	bne.w	8006b02 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d132      	bne.n	800695c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	0151      	lsls	r1, r2, #5
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	440a      	add	r2, r1
 800690c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006910:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006914:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006918:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	0151      	lsls	r1, r2, #5
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	440a      	add	r2, r1
 8006930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006934:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006938:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	0151      	lsls	r1, r2, #5
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	440a      	add	r2, r1
 8006950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006954:	0cdb      	lsrs	r3, r3, #19
 8006956:	04db      	lsls	r3, r3, #19
 8006958:	6113      	str	r3, [r2, #16]
 800695a:	e074      	b.n	8006a46 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	0151      	lsls	r1, r2, #5
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	440a      	add	r2, r1
 8006972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006976:	0cdb      	lsrs	r3, r3, #19
 8006978:	04db      	lsls	r3, r3, #19
 800697a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	440a      	add	r2, r1
 8006992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006996:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800699a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800699e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ac:	691a      	ldr	r2, [r3, #16]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	6959      	ldr	r1, [r3, #20]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	440b      	add	r3, r1
 80069b8:	1e59      	subs	r1, r3, #1
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	fbb1 f3f3 	udiv	r3, r1, r3
 80069c2:	04d9      	lsls	r1, r3, #19
 80069c4:	4baf      	ldr	r3, [pc, #700]	; (8006c84 <USB_EPStartXfer+0x3b4>)
 80069c6:	400b      	ands	r3, r1
 80069c8:	6939      	ldr	r1, [r7, #16]
 80069ca:	0148      	lsls	r0, r1, #5
 80069cc:	6979      	ldr	r1, [r7, #20]
 80069ce:	4401      	add	r1, r0
 80069d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069d4:	4313      	orrs	r3, r2
 80069d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ee:	6939      	ldr	r1, [r7, #16]
 80069f0:	0148      	lsls	r0, r1, #5
 80069f2:	6979      	ldr	r1, [r7, #20]
 80069f4:	4401      	add	r1, r0
 80069f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069fa:	4313      	orrs	r3, r2
 80069fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	78db      	ldrb	r3, [r3, #3]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d11f      	bne.n	8006a46 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	0151      	lsls	r1, r2, #5
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	440a      	add	r2, r1
 8006a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006a24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	0151      	lsls	r1, r2, #5
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	440a      	add	r2, r1
 8006a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a44:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	0151      	lsls	r1, r2, #5
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	440a      	add	r2, r1
 8006a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a64:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	78db      	ldrb	r3, [r3, #3]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d015      	beq.n	8006a9a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 8100 	beq.w	8006c78 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	f003 030f 	and.w	r3, r3, #15
 8006a88:	2101      	movs	r1, #1
 8006a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8e:	6979      	ldr	r1, [r7, #20]
 8006a90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a94:	4313      	orrs	r3, r2
 8006a96:	634b      	str	r3, [r1, #52]	; 0x34
 8006a98:	e0ee      	b.n	8006c78 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d110      	bne.n	8006acc <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	0151      	lsls	r1, r2, #5
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	440a      	add	r2, r1
 8006ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ac8:	6013      	str	r3, [r2, #0]
 8006aca:	e00f      	b.n	8006aec <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	0151      	lsls	r1, r2, #5
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	440a      	add	r2, r1
 8006ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aea:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	68d9      	ldr	r1, [r3, #12]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	781a      	ldrb	r2, [r3, #0]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f9e2 	bl	8006ec4 <USB_WritePacket>
 8006b00:	e0ba      	b.n	8006c78 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	0151      	lsls	r1, r2, #5
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	440a      	add	r2, r1
 8006b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b1c:	0cdb      	lsrs	r3, r3, #19
 8006b1e:	04db      	lsls	r3, r3, #19
 8006b20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	0151      	lsls	r1, r2, #5
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	440a      	add	r2, r1
 8006b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d123      	bne.n	8006b96 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5a:	691a      	ldr	r2, [r3, #16]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b64:	6939      	ldr	r1, [r7, #16]
 8006b66:	0148      	lsls	r0, r1, #5
 8006b68:	6979      	ldr	r1, [r7, #20]
 8006b6a:	4401      	add	r1, r0
 8006b6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b70:	4313      	orrs	r3, r2
 8006b72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	0151      	lsls	r1, r2, #5
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	440a      	add	r2, r1
 8006b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b92:	6113      	str	r3, [r2, #16]
 8006b94:	e033      	b.n	8006bfe <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	695a      	ldr	r2, [r3, #20]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	1e5a      	subs	r2, r3, #1
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006baa:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb8:	691a      	ldr	r2, [r3, #16]
 8006bba:	89fb      	ldrh	r3, [r7, #14]
 8006bbc:	04d9      	lsls	r1, r3, #19
 8006bbe:	4b31      	ldr	r3, [pc, #196]	; (8006c84 <USB_EPStartXfer+0x3b4>)
 8006bc0:	400b      	ands	r3, r1
 8006bc2:	6939      	ldr	r1, [r7, #16]
 8006bc4:	0148      	lsls	r0, r1, #5
 8006bc6:	6979      	ldr	r1, [r7, #20]
 8006bc8:	4401      	add	r1, r0
 8006bca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bde:	691a      	ldr	r2, [r3, #16]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	89f9      	ldrh	r1, [r7, #14]
 8006be6:	fb01 f303 	mul.w	r3, r1, r3
 8006bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bee:	6939      	ldr	r1, [r7, #16]
 8006bf0:	0148      	lsls	r0, r1, #5
 8006bf2:	6979      	ldr	r1, [r7, #20]
 8006bf4:	4401      	add	r1, r0
 8006bf6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	78db      	ldrb	r3, [r3, #3]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d128      	bne.n	8006c58 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d110      	bne.n	8006c38 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	0151      	lsls	r1, r2, #5
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	440a      	add	r2, r1
 8006c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	e00f      	b.n	8006c58 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	0151      	lsls	r1, r2, #5
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	0151      	lsls	r1, r2, #5
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	440a      	add	r2, r1
 8006c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	1ff80000 	.word	0x1ff80000

08006c88 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	785b      	ldrb	r3, [r3, #1]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	f040 80ab 	bne.w	8006dfc <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d132      	bne.n	8006d14 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	0151      	lsls	r1, r2, #5
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	440a      	add	r2, r1
 8006cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ccc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	0151      	lsls	r1, r2, #5
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	440a      	add	r2, r1
 8006ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	0151      	lsls	r1, r2, #5
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	440a      	add	r2, r1
 8006d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d0c:	0cdb      	lsrs	r3, r3, #19
 8006d0e:	04db      	lsls	r3, r3, #19
 8006d10:	6113      	str	r3, [r2, #16]
 8006d12:	e04e      	b.n	8006db2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	0151      	lsls	r1, r2, #5
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	440a      	add	r2, r1
 8006d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d2e:	0cdb      	lsrs	r3, r3, #19
 8006d30:	04db      	lsls	r3, r3, #19
 8006d32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	0151      	lsls	r1, r2, #5
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	440a      	add	r2, r1
 8006d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d56:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	695a      	ldr	r2, [r3, #20]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d903      	bls.n	8006d6c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	0151      	lsls	r1, r2, #5
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	440a      	add	r2, r1
 8006d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d98:	691a      	ldr	r2, [r3, #16]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	0148      	lsls	r0, r1, #5
 8006da6:	68f9      	ldr	r1, [r7, #12]
 8006da8:	4401      	add	r1, r0
 8006daa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006dae:	4313      	orrs	r3, r2
 8006db0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	0151      	lsls	r1, r2, #5
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	440a      	add	r2, r1
 8006dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dd0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d06d      	beq.n	8006eb6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	2101      	movs	r1, #1
 8006dec:	fa01 f303 	lsl.w	r3, r1, r3
 8006df0:	68f9      	ldr	r1, [r7, #12]
 8006df2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006df6:	4313      	orrs	r3, r2
 8006df8:	634b      	str	r3, [r1, #52]	; 0x34
 8006dfa:	e05c      	b.n	8006eb6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	0151      	lsls	r1, r2, #5
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	440a      	add	r2, r1
 8006e12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e16:	0cdb      	lsrs	r3, r3, #19
 8006e18:	04db      	lsls	r3, r3, #19
 8006e1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	0151      	lsls	r1, r2, #5
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	440a      	add	r2, r1
 8006e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e3e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	0151      	lsls	r1, r2, #5
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	440a      	add	r2, r1
 8006e66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7c:	691a      	ldr	r2, [r3, #16]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	0148      	lsls	r0, r1, #5
 8006e8a:	68f9      	ldr	r1, [r7, #12]
 8006e8c:	4401      	add	r1, r0
 8006e8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e92:	4313      	orrs	r3, r2
 8006e94:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	0151      	lsls	r1, r2, #5
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	440a      	add	r2, r1
 8006eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006eb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b089      	sub	sp, #36	; 0x24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	4611      	mov	r1, r2
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	71fb      	strb	r3, [r7, #7]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006ee2:	88bb      	ldrh	r3, [r7, #4]
 8006ee4:	3303      	adds	r3, #3
 8006ee6:	089b      	lsrs	r3, r3, #2
 8006ee8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006eea:	2300      	movs	r3, #0
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	e00f      	b.n	8006f10 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ef0:	79fb      	ldrb	r3, [r7, #7]
 8006ef2:	031a      	lsls	r2, r3, #12
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006efc:	461a      	mov	r2, r3
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	3304      	adds	r3, #4
 8006f08:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	61bb      	str	r3, [r7, #24]
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d3eb      	bcc.n	8006ef0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3724      	adds	r7, #36	; 0x24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b089      	sub	sp, #36	; 0x24
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	4613      	mov	r3, r2
 8006f32:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006f3c:	88fb      	ldrh	r3, [r7, #6]
 8006f3e:	3303      	adds	r3, #3
 8006f40:	089b      	lsrs	r3, r3, #2
 8006f42:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006f44:	2300      	movs	r3, #0
 8006f46:	61bb      	str	r3, [r7, #24]
 8006f48:	e00b      	b.n	8006f62 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d3ef      	bcc.n	8006f4a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006f6a:	69fb      	ldr	r3, [r7, #28]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3724      	adds	r7, #36	; 0x24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	785b      	ldrb	r3, [r3, #1]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d12c      	bne.n	8006fee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	015a      	lsls	r2, r3, #5
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	db12      	blt.n	8006fcc <USB_EPSetStall+0x54>
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00f      	beq.n	8006fcc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	0151      	lsls	r1, r2, #5
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	440a      	add	r2, r1
 8006fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	0151      	lsls	r1, r2, #5
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	440a      	add	r2, r1
 8006fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	e02b      	b.n	8007046 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	db12      	blt.n	8007026 <USB_EPSetStall+0xae>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00f      	beq.n	8007026 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	0151      	lsls	r1, r2, #5
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	440a      	add	r2, r1
 800701c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007020:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007024:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	4413      	add	r3, r2
 800702e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	0151      	lsls	r1, r2, #5
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	440a      	add	r2, r1
 800703c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007044:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	785b      	ldrb	r3, [r3, #1]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d128      	bne.n	80070c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	0151      	lsls	r1, r2, #5
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	440a      	add	r2, r1
 8007086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800708a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800708e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	78db      	ldrb	r3, [r3, #3]
 8007094:	2b03      	cmp	r3, #3
 8007096:	d003      	beq.n	80070a0 <USB_EPClearStall+0x4c>
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	78db      	ldrb	r3, [r3, #3]
 800709c:	2b02      	cmp	r3, #2
 800709e:	d138      	bne.n	8007112 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	0151      	lsls	r1, r2, #5
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	440a      	add	r2, r1
 80070b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	e027      	b.n	8007112 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	0151      	lsls	r1, r2, #5
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	440a      	add	r2, r1
 80070d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	78db      	ldrb	r3, [r3, #3]
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d003      	beq.n	80070f2 <USB_EPClearStall+0x9e>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	78db      	ldrb	r3, [r3, #3]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d10f      	bne.n	8007112 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	0151      	lsls	r1, r2, #5
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	440a      	add	r2, r1
 8007108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800710c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007110:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800713e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007142:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007154:	68f9      	ldr	r1, [r7, #12]
 8007156:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800715a:	4313      	orrs	r3, r2
 800715c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007186:	f023 0303 	bic.w	r3, r3, #3
 800718a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800719a:	f023 0302 	bic.w	r3, r3, #2
 800719e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b085      	sub	sp, #20
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071c8:	f023 0303 	bic.w	r3, r3, #3
 80071cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071dc:	f043 0302 	orr.w	r3, r3, #2
 80071e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	4013      	ands	r3, r2
 8007206:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007208:	68fb      	ldr	r3, [r7, #12]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007216:	b480      	push	{r7}
 8007218:	b085      	sub	sp, #20
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	4013      	ands	r3, r2
 8007238:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	0c1b      	lsrs	r3, r3, #16
}
 800723e:	4618      	mov	r0, r3
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800724a:	b480      	push	{r7}
 800724c:	b085      	sub	sp, #20
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	4013      	ands	r3, r2
 800726c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	b29b      	uxth	r3, r3
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	460b      	mov	r3, r1
 8007288:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	4013      	ands	r3, r2
 80072aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072ac:	68bb      	ldr	r3, [r7, #8]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b087      	sub	sp, #28
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	460b      	mov	r3, r1
 80072c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80072de:	78fb      	ldrb	r3, [r7, #3]
 80072e0:	f003 030f 	and.w	r3, r3, #15
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ea:	01db      	lsls	r3, r3, #7
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80072f4:	78fb      	ldrb	r3, [r7, #3]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	4013      	ands	r3, r2
 8007306:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007308:	68bb      	ldr	r3, [r7, #8]
}
 800730a:	4618      	mov	r0, r3
 800730c:	371c      	adds	r7, #28
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007316:	b480      	push	{r7}
 8007318:	b083      	sub	sp, #12
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	f003 0301 	and.w	r3, r3, #1
}
 8007326:	4618      	mov	r0, r3
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007332:	b480      	push	{r7}
 8007334:	b085      	sub	sp, #20
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800734c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007350:	f023 0307 	bic.w	r3, r3, #7
 8007354:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007368:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	333c      	adds	r3, #60	; 0x3c
 800738a:	3304      	adds	r3, #4
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4a1c      	ldr	r2, [pc, #112]	; (8007404 <USB_EP0_OutStart+0x8c>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d90a      	bls.n	80073ae <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073a8:	d101      	bne.n	80073ae <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	e024      	b.n	80073f8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b4:	461a      	mov	r2, r3
 80073b6:	2300      	movs	r3, #0
 80073b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073dc:	f043 0318 	orr.w	r3, r3, #24
 80073e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80073f4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	4f54300a 	.word	0x4f54300a

08007408 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3301      	adds	r3, #1
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4a13      	ldr	r2, [pc, #76]	; (800746c <USB_CoreReset+0x64>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d901      	bls.n	8007426 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e01b      	b.n	800745e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	daf2      	bge.n	8007414 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	f043 0201 	orr.w	r2, r3, #1
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4a09      	ldr	r2, [pc, #36]	; (800746c <USB_CoreReset+0x64>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d901      	bls.n	8007450 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e006      	b.n	800745e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b01      	cmp	r3, #1
 800745a:	d0f0      	beq.n	800743e <USB_CoreReset+0x36>

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	00030d40 	.word	0x00030d40

08007470 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800747c:	2010      	movs	r0, #16
 800747e:	f002 ff5b 	bl	800a338 <USBD_static_malloc>
 8007482:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d105      	bne.n	8007496 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007492:	2302      	movs	r3, #2
 8007494:	e01b      	b.n	80074ce <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	7c1b      	ldrb	r3, [r3, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d103      	bne.n	80074ae <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2207      	movs	r2, #7
 80074aa:	875a      	strh	r2, [r3, #58]	; 0x3a
 80074ac:	e002      	b.n	80074b4 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	220a      	movs	r2, #10
 80074b2:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80074b4:	2304      	movs	r3, #4
 80074b6:	2203      	movs	r2, #3
 80074b8:	2181      	movs	r1, #129	; 0x81
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f002 fd3c 	bl	8009f38 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80074e2:	2181      	movs	r1, #129	; 0x81
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f002 fd65 	bl	8009fb4 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d009      	beq.n	8007514 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007506:	4618      	mov	r0, r3
 8007508:	f002 ff24 	bl	800a354 <USBD_static_free>
    pdev->pClassData = NULL;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007530:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d101      	bne.n	8007544 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007540:	2303      	movs	r3, #3
 8007542:	e0e8      	b.n	8007716 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800754c:	2b00      	cmp	r3, #0
 800754e:	d046      	beq.n	80075de <USBD_HID_Setup+0xbe>
 8007550:	2b20      	cmp	r3, #32
 8007552:	f040 80d8 	bne.w	8007706 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	785b      	ldrb	r3, [r3, #1]
 800755a:	3b02      	subs	r3, #2
 800755c:	2b09      	cmp	r3, #9
 800755e:	d836      	bhi.n	80075ce <USBD_HID_Setup+0xae>
 8007560:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <USBD_HID_Setup+0x48>)
 8007562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007566:	bf00      	nop
 8007568:	080075bf 	.word	0x080075bf
 800756c:	0800759f 	.word	0x0800759f
 8007570:	080075cf 	.word	0x080075cf
 8007574:	080075cf 	.word	0x080075cf
 8007578:	080075cf 	.word	0x080075cf
 800757c:	080075cf 	.word	0x080075cf
 8007580:	080075cf 	.word	0x080075cf
 8007584:	080075cf 	.word	0x080075cf
 8007588:	080075ad 	.word	0x080075ad
 800758c:	08007591 	.word	0x08007591
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	885b      	ldrh	r3, [r3, #2]
 8007594:	b2db      	uxtb	r3, r3
 8007596:	461a      	mov	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	601a      	str	r2, [r3, #0]
          break;
 800759c:	e01e      	b.n	80075dc <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2201      	movs	r2, #1
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 fa4c 	bl	8008a42 <USBD_CtlSendData>
          break;
 80075aa:	e017      	b.n	80075dc <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	885b      	ldrh	r3, [r3, #2]
 80075b0:	0a1b      	lsrs	r3, r3, #8
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	461a      	mov	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	605a      	str	r2, [r3, #4]
          break;
 80075bc:	e00e      	b.n	80075dc <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3304      	adds	r3, #4
 80075c2:	2201      	movs	r2, #1
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 fa3b 	bl	8008a42 <USBD_CtlSendData>
          break;
 80075cc:	e006      	b.n	80075dc <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 f9c5 	bl	8008960 <USBD_CtlError>
          ret = USBD_FAIL;
 80075d6:	2303      	movs	r3, #3
 80075d8:	75fb      	strb	r3, [r7, #23]
          break;
 80075da:	bf00      	nop
      }
      break;
 80075dc:	e09a      	b.n	8007714 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	785b      	ldrb	r3, [r3, #1]
 80075e2:	2b0b      	cmp	r3, #11
 80075e4:	f200 8086 	bhi.w	80076f4 <USBD_HID_Setup+0x1d4>
 80075e8:	a201      	add	r2, pc, #4	; (adr r2, 80075f0 <USBD_HID_Setup+0xd0>)
 80075ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ee:	bf00      	nop
 80075f0:	08007621 	.word	0x08007621
 80075f4:	08007703 	.word	0x08007703
 80075f8:	080076f5 	.word	0x080076f5
 80075fc:	080076f5 	.word	0x080076f5
 8007600:	080076f5 	.word	0x080076f5
 8007604:	080076f5 	.word	0x080076f5
 8007608:	0800764b 	.word	0x0800764b
 800760c:	080076f5 	.word	0x080076f5
 8007610:	080076f5 	.word	0x080076f5
 8007614:	080076f5 	.word	0x080076f5
 8007618:	080076a3 	.word	0x080076a3
 800761c:	080076cd 	.word	0x080076cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b03      	cmp	r3, #3
 800762a:	d107      	bne.n	800763c <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800762c:	f107 030a 	add.w	r3, r7, #10
 8007630:	2202      	movs	r2, #2
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 fa04 	bl	8008a42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800763a:	e063      	b.n	8007704 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 f98e 	bl	8008960 <USBD_CtlError>
            ret = USBD_FAIL;
 8007644:	2303      	movs	r3, #3
 8007646:	75fb      	strb	r3, [r7, #23]
          break;
 8007648:	e05c      	b.n	8007704 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	885b      	ldrh	r3, [r3, #2]
 800764e:	0a1b      	lsrs	r3, r3, #8
 8007650:	b29b      	uxth	r3, r3
 8007652:	2b22      	cmp	r3, #34	; 0x22
 8007654:	d108      	bne.n	8007668 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	88db      	ldrh	r3, [r3, #6]
 800765a:	2b7b      	cmp	r3, #123	; 0x7b
 800765c:	bf28      	it	cs
 800765e:	237b      	movcs	r3, #123	; 0x7b
 8007660:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007662:	4b2f      	ldr	r3, [pc, #188]	; (8007720 <USBD_HID_Setup+0x200>)
 8007664:	613b      	str	r3, [r7, #16]
 8007666:	e015      	b.n	8007694 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	885b      	ldrh	r3, [r3, #2]
 800766c:	0a1b      	lsrs	r3, r3, #8
 800766e:	b29b      	uxth	r3, r3
 8007670:	2b21      	cmp	r3, #33	; 0x21
 8007672:	d108      	bne.n	8007686 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8007674:	4b2b      	ldr	r3, [pc, #172]	; (8007724 <USBD_HID_Setup+0x204>)
 8007676:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	88db      	ldrh	r3, [r3, #6]
 800767c:	2b09      	cmp	r3, #9
 800767e:	bf28      	it	cs
 8007680:	2309      	movcs	r3, #9
 8007682:	82bb      	strh	r3, [r7, #20]
 8007684:	e006      	b.n	8007694 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f001 f969 	bl	8008960 <USBD_CtlError>
            ret = USBD_FAIL;
 800768e:	2303      	movs	r3, #3
 8007690:	75fb      	strb	r3, [r7, #23]
            break;
 8007692:	e037      	b.n	8007704 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007694:	8abb      	ldrh	r3, [r7, #20]
 8007696:	461a      	mov	r2, r3
 8007698:	6939      	ldr	r1, [r7, #16]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f001 f9d1 	bl	8008a42 <USBD_CtlSendData>
          break;
 80076a0:	e030      	b.n	8007704 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d107      	bne.n	80076be <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3308      	adds	r3, #8
 80076b2:	2201      	movs	r2, #1
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f001 f9c3 	bl	8008a42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076bc:	e022      	b.n	8007704 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f001 f94d 	bl	8008960 <USBD_CtlError>
            ret = USBD_FAIL;
 80076c6:	2303      	movs	r3, #3
 80076c8:	75fb      	strb	r3, [r7, #23]
          break;
 80076ca:	e01b      	b.n	8007704 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d106      	bne.n	80076e6 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	885b      	ldrh	r3, [r3, #2]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	461a      	mov	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076e4:	e00e      	b.n	8007704 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 f939 	bl	8008960 <USBD_CtlError>
            ret = USBD_FAIL;
 80076ee:	2303      	movs	r3, #3
 80076f0:	75fb      	strb	r3, [r7, #23]
          break;
 80076f2:	e007      	b.n	8007704 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f001 f932 	bl	8008960 <USBD_CtlError>
          ret = USBD_FAIL;
 80076fc:	2303      	movs	r3, #3
 80076fe:	75fb      	strb	r3, [r7, #23]
          break;
 8007700:	e000      	b.n	8007704 <USBD_HID_Setup+0x1e4>
          break;
 8007702:	bf00      	nop
      }
      break;
 8007704:	e006      	b.n	8007714 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 f929 	bl	8008960 <USBD_CtlError>
      ret = USBD_FAIL;
 800770e:	2303      	movs	r3, #3
 8007710:	75fb      	strb	r3, [r7, #23]
      break;
 8007712:	bf00      	nop
  }

  return (uint8_t)ret;
 8007714:	7dfb      	ldrb	r3, [r7, #23]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	200000c4 	.word	0x200000c4
 8007724:	200000ac 	.word	0x200000ac

08007728 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	4613      	mov	r3, r2
 8007734:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800773c:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8007744:	2303      	movs	r3, #3
 8007746:	e013      	b.n	8007770 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b03      	cmp	r3, #3
 8007752:	d10c      	bne.n	800776e <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	7b1b      	ldrb	r3, [r3, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d108      	bne.n	800776e <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2201      	movs	r2, #1
 8007760:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8007762:	88fb      	ldrh	r3, [r7, #6]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	2181      	movs	r1, #129	; 0x81
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f002 fd27 	bl	800a1bc <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2222      	movs	r2, #34	; 0x22
 8007784:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8007786:	4b03      	ldr	r3, [pc, #12]	; (8007794 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	20000040 	.word	0x20000040

08007798 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2222      	movs	r2, #34	; 0x22
 80077a4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 80077a6:	4b03      	ldr	r3, [pc, #12]	; (80077b4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	20000064 	.word	0x20000064

080077b8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2222      	movs	r2, #34	; 0x22
 80077c4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80077c6:	4b03      	ldr	r3, [pc, #12]	; (80077d4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	20000088 	.word	0x20000088

080077d8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	460b      	mov	r3, r1
 80077e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ea:	2200      	movs	r2, #0
 80077ec:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	220a      	movs	r2, #10
 8007808:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800780a:	4b03      	ldr	r3, [pc, #12]	; (8007818 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800780c:	4618      	mov	r0, r3
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	200000b8 	.word	0x200000b8

0800781c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	4613      	mov	r3, r2
 8007828:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007830:	2303      	movs	r3, #3
 8007832:	e01f      	b.n	8007874 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	79fa      	ldrb	r2, [r7, #7]
 8007866:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f002 fae7 	bl	8009e3c <USBD_LL_Init>
 800786e:	4603      	mov	r3, r0
 8007870:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007872:	7dfb      	ldrb	r3, [r7, #23]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3718      	adds	r7, #24
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007890:	2303      	movs	r3, #3
 8007892:	e016      	b.n	80078c2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00b      	beq.n	80078c0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	f107 020e 	add.w	r2, r7, #14
 80078b4:	4610      	mov	r0, r2
 80078b6:	4798      	blx	r3
 80078b8:	4602      	mov	r2, r0
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f002 fafe 	bl	8009ed4 <USBD_LL_Start>
 80078d8:	4603      	mov	r3, r0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007904:	2303      	movs	r3, #3
 8007906:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800790e:	2b00      	cmp	r3, #0
 8007910:	d009      	beq.n	8007926 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	78fa      	ldrb	r2, [r7, #3]
 800791c:	4611      	mov	r1, r2
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	4798      	blx	r3
 8007922:	4603      	mov	r3, r0
 8007924:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007926:	7bfb      	ldrb	r3, [r7, #15]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	460b      	mov	r3, r1
 800793a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007942:	2b00      	cmp	r3, #0
 8007944:	d007      	beq.n	8007956 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	78fa      	ldrb	r2, [r7, #3]
 8007950:	4611      	mov	r1, r2
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	4798      	blx	r3
  }

  return USBD_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	4618      	mov	r0, r3
 8007974:	f000 ffba 	bl	80088ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007986:	461a      	mov	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007994:	f003 031f 	and.w	r3, r3, #31
 8007998:	2b02      	cmp	r3, #2
 800799a:	d01a      	beq.n	80079d2 <USBD_LL_SetupStage+0x72>
 800799c:	2b02      	cmp	r3, #2
 800799e:	d822      	bhi.n	80079e6 <USBD_LL_SetupStage+0x86>
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <USBD_LL_SetupStage+0x4a>
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d00a      	beq.n	80079be <USBD_LL_SetupStage+0x5e>
 80079a8:	e01d      	b.n	80079e6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fa62 	bl	8007e7c <USBD_StdDevReq>
 80079b8:	4603      	mov	r3, r0
 80079ba:	73fb      	strb	r3, [r7, #15]
      break;
 80079bc:	e020      	b.n	8007a00 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fac6 	bl	8007f58 <USBD_StdItfReq>
 80079cc:	4603      	mov	r3, r0
 80079ce:	73fb      	strb	r3, [r7, #15]
      break;
 80079d0:	e016      	b.n	8007a00 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fb05 	bl	8007fea <USBD_StdEPReq>
 80079e0:	4603      	mov	r3, r0
 80079e2:	73fb      	strb	r3, [r7, #15]
      break;
 80079e4:	e00c      	b.n	8007a00 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f002 fb13 	bl	800a020 <USBD_LL_StallEP>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73fb      	strb	r3, [r7, #15]
      break;
 80079fe:	bf00      	nop
  }

  return ret;
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b086      	sub	sp, #24
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	460b      	mov	r3, r1
 8007a14:	607a      	str	r2, [r7, #4]
 8007a16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007a18:	7afb      	ldrb	r3, [r7, #11]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d138      	bne.n	8007a90 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d14a      	bne.n	8007ac6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d913      	bls.n	8007a64 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	1ad2      	subs	r2, r2, r3
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	4293      	cmp	r3, r2
 8007a54:	bf28      	it	cs
 8007a56:	4613      	movcs	r3, r2
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f001 f81c 	bl	8008a9a <USBD_CtlContinueRx>
 8007a62:	e030      	b.n	8007ac6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d10b      	bne.n	8007a88 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d005      	beq.n	8007a88 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f001 f817 	bl	8008abc <USBD_CtlSendStatus>
 8007a8e:	e01a      	b.n	8007ac6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	d114      	bne.n	8007ac6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00e      	beq.n	8007ac6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	7afa      	ldrb	r2, [r7, #11]
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	4798      	blx	r3
 8007ab8:	4603      	mov	r3, r0
 8007aba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007ac2:	7dfb      	ldrb	r3, [r7, #23]
 8007ac4:	e000      	b.n	8007ac8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007ade:	7afb      	ldrb	r3, [r7, #11]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d16b      	bne.n	8007bbc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3314      	adds	r3, #20
 8007ae8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d156      	bne.n	8007ba2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	689a      	ldr	r2, [r3, #8]
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d914      	bls.n	8007b2a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	1ad2      	subs	r2, r2, r3
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	461a      	mov	r2, r3
 8007b14:	6879      	ldr	r1, [r7, #4]
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 ffae 	bl	8008a78 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2100      	movs	r1, #0
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f002 fb82 	bl	800a22c <USBD_LL_PrepareReceive>
 8007b28:	e03b      	b.n	8007ba2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d11c      	bne.n	8007b70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d316      	bcc.n	8007b70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d20f      	bcs.n	8007b70 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b50:	2200      	movs	r2, #0
 8007b52:	2100      	movs	r1, #0
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 ff8f 	bl	8008a78 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b62:	2300      	movs	r3, #0
 8007b64:	2200      	movs	r2, #0
 8007b66:	2100      	movs	r1, #0
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f002 fb5f 	bl	800a22c <USBD_LL_PrepareReceive>
 8007b6e:	e018      	b.n	8007ba2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d10b      	bne.n	8007b94 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b94:	2180      	movs	r1, #128	; 0x80
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f002 fa42 	bl	800a020 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 ffa0 	bl	8008ae2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d122      	bne.n	8007bf2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f7ff fe98 	bl	80078e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007bba:	e01a      	b.n	8007bf2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	d114      	bne.n	8007bf2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00e      	beq.n	8007bf2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	7afa      	ldrb	r2, [r7, #11]
 8007bde:	4611      	mov	r1, r2
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	4798      	blx	r3
 8007be4:	4603      	mov	r3, r0
 8007be6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	e000      	b.n	8007bf4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d101      	bne.n	8007c30 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e02f      	b.n	8007c90 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00f      	beq.n	8007c5a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d009      	beq.n	8007c5a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	6852      	ldr	r2, [r2, #4]
 8007c52:	b2d2      	uxtb	r2, r2
 8007c54:	4611      	mov	r1, r2
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c5a:	2340      	movs	r3, #64	; 0x40
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2100      	movs	r1, #0
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f002 f969 	bl	8009f38 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2240      	movs	r2, #64	; 0x40
 8007c72:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c76:	2340      	movs	r3, #64	; 0x40
 8007c78:	2200      	movs	r2, #0
 8007c7a:	2180      	movs	r1, #128	; 0x80
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f002 f95b 	bl	8009f38 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2240      	movs	r2, #64	; 0x40
 8007c8c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2204      	movs	r2, #4
 8007cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b04      	cmp	r3, #4
 8007cf6:	d106      	bne.n	8007d06 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e012      	b.n	8007d50 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d10b      	bne.n	8007d4e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d005      	beq.n	8007d4e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	460b      	mov	r3, r1
 8007d62:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e014      	b.n	8007d9c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d10d      	bne.n	8007d9a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d007      	beq.n	8007d9a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	78fa      	ldrb	r2, [r7, #3]
 8007d94:	4611      	mov	r1, r2
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e014      	b.n	8007de8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	d10d      	bne.n	8007de6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d007      	beq.n	8007de6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	78fa      	ldrb	r2, [r7, #3]
 8007de0:	4611      	mov	r1, r2
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b082      	sub	sp, #8
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d009      	beq.n	8007e34 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	6852      	ldr	r2, [r2, #4]
 8007e2c:	b2d2      	uxtb	r2, r2
 8007e2e:	4611      	mov	r1, r2
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	4798      	blx	r3
  }

  return USBD_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b087      	sub	sp, #28
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	3301      	adds	r3, #1
 8007e54:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007e5c:	8a3b      	ldrh	r3, [r7, #16]
 8007e5e:	021b      	lsls	r3, r3, #8
 8007e60:	b21a      	sxth	r2, r3
 8007e62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	b21b      	sxth	r3, r3
 8007e6a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007e6c:	89fb      	ldrh	r3, [r7, #14]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	371c      	adds	r7, #28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
	...

08007e7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e92:	2b40      	cmp	r3, #64	; 0x40
 8007e94:	d005      	beq.n	8007ea2 <USBD_StdDevReq+0x26>
 8007e96:	2b40      	cmp	r3, #64	; 0x40
 8007e98:	d853      	bhi.n	8007f42 <USBD_StdDevReq+0xc6>
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00b      	beq.n	8007eb6 <USBD_StdDevReq+0x3a>
 8007e9e:	2b20      	cmp	r3, #32
 8007ea0:	d14f      	bne.n	8007f42 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	4798      	blx	r3
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb4:	e04a      	b.n	8007f4c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	785b      	ldrb	r3, [r3, #1]
 8007eba:	2b09      	cmp	r3, #9
 8007ebc:	d83b      	bhi.n	8007f36 <USBD_StdDevReq+0xba>
 8007ebe:	a201      	add	r2, pc, #4	; (adr r2, 8007ec4 <USBD_StdDevReq+0x48>)
 8007ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec4:	08007f19 	.word	0x08007f19
 8007ec8:	08007f2d 	.word	0x08007f2d
 8007ecc:	08007f37 	.word	0x08007f37
 8007ed0:	08007f23 	.word	0x08007f23
 8007ed4:	08007f37 	.word	0x08007f37
 8007ed8:	08007ef7 	.word	0x08007ef7
 8007edc:	08007eed 	.word	0x08007eed
 8007ee0:	08007f37 	.word	0x08007f37
 8007ee4:	08007f0f 	.word	0x08007f0f
 8007ee8:	08007f01 	.word	0x08007f01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f9de 	bl	80082b0 <USBD_GetDescriptor>
          break;
 8007ef4:	e024      	b.n	8007f40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fb6d 	bl	80085d8 <USBD_SetAddress>
          break;
 8007efe:	e01f      	b.n	8007f40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fbac 	bl	8008660 <USBD_SetConfig>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73fb      	strb	r3, [r7, #15]
          break;
 8007f0c:	e018      	b.n	8007f40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fc4b 	bl	80087ac <USBD_GetConfig>
          break;
 8007f16:	e013      	b.n	8007f40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fc7c 	bl	8008818 <USBD_GetStatus>
          break;
 8007f20:	e00e      	b.n	8007f40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fcab 	bl	8008880 <USBD_SetFeature>
          break;
 8007f2a:	e009      	b.n	8007f40 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fcba 	bl	80088a8 <USBD_ClrFeature>
          break;
 8007f34:	e004      	b.n	8007f40 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fd11 	bl	8008960 <USBD_CtlError>
          break;
 8007f3e:	bf00      	nop
      }
      break;
 8007f40:	e004      	b.n	8007f4c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fd0b 	bl	8008960 <USBD_CtlError>
      break;
 8007f4a:	bf00      	nop
  }

  return ret;
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop

08007f58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f6e:	2b40      	cmp	r3, #64	; 0x40
 8007f70:	d005      	beq.n	8007f7e <USBD_StdItfReq+0x26>
 8007f72:	2b40      	cmp	r3, #64	; 0x40
 8007f74:	d82f      	bhi.n	8007fd6 <USBD_StdItfReq+0x7e>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <USBD_StdItfReq+0x26>
 8007f7a:	2b20      	cmp	r3, #32
 8007f7c:	d12b      	bne.n	8007fd6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	3b01      	subs	r3, #1
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d81d      	bhi.n	8007fc8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	889b      	ldrh	r3, [r3, #4]
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d813      	bhi.n	8007fbe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	4798      	blx	r3
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	88db      	ldrh	r3, [r3, #6]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d110      	bne.n	8007fd2 <USBD_StdItfReq+0x7a>
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10d      	bne.n	8007fd2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fd80 	bl	8008abc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007fbc:	e009      	b.n	8007fd2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fccd 	bl	8008960 <USBD_CtlError>
          break;
 8007fc6:	e004      	b.n	8007fd2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fcc8 	bl	8008960 <USBD_CtlError>
          break;
 8007fd0:	e000      	b.n	8007fd4 <USBD_StdItfReq+0x7c>
          break;
 8007fd2:	bf00      	nop
      }
      break;
 8007fd4:	e004      	b.n	8007fe0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fcc1 	bl	8008960 <USBD_CtlError>
      break;
 8007fde:	bf00      	nop
  }

  return ret;
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	889b      	ldrh	r3, [r3, #4]
 8007ffc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008006:	2b40      	cmp	r3, #64	; 0x40
 8008008:	d007      	beq.n	800801a <USBD_StdEPReq+0x30>
 800800a:	2b40      	cmp	r3, #64	; 0x40
 800800c:	f200 8145 	bhi.w	800829a <USBD_StdEPReq+0x2b0>
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00c      	beq.n	800802e <USBD_StdEPReq+0x44>
 8008014:	2b20      	cmp	r3, #32
 8008016:	f040 8140 	bne.w	800829a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	4798      	blx	r3
 8008028:	4603      	mov	r3, r0
 800802a:	73fb      	strb	r3, [r7, #15]
      break;
 800802c:	e13a      	b.n	80082a4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	785b      	ldrb	r3, [r3, #1]
 8008032:	2b03      	cmp	r3, #3
 8008034:	d007      	beq.n	8008046 <USBD_StdEPReq+0x5c>
 8008036:	2b03      	cmp	r3, #3
 8008038:	f300 8129 	bgt.w	800828e <USBD_StdEPReq+0x2a4>
 800803c:	2b00      	cmp	r3, #0
 800803e:	d07f      	beq.n	8008140 <USBD_StdEPReq+0x156>
 8008040:	2b01      	cmp	r3, #1
 8008042:	d03c      	beq.n	80080be <USBD_StdEPReq+0xd4>
 8008044:	e123      	b.n	800828e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	d002      	beq.n	8008058 <USBD_StdEPReq+0x6e>
 8008052:	2b03      	cmp	r3, #3
 8008054:	d016      	beq.n	8008084 <USBD_StdEPReq+0x9a>
 8008056:	e02c      	b.n	80080b2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00d      	beq.n	800807a <USBD_StdEPReq+0x90>
 800805e:	7bbb      	ldrb	r3, [r7, #14]
 8008060:	2b80      	cmp	r3, #128	; 0x80
 8008062:	d00a      	beq.n	800807a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008064:	7bbb      	ldrb	r3, [r7, #14]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 ffd9 	bl	800a020 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800806e:	2180      	movs	r1, #128	; 0x80
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 ffd5 	bl	800a020 <USBD_LL_StallEP>
 8008076:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008078:	e020      	b.n	80080bc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fc6f 	bl	8008960 <USBD_CtlError>
              break;
 8008082:	e01b      	b.n	80080bc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	885b      	ldrh	r3, [r3, #2]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10e      	bne.n	80080aa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00b      	beq.n	80080aa <USBD_StdEPReq+0xc0>
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	2b80      	cmp	r3, #128	; 0x80
 8008096:	d008      	beq.n	80080aa <USBD_StdEPReq+0xc0>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	88db      	ldrh	r3, [r3, #6]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d104      	bne.n	80080aa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 ffbb 	bl	800a020 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fd06 	bl	8008abc <USBD_CtlSendStatus>

              break;
 80080b0:	e004      	b.n	80080bc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fc53 	bl	8008960 <USBD_CtlError>
              break;
 80080ba:	bf00      	nop
          }
          break;
 80080bc:	e0ec      	b.n	8008298 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d002      	beq.n	80080d0 <USBD_StdEPReq+0xe6>
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d016      	beq.n	80080fc <USBD_StdEPReq+0x112>
 80080ce:	e030      	b.n	8008132 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00d      	beq.n	80080f2 <USBD_StdEPReq+0x108>
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
 80080d8:	2b80      	cmp	r3, #128	; 0x80
 80080da:	d00a      	beq.n	80080f2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f001 ff9d 	bl	800a020 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080e6:	2180      	movs	r1, #128	; 0x80
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f001 ff99 	bl	800a020 <USBD_LL_StallEP>
 80080ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080f0:	e025      	b.n	800813e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fc33 	bl	8008960 <USBD_CtlError>
              break;
 80080fa:	e020      	b.n	800813e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	885b      	ldrh	r3, [r3, #2]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d11b      	bne.n	800813c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008104:	7bbb      	ldrb	r3, [r7, #14]
 8008106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800810a:	2b00      	cmp	r3, #0
 800810c:	d004      	beq.n	8008118 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800810e:	7bbb      	ldrb	r3, [r7, #14]
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f001 ffba 	bl	800a08c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fccf 	bl	8008abc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	4798      	blx	r3
 800812c:	4603      	mov	r3, r0
 800812e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008130:	e004      	b.n	800813c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fc13 	bl	8008960 <USBD_CtlError>
              break;
 800813a:	e000      	b.n	800813e <USBD_StdEPReq+0x154>
              break;
 800813c:	bf00      	nop
          }
          break;
 800813e:	e0ab      	b.n	8008298 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b02      	cmp	r3, #2
 800814a:	d002      	beq.n	8008152 <USBD_StdEPReq+0x168>
 800814c:	2b03      	cmp	r3, #3
 800814e:	d032      	beq.n	80081b6 <USBD_StdEPReq+0x1cc>
 8008150:	e097      	b.n	8008282 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008152:	7bbb      	ldrb	r3, [r7, #14]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d007      	beq.n	8008168 <USBD_StdEPReq+0x17e>
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	2b80      	cmp	r3, #128	; 0x80
 800815c:	d004      	beq.n	8008168 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800815e:	6839      	ldr	r1, [r7, #0]
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fbfd 	bl	8008960 <USBD_CtlError>
                break;
 8008166:	e091      	b.n	800828c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800816c:	2b00      	cmp	r3, #0
 800816e:	da0b      	bge.n	8008188 <USBD_StdEPReq+0x19e>
 8008170:	7bbb      	ldrb	r3, [r7, #14]
 8008172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008176:	4613      	mov	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	3310      	adds	r3, #16
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	4413      	add	r3, r2
 8008184:	3304      	adds	r3, #4
 8008186:	e00b      	b.n	80081a0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008188:	7bbb      	ldrb	r3, [r7, #14]
 800818a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	4413      	add	r3, r2
 800819e:	3304      	adds	r3, #4
 80081a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2200      	movs	r2, #0
 80081a6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2202      	movs	r2, #2
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fc47 	bl	8008a42 <USBD_CtlSendData>
              break;
 80081b4:	e06a      	b.n	800828c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	da11      	bge.n	80081e2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	f003 020f 	and.w	r2, r3, #15
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	4613      	mov	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	440b      	add	r3, r1
 80081d0:	3324      	adds	r3, #36	; 0x24
 80081d2:	881b      	ldrh	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d117      	bne.n	8008208 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fbc0 	bl	8008960 <USBD_CtlError>
                  break;
 80081e0:	e054      	b.n	800828c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	f003 020f 	and.w	r2, r3, #15
 80081e8:	6879      	ldr	r1, [r7, #4]
 80081ea:	4613      	mov	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	440b      	add	r3, r1
 80081f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d104      	bne.n	8008208 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fbad 	bl	8008960 <USBD_CtlError>
                  break;
 8008206:	e041      	b.n	800828c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800820c:	2b00      	cmp	r3, #0
 800820e:	da0b      	bge.n	8008228 <USBD_StdEPReq+0x23e>
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008216:	4613      	mov	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	3310      	adds	r3, #16
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	4413      	add	r3, r2
 8008224:	3304      	adds	r3, #4
 8008226:	e00b      	b.n	8008240 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800822e:	4613      	mov	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	4413      	add	r3, r2
 800823e:	3304      	adds	r3, #4
 8008240:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <USBD_StdEPReq+0x264>
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	2b80      	cmp	r3, #128	; 0x80
 800824c:	d103      	bne.n	8008256 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	e00e      	b.n	8008274 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	4619      	mov	r1, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f001 ff4c 	bl	800a0f8 <USBD_LL_IsStallEP>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	2201      	movs	r2, #1
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	e002      	b.n	8008274 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	2200      	movs	r2, #0
 8008272:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2202      	movs	r2, #2
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fbe1 	bl	8008a42 <USBD_CtlSendData>
              break;
 8008280:	e004      	b.n	800828c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fb6b 	bl	8008960 <USBD_CtlError>
              break;
 800828a:	bf00      	nop
          }
          break;
 800828c:	e004      	b.n	8008298 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fb65 	bl	8008960 <USBD_CtlError>
          break;
 8008296:	bf00      	nop
      }
      break;
 8008298:	e004      	b.n	80082a4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fb5f 	bl	8008960 <USBD_CtlError>
      break;
 80082a2:	bf00      	nop
  }

  return ret;
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
	...

080082b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	885b      	ldrh	r3, [r3, #2]
 80082ca:	0a1b      	lsrs	r3, r3, #8
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	3b01      	subs	r3, #1
 80082d0:	2b0e      	cmp	r3, #14
 80082d2:	f200 8152 	bhi.w	800857a <USBD_GetDescriptor+0x2ca>
 80082d6:	a201      	add	r2, pc, #4	; (adr r2, 80082dc <USBD_GetDescriptor+0x2c>)
 80082d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082dc:	0800834d 	.word	0x0800834d
 80082e0:	08008365 	.word	0x08008365
 80082e4:	080083a5 	.word	0x080083a5
 80082e8:	0800857b 	.word	0x0800857b
 80082ec:	0800857b 	.word	0x0800857b
 80082f0:	0800851b 	.word	0x0800851b
 80082f4:	08008547 	.word	0x08008547
 80082f8:	0800857b 	.word	0x0800857b
 80082fc:	0800857b 	.word	0x0800857b
 8008300:	0800857b 	.word	0x0800857b
 8008304:	0800857b 	.word	0x0800857b
 8008308:	0800857b 	.word	0x0800857b
 800830c:	0800857b 	.word	0x0800857b
 8008310:	0800857b 	.word	0x0800857b
 8008314:	08008319 	.word	0x08008319
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00b      	beq.n	800833c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	7c12      	ldrb	r2, [r2, #16]
 8008330:	f107 0108 	add.w	r1, r7, #8
 8008334:	4610      	mov	r0, r2
 8008336:	4798      	blx	r3
 8008338:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800833a:	e126      	b.n	800858a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fb0e 	bl	8008960 <USBD_CtlError>
        err++;
 8008344:	7afb      	ldrb	r3, [r7, #11]
 8008346:	3301      	adds	r3, #1
 8008348:	72fb      	strb	r3, [r7, #11]
      break;
 800834a:	e11e      	b.n	800858a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	7c12      	ldrb	r2, [r2, #16]
 8008358:	f107 0108 	add.w	r1, r7, #8
 800835c:	4610      	mov	r0, r2
 800835e:	4798      	blx	r3
 8008360:	60f8      	str	r0, [r7, #12]
      break;
 8008362:	e112      	b.n	800858a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	7c1b      	ldrb	r3, [r3, #16]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10d      	bne.n	8008388 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008374:	f107 0208 	add.w	r2, r7, #8
 8008378:	4610      	mov	r0, r2
 800837a:	4798      	blx	r3
 800837c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3301      	adds	r3, #1
 8008382:	2202      	movs	r2, #2
 8008384:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008386:	e100      	b.n	800858a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008390:	f107 0208 	add.w	r2, r7, #8
 8008394:	4610      	mov	r0, r2
 8008396:	4798      	blx	r3
 8008398:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3301      	adds	r3, #1
 800839e:	2202      	movs	r2, #2
 80083a0:	701a      	strb	r2, [r3, #0]
      break;
 80083a2:	e0f2      	b.n	800858a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	885b      	ldrh	r3, [r3, #2]
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b05      	cmp	r3, #5
 80083ac:	f200 80ac 	bhi.w	8008508 <USBD_GetDescriptor+0x258>
 80083b0:	a201      	add	r2, pc, #4	; (adr r2, 80083b8 <USBD_GetDescriptor+0x108>)
 80083b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b6:	bf00      	nop
 80083b8:	080083d1 	.word	0x080083d1
 80083bc:	08008405 	.word	0x08008405
 80083c0:	08008439 	.word	0x08008439
 80083c4:	0800846d 	.word	0x0800846d
 80083c8:	080084a1 	.word	0x080084a1
 80083cc:	080084d5 	.word	0x080084d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00b      	beq.n	80083f4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	7c12      	ldrb	r2, [r2, #16]
 80083e8:	f107 0108 	add.w	r1, r7, #8
 80083ec:	4610      	mov	r0, r2
 80083ee:	4798      	blx	r3
 80083f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083f2:	e091      	b.n	8008518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fab2 	bl	8008960 <USBD_CtlError>
            err++;
 80083fc:	7afb      	ldrb	r3, [r7, #11]
 80083fe:	3301      	adds	r3, #1
 8008400:	72fb      	strb	r3, [r7, #11]
          break;
 8008402:	e089      	b.n	8008518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00b      	beq.n	8008428 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	7c12      	ldrb	r2, [r2, #16]
 800841c:	f107 0108 	add.w	r1, r7, #8
 8008420:	4610      	mov	r0, r2
 8008422:	4798      	blx	r3
 8008424:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008426:	e077      	b.n	8008518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fa98 	bl	8008960 <USBD_CtlError>
            err++;
 8008430:	7afb      	ldrb	r3, [r7, #11]
 8008432:	3301      	adds	r3, #1
 8008434:	72fb      	strb	r3, [r7, #11]
          break;
 8008436:	e06f      	b.n	8008518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00b      	beq.n	800845c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	7c12      	ldrb	r2, [r2, #16]
 8008450:	f107 0108 	add.w	r1, r7, #8
 8008454:	4610      	mov	r0, r2
 8008456:	4798      	blx	r3
 8008458:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800845a:	e05d      	b.n	8008518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800845c:	6839      	ldr	r1, [r7, #0]
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fa7e 	bl	8008960 <USBD_CtlError>
            err++;
 8008464:	7afb      	ldrb	r3, [r7, #11]
 8008466:	3301      	adds	r3, #1
 8008468:	72fb      	strb	r3, [r7, #11]
          break;
 800846a:	e055      	b.n	8008518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00b      	beq.n	8008490 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	7c12      	ldrb	r2, [r2, #16]
 8008484:	f107 0108 	add.w	r1, r7, #8
 8008488:	4610      	mov	r0, r2
 800848a:	4798      	blx	r3
 800848c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800848e:	e043      	b.n	8008518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fa64 	bl	8008960 <USBD_CtlError>
            err++;
 8008498:	7afb      	ldrb	r3, [r7, #11]
 800849a:	3301      	adds	r3, #1
 800849c:	72fb      	strb	r3, [r7, #11]
          break;
 800849e:	e03b      	b.n	8008518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00b      	beq.n	80084c4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	7c12      	ldrb	r2, [r2, #16]
 80084b8:	f107 0108 	add.w	r1, r7, #8
 80084bc:	4610      	mov	r0, r2
 80084be:	4798      	blx	r3
 80084c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084c2:	e029      	b.n	8008518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fa4a 	bl	8008960 <USBD_CtlError>
            err++;
 80084cc:	7afb      	ldrb	r3, [r7, #11]
 80084ce:	3301      	adds	r3, #1
 80084d0:	72fb      	strb	r3, [r7, #11]
          break;
 80084d2:	e021      	b.n	8008518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00b      	beq.n	80084f8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	7c12      	ldrb	r2, [r2, #16]
 80084ec:	f107 0108 	add.w	r1, r7, #8
 80084f0:	4610      	mov	r0, r2
 80084f2:	4798      	blx	r3
 80084f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084f6:	e00f      	b.n	8008518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fa30 	bl	8008960 <USBD_CtlError>
            err++;
 8008500:	7afb      	ldrb	r3, [r7, #11]
 8008502:	3301      	adds	r3, #1
 8008504:	72fb      	strb	r3, [r7, #11]
          break;
 8008506:	e007      	b.n	8008518 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fa28 	bl	8008960 <USBD_CtlError>
          err++;
 8008510:	7afb      	ldrb	r3, [r7, #11]
 8008512:	3301      	adds	r3, #1
 8008514:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008516:	bf00      	nop
      }
      break;
 8008518:	e037      	b.n	800858a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	7c1b      	ldrb	r3, [r3, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852a:	f107 0208 	add.w	r2, r7, #8
 800852e:	4610      	mov	r0, r2
 8008530:	4798      	blx	r3
 8008532:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008534:	e029      	b.n	800858a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fa11 	bl	8008960 <USBD_CtlError>
        err++;
 800853e:	7afb      	ldrb	r3, [r7, #11]
 8008540:	3301      	adds	r3, #1
 8008542:	72fb      	strb	r3, [r7, #11]
      break;
 8008544:	e021      	b.n	800858a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	7c1b      	ldrb	r3, [r3, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10d      	bne.n	800856a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008556:	f107 0208 	add.w	r2, r7, #8
 800855a:	4610      	mov	r0, r2
 800855c:	4798      	blx	r3
 800855e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	3301      	adds	r3, #1
 8008564:	2207      	movs	r2, #7
 8008566:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008568:	e00f      	b.n	800858a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800856a:	6839      	ldr	r1, [r7, #0]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f9f7 	bl	8008960 <USBD_CtlError>
        err++;
 8008572:	7afb      	ldrb	r3, [r7, #11]
 8008574:	3301      	adds	r3, #1
 8008576:	72fb      	strb	r3, [r7, #11]
      break;
 8008578:	e007      	b.n	800858a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f9ef 	bl	8008960 <USBD_CtlError>
      err++;
 8008582:	7afb      	ldrb	r3, [r7, #11]
 8008584:	3301      	adds	r3, #1
 8008586:	72fb      	strb	r3, [r7, #11]
      break;
 8008588:	bf00      	nop
  }

  if (err != 0U)
 800858a:	7afb      	ldrb	r3, [r7, #11]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d11e      	bne.n	80085ce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	88db      	ldrh	r3, [r3, #6]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d016      	beq.n	80085c6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008598:	893b      	ldrh	r3, [r7, #8]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00e      	beq.n	80085bc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	88da      	ldrh	r2, [r3, #6]
 80085a2:	893b      	ldrh	r3, [r7, #8]
 80085a4:	4293      	cmp	r3, r2
 80085a6:	bf28      	it	cs
 80085a8:	4613      	movcs	r3, r2
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80085ae:	893b      	ldrh	r3, [r7, #8]
 80085b0:	461a      	mov	r2, r3
 80085b2:	68f9      	ldr	r1, [r7, #12]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fa44 	bl	8008a42 <USBD_CtlSendData>
 80085ba:	e009      	b.n	80085d0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f9ce 	bl	8008960 <USBD_CtlError>
 80085c4:	e004      	b.n	80085d0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fa78 	bl	8008abc <USBD_CtlSendStatus>
 80085cc:	e000      	b.n	80085d0 <USBD_GetDescriptor+0x320>
    return;
 80085ce:	bf00      	nop
  }
}
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop

080085d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	889b      	ldrh	r3, [r3, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d131      	bne.n	800864e <USBD_SetAddress+0x76>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	88db      	ldrh	r3, [r3, #6]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d12d      	bne.n	800864e <USBD_SetAddress+0x76>
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	885b      	ldrh	r3, [r3, #2]
 80085f6:	2b7f      	cmp	r3, #127	; 0x7f
 80085f8:	d829      	bhi.n	800864e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	885b      	ldrh	r3, [r3, #2]
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008604:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b03      	cmp	r3, #3
 8008610:	d104      	bne.n	800861c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008612:	6839      	ldr	r1, [r7, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f9a3 	bl	8008960 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800861a:	e01d      	b.n	8008658 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	7bfa      	ldrb	r2, [r7, #15]
 8008620:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008624:	7bfb      	ldrb	r3, [r7, #15]
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f001 fd91 	bl	800a150 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fa44 	bl	8008abc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d004      	beq.n	8008644 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2202      	movs	r2, #2
 800863e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008642:	e009      	b.n	8008658 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800864c:	e004      	b.n	8008658 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f985 	bl	8008960 <USBD_CtlError>
  }
}
 8008656:	bf00      	nop
 8008658:	bf00      	nop
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	885b      	ldrh	r3, [r3, #2]
 8008672:	b2da      	uxtb	r2, r3
 8008674:	4b4c      	ldr	r3, [pc, #304]	; (80087a8 <USBD_SetConfig+0x148>)
 8008676:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008678:	4b4b      	ldr	r3, [pc, #300]	; (80087a8 <USBD_SetConfig+0x148>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d905      	bls.n	800868c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f96c 	bl	8008960 <USBD_CtlError>
    return USBD_FAIL;
 8008688:	2303      	movs	r3, #3
 800868a:	e088      	b.n	800879e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b02      	cmp	r3, #2
 8008696:	d002      	beq.n	800869e <USBD_SetConfig+0x3e>
 8008698:	2b03      	cmp	r3, #3
 800869a:	d025      	beq.n	80086e8 <USBD_SetConfig+0x88>
 800869c:	e071      	b.n	8008782 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800869e:	4b42      	ldr	r3, [pc, #264]	; (80087a8 <USBD_SetConfig+0x148>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d01c      	beq.n	80086e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80086a6:	4b40      	ldr	r3, [pc, #256]	; (80087a8 <USBD_SetConfig+0x148>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086b0:	4b3d      	ldr	r3, [pc, #244]	; (80087a8 <USBD_SetConfig+0x148>)
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff f91e 	bl	80078f8 <USBD_SetClassConfig>
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d004      	beq.n	80086d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f949 	bl	8008960 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086ce:	e065      	b.n	800879c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f9f3 	bl	8008abc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2203      	movs	r2, #3
 80086da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086de:	e05d      	b.n	800879c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f9eb 	bl	8008abc <USBD_CtlSendStatus>
      break;
 80086e6:	e059      	b.n	800879c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80086e8:	4b2f      	ldr	r3, [pc, #188]	; (80087a8 <USBD_SetConfig+0x148>)
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d112      	bne.n	8008716 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80086f8:	4b2b      	ldr	r3, [pc, #172]	; (80087a8 <USBD_SetConfig+0x148>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	461a      	mov	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008702:	4b29      	ldr	r3, [pc, #164]	; (80087a8 <USBD_SetConfig+0x148>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff f911 	bl	8007930 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f9d4 	bl	8008abc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008714:	e042      	b.n	800879c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008716:	4b24      	ldr	r3, [pc, #144]	; (80087a8 <USBD_SetConfig+0x148>)
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	461a      	mov	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	429a      	cmp	r2, r3
 8008722:	d02a      	beq.n	800877a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	b2db      	uxtb	r3, r3
 800872a:	4619      	mov	r1, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f7ff f8ff 	bl	8007930 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008732:	4b1d      	ldr	r3, [pc, #116]	; (80087a8 <USBD_SetConfig+0x148>)
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800873c:	4b1a      	ldr	r3, [pc, #104]	; (80087a8 <USBD_SetConfig+0x148>)
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7ff f8d8 	bl	80078f8 <USBD_SetClassConfig>
 8008748:	4603      	mov	r3, r0
 800874a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00f      	beq.n	8008772 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f903 	bl	8008960 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	b2db      	uxtb	r3, r3
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff f8e4 	bl	8007930 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2202      	movs	r2, #2
 800876c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008770:	e014      	b.n	800879c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f9a2 	bl	8008abc <USBD_CtlSendStatus>
      break;
 8008778:	e010      	b.n	800879c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f99e 	bl	8008abc <USBD_CtlSendStatus>
      break;
 8008780:	e00c      	b.n	800879c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f8eb 	bl	8008960 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800878a:	4b07      	ldr	r3, [pc, #28]	; (80087a8 <USBD_SetConfig+0x148>)
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7ff f8cd 	bl	8007930 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008796:	2303      	movs	r3, #3
 8008798:	73fb      	strb	r3, [r7, #15]
      break;
 800879a:	bf00      	nop
  }

  return ret;
 800879c:	7bfb      	ldrb	r3, [r7, #15]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	200001f4 	.word	0x200001f4

080087ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	88db      	ldrh	r3, [r3, #6]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d004      	beq.n	80087c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f8cd 	bl	8008960 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80087c6:	e023      	b.n	8008810 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	dc02      	bgt.n	80087da <USBD_GetConfig+0x2e>
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	dc03      	bgt.n	80087e0 <USBD_GetConfig+0x34>
 80087d8:	e015      	b.n	8008806 <USBD_GetConfig+0x5a>
 80087da:	2b03      	cmp	r3, #3
 80087dc:	d00b      	beq.n	80087f6 <USBD_GetConfig+0x4a>
 80087de:	e012      	b.n	8008806 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	3308      	adds	r3, #8
 80087ea:	2201      	movs	r2, #1
 80087ec:	4619      	mov	r1, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f927 	bl	8008a42 <USBD_CtlSendData>
        break;
 80087f4:	e00c      	b.n	8008810 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	3304      	adds	r3, #4
 80087fa:	2201      	movs	r2, #1
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f91f 	bl	8008a42 <USBD_CtlSendData>
        break;
 8008804:	e004      	b.n	8008810 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f8a9 	bl	8008960 <USBD_CtlError>
        break;
 800880e:	bf00      	nop
}
 8008810:	bf00      	nop
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008828:	b2db      	uxtb	r3, r3
 800882a:	3b01      	subs	r3, #1
 800882c:	2b02      	cmp	r3, #2
 800882e:	d81e      	bhi.n	800886e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	88db      	ldrh	r3, [r3, #6]
 8008834:	2b02      	cmp	r3, #2
 8008836:	d004      	beq.n	8008842 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f890 	bl	8008960 <USBD_CtlError>
        break;
 8008840:	e01a      	b.n	8008878 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800884e:	2b00      	cmp	r3, #0
 8008850:	d005      	beq.n	800885e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f043 0202 	orr.w	r2, r3, #2
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	330c      	adds	r3, #12
 8008862:	2202      	movs	r2, #2
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f8eb 	bl	8008a42 <USBD_CtlSendData>
      break;
 800886c:	e004      	b.n	8008878 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f875 	bl	8008960 <USBD_CtlError>
      break;
 8008876:	bf00      	nop
  }
}
 8008878:	bf00      	nop
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	885b      	ldrh	r3, [r3, #2]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d106      	bne.n	80088a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f90e 	bl	8008abc <USBD_CtlSendStatus>
  }
}
 80088a0:	bf00      	nop
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	3b01      	subs	r3, #1
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d80b      	bhi.n	80088d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	885b      	ldrh	r3, [r3, #2]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d10c      	bne.n	80088e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f8f3 	bl	8008abc <USBD_CtlSendStatus>
      }
      break;
 80088d6:	e004      	b.n	80088e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f840 	bl	8008960 <USBD_CtlError>
      break;
 80088e0:	e000      	b.n	80088e4 <USBD_ClrFeature+0x3c>
      break;
 80088e2:	bf00      	nop
  }
}
 80088e4:	bf00      	nop
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	781a      	ldrb	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3301      	adds	r3, #1
 8008906:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	781a      	ldrb	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3301      	adds	r3, #1
 8008914:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f7ff fa91 	bl	8007e3e <SWAPBYTE>
 800891c:	4603      	mov	r3, r0
 800891e:	461a      	mov	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	3301      	adds	r3, #1
 8008928:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3301      	adds	r3, #1
 800892e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f7ff fa84 	bl	8007e3e <SWAPBYTE>
 8008936:	4603      	mov	r3, r0
 8008938:	461a      	mov	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3301      	adds	r3, #1
 8008942:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3301      	adds	r3, #1
 8008948:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f7ff fa77 	bl	8007e3e <SWAPBYTE>
 8008950:	4603      	mov	r3, r0
 8008952:	461a      	mov	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	80da      	strh	r2, [r3, #6]
}
 8008958:	bf00      	nop
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800896a:	2180      	movs	r1, #128	; 0x80
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f001 fb57 	bl	800a020 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008972:	2100      	movs	r1, #0
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f001 fb53 	bl	800a020 <USBD_LL_StallEP>
}
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b086      	sub	sp, #24
 8008986:	af00      	add	r7, sp, #0
 8008988:	60f8      	str	r0, [r7, #12]
 800898a:	60b9      	str	r1, [r7, #8]
 800898c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800898e:	2300      	movs	r3, #0
 8008990:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d036      	beq.n	8008a06 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800899c:	6938      	ldr	r0, [r7, #16]
 800899e:	f000 f836 	bl	8008a0e <USBD_GetLen>
 80089a2:	4603      	mov	r3, r0
 80089a4:	3301      	adds	r3, #1
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80089b0:	7dfb      	ldrb	r3, [r7, #23]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	4413      	add	r3, r2
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	7812      	ldrb	r2, [r2, #0]
 80089ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80089bc:	7dfb      	ldrb	r3, [r7, #23]
 80089be:	3301      	adds	r3, #1
 80089c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80089c2:	7dfb      	ldrb	r3, [r7, #23]
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	4413      	add	r3, r2
 80089c8:	2203      	movs	r2, #3
 80089ca:	701a      	strb	r2, [r3, #0]
  idx++;
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
 80089ce:	3301      	adds	r3, #1
 80089d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80089d2:	e013      	b.n	80089fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80089d4:	7dfb      	ldrb	r3, [r7, #23]
 80089d6:	68ba      	ldr	r2, [r7, #8]
 80089d8:	4413      	add	r3, r2
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	7812      	ldrb	r2, [r2, #0]
 80089de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	3301      	adds	r3, #1
 80089e4:	613b      	str	r3, [r7, #16]
    idx++;
 80089e6:	7dfb      	ldrb	r3, [r7, #23]
 80089e8:	3301      	adds	r3, #1
 80089ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	4413      	add	r3, r2
 80089f2:	2200      	movs	r2, #0
 80089f4:	701a      	strb	r2, [r3, #0]
    idx++;
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	3301      	adds	r3, #1
 80089fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1e7      	bne.n	80089d4 <USBD_GetString+0x52>
 8008a04:	e000      	b.n	8008a08 <USBD_GetString+0x86>
    return;
 8008a06:	bf00      	nop
  }
}
 8008a08:	3718      	adds	r7, #24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b085      	sub	sp, #20
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a1e:	e005      	b.n	8008a2c <USBD_GetLen+0x1e>
  {
    len++;
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	3301      	adds	r3, #1
 8008a24:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1f5      	bne.n	8008a20 <USBD_GetLen+0x12>
  }

  return len;
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b084      	sub	sp, #16
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2202      	movs	r2, #2
 8008a52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	2100      	movs	r1, #0
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f001 fba7 	bl	800a1bc <USBD_LL_Transmit>

  return USBD_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	2100      	movs	r1, #0
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f001 fb96 	bl	800a1bc <USBD_LL_Transmit>

  return USBD_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	60f8      	str	r0, [r7, #12]
 8008aa2:	60b9      	str	r1, [r7, #8]
 8008aa4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	2100      	movs	r1, #0
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f001 fbbd 	bl	800a22c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2204      	movs	r2, #4
 8008ac8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008acc:	2300      	movs	r3, #0
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f001 fb72 	bl	800a1bc <USBD_LL_Transmit>

  return USBD_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b082      	sub	sp, #8
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2205      	movs	r2, #5
 8008aee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008af2:	2300      	movs	r3, #0
 8008af4:	2200      	movs	r2, #0
 8008af6:	2100      	movs	r1, #0
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f001 fb97 	bl	800a22c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	4603      	mov	r3, r0
 8008b10:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8008b12:	2300      	movs	r3, #0
 8008b14:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8008b16:	2110      	movs	r1, #16
 8008b18:	20d4      	movs	r0, #212	; 0xd4
 8008b1a:	f000 fd6f 	bl	80095fc <SENSOR_IO_Read>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8008b22:	88fb      	ldrh	r3, [r7, #6]
 8008b24:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
 8008b28:	f003 0303 	and.w	r3, r3, #3
 8008b2c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8008b2e:	7bba      	ldrb	r2, [r7, #14]
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8008b36:	7bbb      	ldrb	r3, [r7, #14]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	2110      	movs	r1, #16
 8008b3c:	20d4      	movs	r0, #212	; 0xd4
 8008b3e:	f000 fd43 	bl	80095c8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8008b42:	2112      	movs	r1, #18
 8008b44:	20d4      	movs	r0, #212	; 0xd4
 8008b46:	f000 fd59 	bl	80095fc <SENSOR_IO_Read>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8008b4e:	88fb      	ldrh	r3, [r7, #6]
 8008b50:	0a1b      	lsrs	r3, r3, #8
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
 8008b58:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8008b5c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8008b5e:	7bba      	ldrb	r2, [r7, #14]
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8008b66:	7bbb      	ldrb	r3, [r7, #14]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	2112      	movs	r1, #18
 8008b6c:	20d4      	movs	r0, #212	; 0xd4
 8008b6e:	f000 fd2b 	bl	80095c8 <SENSOR_IO_Write>
}
 8008b72:	bf00      	nop
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8008b80:	2300      	movs	r3, #0
 8008b82:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8008b84:	2110      	movs	r1, #16
 8008b86:	20d4      	movs	r0, #212	; 0xd4
 8008b88:	f000 fd38 	bl	80095fc <SENSOR_IO_Read>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8008b90:	79fb      	ldrb	r3, [r7, #7]
 8008b92:	f003 030f 	and.w	r3, r3, #15
 8008b96:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	2110      	movs	r1, #16
 8008b9e:	20d4      	movs	r0, #212	; 0xd4
 8008ba0:	f000 fd12 	bl	80095c8 <SENSOR_IO_Write>
}
 8008ba4:	bf00      	nop
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8008bb0:	f000 fd00 	bl	80095b4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8008bb4:	210f      	movs	r1, #15
 8008bb6:	20d4      	movs	r0, #212	; 0xd4
 8008bb8:	f000 fd20 	bl	80095fc <SENSOR_IO_Read>
 8008bbc:	4603      	mov	r3, r0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	4603      	mov	r3, r0
 8008bca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8008bd0:	2115      	movs	r1, #21
 8008bd2:	20d4      	movs	r0, #212	; 0xd4
 8008bd4:	f000 fd12 	bl	80095fc <SENSOR_IO_Read>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	f023 0310 	bic.w	r3, r3, #16
 8008be2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8008be4:	88fb      	ldrh	r3, [r7, #6]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	f043 0310 	orr.w	r3, r3, #16
 8008bf0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	2115      	movs	r1, #21
 8008bf8:	20d4      	movs	r0, #212	; 0xd4
 8008bfa:	f000 fce5 	bl	80095c8 <SENSOR_IO_Write>
}
 8008bfe:	bf00      	nop
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
	...

08008c08 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b088      	sub	sp, #32
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8008c18:	f04f 0300 	mov.w	r3, #0
 8008c1c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8008c1e:	2110      	movs	r1, #16
 8008c20:	20d4      	movs	r0, #212	; 0xd4
 8008c22:	f000 fceb 	bl	80095fc <SENSOR_IO_Read>
 8008c26:	4603      	mov	r3, r0
 8008c28:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8008c2a:	f107 0208 	add.w	r2, r7, #8
 8008c2e:	2306      	movs	r3, #6
 8008c30:	2128      	movs	r1, #40	; 0x28
 8008c32:	20d4      	movs	r0, #212	; 0xd4
 8008c34:	f000 fd00 	bl	8009638 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8008c38:	2300      	movs	r3, #0
 8008c3a:	77fb      	strb	r3, [r7, #31]
 8008c3c:	e01f      	b.n	8008c7e <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8008c3e:	7ffb      	ldrb	r3, [r7, #31]
 8008c40:	005b      	lsls	r3, r3, #1
 8008c42:	3301      	adds	r3, #1
 8008c44:	f107 0220 	add.w	r2, r7, #32
 8008c48:	4413      	add	r3, r2
 8008c4a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	021b      	lsls	r3, r3, #8
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	7ffb      	ldrb	r3, [r7, #31]
 8008c56:	005b      	lsls	r3, r3, #1
 8008c58:	f107 0120 	add.w	r1, r7, #32
 8008c5c:	440b      	add	r3, r1
 8008c5e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	4413      	add	r3, r2
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	7ffb      	ldrb	r3, [r7, #31]
 8008c6a:	b212      	sxth	r2, r2
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	f107 0120 	add.w	r1, r7, #32
 8008c72:	440b      	add	r3, r1
 8008c74:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8008c78:	7ffb      	ldrb	r3, [r7, #31]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	77fb      	strb	r3, [r7, #31]
 8008c7e:	7ffb      	ldrb	r3, [r7, #31]
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d9dc      	bls.n	8008c3e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	f003 030c 	and.w	r3, r3, #12
 8008c8a:	2b0c      	cmp	r3, #12
 8008c8c:	d828      	bhi.n	8008ce0 <LSM6DSL_AccReadXYZ+0xd8>
 8008c8e:	a201      	add	r2, pc, #4	; (adr r2, 8008c94 <LSM6DSL_AccReadXYZ+0x8c>)
 8008c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c94:	08008cc9 	.word	0x08008cc9
 8008c98:	08008ce1 	.word	0x08008ce1
 8008c9c:	08008ce1 	.word	0x08008ce1
 8008ca0:	08008ce1 	.word	0x08008ce1
 8008ca4:	08008cdb 	.word	0x08008cdb
 8008ca8:	08008ce1 	.word	0x08008ce1
 8008cac:	08008ce1 	.word	0x08008ce1
 8008cb0:	08008ce1 	.word	0x08008ce1
 8008cb4:	08008ccf 	.word	0x08008ccf
 8008cb8:	08008ce1 	.word	0x08008ce1
 8008cbc:	08008ce1 	.word	0x08008ce1
 8008cc0:	08008ce1 	.word	0x08008ce1
 8008cc4:	08008cd5 	.word	0x08008cd5
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8008cc8:	4b19      	ldr	r3, [pc, #100]	; (8008d30 <LSM6DSL_AccReadXYZ+0x128>)
 8008cca:	61bb      	str	r3, [r7, #24]
    break;
 8008ccc:	e008      	b.n	8008ce0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8008cce:	4b19      	ldr	r3, [pc, #100]	; (8008d34 <LSM6DSL_AccReadXYZ+0x12c>)
 8008cd0:	61bb      	str	r3, [r7, #24]
    break;
 8008cd2:	e005      	b.n	8008ce0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8008cd4:	4b18      	ldr	r3, [pc, #96]	; (8008d38 <LSM6DSL_AccReadXYZ+0x130>)
 8008cd6:	61bb      	str	r3, [r7, #24]
    break;
 8008cd8:	e002      	b.n	8008ce0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8008cda:	4b18      	ldr	r3, [pc, #96]	; (8008d3c <LSM6DSL_AccReadXYZ+0x134>)
 8008cdc:	61bb      	str	r3, [r7, #24]
    break;    
 8008cde:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	77fb      	strb	r3, [r7, #31]
 8008ce4:	e01b      	b.n	8008d1e <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8008ce6:	7ffb      	ldrb	r3, [r7, #31]
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	f107 0220 	add.w	r2, r7, #32
 8008cee:	4413      	add	r3, r2
 8008cf0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8008cf4:	ee07 3a90 	vmov	s15, r3
 8008cf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008cfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8008d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d04:	7ffb      	ldrb	r3, [r7, #31]
 8008d06:	005b      	lsls	r3, r3, #1
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d10:	ee17 2a90 	vmov	r2, s15
 8008d14:	b212      	sxth	r2, r2
 8008d16:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8008d18:	7ffb      	ldrb	r3, [r7, #31]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	77fb      	strb	r3, [r7, #31]
 8008d1e:	7ffb      	ldrb	r3, [r7, #31]
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d9e0      	bls.n	8008ce6 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8008d24:	bf00      	nop
 8008d26:	bf00      	nop
 8008d28:	3720      	adds	r7, #32
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	3d79db23 	.word	0x3d79db23
 8008d34:	3df9db23 	.word	0x3df9db23
 8008d38:	3e79db23 	.word	0x3e79db23
 8008d3c:	3ef9db23 	.word	0x3ef9db23

08008d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  keyboardHID.id = 1;
 8008d44:	4b5a      	ldr	r3, [pc, #360]	; (8008eb0 <main+0x170>)
 8008d46:	2201      	movs	r2, #1
 8008d48:	701a      	strb	r2, [r3, #0]
  mouseHID.id = 2;
 8008d4a:	4b5a      	ldr	r3, [pc, #360]	; (8008eb4 <main+0x174>)
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008d50:	f7f7 fbb6 	bl	80004c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008d54:	f000 f8c4 	bl	8008ee0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8008d58:	f000 f914 	bl	8008f84 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008d5c:	f000 fa54 	bl	8009208 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8008d60:	f000 fede 	bl	8009b20 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 8008d64:	f000 fa32 	bl	80091cc <MX_DMA_Init>
  MX_ADC1_Init();
 8008d68:	f000 f93a 	bl	8008fe0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8008d6c:	f000 f9fe 	bl	800916c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8008d70:	f000 f9bc 	bl	80090ec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8008d74:	f000 fc7e 	bl	8009674 <BSP_ACCELERO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, VR, 2);
 8008d78:	2202      	movs	r2, #2
 8008d7a:	494f      	ldr	r1, [pc, #316]	; (8008eb8 <main+0x178>)
 8008d7c:	484f      	ldr	r0, [pc, #316]	; (8008ebc <main+0x17c>)
 8008d7e:	f7f7 ff63 	bl	8000c48 <HAL_ADC_Start_DMA>

	  BSP_ACCELERO_AccGetXYZ(acceleroResults);
 8008d82:	484f      	ldr	r0, [pc, #316]	; (8008ec0 <main+0x180>)
 8008d84:	f000 fcb4 	bl	80096f0 <BSP_ACCELERO_AccGetXYZ>
	  x = acceleroResults[0];
 8008d88:	4b4d      	ldr	r3, [pc, #308]	; (8008ec0 <main+0x180>)
 8008d8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008d8e:	4b4d      	ldr	r3, [pc, #308]	; (8008ec4 <main+0x184>)
 8008d90:	801a      	strh	r2, [r3, #0]
	  y = acceleroResults[1];
 8008d92:	4b4b      	ldr	r3, [pc, #300]	; (8008ec0 <main+0x180>)
 8008d94:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008d98:	4b4b      	ldr	r3, [pc, #300]	; (8008ec8 <main+0x188>)
 8008d9a:	801a      	strh	r2, [r3, #0]

	  if (abs(x) > 200 || abs(y) > 200){
 8008d9c:	4b49      	ldr	r3, [pc, #292]	; (8008ec4 <main+0x184>)
 8008d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	bfb8      	it	lt
 8008da6:	425b      	neglt	r3, r3
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	2bc8      	cmp	r3, #200	; 0xc8
 8008dac:	d808      	bhi.n	8008dc0 <main+0x80>
 8008dae:	4b46      	ldr	r3, [pc, #280]	; (8008ec8 <main+0x188>)
 8008db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	bfb8      	it	lt
 8008db8:	425b      	neglt	r3, r3
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	2bc8      	cmp	r3, #200	; 0xc8
 8008dbe:	d91a      	bls.n	8008df6 <main+0xb6>
		  mouseHID.mouse_x = x/17;
 8008dc0:	4b40      	ldr	r3, [pc, #256]	; (8008ec4 <main+0x184>)
 8008dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dc6:	4a41      	ldr	r2, [pc, #260]	; (8008ecc <main+0x18c>)
 8008dc8:	fb82 1203 	smull	r1, r2, r2, r3
 8008dcc:	10d2      	asrs	r2, r2, #3
 8008dce:	17db      	asrs	r3, r3, #31
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	b21b      	sxth	r3, r3
 8008dd4:	b25a      	sxtb	r2, r3
 8008dd6:	4b37      	ldr	r3, [pc, #220]	; (8008eb4 <main+0x174>)
 8008dd8:	709a      	strb	r2, [r3, #2]
		  mouseHID.mouse_y = -y/14;
 8008dda:	4b3b      	ldr	r3, [pc, #236]	; (8008ec8 <main+0x188>)
 8008ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008de0:	4a3b      	ldr	r2, [pc, #236]	; (8008ed0 <main+0x190>)
 8008de2:	fb82 1203 	smull	r1, r2, r2, r3
 8008de6:	441a      	add	r2, r3
 8008de8:	10d2      	asrs	r2, r2, #3
 8008dea:	17db      	asrs	r3, r3, #31
 8008dec:	1a9b      	subs	r3, r3, r2
 8008dee:	b25a      	sxtb	r2, r3
 8008df0:	4b30      	ldr	r3, [pc, #192]	; (8008eb4 <main+0x174>)
 8008df2:	70da      	strb	r2, [r3, #3]
 8008df4:	e005      	b.n	8008e02 <main+0xc2>
	  } else {
		  mouseHID.mouse_x = 0;
 8008df6:	4b2f      	ldr	r3, [pc, #188]	; (8008eb4 <main+0x174>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	709a      	strb	r2, [r3, #2]
		  mouseHID.mouse_y = 0;
 8008dfc:	4b2d      	ldr	r3, [pc, #180]	; (8008eb4 <main+0x174>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	70da      	strb	r2, [r3, #3]
	  }

	  if(VR[0] < 2500){		// w
 8008e02:	4b2d      	ldr	r3, [pc, #180]	; (8008eb8 <main+0x178>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d803      	bhi.n	8008e16 <main+0xd6>
		  keyboardHID.keycodes[2] = 26;
 8008e0e:	4b28      	ldr	r3, [pc, #160]	; (8008eb0 <main+0x170>)
 8008e10:	221a      	movs	r2, #26
 8008e12:	715a      	strb	r2, [r3, #5]
 8008e14:	e00f      	b.n	8008e36 <main+0xf6>
	  } else if(VR[0] > 3500){		// s
 8008e16:	4b28      	ldr	r3, [pc, #160]	; (8008eb8 <main+0x178>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f640 52ac 	movw	r2, #3500	; 0xdac
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d903      	bls.n	8008e2a <main+0xea>
		  keyboardHID.keycodes[2] = 22;
 8008e22:	4b23      	ldr	r3, [pc, #140]	; (8008eb0 <main+0x170>)
 8008e24:	2216      	movs	r2, #22
 8008e26:	715a      	strb	r2, [r3, #5]
 8008e28:	e005      	b.n	8008e36 <main+0xf6>
	  } else {
		  y_flag = 0;
 8008e2a:	4b2a      	ldr	r3, [pc, #168]	; (8008ed4 <main+0x194>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	701a      	strb	r2, [r3, #0]
		  keyboardHID.keycodes[2] = 0;
 8008e30:	4b1f      	ldr	r3, [pc, #124]	; (8008eb0 <main+0x170>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	715a      	strb	r2, [r3, #5]
	  }

	  if(VR[1] < 2500){		// adddd
 8008e36:	4b20      	ldr	r3, [pc, #128]	; (8008eb8 <main+0x178>)
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d806      	bhi.n	8008e50 <main+0x110>
		  x_flag = 1;
 8008e42:	4b25      	ldr	r3, [pc, #148]	; (8008ed8 <main+0x198>)
 8008e44:	2201      	movs	r2, #1
 8008e46:	701a      	strb	r2, [r3, #0]
		  keyboardHID.keycodes[3] = 4;
 8008e48:	4b19      	ldr	r3, [pc, #100]	; (8008eb0 <main+0x170>)
 8008e4a:	2204      	movs	r2, #4
 8008e4c:	719a      	strb	r2, [r3, #6]
 8008e4e:	e01e      	b.n	8008e8e <main+0x14e>
	  } else if(VR[1] > 3500 || (VR[1] < 3035 && VR[1] > 3030)){		// d
 8008e50:	4b19      	ldr	r3, [pc, #100]	; (8008eb8 <main+0x178>)
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	f640 52ac 	movw	r2, #3500	; 0xdac
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d80b      	bhi.n	8008e74 <main+0x134>
 8008e5c:	4b16      	ldr	r3, [pc, #88]	; (8008eb8 <main+0x178>)
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	f640 32da 	movw	r2, #3034	; 0xbda
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d80c      	bhi.n	8008e82 <main+0x142>
 8008e68:	4b13      	ldr	r3, [pc, #76]	; (8008eb8 <main+0x178>)
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	f640 32d6 	movw	r2, #3030	; 0xbd6
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d906      	bls.n	8008e82 <main+0x142>
		  x_flag = 1;
 8008e74:	4b18      	ldr	r3, [pc, #96]	; (8008ed8 <main+0x198>)
 8008e76:	2201      	movs	r2, #1
 8008e78:	701a      	strb	r2, [r3, #0]
		  keyboardHID.keycodes[3] = 7;
 8008e7a:	4b0d      	ldr	r3, [pc, #52]	; (8008eb0 <main+0x170>)
 8008e7c:	2207      	movs	r2, #7
 8008e7e:	719a      	strb	r2, [r3, #6]
 8008e80:	e005      	b.n	8008e8e <main+0x14e>
	  } else {
		  x_flag = 0;
 8008e82:	4b15      	ldr	r3, [pc, #84]	; (8008ed8 <main+0x198>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	701a      	strb	r2, [r3, #0]
		  keyboardHID.keycodes[3] = 0;
 8008e88:	4b09      	ldr	r3, [pc, #36]	; (8008eb0 <main+0x170>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	719a      	strb	r2, [r3, #6]
	  }

	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardHID, sizeof (keyboardHID_t));
 8008e8e:	2209      	movs	r2, #9
 8008e90:	4907      	ldr	r1, [pc, #28]	; (8008eb0 <main+0x170>)
 8008e92:	4812      	ldr	r0, [pc, #72]	; (8008edc <main+0x19c>)
 8008e94:	f7fe fc48 	bl	8007728 <USBD_HID_SendReport>
	  HAL_Delay(50);
 8008e98:	2032      	movs	r0, #50	; 0x32
 8008e9a:	f7f7 fb85 	bl	80005a8 <HAL_Delay>
	  USBD_HID_SendReport(&hUsbDeviceFS,&mouseHID, sizeof (mouseHID_t));
 8008e9e:	2205      	movs	r2, #5
 8008ea0:	4904      	ldr	r1, [pc, #16]	; (8008eb4 <main+0x174>)
 8008ea2:	480e      	ldr	r0, [pc, #56]	; (8008edc <main+0x19c>)
 8008ea4:	f7fe fc40 	bl	8007728 <USBD_HID_SendReport>
	  HAL_Delay(20);
 8008ea8:	2014      	movs	r0, #20
 8008eaa:	f7f7 fb7d 	bl	80005a8 <HAL_Delay>
  {
 8008eae:	e763      	b.n	8008d78 <main+0x38>
 8008eb0:	20000410 	.word	0x20000410
 8008eb4:	2000021c 	.word	0x2000021c
 8008eb8:	20000274 	.word	0x20000274
 8008ebc:	2000027c 	.word	0x2000027c
 8008ec0:	20000214 	.word	0x20000214
 8008ec4:	2000021a 	.word	0x2000021a
 8008ec8:	2000041a 	.word	0x2000041a
 8008ecc:	78787879 	.word	0x78787879
 8008ed0:	92492493 	.word	0x92492493
 8008ed4:	200001f6 	.word	0x200001f6
 8008ed8:	200001f5 	.word	0x200001f5
 8008edc:	200004ec 	.word	0x200004ec

08008ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b096      	sub	sp, #88	; 0x58
 8008ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008ee6:	f107 0314 	add.w	r3, r7, #20
 8008eea:	2244      	movs	r2, #68	; 0x44
 8008eec:	2100      	movs	r1, #0
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f001 fbb0 	bl	800a654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008ef4:	463b      	mov	r3, r7
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	601a      	str	r2, [r3, #0]
 8008efa:	605a      	str	r2, [r3, #4]
 8008efc:	609a      	str	r2, [r3, #8]
 8008efe:	60da      	str	r2, [r3, #12]
 8008f00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8008f02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008f06:	f7fb f951 	bl	80041ac <HAL_PWREx_ControlVoltageScaling>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8008f10:	f000 fa5a 	bl	80093c8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8008f14:	2310      	movs	r3, #16
 8008f16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8008f20:	2360      	movs	r3, #96	; 0x60
 8008f22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008f24:	2302      	movs	r3, #2
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8008f30:	2328      	movs	r3, #40	; 0x28
 8008f32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8008f34:	2307      	movs	r3, #7
 8008f36:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008f38:	2302      	movs	r3, #2
 8008f3a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008f40:	f107 0314 	add.w	r3, r7, #20
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fb f997 	bl	8004278 <HAL_RCC_OscConfig>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8008f50:	f000 fa3a 	bl	80093c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008f54:	230f      	movs	r3, #15
 8008f56:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008f60:	2300      	movs	r3, #0
 8008f62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008f64:	2300      	movs	r3, #0
 8008f66:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008f68:	463b      	mov	r3, r7
 8008f6a:	2104      	movs	r1, #4
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fb fd69 	bl	8004a44 <HAL_RCC_ClockConfig>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8008f78:	f000 fa26 	bl	80093c8 <Error_Handler>
  }
}
 8008f7c:	bf00      	nop
 8008f7e:	3758      	adds	r7, #88	; 0x58
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b0a2      	sub	sp, #136	; 0x88
 8008f88:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008f8a:	463b      	mov	r3, r7
 8008f8c:	2288      	movs	r2, #136	; 0x88
 8008f8e:	2100      	movs	r1, #0
 8008f90:	4618      	mov	r0, r3
 8008f92:	f001 fb5f 	bl	800a654 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8008f96:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8008f9a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8008f9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008fa0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008fa2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008fac:	2301      	movs	r3, #1
 8008fae:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8008fb0:	2318      	movs	r3, #24
 8008fb2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008fb4:	2307      	movs	r3, #7
 8008fb6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008fb8:	2302      	movs	r3, #2
 8008fba:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8008fc0:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8008fc4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008fc6:	463b      	mov	r3, r7
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7fb ff41 	bl	8004e50 <HAL_RCCEx_PeriphCLKConfig>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8008fd4:	f000 f9f8 	bl	80093c8 <Error_Handler>
  }
}
 8008fd8:	bf00      	nop
 8008fda:	3788      	adds	r7, #136	; 0x88
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b08a      	sub	sp, #40	; 0x28
 8008fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8008fe6:	f107 031c 	add.w	r3, r7, #28
 8008fea:	2200      	movs	r2, #0
 8008fec:	601a      	str	r2, [r3, #0]
 8008fee:	605a      	str	r2, [r3, #4]
 8008ff0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8008ff2:	1d3b      	adds	r3, r7, #4
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	605a      	str	r2, [r3, #4]
 8008ffa:	609a      	str	r2, [r3, #8]
 8008ffc:	60da      	str	r2, [r3, #12]
 8008ffe:	611a      	str	r2, [r3, #16]
 8009000:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8009002:	4b36      	ldr	r3, [pc, #216]	; (80090dc <MX_ADC1_Init+0xfc>)
 8009004:	4a36      	ldr	r2, [pc, #216]	; (80090e0 <MX_ADC1_Init+0x100>)
 8009006:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8009008:	4b34      	ldr	r3, [pc, #208]	; (80090dc <MX_ADC1_Init+0xfc>)
 800900a:	2200      	movs	r2, #0
 800900c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800900e:	4b33      	ldr	r3, [pc, #204]	; (80090dc <MX_ADC1_Init+0xfc>)
 8009010:	2200      	movs	r2, #0
 8009012:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009014:	4b31      	ldr	r3, [pc, #196]	; (80090dc <MX_ADC1_Init+0xfc>)
 8009016:	2200      	movs	r2, #0
 8009018:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800901a:	4b30      	ldr	r3, [pc, #192]	; (80090dc <MX_ADC1_Init+0xfc>)
 800901c:	2201      	movs	r2, #1
 800901e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009020:	4b2e      	ldr	r3, [pc, #184]	; (80090dc <MX_ADC1_Init+0xfc>)
 8009022:	2204      	movs	r2, #4
 8009024:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8009026:	4b2d      	ldr	r3, [pc, #180]	; (80090dc <MX_ADC1_Init+0xfc>)
 8009028:	2200      	movs	r2, #0
 800902a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800902c:	4b2b      	ldr	r3, [pc, #172]	; (80090dc <MX_ADC1_Init+0xfc>)
 800902e:	2201      	movs	r2, #1
 8009030:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8009032:	4b2a      	ldr	r3, [pc, #168]	; (80090dc <MX_ADC1_Init+0xfc>)
 8009034:	2202      	movs	r2, #2
 8009036:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009038:	4b28      	ldr	r3, [pc, #160]	; (80090dc <MX_ADC1_Init+0xfc>)
 800903a:	2200      	movs	r2, #0
 800903c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009040:	4b26      	ldr	r3, [pc, #152]	; (80090dc <MX_ADC1_Init+0xfc>)
 8009042:	2200      	movs	r2, #0
 8009044:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009046:	4b25      	ldr	r3, [pc, #148]	; (80090dc <MX_ADC1_Init+0xfc>)
 8009048:	2200      	movs	r2, #0
 800904a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800904c:	4b23      	ldr	r3, [pc, #140]	; (80090dc <MX_ADC1_Init+0xfc>)
 800904e:	2200      	movs	r2, #0
 8009050:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009054:	4b21      	ldr	r3, [pc, #132]	; (80090dc <MX_ADC1_Init+0xfc>)
 8009056:	2200      	movs	r2, #0
 8009058:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800905a:	4b20      	ldr	r3, [pc, #128]	; (80090dc <MX_ADC1_Init+0xfc>)
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009062:	481e      	ldr	r0, [pc, #120]	; (80090dc <MX_ADC1_Init+0xfc>)
 8009064:	f7f7 fc9a 	bl	800099c <HAL_ADC_Init>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800906e:	f000 f9ab 	bl	80093c8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8009072:	2300      	movs	r3, #0
 8009074:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8009076:	f107 031c 	add.w	r3, r7, #28
 800907a:	4619      	mov	r1, r3
 800907c:	4817      	ldr	r0, [pc, #92]	; (80090dc <MX_ADC1_Init+0xfc>)
 800907e:	f7f8 fbc1 	bl	8001804 <HAL_ADCEx_MultiModeConfigChannel>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d001      	beq.n	800908c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8009088:	f000 f99e 	bl	80093c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800908c:	4b15      	ldr	r3, [pc, #84]	; (80090e4 <MX_ADC1_Init+0x104>)
 800908e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009090:	2306      	movs	r3, #6
 8009092:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8009094:	2306      	movs	r3, #6
 8009096:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009098:	237f      	movs	r3, #127	; 0x7f
 800909a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800909c:	2304      	movs	r3, #4
 800909e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80090a4:	1d3b      	adds	r3, r7, #4
 80090a6:	4619      	mov	r1, r3
 80090a8:	480c      	ldr	r0, [pc, #48]	; (80090dc <MX_ADC1_Init+0xfc>)
 80090aa:	f7f7 fe9f 	bl	8000dec <HAL_ADC_ConfigChannel>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80090b4:	f000 f988 	bl	80093c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80090b8:	4b0b      	ldr	r3, [pc, #44]	; (80090e8 <MX_ADC1_Init+0x108>)
 80090ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80090bc:	230c      	movs	r3, #12
 80090be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80090c0:	1d3b      	adds	r3, r7, #4
 80090c2:	4619      	mov	r1, r3
 80090c4:	4805      	ldr	r0, [pc, #20]	; (80090dc <MX_ADC1_Init+0xfc>)
 80090c6:	f7f7 fe91 	bl	8000dec <HAL_ADC_ConfigChannel>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80090d0:	f000 f97a 	bl	80093c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80090d4:	bf00      	nop
 80090d6:	3728      	adds	r7, #40	; 0x28
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	2000027c 	.word	0x2000027c
 80090e0:	50040000 	.word	0x50040000
 80090e4:	04300002 	.word	0x04300002
 80090e8:	08600004 	.word	0x08600004

080090ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80090f0:	4b1b      	ldr	r3, [pc, #108]	; (8009160 <MX_I2C1_Init+0x74>)
 80090f2:	4a1c      	ldr	r2, [pc, #112]	; (8009164 <MX_I2C1_Init+0x78>)
 80090f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80090f6:	4b1a      	ldr	r3, [pc, #104]	; (8009160 <MX_I2C1_Init+0x74>)
 80090f8:	4a1b      	ldr	r2, [pc, #108]	; (8009168 <MX_I2C1_Init+0x7c>)
 80090fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80090fc:	4b18      	ldr	r3, [pc, #96]	; (8009160 <MX_I2C1_Init+0x74>)
 80090fe:	2200      	movs	r2, #0
 8009100:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009102:	4b17      	ldr	r3, [pc, #92]	; (8009160 <MX_I2C1_Init+0x74>)
 8009104:	2201      	movs	r2, #1
 8009106:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009108:	4b15      	ldr	r3, [pc, #84]	; (8009160 <MX_I2C1_Init+0x74>)
 800910a:	2200      	movs	r2, #0
 800910c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800910e:	4b14      	ldr	r3, [pc, #80]	; (8009160 <MX_I2C1_Init+0x74>)
 8009110:	2200      	movs	r2, #0
 8009112:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009114:	4b12      	ldr	r3, [pc, #72]	; (8009160 <MX_I2C1_Init+0x74>)
 8009116:	2200      	movs	r2, #0
 8009118:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800911a:	4b11      	ldr	r3, [pc, #68]	; (8009160 <MX_I2C1_Init+0x74>)
 800911c:	2200      	movs	r2, #0
 800911e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009120:	4b0f      	ldr	r3, [pc, #60]	; (8009160 <MX_I2C1_Init+0x74>)
 8009122:	2200      	movs	r2, #0
 8009124:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009126:	480e      	ldr	r0, [pc, #56]	; (8009160 <MX_I2C1_Init+0x74>)
 8009128:	f7f9 fa0c 	bl	8002544 <HAL_I2C_Init>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8009132:	f000 f949 	bl	80093c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009136:	2100      	movs	r1, #0
 8009138:	4809      	ldr	r0, [pc, #36]	; (8009160 <MX_I2C1_Init+0x74>)
 800913a:	f7f9 ff0b 	bl	8002f54 <HAL_I2CEx_ConfigAnalogFilter>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d001      	beq.n	8009148 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8009144:	f000 f940 	bl	80093c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009148:	2100      	movs	r1, #0
 800914a:	4805      	ldr	r0, [pc, #20]	; (8009160 <MX_I2C1_Init+0x74>)
 800914c:	f7f9 ff4d 	bl	8002fea <HAL_I2CEx_ConfigDigitalFilter>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d001      	beq.n	800915a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8009156:	f000 f937 	bl	80093c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800915a:	bf00      	nop
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	20000228 	.word	0x20000228
 8009164:	40005400 	.word	0x40005400
 8009168:	10909cec 	.word	0x10909cec

0800916c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009170:	4b14      	ldr	r3, [pc, #80]	; (80091c4 <MX_USART1_UART_Init+0x58>)
 8009172:	4a15      	ldr	r2, [pc, #84]	; (80091c8 <MX_USART1_UART_Init+0x5c>)
 8009174:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009176:	4b13      	ldr	r3, [pc, #76]	; (80091c4 <MX_USART1_UART_Init+0x58>)
 8009178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800917c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800917e:	4b11      	ldr	r3, [pc, #68]	; (80091c4 <MX_USART1_UART_Init+0x58>)
 8009180:	2200      	movs	r2, #0
 8009182:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009184:	4b0f      	ldr	r3, [pc, #60]	; (80091c4 <MX_USART1_UART_Init+0x58>)
 8009186:	2200      	movs	r2, #0
 8009188:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800918a:	4b0e      	ldr	r3, [pc, #56]	; (80091c4 <MX_USART1_UART_Init+0x58>)
 800918c:	2200      	movs	r2, #0
 800918e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009190:	4b0c      	ldr	r3, [pc, #48]	; (80091c4 <MX_USART1_UART_Init+0x58>)
 8009192:	220c      	movs	r2, #12
 8009194:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009196:	4b0b      	ldr	r3, [pc, #44]	; (80091c4 <MX_USART1_UART_Init+0x58>)
 8009198:	2200      	movs	r2, #0
 800919a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800919c:	4b09      	ldr	r3, [pc, #36]	; (80091c4 <MX_USART1_UART_Init+0x58>)
 800919e:	2200      	movs	r2, #0
 80091a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80091a2:	4b08      	ldr	r3, [pc, #32]	; (80091c4 <MX_USART1_UART_Init+0x58>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80091a8:	4b06      	ldr	r3, [pc, #24]	; (80091c4 <MX_USART1_UART_Init+0x58>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80091ae:	4805      	ldr	r0, [pc, #20]	; (80091c4 <MX_USART1_UART_Init+0x58>)
 80091b0:	f7fc fb0a 	bl	80057c8 <HAL_UART_Init>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80091ba:	f000 f905 	bl	80093c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80091be:	bf00      	nop
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	200002e0 	.word	0x200002e0
 80091c8:	40013800 	.word	0x40013800

080091cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80091d2:	4b0c      	ldr	r3, [pc, #48]	; (8009204 <MX_DMA_Init+0x38>)
 80091d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091d6:	4a0b      	ldr	r2, [pc, #44]	; (8009204 <MX_DMA_Init+0x38>)
 80091d8:	f043 0301 	orr.w	r3, r3, #1
 80091dc:	6493      	str	r3, [r2, #72]	; 0x48
 80091de:	4b09      	ldr	r3, [pc, #36]	; (8009204 <MX_DMA_Init+0x38>)
 80091e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	607b      	str	r3, [r7, #4]
 80091e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80091ea:	2200      	movs	r2, #0
 80091ec:	2100      	movs	r1, #0
 80091ee:	200b      	movs	r0, #11
 80091f0:	f7f8 fc93 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80091f4:	200b      	movs	r0, #11
 80091f6:	f7f8 fcac 	bl	8001b52 <HAL_NVIC_EnableIRQ>

}
 80091fa:	bf00      	nop
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	40021000 	.word	0x40021000

08009208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b08a      	sub	sp, #40	; 0x28
 800920c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800920e:	f107 0314 	add.w	r3, r7, #20
 8009212:	2200      	movs	r2, #0
 8009214:	601a      	str	r2, [r3, #0]
 8009216:	605a      	str	r2, [r3, #4]
 8009218:	609a      	str	r2, [r3, #8]
 800921a:	60da      	str	r2, [r3, #12]
 800921c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800921e:	4b3a      	ldr	r3, [pc, #232]	; (8009308 <MX_GPIO_Init+0x100>)
 8009220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009222:	4a39      	ldr	r2, [pc, #228]	; (8009308 <MX_GPIO_Init+0x100>)
 8009224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800922a:	4b37      	ldr	r3, [pc, #220]	; (8009308 <MX_GPIO_Init+0x100>)
 800922c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800922e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009232:	613b      	str	r3, [r7, #16]
 8009234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009236:	4b34      	ldr	r3, [pc, #208]	; (8009308 <MX_GPIO_Init+0x100>)
 8009238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800923a:	4a33      	ldr	r2, [pc, #204]	; (8009308 <MX_GPIO_Init+0x100>)
 800923c:	f043 0304 	orr.w	r3, r3, #4
 8009240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009242:	4b31      	ldr	r3, [pc, #196]	; (8009308 <MX_GPIO_Init+0x100>)
 8009244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009246:	f003 0304 	and.w	r3, r3, #4
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800924e:	4b2e      	ldr	r3, [pc, #184]	; (8009308 <MX_GPIO_Init+0x100>)
 8009250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009252:	4a2d      	ldr	r2, [pc, #180]	; (8009308 <MX_GPIO_Init+0x100>)
 8009254:	f043 0302 	orr.w	r3, r3, #2
 8009258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800925a:	4b2b      	ldr	r3, [pc, #172]	; (8009308 <MX_GPIO_Init+0x100>)
 800925c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	60bb      	str	r3, [r7, #8]
 8009264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009266:	4b28      	ldr	r3, [pc, #160]	; (8009308 <MX_GPIO_Init+0x100>)
 8009268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800926a:	4a27      	ldr	r2, [pc, #156]	; (8009308 <MX_GPIO_Init+0x100>)
 800926c:	f043 0301 	orr.w	r3, r3, #1
 8009270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009272:	4b25      	ldr	r3, [pc, #148]	; (8009308 <MX_GPIO_Init+0x100>)
 8009274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	607b      	str	r3, [r7, #4]
 800927c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800927e:	2200      	movs	r2, #0
 8009280:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009284:	4821      	ldr	r0, [pc, #132]	; (800930c <MX_GPIO_Init+0x104>)
 8009286:	f7f9 f92d 	bl	80024e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800928a:	233c      	movs	r3, #60	; 0x3c
 800928c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800928e:	4b20      	ldr	r3, [pc, #128]	; (8009310 <MX_GPIO_Init+0x108>)
 8009290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009292:	2302      	movs	r3, #2
 8009294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009296:	f107 0314 	add.w	r3, r7, #20
 800929a:	4619      	mov	r1, r3
 800929c:	481d      	ldr	r0, [pc, #116]	; (8009314 <MX_GPIO_Init+0x10c>)
 800929e:	f7f8 fe6b 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80092a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80092a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092a8:	2301      	movs	r3, #1
 80092aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092ac:	2300      	movs	r3, #0
 80092ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092b0:	2300      	movs	r3, #0
 80092b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80092b4:	f107 0314 	add.w	r3, r7, #20
 80092b8:	4619      	mov	r1, r3
 80092ba:	4814      	ldr	r0, [pc, #80]	; (800930c <MX_GPIO_Init+0x104>)
 80092bc:	f7f8 fe5c 	bl	8001f78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80092c0:	2200      	movs	r2, #0
 80092c2:	2100      	movs	r1, #0
 80092c4:	2008      	movs	r0, #8
 80092c6:	f7f8 fc28 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80092ca:	2008      	movs	r0, #8
 80092cc:	f7f8 fc41 	bl	8001b52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80092d0:	2200      	movs	r2, #0
 80092d2:	2100      	movs	r1, #0
 80092d4:	2009      	movs	r0, #9
 80092d6:	f7f8 fc20 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80092da:	2009      	movs	r0, #9
 80092dc:	f7f8 fc39 	bl	8001b52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80092e0:	2200      	movs	r2, #0
 80092e2:	2100      	movs	r1, #0
 80092e4:	200a      	movs	r0, #10
 80092e6:	f7f8 fc18 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80092ea:	200a      	movs	r0, #10
 80092ec:	f7f8 fc31 	bl	8001b52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80092f0:	2200      	movs	r2, #0
 80092f2:	2100      	movs	r1, #0
 80092f4:	2017      	movs	r0, #23
 80092f6:	f7f8 fc10 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80092fa:	2017      	movs	r0, #23
 80092fc:	f7f8 fc29 	bl	8001b52 <HAL_NVIC_EnableIRQ>

}
 8009300:	bf00      	nop
 8009302:	3728      	adds	r7, #40	; 0x28
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	40021000 	.word	0x40021000
 800930c:	48000400 	.word	0x48000400
 8009310:	10310000 	.word	0x10310000
 8009314:	48000800 	.word	0x48000800

08009318 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t  GPIO_Pin){
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	4603      	mov	r3, r0
 8009320:	80fb      	strh	r3, [r7, #6]
//		} else {
//			HID_buffer[2] = 0;
//		}
//	}

	if(GPIO_Pin == GPIO_PIN_2){
 8009322:	88fb      	ldrh	r3, [r7, #6]
 8009324:	2b04      	cmp	r3, #4
 8009326:	d10d      	bne.n	8009344 <HAL_GPIO_EXTI_Callback+0x2c>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)){
 8009328:	2104      	movs	r1, #4
 800932a:	4824      	ldr	r0, [pc, #144]	; (80093bc <HAL_GPIO_EXTI_Callback+0xa4>)
 800932c:	f7f9 f8c2 	bl	80024b4 <HAL_GPIO_ReadPin>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d003      	beq.n	800933e <HAL_GPIO_EXTI_Callback+0x26>
//			HID_buffer[2] = 22;
			keyboardHID.keycodes[0] = 13;
 8009336:	4b22      	ldr	r3, [pc, #136]	; (80093c0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8009338:	220d      	movs	r2, #13
 800933a:	70da      	strb	r2, [r3, #3]
 800933c:	e002      	b.n	8009344 <HAL_GPIO_EXTI_Callback+0x2c>
		} else {
			keyboardHID.keycodes[0] = 0;
 800933e:	4b20      	ldr	r3, [pc, #128]	; (80093c0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8009340:	2200      	movs	r2, #0
 8009342:	70da      	strb	r2, [r3, #3]
		}
	}

	if(GPIO_Pin == GPIO_PIN_3){
 8009344:	88fb      	ldrh	r3, [r7, #6]
 8009346:	2b08      	cmp	r3, #8
 8009348:	d10d      	bne.n	8009366 <HAL_GPIO_EXTI_Callback+0x4e>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)){
 800934a:	2108      	movs	r1, #8
 800934c:	481b      	ldr	r0, [pc, #108]	; (80093bc <HAL_GPIO_EXTI_Callback+0xa4>)
 800934e:	f7f9 f8b1 	bl	80024b4 <HAL_GPIO_ReadPin>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d003      	beq.n	8009360 <HAL_GPIO_EXTI_Callback+0x48>
			keyboardHID.keycodes[1] = 14;
 8009358:	4b19      	ldr	r3, [pc, #100]	; (80093c0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800935a:	220e      	movs	r2, #14
 800935c:	711a      	strb	r2, [r3, #4]
 800935e:	e002      	b.n	8009366 <HAL_GPIO_EXTI_Callback+0x4e>
		} else {
			keyboardHID.keycodes[1] = 0;
 8009360:	4b17      	ldr	r3, [pc, #92]	; (80093c0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8009362:	2200      	movs	r2, #0
 8009364:	711a      	strb	r2, [r3, #4]
		}
	}

	if(GPIO_Pin == GPIO_PIN_4){
 8009366:	88fb      	ldrh	r3, [r7, #6]
 8009368:	2b10      	cmp	r3, #16
 800936a:	d10d      	bne.n	8009388 <HAL_GPIO_EXTI_Callback+0x70>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4)){
 800936c:	2110      	movs	r1, #16
 800936e:	4813      	ldr	r0, [pc, #76]	; (80093bc <HAL_GPIO_EXTI_Callback+0xa4>)
 8009370:	f7f9 f8a0 	bl	80024b4 <HAL_GPIO_ReadPin>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <HAL_GPIO_EXTI_Callback+0x6a>
			keyboardHID.keycodes[1] = 29;
 800937a:	4b11      	ldr	r3, [pc, #68]	; (80093c0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800937c:	221d      	movs	r2, #29
 800937e:	711a      	strb	r2, [r3, #4]
 8009380:	e002      	b.n	8009388 <HAL_GPIO_EXTI_Callback+0x70>
		} else {
			keyboardHID.keycodes[1] = 0;
 8009382:	4b0f      	ldr	r3, [pc, #60]	; (80093c0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8009384:	2200      	movs	r2, #0
 8009386:	711a      	strb	r2, [r3, #4]
		}
	}

	if(GPIO_Pin == GPIO_PIN_5){
 8009388:	88fb      	ldrh	r3, [r7, #6]
 800938a:	2b20      	cmp	r3, #32
 800938c:	d10d      	bne.n	80093aa <HAL_GPIO_EXTI_Callback+0x92>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5)){
 800938e:	2120      	movs	r1, #32
 8009390:	480a      	ldr	r0, [pc, #40]	; (80093bc <HAL_GPIO_EXTI_Callback+0xa4>)
 8009392:	f7f9 f88f 	bl	80024b4 <HAL_GPIO_ReadPin>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d003      	beq.n	80093a4 <HAL_GPIO_EXTI_Callback+0x8c>
			keyboardHID.keycodes[1] = 14;
 800939c:	4b08      	ldr	r3, [pc, #32]	; (80093c0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800939e:	220e      	movs	r2, #14
 80093a0:	711a      	strb	r2, [r3, #4]
 80093a2:	e002      	b.n	80093aa <HAL_GPIO_EXTI_Callback+0x92>
		} else {
			keyboardHID.keycodes[1] = 0;
 80093a4:	4b06      	ldr	r3, [pc, #24]	; (80093c0 <HAL_GPIO_EXTI_Callback+0xa8>)
 80093a6:	2200      	movs	r2, #0
 80093a8:	711a      	strb	r2, [r3, #4]
		}
	}

	USBD_HID_SendReport(&hUsbDeviceFS,&keyboardHID, sizeof (keyboardHID_t));
 80093aa:	2209      	movs	r2, #9
 80093ac:	4904      	ldr	r1, [pc, #16]	; (80093c0 <HAL_GPIO_EXTI_Callback+0xa8>)
 80093ae:	4805      	ldr	r0, [pc, #20]	; (80093c4 <HAL_GPIO_EXTI_Callback+0xac>)
 80093b0:	f7fe f9ba 	bl	8007728 <USBD_HID_SendReport>
}
 80093b4:	bf00      	nop
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	48000800 	.word	0x48000800
 80093c0:	20000410 	.word	0x20000410
 80093c4:	200004ec 	.word	0x200004ec

080093c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80093c8:	b480      	push	{r7}
 80093ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80093cc:	b672      	cpsid	i
}
 80093ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80093d0:	e7fe      	b.n	80093d0 <Error_Handler+0x8>
	...

080093d4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b08a      	sub	sp, #40	; 0x28
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80093dc:	4b27      	ldr	r3, [pc, #156]	; (800947c <I2Cx_MspInit+0xa8>)
 80093de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093e0:	4a26      	ldr	r2, [pc, #152]	; (800947c <I2Cx_MspInit+0xa8>)
 80093e2:	f043 0302 	orr.w	r3, r3, #2
 80093e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80093e8:	4b24      	ldr	r3, [pc, #144]	; (800947c <I2Cx_MspInit+0xa8>)
 80093ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ec:	f003 0302 	and.w	r3, r3, #2
 80093f0:	613b      	str	r3, [r7, #16]
 80093f2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80093f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80093f8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80093fa:	2312      	movs	r3, #18
 80093fc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80093fe:	2301      	movs	r3, #1
 8009400:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009402:	2303      	movs	r3, #3
 8009404:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8009406:	2304      	movs	r3, #4
 8009408:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800940a:	f107 0314 	add.w	r3, r7, #20
 800940e:	4619      	mov	r1, r3
 8009410:	481b      	ldr	r0, [pc, #108]	; (8009480 <I2Cx_MspInit+0xac>)
 8009412:	f7f8 fdb1 	bl	8001f78 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009416:	f107 0314 	add.w	r3, r7, #20
 800941a:	4619      	mov	r1, r3
 800941c:	4818      	ldr	r0, [pc, #96]	; (8009480 <I2Cx_MspInit+0xac>)
 800941e:	f7f8 fdab 	bl	8001f78 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8009422:	4b16      	ldr	r3, [pc, #88]	; (800947c <I2Cx_MspInit+0xa8>)
 8009424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009426:	4a15      	ldr	r2, [pc, #84]	; (800947c <I2Cx_MspInit+0xa8>)
 8009428:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800942c:	6593      	str	r3, [r2, #88]	; 0x58
 800942e:	4b13      	ldr	r3, [pc, #76]	; (800947c <I2Cx_MspInit+0xa8>)
 8009430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800943a:	4b10      	ldr	r3, [pc, #64]	; (800947c <I2Cx_MspInit+0xa8>)
 800943c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943e:	4a0f      	ldr	r2, [pc, #60]	; (800947c <I2Cx_MspInit+0xa8>)
 8009440:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009444:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8009446:	4b0d      	ldr	r3, [pc, #52]	; (800947c <I2Cx_MspInit+0xa8>)
 8009448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944a:	4a0c      	ldr	r2, [pc, #48]	; (800947c <I2Cx_MspInit+0xa8>)
 800944c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009450:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8009452:	2200      	movs	r2, #0
 8009454:	210f      	movs	r1, #15
 8009456:	2021      	movs	r0, #33	; 0x21
 8009458:	f7f8 fb5f 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800945c:	2021      	movs	r0, #33	; 0x21
 800945e:	f7f8 fb78 	bl	8001b52 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8009462:	2200      	movs	r2, #0
 8009464:	210f      	movs	r1, #15
 8009466:	2022      	movs	r0, #34	; 0x22
 8009468:	f7f8 fb57 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800946c:	2022      	movs	r0, #34	; 0x22
 800946e:	f7f8 fb70 	bl	8001b52 <HAL_NVIC_EnableIRQ>
}
 8009472:	bf00      	nop
 8009474:	3728      	adds	r7, #40	; 0x28
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	40021000 	.word	0x40021000
 8009480:	48000400 	.word	0x48000400

08009484 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a12      	ldr	r2, [pc, #72]	; (80094d8 <I2Cx_Init+0x54>)
 8009490:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a11      	ldr	r2, [pc, #68]	; (80094dc <I2Cx_Init+0x58>)
 8009496:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2201      	movs	r2, #1
 80094a2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f7ff ff89 	bl	80093d4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7f9 f83e 	bl	8002544 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80094c8:	2100      	movs	r1, #0
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7f9 fd42 	bl	8002f54 <HAL_I2CEx_ConfigAnalogFilter>
}
 80094d0:	bf00      	nop
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	40005800 	.word	0x40005800
 80094dc:	00702681 	.word	0x00702681

080094e0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08a      	sub	sp, #40	; 0x28
 80094e4:	af04      	add	r7, sp, #16
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	4608      	mov	r0, r1
 80094ea:	4611      	mov	r1, r2
 80094ec:	461a      	mov	r2, r3
 80094ee:	4603      	mov	r3, r0
 80094f0:	72fb      	strb	r3, [r7, #11]
 80094f2:	460b      	mov	r3, r1
 80094f4:	813b      	strh	r3, [r7, #8]
 80094f6:	4613      	mov	r3, r2
 80094f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80094fe:	7afb      	ldrb	r3, [r7, #11]
 8009500:	b299      	uxth	r1, r3
 8009502:	88f8      	ldrh	r0, [r7, #6]
 8009504:	893a      	ldrh	r2, [r7, #8]
 8009506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800950a:	9302      	str	r3, [sp, #8]
 800950c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	4603      	mov	r3, r0
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f7f9 f9e6 	bl	80028e8 <HAL_I2C_Mem_Read>
 800951c:	4603      	mov	r3, r0
 800951e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009520:	7dfb      	ldrb	r3, [r7, #23]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d004      	beq.n	8009530 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8009526:	7afb      	ldrb	r3, [r7, #11]
 8009528:	4619      	mov	r1, r3
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f000 f832 	bl	8009594 <I2Cx_Error>
  }
  return status;
 8009530:	7dfb      	ldrb	r3, [r7, #23]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3718      	adds	r7, #24
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b08a      	sub	sp, #40	; 0x28
 800953e:	af04      	add	r7, sp, #16
 8009540:	60f8      	str	r0, [r7, #12]
 8009542:	4608      	mov	r0, r1
 8009544:	4611      	mov	r1, r2
 8009546:	461a      	mov	r2, r3
 8009548:	4603      	mov	r3, r0
 800954a:	72fb      	strb	r3, [r7, #11]
 800954c:	460b      	mov	r3, r1
 800954e:	813b      	strh	r3, [r7, #8]
 8009550:	4613      	mov	r3, r2
 8009552:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009558:	7afb      	ldrb	r3, [r7, #11]
 800955a:	b299      	uxth	r1, r3
 800955c:	88f8      	ldrh	r0, [r7, #6]
 800955e:	893a      	ldrh	r2, [r7, #8]
 8009560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009564:	9302      	str	r3, [sp, #8]
 8009566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009568:	9301      	str	r3, [sp, #4]
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	4603      	mov	r3, r0
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f7f9 f8a5 	bl	80026c0 <HAL_I2C_Mem_Write>
 8009576:	4603      	mov	r3, r0
 8009578:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800957a:	7dfb      	ldrb	r3, [r7, #23]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d004      	beq.n	800958a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009580:	7afb      	ldrb	r3, [r7, #11]
 8009582:	4619      	mov	r1, r3
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f000 f805 	bl	8009594 <I2Cx_Error>
  }
  return status;
 800958a:	7dfb      	ldrb	r3, [r7, #23]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3718      	adds	r7, #24
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	460b      	mov	r3, r1
 800959e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7f9 f85e 	bl	8002662 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff ff6c 	bl	8009484 <I2Cx_Init>
}
 80095ac:	bf00      	nop
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80095b8:	4802      	ldr	r0, [pc, #8]	; (80095c4 <SENSOR_IO_Init+0x10>)
 80095ba:	f7ff ff63 	bl	8009484 <I2Cx_Init>
}
 80095be:	bf00      	nop
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	200004a0 	.word	0x200004a0

080095c8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af02      	add	r7, sp, #8
 80095ce:	4603      	mov	r3, r0
 80095d0:	71fb      	strb	r3, [r7, #7]
 80095d2:	460b      	mov	r3, r1
 80095d4:	71bb      	strb	r3, [r7, #6]
 80095d6:	4613      	mov	r3, r2
 80095d8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80095da:	79bb      	ldrb	r3, [r7, #6]
 80095dc:	b29a      	uxth	r2, r3
 80095de:	79f9      	ldrb	r1, [r7, #7]
 80095e0:	2301      	movs	r3, #1
 80095e2:	9301      	str	r3, [sp, #4]
 80095e4:	1d7b      	adds	r3, r7, #5
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	2301      	movs	r3, #1
 80095ea:	4803      	ldr	r0, [pc, #12]	; (80095f8 <SENSOR_IO_Write+0x30>)
 80095ec:	f7ff ffa5 	bl	800953a <I2Cx_WriteMultiple>
}
 80095f0:	bf00      	nop
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	200004a0 	.word	0x200004a0

080095fc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af02      	add	r7, sp, #8
 8009602:	4603      	mov	r3, r0
 8009604:	460a      	mov	r2, r1
 8009606:	71fb      	strb	r3, [r7, #7]
 8009608:	4613      	mov	r3, r2
 800960a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8009610:	79bb      	ldrb	r3, [r7, #6]
 8009612:	b29a      	uxth	r2, r3
 8009614:	79f9      	ldrb	r1, [r7, #7]
 8009616:	2301      	movs	r3, #1
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	f107 030f 	add.w	r3, r7, #15
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	2301      	movs	r3, #1
 8009622:	4804      	ldr	r0, [pc, #16]	; (8009634 <SENSOR_IO_Read+0x38>)
 8009624:	f7ff ff5c 	bl	80094e0 <I2Cx_ReadMultiple>

  return read_value;
 8009628:	7bfb      	ldrb	r3, [r7, #15]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	200004a0 	.word	0x200004a0

08009638 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af02      	add	r7, sp, #8
 800963e:	603a      	str	r2, [r7, #0]
 8009640:	461a      	mov	r2, r3
 8009642:	4603      	mov	r3, r0
 8009644:	71fb      	strb	r3, [r7, #7]
 8009646:	460b      	mov	r3, r1
 8009648:	71bb      	strb	r3, [r7, #6]
 800964a:	4613      	mov	r3, r2
 800964c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800964e:	79bb      	ldrb	r3, [r7, #6]
 8009650:	b29a      	uxth	r2, r3
 8009652:	79f9      	ldrb	r1, [r7, #7]
 8009654:	88bb      	ldrh	r3, [r7, #4]
 8009656:	9301      	str	r3, [sp, #4]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	2301      	movs	r3, #1
 800965e:	4804      	ldr	r0, [pc, #16]	; (8009670 <SENSOR_IO_ReadMultiple+0x38>)
 8009660:	f7ff ff3e 	bl	80094e0 <I2Cx_ReadMultiple>
 8009664:	4603      	mov	r3, r0
 8009666:	b29b      	uxth	r3, r3
}
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	200004a0 	.word	0x200004a0

08009674 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800967a:	2300      	movs	r3, #0
 800967c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800967e:	2300      	movs	r3, #0
 8009680:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8009682:	4b19      	ldr	r3, [pc, #100]	; (80096e8 <BSP_ACCELERO_Init+0x74>)
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	4798      	blx	r3
 8009688:	4603      	mov	r3, r0
 800968a:	2b6a      	cmp	r3, #106	; 0x6a
 800968c:	d002      	beq.n	8009694 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	73fb      	strb	r3, [r7, #15]
 8009692:	e024      	b.n	80096de <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8009694:	4b15      	ldr	r3, [pc, #84]	; (80096ec <BSP_ACCELERO_Init+0x78>)
 8009696:	4a14      	ldr	r2, [pc, #80]	; (80096e8 <BSP_ACCELERO_Init+0x74>)
 8009698:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800969a:	2330      	movs	r3, #48	; 0x30
 800969c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800969e:	2300      	movs	r3, #0
 80096a0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80096a2:	2300      	movs	r3, #0
 80096a4:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80096a6:	2340      	movs	r3, #64	; 0x40
 80096a8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80096aa:	2300      	movs	r3, #0
 80096ac:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80096ae:	2300      	movs	r3, #0
 80096b0:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80096b2:	797a      	ldrb	r2, [r7, #5]
 80096b4:	7abb      	ldrb	r3, [r7, #10]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80096bc:	7a3b      	ldrb	r3, [r7, #8]
 80096be:	f043 0304 	orr.w	r3, r3, #4
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	021b      	lsls	r3, r3, #8
 80096c6:	b21a      	sxth	r2, r3
 80096c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	b21b      	sxth	r3, r3
 80096d0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80096d2:	4b06      	ldr	r3, [pc, #24]	; (80096ec <BSP_ACCELERO_Init+0x78>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	89ba      	ldrh	r2, [r7, #12]
 80096da:	4610      	mov	r0, r2
 80096dc:	4798      	blx	r3
  }  

  return ret;
 80096de:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	20000140 	.word	0x20000140
 80096ec:	200001f8 	.word	0x200001f8

080096f0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80096f8:	4b08      	ldr	r3, [pc, #32]	; (800971c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d009      	beq.n	8009714 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8009700:	4b06      	ldr	r3, [pc, #24]	; (800971c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009706:	2b00      	cmp	r3, #0
 8009708:	d004      	beq.n	8009714 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800970a:	4b04      	ldr	r3, [pc, #16]	; (800971c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	4798      	blx	r3
    }
  }
}
 8009714:	bf00      	nop
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	200001f8 	.word	0x200001f8

08009720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009726:	4b0f      	ldr	r3, [pc, #60]	; (8009764 <HAL_MspInit+0x44>)
 8009728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800972a:	4a0e      	ldr	r2, [pc, #56]	; (8009764 <HAL_MspInit+0x44>)
 800972c:	f043 0301 	orr.w	r3, r3, #1
 8009730:	6613      	str	r3, [r2, #96]	; 0x60
 8009732:	4b0c      	ldr	r3, [pc, #48]	; (8009764 <HAL_MspInit+0x44>)
 8009734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	607b      	str	r3, [r7, #4]
 800973c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800973e:	4b09      	ldr	r3, [pc, #36]	; (8009764 <HAL_MspInit+0x44>)
 8009740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009742:	4a08      	ldr	r2, [pc, #32]	; (8009764 <HAL_MspInit+0x44>)
 8009744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009748:	6593      	str	r3, [r2, #88]	; 0x58
 800974a:	4b06      	ldr	r3, [pc, #24]	; (8009764 <HAL_MspInit+0x44>)
 800974c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800974e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009752:	603b      	str	r3, [r7, #0]
 8009754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009756:	bf00      	nop
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	40021000 	.word	0x40021000

08009768 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b08a      	sub	sp, #40	; 0x28
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009770:	f107 0314 	add.w	r3, r7, #20
 8009774:	2200      	movs	r2, #0
 8009776:	601a      	str	r2, [r3, #0]
 8009778:	605a      	str	r2, [r3, #4]
 800977a:	609a      	str	r2, [r3, #8]
 800977c:	60da      	str	r2, [r3, #12]
 800977e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a2a      	ldr	r2, [pc, #168]	; (8009830 <HAL_ADC_MspInit+0xc8>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d14e      	bne.n	8009828 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800978a:	4b2a      	ldr	r3, [pc, #168]	; (8009834 <HAL_ADC_MspInit+0xcc>)
 800978c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978e:	4a29      	ldr	r2, [pc, #164]	; (8009834 <HAL_ADC_MspInit+0xcc>)
 8009790:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009796:	4b27      	ldr	r3, [pc, #156]	; (8009834 <HAL_ADC_MspInit+0xcc>)
 8009798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800979a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800979e:	613b      	str	r3, [r7, #16]
 80097a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80097a2:	4b24      	ldr	r3, [pc, #144]	; (8009834 <HAL_ADC_MspInit+0xcc>)
 80097a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097a6:	4a23      	ldr	r2, [pc, #140]	; (8009834 <HAL_ADC_MspInit+0xcc>)
 80097a8:	f043 0304 	orr.w	r3, r3, #4
 80097ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097ae:	4b21      	ldr	r3, [pc, #132]	; (8009834 <HAL_ADC_MspInit+0xcc>)
 80097b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097b2:	f003 0304 	and.w	r3, r3, #4
 80097b6:	60fb      	str	r3, [r7, #12]
 80097b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80097ba:	2303      	movs	r3, #3
 80097bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80097be:	230b      	movs	r3, #11
 80097c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097c2:	2300      	movs	r3, #0
 80097c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097c6:	f107 0314 	add.w	r3, r7, #20
 80097ca:	4619      	mov	r1, r3
 80097cc:	481a      	ldr	r0, [pc, #104]	; (8009838 <HAL_ADC_MspInit+0xd0>)
 80097ce:	f7f8 fbd3 	bl	8001f78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80097d2:	4b1a      	ldr	r3, [pc, #104]	; (800983c <HAL_ADC_MspInit+0xd4>)
 80097d4:	4a1a      	ldr	r2, [pc, #104]	; (8009840 <HAL_ADC_MspInit+0xd8>)
 80097d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80097d8:	4b18      	ldr	r3, [pc, #96]	; (800983c <HAL_ADC_MspInit+0xd4>)
 80097da:	2200      	movs	r2, #0
 80097dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80097de:	4b17      	ldr	r3, [pc, #92]	; (800983c <HAL_ADC_MspInit+0xd4>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80097e4:	4b15      	ldr	r3, [pc, #84]	; (800983c <HAL_ADC_MspInit+0xd4>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80097ea:	4b14      	ldr	r3, [pc, #80]	; (800983c <HAL_ADC_MspInit+0xd4>)
 80097ec:	2280      	movs	r2, #128	; 0x80
 80097ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80097f0:	4b12      	ldr	r3, [pc, #72]	; (800983c <HAL_ADC_MspInit+0xd4>)
 80097f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80097f8:	4b10      	ldr	r3, [pc, #64]	; (800983c <HAL_ADC_MspInit+0xd4>)
 80097fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8009800:	4b0e      	ldr	r3, [pc, #56]	; (800983c <HAL_ADC_MspInit+0xd4>)
 8009802:	2220      	movs	r2, #32
 8009804:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8009806:	4b0d      	ldr	r3, [pc, #52]	; (800983c <HAL_ADC_MspInit+0xd4>)
 8009808:	2200      	movs	r2, #0
 800980a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800980c:	480b      	ldr	r0, [pc, #44]	; (800983c <HAL_ADC_MspInit+0xd4>)
 800980e:	f7f8 f9bb 	bl	8001b88 <HAL_DMA_Init>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8009818:	f7ff fdd6 	bl	80093c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a07      	ldr	r2, [pc, #28]	; (800983c <HAL_ADC_MspInit+0xd4>)
 8009820:	64da      	str	r2, [r3, #76]	; 0x4c
 8009822:	4a06      	ldr	r2, [pc, #24]	; (800983c <HAL_ADC_MspInit+0xd4>)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8009828:	bf00      	nop
 800982a:	3728      	adds	r7, #40	; 0x28
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	50040000 	.word	0x50040000
 8009834:	40021000 	.word	0x40021000
 8009838:	48000800 	.word	0x48000800
 800983c:	200003c8 	.word	0x200003c8
 8009840:	40020008 	.word	0x40020008

08009844 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b0ac      	sub	sp, #176	; 0xb0
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800984c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009850:	2200      	movs	r2, #0
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	605a      	str	r2, [r3, #4]
 8009856:	609a      	str	r2, [r3, #8]
 8009858:	60da      	str	r2, [r3, #12]
 800985a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800985c:	f107 0314 	add.w	r3, r7, #20
 8009860:	2288      	movs	r2, #136	; 0x88
 8009862:	2100      	movs	r1, #0
 8009864:	4618      	mov	r0, r3
 8009866:	f000 fef5 	bl	800a654 <memset>
  if(hi2c->Instance==I2C1)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a21      	ldr	r2, [pc, #132]	; (80098f4 <HAL_I2C_MspInit+0xb0>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d13b      	bne.n	80098ec <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8009874:	2340      	movs	r3, #64	; 0x40
 8009876:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8009878:	2300      	movs	r3, #0
 800987a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800987c:	f107 0314 	add.w	r3, r7, #20
 8009880:	4618      	mov	r0, r3
 8009882:	f7fb fae5 	bl	8004e50 <HAL_RCCEx_PeriphCLKConfig>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d001      	beq.n	8009890 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800988c:	f7ff fd9c 	bl	80093c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009890:	4b19      	ldr	r3, [pc, #100]	; (80098f8 <HAL_I2C_MspInit+0xb4>)
 8009892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009894:	4a18      	ldr	r2, [pc, #96]	; (80098f8 <HAL_I2C_MspInit+0xb4>)
 8009896:	f043 0302 	orr.w	r3, r3, #2
 800989a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800989c:	4b16      	ldr	r3, [pc, #88]	; (80098f8 <HAL_I2C_MspInit+0xb4>)
 800989e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098a0:	f003 0302 	and.w	r3, r3, #2
 80098a4:	613b      	str	r3, [r7, #16]
 80098a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80098a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80098ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80098b0:	2312      	movs	r3, #18
 80098b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098b6:	2300      	movs	r3, #0
 80098b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098bc:	2303      	movs	r3, #3
 80098be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80098c2:	2304      	movs	r3, #4
 80098c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80098c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80098cc:	4619      	mov	r1, r3
 80098ce:	480b      	ldr	r0, [pc, #44]	; (80098fc <HAL_I2C_MspInit+0xb8>)
 80098d0:	f7f8 fb52 	bl	8001f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80098d4:	4b08      	ldr	r3, [pc, #32]	; (80098f8 <HAL_I2C_MspInit+0xb4>)
 80098d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098d8:	4a07      	ldr	r2, [pc, #28]	; (80098f8 <HAL_I2C_MspInit+0xb4>)
 80098da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80098de:	6593      	str	r3, [r2, #88]	; 0x58
 80098e0:	4b05      	ldr	r3, [pc, #20]	; (80098f8 <HAL_I2C_MspInit+0xb4>)
 80098e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098e8:	60fb      	str	r3, [r7, #12]
 80098ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80098ec:	bf00      	nop
 80098ee:	37b0      	adds	r7, #176	; 0xb0
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	40005400 	.word	0x40005400
 80098f8:	40021000 	.word	0x40021000
 80098fc:	48000400 	.word	0x48000400

08009900 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a0b      	ldr	r2, [pc, #44]	; (800993c <HAL_I2C_MspDeInit+0x3c>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d10f      	bne.n	8009932 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8009912:	4b0b      	ldr	r3, [pc, #44]	; (8009940 <HAL_I2C_MspDeInit+0x40>)
 8009914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009916:	4a0a      	ldr	r2, [pc, #40]	; (8009940 <HAL_I2C_MspDeInit+0x40>)
 8009918:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800991c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800991e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009922:	4808      	ldr	r0, [pc, #32]	; (8009944 <HAL_I2C_MspDeInit+0x44>)
 8009924:	f7f8 fcd2 	bl	80022cc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8009928:	f44f 7100 	mov.w	r1, #512	; 0x200
 800992c:	4805      	ldr	r0, [pc, #20]	; (8009944 <HAL_I2C_MspDeInit+0x44>)
 800992e:	f7f8 fccd 	bl	80022cc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8009932:	bf00      	nop
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	40005400 	.word	0x40005400
 8009940:	40021000 	.word	0x40021000
 8009944:	48000400 	.word	0x48000400

08009948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b0ac      	sub	sp, #176	; 0xb0
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009950:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009954:	2200      	movs	r2, #0
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	605a      	str	r2, [r3, #4]
 800995a:	609a      	str	r2, [r3, #8]
 800995c:	60da      	str	r2, [r3, #12]
 800995e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009960:	f107 0314 	add.w	r3, r7, #20
 8009964:	2288      	movs	r2, #136	; 0x88
 8009966:	2100      	movs	r1, #0
 8009968:	4618      	mov	r0, r3
 800996a:	f000 fe73 	bl	800a654 <memset>
  if(huart->Instance==USART1)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a21      	ldr	r2, [pc, #132]	; (80099f8 <HAL_UART_MspInit+0xb0>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d13a      	bne.n	80099ee <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8009978:	2301      	movs	r3, #1
 800997a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800997c:	2300      	movs	r3, #0
 800997e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009980:	f107 0314 	add.w	r3, r7, #20
 8009984:	4618      	mov	r0, r3
 8009986:	f7fb fa63 	bl	8004e50 <HAL_RCCEx_PeriphCLKConfig>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8009990:	f7ff fd1a 	bl	80093c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009994:	4b19      	ldr	r3, [pc, #100]	; (80099fc <HAL_UART_MspInit+0xb4>)
 8009996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009998:	4a18      	ldr	r2, [pc, #96]	; (80099fc <HAL_UART_MspInit+0xb4>)
 800999a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800999e:	6613      	str	r3, [r2, #96]	; 0x60
 80099a0:	4b16      	ldr	r3, [pc, #88]	; (80099fc <HAL_UART_MspInit+0xb4>)
 80099a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099a8:	613b      	str	r3, [r7, #16]
 80099aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80099ac:	4b13      	ldr	r3, [pc, #76]	; (80099fc <HAL_UART_MspInit+0xb4>)
 80099ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099b0:	4a12      	ldr	r2, [pc, #72]	; (80099fc <HAL_UART_MspInit+0xb4>)
 80099b2:	f043 0302 	orr.w	r3, r3, #2
 80099b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099b8:	4b10      	ldr	r3, [pc, #64]	; (80099fc <HAL_UART_MspInit+0xb4>)
 80099ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099bc:	f003 0302 	and.w	r3, r3, #2
 80099c0:	60fb      	str	r3, [r7, #12]
 80099c2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80099c4:	23c0      	movs	r3, #192	; 0xc0
 80099c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099ca:	2302      	movs	r3, #2
 80099cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099d0:	2300      	movs	r3, #0
 80099d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099d6:	2303      	movs	r3, #3
 80099d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80099dc:	2307      	movs	r3, #7
 80099de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80099e6:	4619      	mov	r1, r3
 80099e8:	4805      	ldr	r0, [pc, #20]	; (8009a00 <HAL_UART_MspInit+0xb8>)
 80099ea:	f7f8 fac5 	bl	8001f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80099ee:	bf00      	nop
 80099f0:	37b0      	adds	r7, #176	; 0xb0
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	40013800 	.word	0x40013800
 80099fc:	40021000 	.word	0x40021000
 8009a00:	48000400 	.word	0x48000400

08009a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009a04:	b480      	push	{r7}
 8009a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009a08:	e7fe      	b.n	8009a08 <NMI_Handler+0x4>

08009a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009a0e:	e7fe      	b.n	8009a0e <HardFault_Handler+0x4>

08009a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009a10:	b480      	push	{r7}
 8009a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009a14:	e7fe      	b.n	8009a14 <MemManage_Handler+0x4>

08009a16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009a16:	b480      	push	{r7}
 8009a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009a1a:	e7fe      	b.n	8009a1a <BusFault_Handler+0x4>

08009a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009a20:	e7fe      	b.n	8009a20 <UsageFault_Handler+0x4>

08009a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009a22:	b480      	push	{r7}
 8009a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009a26:	bf00      	nop
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009a30:	b480      	push	{r7}
 8009a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009a34:	bf00      	nop
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009a42:	bf00      	nop
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009a50:	f7f6 fd8a 	bl	8000568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009a54:	bf00      	nop
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8009a5c:	2004      	movs	r0, #4
 8009a5e:	f7f8 fd59 	bl	8002514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8009a62:	bf00      	nop
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8009a6a:	2008      	movs	r0, #8
 8009a6c:	f7f8 fd52 	bl	8002514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8009a70:	bf00      	nop
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8009a78:	2010      	movs	r0, #16
 8009a7a:	f7f8 fd4b 	bl	8002514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009a7e:	bf00      	nop
 8009a80:	bd80      	pop	{r7, pc}
	...

08009a84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009a88:	4802      	ldr	r0, [pc, #8]	; (8009a94 <DMA1_Channel1_IRQHandler+0x10>)
 8009a8a:	f7f8 f995 	bl	8001db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009a8e:	bf00      	nop
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	200003c8 	.word	0x200003c8

08009a98 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8009a9c:	2020      	movs	r0, #32
 8009a9e:	f7f8 fd39 	bl	8002514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009aa2:	bf00      	nop
 8009aa4:	bd80      	pop	{r7, pc}
	...

08009aa8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8009aac:	4802      	ldr	r0, [pc, #8]	; (8009ab8 <OTG_FS_IRQHandler+0x10>)
 8009aae:	f7f9 fc3b 	bl	8003328 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8009ab2:	bf00      	nop
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	200007bc 	.word	0x200007bc

08009abc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8009abc:	b480      	push	{r7}
 8009abe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009ac0:	4b15      	ldr	r3, [pc, #84]	; (8009b18 <SystemInit+0x5c>)
 8009ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ac6:	4a14      	ldr	r2, [pc, #80]	; (8009b18 <SystemInit+0x5c>)
 8009ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8009ad0:	4b12      	ldr	r3, [pc, #72]	; (8009b1c <SystemInit+0x60>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a11      	ldr	r2, [pc, #68]	; (8009b1c <SystemInit+0x60>)
 8009ad6:	f043 0301 	orr.w	r3, r3, #1
 8009ada:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8009adc:	4b0f      	ldr	r3, [pc, #60]	; (8009b1c <SystemInit+0x60>)
 8009ade:	2200      	movs	r2, #0
 8009ae0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8009ae2:	4b0e      	ldr	r3, [pc, #56]	; (8009b1c <SystemInit+0x60>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a0d      	ldr	r2, [pc, #52]	; (8009b1c <SystemInit+0x60>)
 8009ae8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8009aec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8009af0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8009af2:	4b0a      	ldr	r3, [pc, #40]	; (8009b1c <SystemInit+0x60>)
 8009af4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009af8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009afa:	4b08      	ldr	r3, [pc, #32]	; (8009b1c <SystemInit+0x60>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a07      	ldr	r2, [pc, #28]	; (8009b1c <SystemInit+0x60>)
 8009b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8009b06:	4b05      	ldr	r3, [pc, #20]	; (8009b1c <SystemInit+0x60>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	619a      	str	r2, [r3, #24]
}
 8009b0c:	bf00      	nop
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	e000ed00 	.word	0xe000ed00
 8009b1c:	40021000 	.word	0x40021000

08009b20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b24:	2200      	movs	r2, #0
 8009b26:	490e      	ldr	r1, [pc, #56]	; (8009b60 <MX_USB_DEVICE_Init+0x40>)
 8009b28:	480e      	ldr	r0, [pc, #56]	; (8009b64 <MX_USB_DEVICE_Init+0x44>)
 8009b2a:	f7fd fe77 	bl	800781c <USBD_Init>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b34:	f7ff fc48 	bl	80093c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009b38:	490b      	ldr	r1, [pc, #44]	; (8009b68 <MX_USB_DEVICE_Init+0x48>)
 8009b3a:	480a      	ldr	r0, [pc, #40]	; (8009b64 <MX_USB_DEVICE_Init+0x44>)
 8009b3c:	f7fd fe9e 	bl	800787c <USBD_RegisterClass>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b46:	f7ff fc3f 	bl	80093c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b4a:	4806      	ldr	r0, [pc, #24]	; (8009b64 <MX_USB_DEVICE_Init+0x44>)
 8009b4c:	f7fd febd 	bl	80078ca <USBD_Start>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d001      	beq.n	8009b5a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009b56:	f7ff fc37 	bl	80093c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b5a:	bf00      	nop
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	20000178 	.word	0x20000178
 8009b64:	200004ec 	.word	0x200004ec
 8009b68:	20000008 	.word	0x20000008

08009b6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b08a      	sub	sp, #40	; 0x28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b74:	f107 0314 	add.w	r3, r7, #20
 8009b78:	2200      	movs	r2, #0
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	605a      	str	r2, [r3, #4]
 8009b7e:	609a      	str	r2, [r3, #8]
 8009b80:	60da      	str	r2, [r3, #12]
 8009b82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b8c:	d14e      	bne.n	8009c2c <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b8e:	4b29      	ldr	r3, [pc, #164]	; (8009c34 <HAL_PCD_MspInit+0xc8>)
 8009b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b92:	4a28      	ldr	r2, [pc, #160]	; (8009c34 <HAL_PCD_MspInit+0xc8>)
 8009b94:	f043 0301 	orr.w	r3, r3, #1
 8009b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b9a:	4b26      	ldr	r3, [pc, #152]	; (8009c34 <HAL_PCD_MspInit+0xc8>)
 8009b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	613b      	str	r3, [r7, #16]
 8009ba4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009ba6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bac:	2302      	movs	r3, #2
 8009bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009bb8:	230a      	movs	r3, #10
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bbc:	f107 0314 	add.w	r3, r7, #20
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009bc6:	f7f8 f9d7 	bl	8001f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009bca:	4b1a      	ldr	r3, [pc, #104]	; (8009c34 <HAL_PCD_MspInit+0xc8>)
 8009bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bce:	4a19      	ldr	r2, [pc, #100]	; (8009c34 <HAL_PCD_MspInit+0xc8>)
 8009bd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009bd6:	4b17      	ldr	r3, [pc, #92]	; (8009c34 <HAL_PCD_MspInit+0xc8>)
 8009bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009bde:	60fb      	str	r3, [r7, #12]
 8009be0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009be2:	4b14      	ldr	r3, [pc, #80]	; (8009c34 <HAL_PCD_MspInit+0xc8>)
 8009be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d114      	bne.n	8009c18 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009bee:	4b11      	ldr	r3, [pc, #68]	; (8009c34 <HAL_PCD_MspInit+0xc8>)
 8009bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bf2:	4a10      	ldr	r2, [pc, #64]	; (8009c34 <HAL_PCD_MspInit+0xc8>)
 8009bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8009bfa:	4b0e      	ldr	r3, [pc, #56]	; (8009c34 <HAL_PCD_MspInit+0xc8>)
 8009bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c02:	60bb      	str	r3, [r7, #8]
 8009c04:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009c06:	f7fa fb27 	bl	8004258 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c0a:	4b0a      	ldr	r3, [pc, #40]	; (8009c34 <HAL_PCD_MspInit+0xc8>)
 8009c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c0e:	4a09      	ldr	r2, [pc, #36]	; (8009c34 <HAL_PCD_MspInit+0xc8>)
 8009c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c14:	6593      	str	r3, [r2, #88]	; 0x58
 8009c16:	e001      	b.n	8009c1c <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009c18:	f7fa fb1e 	bl	8004258 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2100      	movs	r1, #0
 8009c20:	2043      	movs	r0, #67	; 0x43
 8009c22:	f7f7 ff7a 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c26:	2043      	movs	r0, #67	; 0x43
 8009c28:	f7f7 ff93 	bl	8001b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c2c:	bf00      	nop
 8009c2e:	3728      	adds	r7, #40	; 0x28
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	40021000 	.word	0x40021000

08009c38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4610      	mov	r0, r2
 8009c50:	f7fd fe86 	bl	8007960 <USBD_LL_SetupStage>
}
 8009c54:	bf00      	nop
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	460b      	mov	r3, r1
 8009c66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009c6e:	78fa      	ldrb	r2, [r7, #3]
 8009c70:	6879      	ldr	r1, [r7, #4]
 8009c72:	4613      	mov	r3, r2
 8009c74:	00db      	lsls	r3, r3, #3
 8009c76:	1a9b      	subs	r3, r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	440b      	add	r3, r1
 8009c7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	78fb      	ldrb	r3, [r7, #3]
 8009c84:	4619      	mov	r1, r3
 8009c86:	f7fd fec0 	bl	8007a0a <USBD_LL_DataOutStage>
}
 8009c8a:	bf00      	nop
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b082      	sub	sp, #8
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009ca4:	78fa      	ldrb	r2, [r7, #3]
 8009ca6:	6879      	ldr	r1, [r7, #4]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	00db      	lsls	r3, r3, #3
 8009cac:	1a9b      	subs	r3, r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	440b      	add	r3, r1
 8009cb2:	3348      	adds	r3, #72	; 0x48
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	78fb      	ldrb	r3, [r7, #3]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	f7fd ff09 	bl	8007ad0 <USBD_LL_DataInStage>
}
 8009cbe:	bf00      	nop
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b082      	sub	sp, #8
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fe f81d 	bl	8007d14 <USBD_LL_SOF>
}
 8009cda:	bf00      	nop
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b084      	sub	sp, #16
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009cea:	2301      	movs	r3, #1
 8009cec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d001      	beq.n	8009cfa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009cf6:	f7ff fb67 	bl	80093c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d00:	7bfa      	ldrb	r2, [r7, #15]
 8009d02:	4611      	mov	r1, r2
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7fd ffc7 	bl	8007c98 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fd ff73 	bl	8007bfc <USBD_LL_Reset>
}
 8009d16:	bf00      	nop
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
	...

08009d20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	6812      	ldr	r2, [r2, #0]
 8009d36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d3a:	f043 0301 	orr.w	r3, r3, #1
 8009d3e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fd ffb6 	bl	8007cb8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a1b      	ldr	r3, [r3, #32]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d005      	beq.n	8009d60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d54:	4b04      	ldr	r3, [pc, #16]	; (8009d68 <HAL_PCD_SuspendCallback+0x48>)
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	4a03      	ldr	r2, [pc, #12]	; (8009d68 <HAL_PCD_SuspendCallback+0x48>)
 8009d5a:	f043 0306 	orr.w	r3, r3, #6
 8009d5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d60:	bf00      	nop
 8009d62:	3708      	adds	r7, #8
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	e000ed00 	.word	0xe000ed00

08009d6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	6812      	ldr	r2, [r2, #0]
 8009d82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d86:	f023 0301 	bic.w	r3, r3, #1
 8009d8a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a1b      	ldr	r3, [r3, #32]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d007      	beq.n	8009da4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d94:	4b08      	ldr	r3, [pc, #32]	; (8009db8 <HAL_PCD_ResumeCallback+0x4c>)
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	4a07      	ldr	r2, [pc, #28]	; (8009db8 <HAL_PCD_ResumeCallback+0x4c>)
 8009d9a:	f023 0306 	bic.w	r3, r3, #6
 8009d9e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009da0:	f000 fae2 	bl	800a368 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fd ff9a 	bl	8007ce4 <USBD_LL_Resume>
}
 8009db0:	bf00      	nop
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	e000ed00 	.word	0xe000ed00

08009dbc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009dce:	78fa      	ldrb	r2, [r7, #3]
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7fd ffe6 	bl	8007da4 <USBD_LL_IsoOUTIncomplete>
}
 8009dd8:	bf00      	nop
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009df2:	78fa      	ldrb	r2, [r7, #3]
 8009df4:	4611      	mov	r1, r2
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fd ffae 	bl	8007d58 <USBD_LL_IsoINIncomplete>
}
 8009dfc:	bf00      	nop
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fd ffec 	bl	8007df0 <USBD_LL_DevConnected>
}
 8009e18:	bf00      	nop
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fd ffe9 	bl	8007e06 <USBD_LL_DevDisconnected>
}
 8009e34:	bf00      	nop
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d13c      	bne.n	8009ec6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009e4c:	4a20      	ldr	r2, [pc, #128]	; (8009ed0 <USBD_LL_Init+0x94>)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a1e      	ldr	r2, [pc, #120]	; (8009ed0 <USBD_LL_Init+0x94>)
 8009e58:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009e5c:	4b1c      	ldr	r3, [pc, #112]	; (8009ed0 <USBD_LL_Init+0x94>)
 8009e5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009e62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009e64:	4b1a      	ldr	r3, [pc, #104]	; (8009ed0 <USBD_LL_Init+0x94>)
 8009e66:	2206      	movs	r2, #6
 8009e68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009e6a:	4b19      	ldr	r3, [pc, #100]	; (8009ed0 <USBD_LL_Init+0x94>)
 8009e6c:	2202      	movs	r2, #2
 8009e6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009e70:	4b17      	ldr	r3, [pc, #92]	; (8009ed0 <USBD_LL_Init+0x94>)
 8009e72:	2202      	movs	r2, #2
 8009e74:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009e76:	4b16      	ldr	r3, [pc, #88]	; (8009ed0 <USBD_LL_Init+0x94>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009e7c:	4b14      	ldr	r3, [pc, #80]	; (8009ed0 <USBD_LL_Init+0x94>)
 8009e7e:	2200      	movs	r2, #0
 8009e80:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009e82:	4b13      	ldr	r3, [pc, #76]	; (8009ed0 <USBD_LL_Init+0x94>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009e88:	4b11      	ldr	r3, [pc, #68]	; (8009ed0 <USBD_LL_Init+0x94>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009e8e:	4b10      	ldr	r3, [pc, #64]	; (8009ed0 <USBD_LL_Init+0x94>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009e94:	4b0e      	ldr	r3, [pc, #56]	; (8009ed0 <USBD_LL_Init+0x94>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009e9a:	480d      	ldr	r0, [pc, #52]	; (8009ed0 <USBD_LL_Init+0x94>)
 8009e9c:	f7f9 f8f1 	bl	8003082 <HAL_PCD_Init>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d001      	beq.n	8009eaa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009ea6:	f7ff fa8f 	bl	80093c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009eaa:	2180      	movs	r1, #128	; 0x80
 8009eac:	4808      	ldr	r0, [pc, #32]	; (8009ed0 <USBD_LL_Init+0x94>)
 8009eae:	f7fa f93a 	bl	8004126 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009eb2:	2240      	movs	r2, #64	; 0x40
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	4806      	ldr	r0, [pc, #24]	; (8009ed0 <USBD_LL_Init+0x94>)
 8009eb8:	f7fa f8ee 	bl	8004098 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009ebc:	2280      	movs	r2, #128	; 0x80
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	4803      	ldr	r0, [pc, #12]	; (8009ed0 <USBD_LL_Init+0x94>)
 8009ec2:	f7fa f8e9 	bl	8004098 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3708      	adds	r7, #8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	200007bc 	.word	0x200007bc

08009ed4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7f9 f9ed 	bl	80032ca <HAL_PCD_Start>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
 8009ef6:	2b03      	cmp	r3, #3
 8009ef8:	d816      	bhi.n	8009f28 <USBD_LL_Start+0x54>
 8009efa:	a201      	add	r2, pc, #4	; (adr r2, 8009f00 <USBD_LL_Start+0x2c>)
 8009efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f00:	08009f11 	.word	0x08009f11
 8009f04:	08009f17 	.word	0x08009f17
 8009f08:	08009f1d 	.word	0x08009f1d
 8009f0c:	08009f23 	.word	0x08009f23
    case HAL_OK :
      usb_status = USBD_OK;
 8009f10:	2300      	movs	r3, #0
 8009f12:	73fb      	strb	r3, [r7, #15]
    break;
 8009f14:	e00b      	b.n	8009f2e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f16:	2303      	movs	r3, #3
 8009f18:	73fb      	strb	r3, [r7, #15]
    break;
 8009f1a:	e008      	b.n	8009f2e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f20:	e005      	b.n	8009f2e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f22:	2303      	movs	r3, #3
 8009f24:	73fb      	strb	r3, [r7, #15]
    break;
 8009f26:	e002      	b.n	8009f2e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009f28:	2303      	movs	r3, #3
 8009f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f2c:	bf00      	nop
  }
  return usb_status;
 8009f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	4608      	mov	r0, r1
 8009f42:	4611      	mov	r1, r2
 8009f44:	461a      	mov	r2, r3
 8009f46:	4603      	mov	r3, r0
 8009f48:	70fb      	strb	r3, [r7, #3]
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	70bb      	strb	r3, [r7, #2]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f52:	2300      	movs	r3, #0
 8009f54:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f56:	2300      	movs	r3, #0
 8009f58:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f60:	78bb      	ldrb	r3, [r7, #2]
 8009f62:	883a      	ldrh	r2, [r7, #0]
 8009f64:	78f9      	ldrb	r1, [r7, #3]
 8009f66:	f7f9 fda8 	bl	8003aba <HAL_PCD_EP_Open>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009f6e:	7bbb      	ldrb	r3, [r7, #14]
 8009f70:	2b03      	cmp	r3, #3
 8009f72:	d817      	bhi.n	8009fa4 <USBD_LL_OpenEP+0x6c>
 8009f74:	a201      	add	r2, pc, #4	; (adr r2, 8009f7c <USBD_LL_OpenEP+0x44>)
 8009f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7a:	bf00      	nop
 8009f7c:	08009f8d 	.word	0x08009f8d
 8009f80:	08009f93 	.word	0x08009f93
 8009f84:	08009f99 	.word	0x08009f99
 8009f88:	08009f9f 	.word	0x08009f9f
    case HAL_OK :
      usb_status = USBD_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f90:	e00b      	b.n	8009faa <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f92:	2303      	movs	r3, #3
 8009f94:	73fb      	strb	r3, [r7, #15]
    break;
 8009f96:	e008      	b.n	8009faa <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f9c:	e005      	b.n	8009faa <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	73fb      	strb	r3, [r7, #15]
    break;
 8009fa2:	e002      	b.n	8009faa <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8009fa8:	bf00      	nop
  }
  return usb_status;
 8009faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009fce:	78fa      	ldrb	r2, [r7, #3]
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7f9 fdd9 	bl	8003b8a <HAL_PCD_EP_Close>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009fdc:	7bbb      	ldrb	r3, [r7, #14]
 8009fde:	2b03      	cmp	r3, #3
 8009fe0:	d816      	bhi.n	800a010 <USBD_LL_CloseEP+0x5c>
 8009fe2:	a201      	add	r2, pc, #4	; (adr r2, 8009fe8 <USBD_LL_CloseEP+0x34>)
 8009fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe8:	08009ff9 	.word	0x08009ff9
 8009fec:	08009fff 	.word	0x08009fff
 8009ff0:	0800a005 	.word	0x0800a005
 8009ff4:	0800a00b 	.word	0x0800a00b
    case HAL_OK :
      usb_status = USBD_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8009ffc:	e00b      	b.n	800a016 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ffe:	2303      	movs	r3, #3
 800a000:	73fb      	strb	r3, [r7, #15]
    break;
 800a002:	e008      	b.n	800a016 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a004:	2301      	movs	r3, #1
 800a006:	73fb      	strb	r3, [r7, #15]
    break;
 800a008:	e005      	b.n	800a016 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a00a:	2303      	movs	r3, #3
 800a00c:	73fb      	strb	r3, [r7, #15]
    break;
 800a00e:	e002      	b.n	800a016 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a010:	2303      	movs	r3, #3
 800a012:	73fb      	strb	r3, [r7, #15]
    break;
 800a014:	bf00      	nop
  }
  return usb_status;
 800a016:	7bfb      	ldrb	r3, [r7, #15]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	460b      	mov	r3, r1
 800a02a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a02c:	2300      	movs	r3, #0
 800a02e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a030:	2300      	movs	r3, #0
 800a032:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a03a:	78fa      	ldrb	r2, [r7, #3]
 800a03c:	4611      	mov	r1, r2
 800a03e:	4618      	mov	r0, r3
 800a040:	f7f9 fe68 	bl	8003d14 <HAL_PCD_EP_SetStall>
 800a044:	4603      	mov	r3, r0
 800a046:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a048:	7bbb      	ldrb	r3, [r7, #14]
 800a04a:	2b03      	cmp	r3, #3
 800a04c:	d816      	bhi.n	800a07c <USBD_LL_StallEP+0x5c>
 800a04e:	a201      	add	r2, pc, #4	; (adr r2, 800a054 <USBD_LL_StallEP+0x34>)
 800a050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a054:	0800a065 	.word	0x0800a065
 800a058:	0800a06b 	.word	0x0800a06b
 800a05c:	0800a071 	.word	0x0800a071
 800a060:	0800a077 	.word	0x0800a077
    case HAL_OK :
      usb_status = USBD_OK;
 800a064:	2300      	movs	r3, #0
 800a066:	73fb      	strb	r3, [r7, #15]
    break;
 800a068:	e00b      	b.n	800a082 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a06a:	2303      	movs	r3, #3
 800a06c:	73fb      	strb	r3, [r7, #15]
    break;
 800a06e:	e008      	b.n	800a082 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a070:	2301      	movs	r3, #1
 800a072:	73fb      	strb	r3, [r7, #15]
    break;
 800a074:	e005      	b.n	800a082 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a076:	2303      	movs	r3, #3
 800a078:	73fb      	strb	r3, [r7, #15]
    break;
 800a07a:	e002      	b.n	800a082 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a07c:	2303      	movs	r3, #3
 800a07e:	73fb      	strb	r3, [r7, #15]
    break;
 800a080:	bf00      	nop
  }
  return usb_status;
 800a082:	7bfb      	ldrb	r3, [r7, #15]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	460b      	mov	r3, r1
 800a096:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a098:	2300      	movs	r3, #0
 800a09a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a0a6:	78fa      	ldrb	r2, [r7, #3]
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7f9 fe94 	bl	8003dd8 <HAL_PCD_EP_ClrStall>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a0b4:	7bbb      	ldrb	r3, [r7, #14]
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	d816      	bhi.n	800a0e8 <USBD_LL_ClearStallEP+0x5c>
 800a0ba:	a201      	add	r2, pc, #4	; (adr r2, 800a0c0 <USBD_LL_ClearStallEP+0x34>)
 800a0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c0:	0800a0d1 	.word	0x0800a0d1
 800a0c4:	0800a0d7 	.word	0x0800a0d7
 800a0c8:	0800a0dd 	.word	0x0800a0dd
 800a0cc:	0800a0e3 	.word	0x0800a0e3
    case HAL_OK :
      usb_status = USBD_OK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d4:	e00b      	b.n	800a0ee <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a0da:	e008      	b.n	800a0ee <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	73fb      	strb	r3, [r7, #15]
    break;
 800a0e0:	e005      	b.n	800a0ee <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a0e6:	e002      	b.n	800a0ee <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ec:	bf00      	nop
  }
  return usb_status;
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	460b      	mov	r3, r1
 800a102:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a10a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a10c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a110:	2b00      	cmp	r3, #0
 800a112:	da0b      	bge.n	800a12c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a114:	78fb      	ldrb	r3, [r7, #3]
 800a116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a11a:	68f9      	ldr	r1, [r7, #12]
 800a11c:	4613      	mov	r3, r2
 800a11e:	00db      	lsls	r3, r3, #3
 800a120:	1a9b      	subs	r3, r3, r2
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	440b      	add	r3, r1
 800a126:	333e      	adds	r3, #62	; 0x3e
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	e00b      	b.n	800a144 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a12c:	78fb      	ldrb	r3, [r7, #3]
 800a12e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a132:	68f9      	ldr	r1, [r7, #12]
 800a134:	4613      	mov	r3, r2
 800a136:	00db      	lsls	r3, r3, #3
 800a138:	1a9b      	subs	r3, r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	440b      	add	r3, r1
 800a13e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a142:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a144:	4618      	mov	r0, r3
 800a146:	3714      	adds	r7, #20
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	460b      	mov	r3, r1
 800a15a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a16a:	78fa      	ldrb	r2, [r7, #3]
 800a16c:	4611      	mov	r1, r2
 800a16e:	4618      	mov	r0, r3
 800a170:	f7f9 fc7e 	bl	8003a70 <HAL_PCD_SetAddress>
 800a174:	4603      	mov	r3, r0
 800a176:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a178:	7bbb      	ldrb	r3, [r7, #14]
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d816      	bhi.n	800a1ac <USBD_LL_SetUSBAddress+0x5c>
 800a17e:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <USBD_LL_SetUSBAddress+0x34>)
 800a180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a184:	0800a195 	.word	0x0800a195
 800a188:	0800a19b 	.word	0x0800a19b
 800a18c:	0800a1a1 	.word	0x0800a1a1
 800a190:	0800a1a7 	.word	0x0800a1a7
    case HAL_OK :
      usb_status = USBD_OK;
 800a194:	2300      	movs	r3, #0
 800a196:	73fb      	strb	r3, [r7, #15]
    break;
 800a198:	e00b      	b.n	800a1b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a19a:	2303      	movs	r3, #3
 800a19c:	73fb      	strb	r3, [r7, #15]
    break;
 800a19e:	e008      	b.n	800a1b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a4:	e005      	b.n	800a1b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a1aa:	e002      	b.n	800a1b2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a1b0:	bf00      	nop
  }
  return usb_status;
 800a1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	607a      	str	r2, [r7, #4]
 800a1c6:	603b      	str	r3, [r7, #0]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1da:	7af9      	ldrb	r1, [r7, #11]
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	f7f9 fd5b 	bl	8003c9a <HAL_PCD_EP_Transmit>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a1e8:	7dbb      	ldrb	r3, [r7, #22]
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	d816      	bhi.n	800a21c <USBD_LL_Transmit+0x60>
 800a1ee:	a201      	add	r2, pc, #4	; (adr r2, 800a1f4 <USBD_LL_Transmit+0x38>)
 800a1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f4:	0800a205 	.word	0x0800a205
 800a1f8:	0800a20b 	.word	0x0800a20b
 800a1fc:	0800a211 	.word	0x0800a211
 800a200:	0800a217 	.word	0x0800a217
    case HAL_OK :
      usb_status = USBD_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	75fb      	strb	r3, [r7, #23]
    break;
 800a208:	e00b      	b.n	800a222 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a20a:	2303      	movs	r3, #3
 800a20c:	75fb      	strb	r3, [r7, #23]
    break;
 800a20e:	e008      	b.n	800a222 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a210:	2301      	movs	r3, #1
 800a212:	75fb      	strb	r3, [r7, #23]
    break;
 800a214:	e005      	b.n	800a222 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a216:	2303      	movs	r3, #3
 800a218:	75fb      	strb	r3, [r7, #23]
    break;
 800a21a:	e002      	b.n	800a222 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800a21c:	2303      	movs	r3, #3
 800a21e:	75fb      	strb	r3, [r7, #23]
    break;
 800a220:	bf00      	nop
  }
  return usb_status;
 800a222:	7dfb      	ldrb	r3, [r7, #23]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3718      	adds	r7, #24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	607a      	str	r2, [r7, #4]
 800a236:	603b      	str	r3, [r7, #0]
 800a238:	460b      	mov	r3, r1
 800a23a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a24a:	7af9      	ldrb	r1, [r7, #11]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	f7f9 fce5 	bl	8003c1e <HAL_PCD_EP_Receive>
 800a254:	4603      	mov	r3, r0
 800a256:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a258:	7dbb      	ldrb	r3, [r7, #22]
 800a25a:	2b03      	cmp	r3, #3
 800a25c:	d816      	bhi.n	800a28c <USBD_LL_PrepareReceive+0x60>
 800a25e:	a201      	add	r2, pc, #4	; (adr r2, 800a264 <USBD_LL_PrepareReceive+0x38>)
 800a260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a264:	0800a275 	.word	0x0800a275
 800a268:	0800a27b 	.word	0x0800a27b
 800a26c:	0800a281 	.word	0x0800a281
 800a270:	0800a287 	.word	0x0800a287
    case HAL_OK :
      usb_status = USBD_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	75fb      	strb	r3, [r7, #23]
    break;
 800a278:	e00b      	b.n	800a292 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a27a:	2303      	movs	r3, #3
 800a27c:	75fb      	strb	r3, [r7, #23]
    break;
 800a27e:	e008      	b.n	800a292 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a280:	2301      	movs	r3, #1
 800a282:	75fb      	strb	r3, [r7, #23]
    break;
 800a284:	e005      	b.n	800a292 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a286:	2303      	movs	r3, #3
 800a288:	75fb      	strb	r3, [r7, #23]
    break;
 800a28a:	e002      	b.n	800a292 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800a28c:	2303      	movs	r3, #3
 800a28e:	75fb      	strb	r3, [r7, #23]
    break;
 800a290:	bf00      	nop
  }
  return usb_status;
 800a292:	7dfb      	ldrb	r3, [r7, #23]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a2a8:	78fb      	ldrb	r3, [r7, #3]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d002      	beq.n	800a2b4 <HAL_PCDEx_LPM_Callback+0x18>
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d01f      	beq.n	800a2f2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a2b2:	e03b      	b.n	800a32c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d007      	beq.n	800a2cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a2bc:	f000 f854 	bl	800a368 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2c0:	4b1c      	ldr	r3, [pc, #112]	; (800a334 <HAL_PCDEx_LPM_Callback+0x98>)
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	4a1b      	ldr	r2, [pc, #108]	; (800a334 <HAL_PCDEx_LPM_Callback+0x98>)
 800a2c6:	f023 0306 	bic.w	r3, r3, #6
 800a2ca:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	6812      	ldr	r2, [r2, #0]
 800a2da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a2de:	f023 0301 	bic.w	r3, r3, #1
 800a2e2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fd fcfa 	bl	8007ce4 <USBD_LL_Resume>
    break;
 800a2f0:	e01c      	b.n	800a32c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	6812      	ldr	r2, [r2, #0]
 800a300:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a304:	f043 0301 	orr.w	r3, r3, #1
 800a308:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a310:	4618      	mov	r0, r3
 800a312:	f7fd fcd1 	bl	8007cb8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a1b      	ldr	r3, [r3, #32]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d005      	beq.n	800a32a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a31e:	4b05      	ldr	r3, [pc, #20]	; (800a334 <HAL_PCDEx_LPM_Callback+0x98>)
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	4a04      	ldr	r2, [pc, #16]	; (800a334 <HAL_PCDEx_LPM_Callback+0x98>)
 800a324:	f043 0306 	orr.w	r3, r3, #6
 800a328:	6113      	str	r3, [r2, #16]
    break;
 800a32a:	bf00      	nop
}
 800a32c:	bf00      	nop
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	e000ed00 	.word	0xe000ed00

0800a338 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a340:	4b03      	ldr	r3, [pc, #12]	; (800a350 <USBD_static_malloc+0x18>)
}
 800a342:	4618      	mov	r0, r3
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	200001fc 	.word	0x200001fc

0800a354 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]

}
 800a35c:	bf00      	nop
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a36c:	f7fe fdb8 	bl	8008ee0 <SystemClock_Config>
}
 800a370:	bf00      	nop
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	4603      	mov	r3, r0
 800a37c:	6039      	str	r1, [r7, #0]
 800a37e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	2212      	movs	r2, #18
 800a384:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a386:	4b03      	ldr	r3, [pc, #12]	; (800a394 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	20000198 	.word	0x20000198

0800a398 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	6039      	str	r1, [r7, #0]
 800a3a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	2204      	movs	r2, #4
 800a3a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a3aa:	4b03      	ldr	r3, [pc, #12]	; (800a3b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr
 800a3b8:	200001b8 	.word	0x200001b8

0800a3bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	6039      	str	r1, [r7, #0]
 800a3c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3c8:	79fb      	ldrb	r3, [r7, #7]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d105      	bne.n	800a3da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	4907      	ldr	r1, [pc, #28]	; (800a3f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a3d2:	4808      	ldr	r0, [pc, #32]	; (800a3f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3d4:	f7fe fad5 	bl	8008982 <USBD_GetString>
 800a3d8:	e004      	b.n	800a3e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	4904      	ldr	r1, [pc, #16]	; (800a3f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a3de:	4805      	ldr	r0, [pc, #20]	; (800a3f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3e0:	f7fe facf 	bl	8008982 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3e4:	4b02      	ldr	r3, [pc, #8]	; (800a3f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20000bc4 	.word	0x20000bc4
 800a3f4:	0800a67c 	.word	0x0800a67c

0800a3f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	4603      	mov	r3, r0
 800a400:	6039      	str	r1, [r7, #0]
 800a402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a404:	683a      	ldr	r2, [r7, #0]
 800a406:	4904      	ldr	r1, [pc, #16]	; (800a418 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a408:	4804      	ldr	r0, [pc, #16]	; (800a41c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a40a:	f7fe faba 	bl	8008982 <USBD_GetString>
  return USBD_StrDesc;
 800a40e:	4b02      	ldr	r3, [pc, #8]	; (800a418 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a410:	4618      	mov	r0, r3
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	20000bc4 	.word	0x20000bc4
 800a41c:	0800a694 	.word	0x0800a694

0800a420 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	4603      	mov	r3, r0
 800a428:	6039      	str	r1, [r7, #0]
 800a42a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	221a      	movs	r2, #26
 800a430:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a432:	f000 f855 	bl	800a4e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a436:	4b02      	ldr	r3, [pc, #8]	; (800a440 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	200001bc 	.word	0x200001bc

0800a444 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	6039      	str	r1, [r7, #0]
 800a44e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a450:	79fb      	ldrb	r3, [r7, #7]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d105      	bne.n	800a462 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	4907      	ldr	r1, [pc, #28]	; (800a478 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a45a:	4808      	ldr	r0, [pc, #32]	; (800a47c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a45c:	f7fe fa91 	bl	8008982 <USBD_GetString>
 800a460:	e004      	b.n	800a46c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	4904      	ldr	r1, [pc, #16]	; (800a478 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a466:	4805      	ldr	r0, [pc, #20]	; (800a47c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a468:	f7fe fa8b 	bl	8008982 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a46c:	4b02      	ldr	r3, [pc, #8]	; (800a478 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20000bc4 	.word	0x20000bc4
 800a47c:	0800a6a8 	.word	0x0800a6a8

0800a480 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	4603      	mov	r3, r0
 800a488:	6039      	str	r1, [r7, #0]
 800a48a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a48c:	79fb      	ldrb	r3, [r7, #7]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d105      	bne.n	800a49e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	4907      	ldr	r1, [pc, #28]	; (800a4b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a496:	4808      	ldr	r0, [pc, #32]	; (800a4b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a498:	f7fe fa73 	bl	8008982 <USBD_GetString>
 800a49c:	e004      	b.n	800a4a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	4904      	ldr	r1, [pc, #16]	; (800a4b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4a2:	4805      	ldr	r0, [pc, #20]	; (800a4b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4a4:	f7fe fa6d 	bl	8008982 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4a8:	4b02      	ldr	r3, [pc, #8]	; (800a4b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20000bc4 	.word	0x20000bc4
 800a4b8:	0800a6b4 	.word	0x0800a6b4

0800a4bc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	6039      	str	r1, [r7, #0]
 800a4c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	220c      	movs	r2, #12
 800a4cc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a4ce:	4b03      	ldr	r3, [pc, #12]	; (800a4dc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	200001ac 	.word	0x200001ac

0800a4e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a4e6:	4b0f      	ldr	r3, [pc, #60]	; (800a524 <Get_SerialNum+0x44>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a4ec:	4b0e      	ldr	r3, [pc, #56]	; (800a528 <Get_SerialNum+0x48>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a4f2:	4b0e      	ldr	r3, [pc, #56]	; (800a52c <Get_SerialNum+0x4c>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d009      	beq.n	800a51a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a506:	2208      	movs	r2, #8
 800a508:	4909      	ldr	r1, [pc, #36]	; (800a530 <Get_SerialNum+0x50>)
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f000 f814 	bl	800a538 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a510:	2204      	movs	r2, #4
 800a512:	4908      	ldr	r1, [pc, #32]	; (800a534 <Get_SerialNum+0x54>)
 800a514:	68b8      	ldr	r0, [r7, #8]
 800a516:	f000 f80f 	bl	800a538 <IntToUnicode>
  }
}
 800a51a:	bf00      	nop
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	1fff7590 	.word	0x1fff7590
 800a528:	1fff7594 	.word	0x1fff7594
 800a52c:	1fff7598 	.word	0x1fff7598
 800a530:	200001be 	.word	0x200001be
 800a534:	200001ce 	.word	0x200001ce

0800a538 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a538:	b480      	push	{r7}
 800a53a:	b087      	sub	sp, #28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	4613      	mov	r3, r2
 800a544:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a54a:	2300      	movs	r3, #0
 800a54c:	75fb      	strb	r3, [r7, #23]
 800a54e:	e027      	b.n	800a5a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	0f1b      	lsrs	r3, r3, #28
 800a554:	2b09      	cmp	r3, #9
 800a556:	d80b      	bhi.n	800a570 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	0f1b      	lsrs	r3, r3, #28
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	7dfb      	ldrb	r3, [r7, #23]
 800a560:	005b      	lsls	r3, r3, #1
 800a562:	4619      	mov	r1, r3
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	440b      	add	r3, r1
 800a568:	3230      	adds	r2, #48	; 0x30
 800a56a:	b2d2      	uxtb	r2, r2
 800a56c:	701a      	strb	r2, [r3, #0]
 800a56e:	e00a      	b.n	800a586 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	0f1b      	lsrs	r3, r3, #28
 800a574:	b2da      	uxtb	r2, r3
 800a576:	7dfb      	ldrb	r3, [r7, #23]
 800a578:	005b      	lsls	r3, r3, #1
 800a57a:	4619      	mov	r1, r3
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	440b      	add	r3, r1
 800a580:	3237      	adds	r2, #55	; 0x37
 800a582:	b2d2      	uxtb	r2, r2
 800a584:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	011b      	lsls	r3, r3, #4
 800a58a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a58c:	7dfb      	ldrb	r3, [r7, #23]
 800a58e:	005b      	lsls	r3, r3, #1
 800a590:	3301      	adds	r3, #1
 800a592:	68ba      	ldr	r2, [r7, #8]
 800a594:	4413      	add	r3, r2
 800a596:	2200      	movs	r2, #0
 800a598:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
 800a59c:	3301      	adds	r3, #1
 800a59e:	75fb      	strb	r3, [r7, #23]
 800a5a0:	7dfa      	ldrb	r2, [r7, #23]
 800a5a2:	79fb      	ldrb	r3, [r7, #7]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d3d3      	bcc.n	800a550 <IntToUnicode+0x18>
  }
}
 800a5a8:	bf00      	nop
 800a5aa:	bf00      	nop
 800a5ac:	371c      	adds	r7, #28
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
	...

0800a5b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800a5b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a5f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a5bc:	f7ff fa7e 	bl	8009abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800a5c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800a5c2:	e003      	b.n	800a5cc <LoopCopyDataInit>

0800a5c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800a5c4:	4b0b      	ldr	r3, [pc, #44]	; (800a5f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800a5c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800a5c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800a5ca:	3104      	adds	r1, #4

0800a5cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800a5cc:	480a      	ldr	r0, [pc, #40]	; (800a5f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800a5ce:	4b0b      	ldr	r3, [pc, #44]	; (800a5fc <LoopForever+0xe>)
	adds	r2, r0, r1
 800a5d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800a5d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800a5d4:	d3f6      	bcc.n	800a5c4 <CopyDataInit>
	ldr	r2, =_sbss
 800a5d6:	4a0a      	ldr	r2, [pc, #40]	; (800a600 <LoopForever+0x12>)
	b	LoopFillZerobss
 800a5d8:	e002      	b.n	800a5e0 <LoopFillZerobss>

0800a5da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800a5da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800a5dc:	f842 3b04 	str.w	r3, [r2], #4

0800a5e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800a5e0:	4b08      	ldr	r3, [pc, #32]	; (800a604 <LoopForever+0x16>)
	cmp	r2, r3
 800a5e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800a5e4:	d3f9      	bcc.n	800a5da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a5e6:	f000 f811 	bl	800a60c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a5ea:	f7fe fba9 	bl	8008d40 <main>

0800a5ee <LoopForever>:

LoopForever:
    b LoopForever
 800a5ee:	e7fe      	b.n	800a5ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800a5f0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800a5f4:	0800a71c 	.word	0x0800a71c
	ldr	r0, =_sdata
 800a5f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800a5fc:	200001d8 	.word	0x200001d8
	ldr	r2, =_sbss
 800a600:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 800a604:	20000dc4 	.word	0x20000dc4

0800a608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a608:	e7fe      	b.n	800a608 <ADC1_2_IRQHandler>
	...

0800a60c <__libc_init_array>:
 800a60c:	b570      	push	{r4, r5, r6, lr}
 800a60e:	4d0d      	ldr	r5, [pc, #52]	; (800a644 <__libc_init_array+0x38>)
 800a610:	4c0d      	ldr	r4, [pc, #52]	; (800a648 <__libc_init_array+0x3c>)
 800a612:	1b64      	subs	r4, r4, r5
 800a614:	10a4      	asrs	r4, r4, #2
 800a616:	2600      	movs	r6, #0
 800a618:	42a6      	cmp	r6, r4
 800a61a:	d109      	bne.n	800a630 <__libc_init_array+0x24>
 800a61c:	4d0b      	ldr	r5, [pc, #44]	; (800a64c <__libc_init_array+0x40>)
 800a61e:	4c0c      	ldr	r4, [pc, #48]	; (800a650 <__libc_init_array+0x44>)
 800a620:	f000 f820 	bl	800a664 <_init>
 800a624:	1b64      	subs	r4, r4, r5
 800a626:	10a4      	asrs	r4, r4, #2
 800a628:	2600      	movs	r6, #0
 800a62a:	42a6      	cmp	r6, r4
 800a62c:	d105      	bne.n	800a63a <__libc_init_array+0x2e>
 800a62e:	bd70      	pop	{r4, r5, r6, pc}
 800a630:	f855 3b04 	ldr.w	r3, [r5], #4
 800a634:	4798      	blx	r3
 800a636:	3601      	adds	r6, #1
 800a638:	e7ee      	b.n	800a618 <__libc_init_array+0xc>
 800a63a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a63e:	4798      	blx	r3
 800a640:	3601      	adds	r6, #1
 800a642:	e7f2      	b.n	800a62a <__libc_init_array+0x1e>
 800a644:	0800a714 	.word	0x0800a714
 800a648:	0800a714 	.word	0x0800a714
 800a64c:	0800a714 	.word	0x0800a714
 800a650:	0800a718 	.word	0x0800a718

0800a654 <memset>:
 800a654:	4402      	add	r2, r0
 800a656:	4603      	mov	r3, r0
 800a658:	4293      	cmp	r3, r2
 800a65a:	d100      	bne.n	800a65e <memset+0xa>
 800a65c:	4770      	bx	lr
 800a65e:	f803 1b01 	strb.w	r1, [r3], #1
 800a662:	e7f9      	b.n	800a658 <memset+0x4>

0800a664 <_init>:
 800a664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a666:	bf00      	nop
 800a668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a66a:	bc08      	pop	{r3}
 800a66c:	469e      	mov	lr, r3
 800a66e:	4770      	bx	lr

0800a670 <_fini>:
 800a670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a672:	bf00      	nop
 800a674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a676:	bc08      	pop	{r3}
 800a678:	469e      	mov	lr, r3
 800a67a:	4770      	bx	lr
