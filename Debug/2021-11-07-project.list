
2021-11-07-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  0800b640  0800b640  0001b640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf1c  0800bf1c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf1c  0800bf1c  0001bf1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf24  0800bf24  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf24  0800bf24  0001bf24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf28  0800bf28  0001bf28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800bf2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000121c  2000020c  0800c138  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001428  0800c138  00021428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029612  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e16  00000000  00000000  0004984e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c00  00000000  00000000  0004e668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a00  00000000  00000000  00050268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c0e7  00000000  00000000  00051c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021268  00000000  00000000  0007dd4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdf50  00000000  00000000  0009efb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  0019cf07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079dc  00000000  00000000  0019cfd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  001a49ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b628 	.word	0x0800b628

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	0800b628 	.word	0x0800b628

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000900:	f000 b96e 	b.w	8000be0 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468c      	mov	ip, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	f040 8083 	bne.w	8000a32 <__udivmoddi4+0x116>
 800092c:	428a      	cmp	r2, r1
 800092e:	4617      	mov	r7, r2
 8000930:	d947      	bls.n	80009c2 <__udivmoddi4+0xa6>
 8000932:	fab2 f282 	clz	r2, r2
 8000936:	b142      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000938:	f1c2 0020 	rsb	r0, r2, #32
 800093c:	fa24 f000 	lsr.w	r0, r4, r0
 8000940:	4091      	lsls	r1, r2
 8000942:	4097      	lsls	r7, r2
 8000944:	ea40 0c01 	orr.w	ip, r0, r1
 8000948:	4094      	lsls	r4, r2
 800094a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800094e:	0c23      	lsrs	r3, r4, #16
 8000950:	fbbc f6f8 	udiv	r6, ip, r8
 8000954:	fa1f fe87 	uxth.w	lr, r7
 8000958:	fb08 c116 	mls	r1, r8, r6, ip
 800095c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000960:	fb06 f10e 	mul.w	r1, r6, lr
 8000964:	4299      	cmp	r1, r3
 8000966:	d909      	bls.n	800097c <__udivmoddi4+0x60>
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800096e:	f080 8119 	bcs.w	8000ba4 <__udivmoddi4+0x288>
 8000972:	4299      	cmp	r1, r3
 8000974:	f240 8116 	bls.w	8000ba4 <__udivmoddi4+0x288>
 8000978:	3e02      	subs	r6, #2
 800097a:	443b      	add	r3, r7
 800097c:	1a5b      	subs	r3, r3, r1
 800097e:	b2a4      	uxth	r4, r4
 8000980:	fbb3 f0f8 	udiv	r0, r3, r8
 8000984:	fb08 3310 	mls	r3, r8, r0, r3
 8000988:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800098c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000990:	45a6      	cmp	lr, r4
 8000992:	d909      	bls.n	80009a8 <__udivmoddi4+0x8c>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800099a:	f080 8105 	bcs.w	8000ba8 <__udivmoddi4+0x28c>
 800099e:	45a6      	cmp	lr, r4
 80009a0:	f240 8102 	bls.w	8000ba8 <__udivmoddi4+0x28c>
 80009a4:	3802      	subs	r0, #2
 80009a6:	443c      	add	r4, r7
 80009a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ac:	eba4 040e 	sub.w	r4, r4, lr
 80009b0:	2600      	movs	r6, #0
 80009b2:	b11d      	cbz	r5, 80009bc <__udivmoddi4+0xa0>
 80009b4:	40d4      	lsrs	r4, r2
 80009b6:	2300      	movs	r3, #0
 80009b8:	e9c5 4300 	strd	r4, r3, [r5]
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	b902      	cbnz	r2, 80009c6 <__udivmoddi4+0xaa>
 80009c4:	deff      	udf	#255	; 0xff
 80009c6:	fab2 f282 	clz	r2, r2
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d150      	bne.n	8000a70 <__udivmoddi4+0x154>
 80009ce:	1bcb      	subs	r3, r1, r7
 80009d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	2601      	movs	r6, #1
 80009da:	fbb3 fcfe 	udiv	ip, r3, lr
 80009de:	0c21      	lsrs	r1, r4, #16
 80009e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009e8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0xe4>
 80009f0:	1879      	adds	r1, r7, r1
 80009f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0xe2>
 80009f8:	428b      	cmp	r3, r1
 80009fa:	f200 80e9 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 80009fe:	4684      	mov	ip, r0
 8000a00:	1ac9      	subs	r1, r1, r3
 8000a02:	b2a3      	uxth	r3, r4
 8000a04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a10:	fb08 f800 	mul.w	r8, r8, r0
 8000a14:	45a0      	cmp	r8, r4
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x10c>
 8000a18:	193c      	adds	r4, r7, r4
 8000a1a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x10a>
 8000a20:	45a0      	cmp	r8, r4
 8000a22:	f200 80d9 	bhi.w	8000bd8 <__udivmoddi4+0x2bc>
 8000a26:	4618      	mov	r0, r3
 8000a28:	eba4 0408 	sub.w	r4, r4, r8
 8000a2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a30:	e7bf      	b.n	80009b2 <__udivmoddi4+0x96>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d909      	bls.n	8000a4a <__udivmoddi4+0x12e>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	f000 80b1 	beq.w	8000b9e <__udivmoddi4+0x282>
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a42:	4630      	mov	r0, r6
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	fab3 f683 	clz	r6, r3
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d14a      	bne.n	8000ae8 <__udivmoddi4+0x1cc>
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d302      	bcc.n	8000a5c <__udivmoddi4+0x140>
 8000a56:	4282      	cmp	r2, r0
 8000a58:	f200 80b8 	bhi.w	8000bcc <__udivmoddi4+0x2b0>
 8000a5c:	1a84      	subs	r4, r0, r2
 8000a5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a62:	2001      	movs	r0, #1
 8000a64:	468c      	mov	ip, r1
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d0a8      	beq.n	80009bc <__udivmoddi4+0xa0>
 8000a6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a6e:	e7a5      	b.n	80009bc <__udivmoddi4+0xa0>
 8000a70:	f1c2 0320 	rsb	r3, r2, #32
 8000a74:	fa20 f603 	lsr.w	r6, r0, r3
 8000a78:	4097      	lsls	r7, r2
 8000a7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a82:	40d9      	lsrs	r1, r3
 8000a84:	4330      	orrs	r0, r6
 8000a86:	0c03      	lsrs	r3, r0, #16
 8000a88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a98:	fb06 f108 	mul.w	r1, r6, r8
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000aa2:	d909      	bls.n	8000ab8 <__udivmoddi4+0x19c>
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000aaa:	f080 808d 	bcs.w	8000bc8 <__udivmoddi4+0x2ac>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 808a 	bls.w	8000bc8 <__udivmoddi4+0x2ac>
 8000ab4:	3e02      	subs	r6, #2
 8000ab6:	443b      	add	r3, r7
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	b281      	uxth	r1, r0
 8000abc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac8:	fb00 f308 	mul.w	r3, r0, r8
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x1c4>
 8000ad0:	1879      	adds	r1, r7, r1
 8000ad2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ad6:	d273      	bcs.n	8000bc0 <__udivmoddi4+0x2a4>
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d971      	bls.n	8000bc0 <__udivmoddi4+0x2a4>
 8000adc:	3802      	subs	r0, #2
 8000ade:	4439      	add	r1, r7
 8000ae0:	1acb      	subs	r3, r1, r3
 8000ae2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ae6:	e778      	b.n	80009da <__udivmoddi4+0xbe>
 8000ae8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aec:	fa03 f406 	lsl.w	r4, r3, r6
 8000af0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000af4:	431c      	orrs	r4, r3
 8000af6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000afa:	fa01 f306 	lsl.w	r3, r1, r6
 8000afe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b06:	431f      	orrs	r7, r3
 8000b08:	0c3b      	lsrs	r3, r7, #16
 8000b0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b0e:	fa1f f884 	uxth.w	r8, r4
 8000b12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b1e:	458a      	cmp	sl, r1
 8000b20:	fa02 f206 	lsl.w	r2, r2, r6
 8000b24:	fa00 f306 	lsl.w	r3, r0, r6
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x220>
 8000b2a:	1861      	adds	r1, r4, r1
 8000b2c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000b30:	d248      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b32:	458a      	cmp	sl, r1
 8000b34:	d946      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b36:	f1a9 0902 	sub.w	r9, r9, #2
 8000b3a:	4421      	add	r1, r4
 8000b3c:	eba1 010a 	sub.w	r1, r1, sl
 8000b40:	b2bf      	uxth	r7, r7
 8000b42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b4e:	fb00 f808 	mul.w	r8, r0, r8
 8000b52:	45b8      	cmp	r8, r7
 8000b54:	d907      	bls.n	8000b66 <__udivmoddi4+0x24a>
 8000b56:	19e7      	adds	r7, r4, r7
 8000b58:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b5c:	d22e      	bcs.n	8000bbc <__udivmoddi4+0x2a0>
 8000b5e:	45b8      	cmp	r8, r7
 8000b60:	d92c      	bls.n	8000bbc <__udivmoddi4+0x2a0>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4427      	add	r7, r4
 8000b66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b6a:	eba7 0708 	sub.w	r7, r7, r8
 8000b6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b72:	454f      	cmp	r7, r9
 8000b74:	46c6      	mov	lr, r8
 8000b76:	4649      	mov	r1, r9
 8000b78:	d31a      	bcc.n	8000bb0 <__udivmoddi4+0x294>
 8000b7a:	d017      	beq.n	8000bac <__udivmoddi4+0x290>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x27a>
 8000b7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b82:	eb67 0701 	sbc.w	r7, r7, r1
 8000b86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b8a:	40f2      	lsrs	r2, r6
 8000b8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b90:	40f7      	lsrs	r7, r6
 8000b92:	e9c5 2700 	strd	r2, r7, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	462e      	mov	r6, r5
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	e70b      	b.n	80009bc <__udivmoddi4+0xa0>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	e6e9      	b.n	800097c <__udivmoddi4+0x60>
 8000ba8:	4618      	mov	r0, r3
 8000baa:	e6fd      	b.n	80009a8 <__udivmoddi4+0x8c>
 8000bac:	4543      	cmp	r3, r8
 8000bae:	d2e5      	bcs.n	8000b7c <__udivmoddi4+0x260>
 8000bb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000bb8:	3801      	subs	r0, #1
 8000bba:	e7df      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e7d2      	b.n	8000b66 <__udivmoddi4+0x24a>
 8000bc0:	4660      	mov	r0, ip
 8000bc2:	e78d      	b.n	8000ae0 <__udivmoddi4+0x1c4>
 8000bc4:	4681      	mov	r9, r0
 8000bc6:	e7b9      	b.n	8000b3c <__udivmoddi4+0x220>
 8000bc8:	4666      	mov	r6, ip
 8000bca:	e775      	b.n	8000ab8 <__udivmoddi4+0x19c>
 8000bcc:	4630      	mov	r0, r6
 8000bce:	e74a      	b.n	8000a66 <__udivmoddi4+0x14a>
 8000bd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bd4:	4439      	add	r1, r7
 8000bd6:	e713      	b.n	8000a00 <__udivmoddi4+0xe4>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	e724      	b.n	8000a28 <__udivmoddi4+0x10c>
 8000bde:	bf00      	nop

08000be0 <__aeabi_idiv0>:
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bee:	2003      	movs	r0, #3
 8000bf0:	f000 f960 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f000 f80d 	bl	8000c14 <HAL_InitTick>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d002      	beq.n	8000c06 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	e001      	b.n	8000c0a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c06:	f009 f85b 	bl	8009cc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_InitTick+0x6c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d023      	beq.n	8000c70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <HAL_InitTick+0x70>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_InitTick+0x6c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f96d 	bl	8000f1e <HAL_SYSTICK_Config>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d10f      	bne.n	8000c6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b0f      	cmp	r3, #15
 8000c4e:	d809      	bhi.n	8000c64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c50:	2200      	movs	r2, #0
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c58:	f000 f937 	bl	8000eca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_InitTick+0x74>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	e007      	b.n	8000c74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e004      	b.n	8000c74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e001      	b.n	8000c74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000004 	.word	0x20000004
 8000c84:	20000144 	.word	0x20000144
 8000c88:	20000000 	.word	0x20000000

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000004 	.word	0x20000004
 8000cb0:	20000258 	.word	0x20000258

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000258 	.word	0x20000258

08000ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd4:	f7ff ffee 	bl	8000cb4 <HAL_GetTick>
 8000cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ce4:	d005      	beq.n	8000cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_Delay+0x44>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf2:	bf00      	nop
 8000cf4:	f7ff ffde 	bl	8000cb4 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d8f7      	bhi.n	8000cf4 <HAL_Delay+0x28>
  {
  }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000004 	.word	0x20000004

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4907      	ldr	r1, [pc, #28]	; (8000db0 <__NVIC_EnableIRQ+0x38>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e94:	f7ff ff8e 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff29 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000edc:	f7ff ff3e 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ee0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	6978      	ldr	r0, [r7, #20]
 8000ee8:	f7ff ff8e 	bl	8000e08 <NVIC_EncodePriority>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff5d 	bl	8000db4 <__NVIC_SetPriority>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff31 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffa2 	bl	8000e70 <SysTick_Config>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e014      	b.n	8000f72 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	791b      	ldrb	r3, [r3, #4]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d105      	bne.n	8000f5e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f008 fed5 	bl	8009d08 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2202      	movs	r2, #2
 8000f62:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	795b      	ldrb	r3, [r3, #5]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d101      	bne.n	8000f9a <HAL_DAC_Start_DMA+0x1e>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e0ab      	b.n	80010f2 <HAL_DAC_Start_DMA+0x176>
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d12f      	bne.n	800100c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4a52      	ldr	r2, [pc, #328]	; (80010fc <HAL_DAC_Start_DMA+0x180>)
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	4a51      	ldr	r2, [pc, #324]	; (8001100 <HAL_DAC_Start_DMA+0x184>)
 8000fba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4a50      	ldr	r2, [pc, #320]	; (8001104 <HAL_DAC_Start_DMA+0x188>)
 8000fc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fd2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d013      	beq.n	8001002 <HAL_DAC_Start_DMA+0x86>
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	2b08      	cmp	r3, #8
 8000fde:	d845      	bhi.n	800106c <HAL_DAC_Start_DMA+0xf0>
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_DAC_Start_DMA+0x72>
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d005      	beq.n	8000ff8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000fec:	e03e      	b.n	800106c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3308      	adds	r3, #8
 8000ff4:	613b      	str	r3, [r7, #16]
        break;
 8000ff6:	e03c      	b.n	8001072 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	330c      	adds	r3, #12
 8000ffe:	613b      	str	r3, [r7, #16]
        break;
 8001000:	e037      	b.n	8001072 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	3310      	adds	r3, #16
 8001008:	613b      	str	r3, [r7, #16]
        break;
 800100a:	e032      	b.n	8001072 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	4a3d      	ldr	r2, [pc, #244]	; (8001108 <HAL_DAC_Start_DMA+0x18c>)
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	4a3c      	ldr	r2, [pc, #240]	; (800110c <HAL_DAC_Start_DMA+0x190>)
 800101a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	4a3b      	ldr	r2, [pc, #236]	; (8001110 <HAL_DAC_Start_DMA+0x194>)
 8001022:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001032:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	2b08      	cmp	r3, #8
 8001038:	d013      	beq.n	8001062 <HAL_DAC_Start_DMA+0xe6>
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	2b08      	cmp	r3, #8
 800103e:	d817      	bhi.n	8001070 <HAL_DAC_Start_DMA+0xf4>
 8001040:	6a3b      	ldr	r3, [r7, #32]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_DAC_Start_DMA+0xd2>
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	2b04      	cmp	r3, #4
 800104a:	d005      	beq.n	8001058 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800104c:	e010      	b.n	8001070 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	3314      	adds	r3, #20
 8001054:	613b      	str	r3, [r7, #16]
        break;
 8001056:	e00c      	b.n	8001072 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	3318      	adds	r3, #24
 800105e:	613b      	str	r3, [r7, #16]
        break;
 8001060:	e007      	b.n	8001072 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	331c      	adds	r3, #28
 8001068:	613b      	str	r3, [r7, #16]
        break;
 800106a:	e002      	b.n	8001072 <HAL_DAC_Start_DMA+0xf6>
        break;
 800106c:	bf00      	nop
 800106e:	e000      	b.n	8001072 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001070:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d111      	bne.n	800109c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001086:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6898      	ldr	r0, [r3, #8]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	f000 faff 	bl	8001694 <HAL_DMA_Start_IT>
 8001096:	4603      	mov	r3, r0
 8001098:	75fb      	strb	r3, [r7, #23]
 800109a:	e010      	b.n	80010be <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80010aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	68d8      	ldr	r0, [r3, #12]
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	f000 faed 	bl	8001694 <HAL_DMA_Start_IT>
 80010ba:	4603      	mov	r3, r0
 80010bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2200      	movs	r2, #0
 80010c2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10c      	bne.n	80010e4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6819      	ldr	r1, [r3, #0]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	2201      	movs	r2, #1
 80010d8:	409a      	lsls	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	430a      	orrs	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	e005      	b.n	80010f0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	f043 0204 	orr.w	r2, r3, #4
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	0800140f 	.word	0x0800140f
 8001100:	08001431 	.word	0x08001431
 8001104:	0800144d 	.word	0x0800144d
 8001108:	080014b7 	.word	0x080014b7
 800110c:	080014d9 	.word	0x080014d9
 8001110:	080014f5 	.word	0x080014f5

08001114 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6819      	ldr	r1, [r3, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	400a      	ands	r2, r1
 800113a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6819      	ldr	r1, [r3, #0]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	f003 0310 	and.w	r3, r3, #16
 8001148:	2201      	movs	r2, #1
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	400a      	ands	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10d      	bne.n	800117a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	4618      	mov	r0, r3
 8001164:	f000 faf6 	bl	8001754 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	e00c      	b.n	8001194 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fae8 	bl	8001754 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001192:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b088      	sub	sp, #32
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	795b      	ldrb	r3, [r3, #5]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d101      	bne.n	80011f6 <HAL_DAC_ConfigChannel+0x1c>
 80011f2:	2302      	movs	r3, #2
 80011f4:	e107      	b.n	8001406 <HAL_DAC_ConfigChannel+0x22c>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2201      	movs	r2, #1
 80011fa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2202      	movs	r2, #2
 8001200:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b04      	cmp	r3, #4
 8001208:	d174      	bne.n	80012f4 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800120a:	f7ff fd53 	bl	8000cb4 <HAL_GetTick>
 800120e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d134      	bne.n	8001280 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001216:	e011      	b.n	800123c <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001218:	f7ff fd4c 	bl	8000cb4 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b01      	cmp	r3, #1
 8001224:	d90a      	bls.n	800123c <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	f043 0208 	orr.w	r2, r3, #8
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2203      	movs	r2, #3
 8001236:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e0e4      	b.n	8001406 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1e6      	bne.n	8001218 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800124a:	2001      	movs	r0, #1
 800124c:	f7ff fd3e 	bl	8000ccc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	6992      	ldr	r2, [r2, #24]
 8001258:	641a      	str	r2, [r3, #64]	; 0x40
 800125a:	e01e      	b.n	800129a <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800125c:	f7ff fd2a 	bl	8000cb4 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b01      	cmp	r3, #1
 8001268:	d90a      	bls.n	8001280 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	f043 0208 	orr.w	r2, r3, #8
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2203      	movs	r2, #3
 800127a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e0c2      	b.n	8001406 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001286:	2b00      	cmp	r3, #0
 8001288:	dbe8      	blt.n	800125c <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800128a:	2001      	movs	r0, #1
 800128c:	f7ff fd1e 	bl	8000ccc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	6992      	ldr	r2, [r2, #24]
 8001298:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	ea02 0103 	and.w	r1, r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	69da      	ldr	r2, [r3, #28]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	409a      	lsls	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	21ff      	movs	r1, #255	; 0xff
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	ea02 0103 	and.w	r1, r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	6a1a      	ldr	r2, [r3, #32]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	409a      	lsls	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d11d      	bne.n	8001338 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001302:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	221f      	movs	r2, #31
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	2207      	movs	r2, #7
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	431a      	orrs	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	4313      	orrs	r3, r2
 8001364:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6819      	ldr	r1, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43da      	mvns	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	400a      	ands	r2, r1
 800139c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	f640 72fc 	movw	r2, #4092	; 0xffc
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6819      	ldr	r1, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	22c0      	movs	r2, #192	; 0xc0
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	400a      	ands	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2201      	movs	r2, #1
 80013fc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f7ff febe 	bl	800119e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2201      	movs	r2, #1
 8001426:	711a      	strb	r2, [r3, #4]
}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f7ff feb7 	bl	80011b2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	f043 0204 	orr.w	r2, r3, #4
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f7ff fead 	bl	80011c6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2201      	movs	r2, #1
 8001470:	711a      	strb	r2, [r3, #4]
}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f7ff ffd8 	bl	800147a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2201      	movs	r2, #1
 80014ce:	711a      	strb	r2, [r3, #4]
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff ffd1 	bl	800148e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	f043 0204 	orr.w	r2, r3, #4
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f7ff ffc7 	bl	80014a2 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2201      	movs	r2, #1
 8001518:	711a      	strb	r2, [r3, #4]
}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e098      	b.n	8001668 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	4b4d      	ldr	r3, [pc, #308]	; (8001674 <HAL_DMA_Init+0x150>)
 800153e:	429a      	cmp	r2, r3
 8001540:	d80f      	bhi.n	8001562 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	4b4b      	ldr	r3, [pc, #300]	; (8001678 <HAL_DMA_Init+0x154>)
 800154a:	4413      	add	r3, r2
 800154c:	4a4b      	ldr	r2, [pc, #300]	; (800167c <HAL_DMA_Init+0x158>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	091b      	lsrs	r3, r3, #4
 8001554:	009a      	lsls	r2, r3, #2
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a48      	ldr	r2, [pc, #288]	; (8001680 <HAL_DMA_Init+0x15c>)
 800155e:	641a      	str	r2, [r3, #64]	; 0x40
 8001560:	e00e      	b.n	8001580 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	4b46      	ldr	r3, [pc, #280]	; (8001684 <HAL_DMA_Init+0x160>)
 800156a:	4413      	add	r3, r2
 800156c:	4a43      	ldr	r2, [pc, #268]	; (800167c <HAL_DMA_Init+0x158>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	009a      	lsls	r2, r3, #2
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a42      	ldr	r2, [pc, #264]	; (8001688 <HAL_DMA_Init+0x164>)
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2202      	movs	r2, #2
 8001584:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800159a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015da:	d039      	beq.n	8001650 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_DMA_Init+0x15c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d11a      	bne.n	800161c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015e6:	4b29      	ldr	r3, [pc, #164]	; (800168c <HAL_DMA_Init+0x168>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f003 031c 	and.w	r3, r3, #28
 80015f2:	210f      	movs	r1, #15
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	4924      	ldr	r1, [pc, #144]	; (800168c <HAL_DMA_Init+0x168>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001600:	4b22      	ldr	r3, [pc, #136]	; (800168c <HAL_DMA_Init+0x168>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6859      	ldr	r1, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160c:	f003 031c 	and.w	r3, r3, #28
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	491d      	ldr	r1, [pc, #116]	; (800168c <HAL_DMA_Init+0x168>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
 800161a:	e019      	b.n	8001650 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <HAL_DMA_Init+0x16c>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	f003 031c 	and.w	r3, r3, #28
 8001628:	210f      	movs	r1, #15
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	4917      	ldr	r1, [pc, #92]	; (8001690 <HAL_DMA_Init+0x16c>)
 8001632:	4013      	ands	r3, r2
 8001634:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <HAL_DMA_Init+0x16c>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6859      	ldr	r1, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f003 031c 	and.w	r3, r3, #28
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	4911      	ldr	r1, [pc, #68]	; (8001690 <HAL_DMA_Init+0x16c>)
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	40020407 	.word	0x40020407
 8001678:	bffdfff8 	.word	0xbffdfff8
 800167c:	cccccccd 	.word	0xcccccccd
 8001680:	40020000 	.word	0x40020000
 8001684:	bffdfbf8 	.word	0xbffdfbf8
 8001688:	40020400 	.word	0x40020400
 800168c:	400200a8 	.word	0x400200a8
 8001690:	400204a8 	.word	0x400204a8

08001694 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
 80016a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_DMA_Start_IT+0x20>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e04b      	b.n	800174c <HAL_DMA_Start_IT+0xb8>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d13a      	bne.n	800173e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2202      	movs	r2, #2
 80016cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0201 	bic.w	r2, r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 f91e 	bl	800192e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d008      	beq.n	800170c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 020e 	orr.w	r2, r2, #14
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	e00f      	b.n	800172c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0204 	bic.w	r2, r2, #4
 800171a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 020a 	orr.w	r2, r2, #10
 800172a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0201 	orr.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e005      	b.n	800174a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001746:	2302      	movs	r3, #2
 8001748:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800174a:	7dfb      	ldrb	r3, [r7, #23]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d008      	beq.n	800177e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2204      	movs	r2, #4
 8001770:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e022      	b.n	80017c4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 020e 	bic.w	r2, r2, #14
 800178c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0201 	bic.w	r2, r2, #1
 800179c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f003 021c 	and.w	r2, r3, #28
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	2101      	movs	r1, #1
 80017ac:	fa01 f202 	lsl.w	r2, r1, r2
 80017b0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	f003 031c 	and.w	r3, r3, #28
 80017f0:	2204      	movs	r2, #4
 80017f2:	409a      	lsls	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d026      	beq.n	800184a <HAL_DMA_IRQHandler+0x7a>
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b00      	cmp	r3, #0
 8001804:	d021      	beq.n	800184a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0320 	and.w	r3, r3, #32
 8001810:	2b00      	cmp	r3, #0
 8001812:	d107      	bne.n	8001824 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0204 	bic.w	r2, r2, #4
 8001822:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001828:	f003 021c 	and.w	r2, r3, #28
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	2104      	movs	r1, #4
 8001832:	fa01 f202 	lsl.w	r2, r1, r2
 8001836:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	2b00      	cmp	r3, #0
 800183e:	d071      	beq.n	8001924 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001848:	e06c      	b.n	8001924 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	f003 031c 	and.w	r3, r3, #28
 8001852:	2202      	movs	r2, #2
 8001854:	409a      	lsls	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d02e      	beq.n	80018bc <HAL_DMA_IRQHandler+0xec>
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d029      	beq.n	80018bc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0320 	and.w	r3, r3, #32
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10b      	bne.n	800188e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 020a 	bic.w	r2, r2, #10
 8001884:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f003 021c 	and.w	r2, r3, #28
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	2102      	movs	r1, #2
 800189c:	fa01 f202 	lsl.w	r2, r1, r2
 80018a0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d038      	beq.n	8001924 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018ba:	e033      	b.n	8001924 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	f003 031c 	and.w	r3, r3, #28
 80018c4:	2208      	movs	r2, #8
 80018c6:	409a      	lsls	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d02a      	beq.n	8001926 <HAL_DMA_IRQHandler+0x156>
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d025      	beq.n	8001926 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 020e 	bic.w	r2, r2, #14
 80018e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f003 021c 	and.w	r2, r3, #28
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	2101      	movs	r1, #1
 80018f8:	fa01 f202 	lsl.w	r2, r1, r2
 80018fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001918:	2b00      	cmp	r3, #0
 800191a:	d004      	beq.n	8001926 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001924:	bf00      	nop
 8001926:	bf00      	nop
}
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800192e:	b480      	push	{r7}
 8001930:	b085      	sub	sp, #20
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	f003 021c 	and.w	r2, r3, #28
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	2101      	movs	r1, #1
 800194a:	fa01 f202 	lsl.w	r2, r1, r2
 800194e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b10      	cmp	r3, #16
 800195e:	d108      	bne.n	8001972 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001970:	e007      	b.n	8001982 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	60da      	str	r2, [r3, #12]
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800199e:	e17f      	b.n	8001ca0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2101      	movs	r1, #1
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	4013      	ands	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8171 	beq.w	8001c9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d00b      	beq.n	80019d8 <HAL_GPIO_Init+0x48>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d007      	beq.n	80019d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019cc:	2b11      	cmp	r3, #17
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b12      	cmp	r3, #18
 80019d6:	d130      	bne.n	8001a3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a0e:	2201      	movs	r2, #1
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	f003 0201 	and.w	r2, r3, #1
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d118      	bne.n	8001a78 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	08db      	lsrs	r3, r3, #3
 8001a62:	f003 0201 	and.w	r2, r3, #1
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x128>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b12      	cmp	r3, #18
 8001ab6:	d123      	bne.n	8001b00 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	220f      	movs	r2, #15
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	08da      	lsrs	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3208      	adds	r2, #8
 8001afa:	6939      	ldr	r1, [r7, #16]
 8001afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0203 	and.w	r2, r3, #3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80ac 	beq.w	8001c9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	4b5f      	ldr	r3, [pc, #380]	; (8001cc0 <HAL_GPIO_Init+0x330>)
 8001b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b46:	4a5e      	ldr	r2, [pc, #376]	; (8001cc0 <HAL_GPIO_Init+0x330>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b4e:	4b5c      	ldr	r3, [pc, #368]	; (8001cc0 <HAL_GPIO_Init+0x330>)
 8001b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b5a:	4a5a      	ldr	r2, [pc, #360]	; (8001cc4 <HAL_GPIO_Init+0x334>)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3302      	adds	r3, #2
 8001b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	220f      	movs	r2, #15
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b84:	d025      	beq.n	8001bd2 <HAL_GPIO_Init+0x242>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4f      	ldr	r2, [pc, #316]	; (8001cc8 <HAL_GPIO_Init+0x338>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d01f      	beq.n	8001bce <HAL_GPIO_Init+0x23e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4e      	ldr	r2, [pc, #312]	; (8001ccc <HAL_GPIO_Init+0x33c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d019      	beq.n	8001bca <HAL_GPIO_Init+0x23a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4d      	ldr	r2, [pc, #308]	; (8001cd0 <HAL_GPIO_Init+0x340>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0x236>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4c      	ldr	r2, [pc, #304]	; (8001cd4 <HAL_GPIO_Init+0x344>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_GPIO_Init+0x232>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4b      	ldr	r2, [pc, #300]	; (8001cd8 <HAL_GPIO_Init+0x348>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x22e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4a      	ldr	r2, [pc, #296]	; (8001cdc <HAL_GPIO_Init+0x34c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_GPIO_Init+0x22a>
 8001bb6:	2306      	movs	r3, #6
 8001bb8:	e00c      	b.n	8001bd4 <HAL_GPIO_Init+0x244>
 8001bba:	2307      	movs	r3, #7
 8001bbc:	e00a      	b.n	8001bd4 <HAL_GPIO_Init+0x244>
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	e008      	b.n	8001bd4 <HAL_GPIO_Init+0x244>
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	e006      	b.n	8001bd4 <HAL_GPIO_Init+0x244>
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e004      	b.n	8001bd4 <HAL_GPIO_Init+0x244>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e002      	b.n	8001bd4 <HAL_GPIO_Init+0x244>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_GPIO_Init+0x244>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	f002 0203 	and.w	r2, r2, #3
 8001bda:	0092      	lsls	r2, r2, #2
 8001bdc:	4093      	lsls	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001be4:	4937      	ldr	r1, [pc, #220]	; (8001cc4 <HAL_GPIO_Init+0x334>)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	3302      	adds	r3, #2
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bf2:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <HAL_GPIO_Init+0x350>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c16:	4a32      	ldr	r2, [pc, #200]	; (8001ce0 <HAL_GPIO_Init+0x350>)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c1c:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <HAL_GPIO_Init+0x350>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c40:	4a27      	ldr	r2, [pc, #156]	; (8001ce0 <HAL_GPIO_Init+0x350>)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c46:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <HAL_GPIO_Init+0x350>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ce0 <HAL_GPIO_Init+0x350>)
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_GPIO_Init+0x350>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c94:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <HAL_GPIO_Init+0x350>)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f47f ae78 	bne.w	80019a0 <HAL_GPIO_Init+0x10>
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40010000 	.word	0x40010000
 8001cc8:	48000400 	.word	0x48000400
 8001ccc:	48000800 	.word	0x48000800
 8001cd0:	48000c00 	.word	0x48000c00
 8001cd4:	48001000 	.word	0x48001000
 8001cd8:	48001400 	.word	0x48001400
 8001cdc:	48001800 	.word	0x48001800
 8001ce0:	40010400 	.word	0x40010400

08001ce4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001cf2:	e0cd      	b.n	8001e90 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80c0 	beq.w	8001e8a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001d0a:	4a68      	ldr	r2, [pc, #416]	; (8001eac <HAL_GPIO_DeInit+0x1c8>)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	3302      	adds	r3, #2
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	220f      	movs	r2, #15
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d32:	d025      	beq.n	8001d80 <HAL_GPIO_DeInit+0x9c>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a5e      	ldr	r2, [pc, #376]	; (8001eb0 <HAL_GPIO_DeInit+0x1cc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d01f      	beq.n	8001d7c <HAL_GPIO_DeInit+0x98>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a5d      	ldr	r2, [pc, #372]	; (8001eb4 <HAL_GPIO_DeInit+0x1d0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d019      	beq.n	8001d78 <HAL_GPIO_DeInit+0x94>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a5c      	ldr	r2, [pc, #368]	; (8001eb8 <HAL_GPIO_DeInit+0x1d4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d013      	beq.n	8001d74 <HAL_GPIO_DeInit+0x90>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a5b      	ldr	r2, [pc, #364]	; (8001ebc <HAL_GPIO_DeInit+0x1d8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00d      	beq.n	8001d70 <HAL_GPIO_DeInit+0x8c>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a5a      	ldr	r2, [pc, #360]	; (8001ec0 <HAL_GPIO_DeInit+0x1dc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d007      	beq.n	8001d6c <HAL_GPIO_DeInit+0x88>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a59      	ldr	r2, [pc, #356]	; (8001ec4 <HAL_GPIO_DeInit+0x1e0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d101      	bne.n	8001d68 <HAL_GPIO_DeInit+0x84>
 8001d64:	2306      	movs	r3, #6
 8001d66:	e00c      	b.n	8001d82 <HAL_GPIO_DeInit+0x9e>
 8001d68:	2307      	movs	r3, #7
 8001d6a:	e00a      	b.n	8001d82 <HAL_GPIO_DeInit+0x9e>
 8001d6c:	2305      	movs	r3, #5
 8001d6e:	e008      	b.n	8001d82 <HAL_GPIO_DeInit+0x9e>
 8001d70:	2304      	movs	r3, #4
 8001d72:	e006      	b.n	8001d82 <HAL_GPIO_DeInit+0x9e>
 8001d74:	2303      	movs	r3, #3
 8001d76:	e004      	b.n	8001d82 <HAL_GPIO_DeInit+0x9e>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e002      	b.n	8001d82 <HAL_GPIO_DeInit+0x9e>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_GPIO_DeInit+0x9e>
 8001d80:	2300      	movs	r3, #0
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	f002 0203 	and.w	r2, r2, #3
 8001d88:	0092      	lsls	r2, r2, #2
 8001d8a:	4093      	lsls	r3, r2
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d132      	bne.n	8001df8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001d92:	4b4d      	ldr	r3, [pc, #308]	; (8001ec8 <HAL_GPIO_DeInit+0x1e4>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	494b      	ldr	r1, [pc, #300]	; (8001ec8 <HAL_GPIO_DeInit+0x1e4>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001da0:	4b49      	ldr	r3, [pc, #292]	; (8001ec8 <HAL_GPIO_DeInit+0x1e4>)
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	4947      	ldr	r1, [pc, #284]	; (8001ec8 <HAL_GPIO_DeInit+0x1e4>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001dae:	4b46      	ldr	r3, [pc, #280]	; (8001ec8 <HAL_GPIO_DeInit+0x1e4>)
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	4944      	ldr	r1, [pc, #272]	; (8001ec8 <HAL_GPIO_DeInit+0x1e4>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001dbc:	4b42      	ldr	r3, [pc, #264]	; (8001ec8 <HAL_GPIO_DeInit+0x1e4>)
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	4940      	ldr	r1, [pc, #256]	; (8001ec8 <HAL_GPIO_DeInit+0x1e4>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001dda:	4a34      	ldr	r2, [pc, #208]	; (8001eac <HAL_GPIO_DeInit+0x1c8>)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	3302      	adds	r3, #2
 8001de2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	43da      	mvns	r2, r3
 8001dea:	4830      	ldr	r0, [pc, #192]	; (8001eac <HAL_GPIO_DeInit+0x1c8>)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	400a      	ands	r2, r1
 8001df2:	3302      	adds	r3, #2
 8001df4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	2103      	movs	r1, #3
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	08da      	lsrs	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3208      	adds	r2, #8
 8001e14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	08d2      	lsrs	r2, r2, #3
 8001e2c:	4019      	ands	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3208      	adds	r2, #8
 8001e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2103      	movs	r1, #3
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	401a      	ands	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	2101      	movs	r1, #1
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	2103      	movs	r1, #3
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	401a      	ands	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	401a      	ands	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f47f af2b 	bne.w	8001cf4 <HAL_GPIO_DeInit+0x10>
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	bf00      	nop
 8001ea2:	371c      	adds	r7, #28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	48000400 	.word	0x48000400
 8001eb4:	48000800 	.word	0x48000800
 8001eb8:	48000c00 	.word	0x48000c00
 8001ebc:	48001000 	.word	0x48001000
 8001ec0:	48001400 	.word	0x48001400
 8001ec4:	48001800 	.word	0x48001800
 8001ec8:	40010400 	.word	0x40010400

08001ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001edc:	787b      	ldrb	r3, [r7, #1]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ee8:	e002      	b.n	8001ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4013      	ands	r3, r2
 8001f14:	041a      	lsls	r2, r3, #16
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	43d9      	mvns	r1, r3
 8001f1a:	887b      	ldrh	r3, [r7, #2]
 8001f1c:	400b      	ands	r3, r1
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	619a      	str	r2, [r3, #24]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d006      	beq.n	8001f54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f007 fca8 	bl	80098a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40010400 	.word	0x40010400

08001f60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e081      	b.n	8002076 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d106      	bne.n	8001f8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f007 ff2a 	bl	8009de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2224      	movs	r2, #36	; 0x24
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d107      	bne.n	8001fda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	e006      	b.n	8001fe8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fe6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d104      	bne.n	8001ffa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ff8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800200c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800201c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691a      	ldr	r2, [r3, #16]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	ea42 0103 	orr.w	r1, r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	021a      	lsls	r2, r3, #8
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69d9      	ldr	r1, [r3, #28]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1a      	ldr	r2, [r3, #32]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2220      	movs	r2, #32
 8002062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e021      	b.n	80020d4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2224      	movs	r2, #36	; 0x24
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f007 fef7 	bl	8009e9c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	4608      	mov	r0, r1
 80020e6:	4611      	mov	r1, r2
 80020e8:	461a      	mov	r2, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	817b      	strh	r3, [r7, #10]
 80020ee:	460b      	mov	r3, r1
 80020f0:	813b      	strh	r3, [r7, #8]
 80020f2:	4613      	mov	r3, r2
 80020f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b20      	cmp	r3, #32
 8002100:	f040 80f9 	bne.w	80022f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <HAL_I2C_Mem_Write+0x34>
 800210a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002116:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0ed      	b.n	80022f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_I2C_Mem_Write+0x4e>
 8002126:	2302      	movs	r3, #2
 8002128:	e0e6      	b.n	80022f8 <HAL_I2C_Mem_Write+0x21c>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002132:	f7fe fdbf 	bl	8000cb4 <HAL_GetTick>
 8002136:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	2319      	movs	r3, #25
 800213e:	2201      	movs	r2, #1
 8002140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 fac3 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0d1      	b.n	80022f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2221      	movs	r2, #33	; 0x21
 8002158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2240      	movs	r2, #64	; 0x40
 8002160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a3a      	ldr	r2, [r7, #32]
 800216e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002174:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800217c:	88f8      	ldrh	r0, [r7, #6]
 800217e:	893a      	ldrh	r2, [r7, #8]
 8002180:	8979      	ldrh	r1, [r7, #10]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	4603      	mov	r3, r0
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 f9d3 	bl	8002538 <I2C_RequestMemoryWrite>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0a9      	b.n	80022f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2bff      	cmp	r3, #255	; 0xff
 80021ac:	d90e      	bls.n	80021cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	22ff      	movs	r2, #255	; 0xff
 80021b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	8979      	ldrh	r1, [r7, #10]
 80021bc:	2300      	movs	r3, #0
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 fba5 	bl	8002914 <I2C_TransferConfig>
 80021ca:	e00f      	b.n	80021ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	8979      	ldrh	r1, [r7, #10]
 80021de:	2300      	movs	r3, #0
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 fb94 	bl	8002914 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 faad 	bl	8002750 <I2C_WaitOnTXISFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e07b      	b.n	80022f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	781a      	ldrb	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d034      	beq.n	80022a4 <HAL_I2C_Mem_Write+0x1c8>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223e:	2b00      	cmp	r3, #0
 8002240:	d130      	bne.n	80022a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	2200      	movs	r2, #0
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 fa3f 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e04d      	b.n	80022f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	2bff      	cmp	r3, #255	; 0xff
 8002264:	d90e      	bls.n	8002284 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	22ff      	movs	r2, #255	; 0xff
 800226a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002270:	b2da      	uxtb	r2, r3
 8002272:	8979      	ldrh	r1, [r7, #10]
 8002274:	2300      	movs	r3, #0
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 fb49 	bl	8002914 <I2C_TransferConfig>
 8002282:	e00f      	b.n	80022a4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002292:	b2da      	uxtb	r2, r3
 8002294:	8979      	ldrh	r1, [r7, #10]
 8002296:	2300      	movs	r3, #0
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 fb38 	bl	8002914 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d19e      	bne.n	80021ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fa8c 	bl	80027d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e01a      	b.n	80022f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2220      	movs	r2, #32
 80022c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <HAL_I2C_Mem_Write+0x224>)
 80022d6:	400b      	ands	r3, r1
 80022d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2220      	movs	r2, #32
 80022de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e000      	b.n	80022f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022f6:	2302      	movs	r3, #2
  }
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	fe00e800 	.word	0xfe00e800

08002304 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	4608      	mov	r0, r1
 800230e:	4611      	mov	r1, r2
 8002310:	461a      	mov	r2, r3
 8002312:	4603      	mov	r3, r0
 8002314:	817b      	strh	r3, [r7, #10]
 8002316:	460b      	mov	r3, r1
 8002318:	813b      	strh	r3, [r7, #8]
 800231a:	4613      	mov	r3, r2
 800231c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b20      	cmp	r3, #32
 8002328:	f040 80fd 	bne.w	8002526 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_I2C_Mem_Read+0x34>
 8002332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002334:	2b00      	cmp	r3, #0
 8002336:	d105      	bne.n	8002344 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800233e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0f1      	b.n	8002528 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_I2C_Mem_Read+0x4e>
 800234e:	2302      	movs	r3, #2
 8002350:	e0ea      	b.n	8002528 <HAL_I2C_Mem_Read+0x224>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800235a:	f7fe fcab 	bl	8000cb4 <HAL_GetTick>
 800235e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2319      	movs	r3, #25
 8002366:	2201      	movs	r2, #1
 8002368:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f9af 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0d5      	b.n	8002528 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2222      	movs	r2, #34	; 0x22
 8002380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2240      	movs	r2, #64	; 0x40
 8002388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a3a      	ldr	r2, [r7, #32]
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800239c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023a4:	88f8      	ldrh	r0, [r7, #6]
 80023a6:	893a      	ldrh	r2, [r7, #8]
 80023a8:	8979      	ldrh	r1, [r7, #10]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	4603      	mov	r3, r0
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f913 	bl	80025e0 <I2C_RequestMemoryRead>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0ad      	b.n	8002528 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2bff      	cmp	r3, #255	; 0xff
 80023d4:	d90e      	bls.n	80023f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	22ff      	movs	r2, #255	; 0xff
 80023da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	8979      	ldrh	r1, [r7, #10]
 80023e4:	4b52      	ldr	r3, [pc, #328]	; (8002530 <HAL_I2C_Mem_Read+0x22c>)
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 fa91 	bl	8002914 <I2C_TransferConfig>
 80023f2:	e00f      	b.n	8002414 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	b2da      	uxtb	r2, r3
 8002404:	8979      	ldrh	r1, [r7, #10]
 8002406:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <HAL_I2C_Mem_Read+0x22c>)
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fa80 	bl	8002914 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241a:	2200      	movs	r2, #0
 800241c:	2104      	movs	r1, #4
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f956 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e07c      	b.n	8002528 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d034      	beq.n	80024d4 <HAL_I2C_Mem_Read+0x1d0>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	2b00      	cmp	r3, #0
 8002470:	d130      	bne.n	80024d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002478:	2200      	movs	r2, #0
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f927 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e04d      	b.n	8002528 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	2bff      	cmp	r3, #255	; 0xff
 8002494:	d90e      	bls.n	80024b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	22ff      	movs	r2, #255	; 0xff
 800249a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	8979      	ldrh	r1, [r7, #10]
 80024a4:	2300      	movs	r3, #0
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 fa31 	bl	8002914 <I2C_TransferConfig>
 80024b2:	e00f      	b.n	80024d4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	8979      	ldrh	r1, [r7, #10]
 80024c6:	2300      	movs	r3, #0
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fa20 	bl	8002914 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d19a      	bne.n	8002414 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f974 	bl	80027d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e01a      	b.n	8002528 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2220      	movs	r2, #32
 80024f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6859      	ldr	r1, [r3, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_I2C_Mem_Read+0x230>)
 8002506:	400b      	ands	r3, r1
 8002508:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	e000      	b.n	8002528 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002526:	2302      	movs	r3, #2
  }
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	80002400 	.word	0x80002400
 8002534:	fe00e800 	.word	0xfe00e800

08002538 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	4608      	mov	r0, r1
 8002542:	4611      	mov	r1, r2
 8002544:	461a      	mov	r2, r3
 8002546:	4603      	mov	r3, r0
 8002548:	817b      	strh	r3, [r7, #10]
 800254a:	460b      	mov	r3, r1
 800254c:	813b      	strh	r3, [r7, #8]
 800254e:	4613      	mov	r3, r2
 8002550:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	8979      	ldrh	r1, [r7, #10]
 8002558:	4b20      	ldr	r3, [pc, #128]	; (80025dc <I2C_RequestMemoryWrite+0xa4>)
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f9d7 	bl	8002914 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	69b9      	ldr	r1, [r7, #24]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f8f0 	bl	8002750 <I2C_WaitOnTXISFlagUntilTimeout>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e02c      	b.n	80025d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800257a:	88fb      	ldrh	r3, [r7, #6]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d105      	bne.n	800258c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002580:	893b      	ldrh	r3, [r7, #8]
 8002582:	b2da      	uxtb	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	629a      	str	r2, [r3, #40]	; 0x28
 800258a:	e015      	b.n	80025b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800258c:	893b      	ldrh	r3, [r7, #8]
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	b29b      	uxth	r3, r3
 8002592:	b2da      	uxtb	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	69b9      	ldr	r1, [r7, #24]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f8d6 	bl	8002750 <I2C_WaitOnTXISFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e012      	b.n	80025d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025ae:	893b      	ldrh	r3, [r7, #8]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2200      	movs	r2, #0
 80025c0:	2180      	movs	r1, #128	; 0x80
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f884 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	80002000 	.word	0x80002000

080025e0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	4608      	mov	r0, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	817b      	strh	r3, [r7, #10]
 80025f2:	460b      	mov	r3, r1
 80025f4:	813b      	strh	r3, [r7, #8]
 80025f6:	4613      	mov	r3, r2
 80025f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	8979      	ldrh	r1, [r7, #10]
 8002600:	4b20      	ldr	r3, [pc, #128]	; (8002684 <I2C_RequestMemoryRead+0xa4>)
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	2300      	movs	r3, #0
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f984 	bl	8002914 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	69b9      	ldr	r1, [r7, #24]
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 f89d 	bl	8002750 <I2C_WaitOnTXISFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e02c      	b.n	800267a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d105      	bne.n	8002632 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002626:	893b      	ldrh	r3, [r7, #8]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
 8002630:	e015      	b.n	800265e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002632:	893b      	ldrh	r3, [r7, #8]
 8002634:	0a1b      	lsrs	r3, r3, #8
 8002636:	b29b      	uxth	r3, r3
 8002638:	b2da      	uxtb	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	69b9      	ldr	r1, [r7, #24]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f883 	bl	8002750 <I2C_WaitOnTXISFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e012      	b.n	800267a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002654:	893b      	ldrh	r3, [r7, #8]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2200      	movs	r2, #0
 8002666:	2140      	movs	r1, #64	; 0x40
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f831 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	80002000 	.word	0x80002000

08002688 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b02      	cmp	r3, #2
 800269c:	d103      	bne.n	80026a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2200      	movs	r2, #0
 80026a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d007      	beq.n	80026c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	619a      	str	r2, [r3, #24]
  }
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e0:	e022      	b.n	8002728 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026e8:	d01e      	beq.n	8002728 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ea:	f7fe fae3 	bl	8000cb4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d302      	bcc.n	8002700 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d113      	bne.n	8002728 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	f043 0220 	orr.w	r2, r3, #32
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e00f      	b.n	8002748 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	4013      	ands	r3, r2
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	429a      	cmp	r2, r3
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	429a      	cmp	r2, r3
 8002744:	d0cd      	beq.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800275c:	e02c      	b.n	80027b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f870 	bl	8002848 <I2C_IsAcknowledgeFailed>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e02a      	b.n	80027c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002778:	d01e      	beq.n	80027b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277a:	f7fe fa9b 	bl	8000cb4 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	429a      	cmp	r2, r3
 8002788:	d302      	bcc.n	8002790 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d113      	bne.n	80027b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002794:	f043 0220 	orr.w	r2, r3, #32
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e007      	b.n	80027c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d1cb      	bne.n	800275e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027dc:	e028      	b.n	8002830 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f830 	bl	8002848 <I2C_IsAcknowledgeFailed>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e026      	b.n	8002840 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f2:	f7fe fa5f 	bl	8000cb4 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d302      	bcc.n	8002808 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d113      	bne.n	8002830 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e007      	b.n	8002840 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b20      	cmp	r3, #32
 800283c:	d1cf      	bne.n	80027de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 0310 	and.w	r3, r3, #16
 800285e:	2b10      	cmp	r3, #16
 8002860:	d151      	bne.n	8002906 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002862:	e022      	b.n	80028aa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800286a:	d01e      	beq.n	80028aa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286c:	f7fe fa22 	bl	8000cb4 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	429a      	cmp	r2, r3
 800287a:	d302      	bcc.n	8002882 <I2C_IsAcknowledgeFailed+0x3a>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d113      	bne.n	80028aa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f043 0220 	orr.w	r2, r3, #32
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e02e      	b.n	8002908 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d1d5      	bne.n	8002864 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2210      	movs	r2, #16
 80028be:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2220      	movs	r2, #32
 80028c6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f7ff fedd 	bl	8002688 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <I2C_IsAcknowledgeFailed+0xc8>)
 80028da:	400b      	ands	r3, r1
 80028dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	f043 0204 	orr.w	r2, r3, #4
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2220      	movs	r2, #32
 80028ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	fe00e800 	.word	0xfe00e800

08002914 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	817b      	strh	r3, [r7, #10]
 8002922:	4613      	mov	r3, r2
 8002924:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	0d5b      	lsrs	r3, r3, #21
 8002930:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002934:	4b0d      	ldr	r3, [pc, #52]	; (800296c <I2C_TransferConfig+0x58>)
 8002936:	430b      	orrs	r3, r1
 8002938:	43db      	mvns	r3, r3
 800293a:	ea02 0103 	and.w	r1, r2, r3
 800293e:	897b      	ldrh	r3, [r7, #10]
 8002940:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002944:	7a7b      	ldrb	r3, [r7, #9]
 8002946:	041b      	lsls	r3, r3, #16
 8002948:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	431a      	orrs	r2, r3
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	431a      	orrs	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	03ff63ff 	.word	0x03ff63ff

08002970 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b20      	cmp	r3, #32
 8002984:	d138      	bne.n	80029f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002990:	2302      	movs	r3, #2
 8002992:	e032      	b.n	80029fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2224      	movs	r2, #36	; 0x24
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e000      	b.n	80029fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029f8:	2302      	movs	r3, #2
  }
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d139      	bne.n	8002a90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e033      	b.n	8002a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2224      	movs	r2, #36	; 0x24
 8002a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0201 	bic.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e000      	b.n	8002a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
  }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aa0:	b08f      	sub	sp, #60	; 0x3c
 8002aa2:	af0a      	add	r7, sp, #40	; 0x28
 8002aa4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e116      	b.n	8002cde <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f007 fb8a 	bl	800a1e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d102      	bne.n	8002aea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 fdd5 	bl	800669e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	603b      	str	r3, [r7, #0]
 8002afa:	687e      	ldr	r6, [r7, #4]
 8002afc:	466d      	mov	r5, sp
 8002afe:	f106 0410 	add.w	r4, r6, #16
 8002b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b12:	1d33      	adds	r3, r6, #4
 8002b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b16:	6838      	ldr	r0, [r7, #0]
 8002b18:	f003 fce7 	bl	80064ea <USB_CoreInit>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d005      	beq.n	8002b2e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2202      	movs	r2, #2
 8002b26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e0d7      	b.n	8002cde <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2100      	movs	r1, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f003 fdc3 	bl	80066c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	73fb      	strb	r3, [r7, #15]
 8002b3e:	e04a      	b.n	8002bd6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	333d      	adds	r3, #61	; 0x3d
 8002b50:	2201      	movs	r2, #1
 8002b52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	333c      	adds	r3, #60	; 0x3c
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	b298      	uxth	r0, r3
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	3342      	adds	r3, #66	; 0x42
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	333f      	adds	r3, #63	; 0x3f
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3344      	adds	r3, #68	; 0x44
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3348      	adds	r3, #72	; 0x48
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	3350      	adds	r3, #80	; 0x50
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	73fb      	strb	r3, [r7, #15]
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d3af      	bcc.n	8002b40 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be0:	2300      	movs	r3, #0
 8002be2:	73fb      	strb	r3, [r7, #15]
 8002be4:	e044      	b.n	8002c70 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002be6:	7bfa      	ldrb	r2, [r7, #15]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c12:	7bfa      	ldrb	r2, [r7, #15]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d3b5      	bcc.n	8002be6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	687e      	ldr	r6, [r7, #4]
 8002c82:	466d      	mov	r5, sp
 8002c84:	f106 0410 	add.w	r4, r6, #16
 8002c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c94:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c98:	1d33      	adds	r3, r6, #4
 8002c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c9c:	6838      	ldr	r0, [r7, #0]
 8002c9e:	f003 fd39 	bl	8006714 <USB_DevInit>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e014      	b.n	8002cde <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d102      	bne.n	8002cd2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 ff49 	bl	8003b64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f004 fcbb 	bl	8007652 <USB_DevDisconnect>

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ce6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_PCD_Start+0x1c>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e01c      	b.n	8002d3c <HAL_PCD_Start+0x56>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d105      	bne.n	8002d1e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f003 fcaa 	bl	800667c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f004 fc6f 	bl	8007610 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b08d      	sub	sp, #52	; 0x34
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f004 fd2d 	bl	80077ba <USB_GetMode>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f040 838f 	bne.w	8003486 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f004 fc91 	bl	8007694 <USB_ReadInterrupts>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8385 	beq.w	8003484 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f004 fc88 	bl	8007694 <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d107      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f002 0202 	and.w	r2, r2, #2
 8002d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f004 fc76 	bl	8007694 <USB_ReadInterrupts>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d161      	bne.n	8002e76 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699a      	ldr	r2, [r3, #24]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0210 	bic.w	r2, r2, #16
 8002dc0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	f003 020f 	and.w	r2, r3, #15
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	3304      	adds	r3, #4
 8002de0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	0c5b      	lsrs	r3, r3, #17
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d124      	bne.n	8002e38 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d035      	beq.n	8002e66 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	6a38      	ldr	r0, [r7, #32]
 8002e0e:	f004 fadc 	bl	80073ca <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e1e:	441a      	add	r2, r3
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e30:	441a      	add	r2, r3
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	619a      	str	r2, [r3, #24]
 8002e36:	e016      	b.n	8002e66 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	0c5b      	lsrs	r3, r3, #17
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	2b06      	cmp	r3, #6
 8002e42:	d110      	bne.n	8002e66 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	6a38      	ldr	r0, [r7, #32]
 8002e50:	f004 fabb 	bl	80073ca <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	699a      	ldr	r2, [r3, #24]
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	091b      	lsrs	r3, r3, #4
 8002e5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e60:	441a      	add	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699a      	ldr	r2, [r3, #24]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0210 	orr.w	r2, r2, #16
 8002e74:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f004 fc0a 	bl	8007694 <USB_ReadInterrupts>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e8a:	d16e      	bne.n	8002f6a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f004 fc10 	bl	80076ba <USB_ReadDevAllOutEpInterrupt>
 8002e9a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e9c:	e062      	b.n	8002f64 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d057      	beq.n	8002f58 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f004 fc35 	bl	8007722 <USB_ReadDevOutEPInterrupt>
 8002eb8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00c      	beq.n	8002ede <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ed6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fd69 	bl	80039b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00c      	beq.n	8002f02 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fda5 	bl	8003a4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f18:	461a      	mov	r2, r3
 8002f1a:	2310      	movs	r3, #16
 8002f1c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f34:	461a      	mov	r2, r3
 8002f36:	2320      	movs	r3, #32
 8002f38:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d009      	beq.n	8002f58 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f50:	461a      	mov	r2, r3
 8002f52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f56:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d199      	bne.n	8002e9e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f004 fb90 	bl	8007694 <USB_ReadInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f7e:	f040 8087 	bne.w	8003090 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f004 fbb1 	bl	80076ee <USB_ReadDevAllInEpInterrupt>
 8002f8c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f92:	e07a      	b.n	800308a <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d06f      	beq.n	800307e <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f004 fbd8 	bl	800775e <USB_ReadDevInEPInterrupt>
 8002fae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d020      	beq.n	8002ffc <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69f9      	ldr	r1, [r7, #28]
 8002fd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fda:	4013      	ands	r3, r2
 8002fdc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fea:	461a      	mov	r2, r3
 8002fec:	2301      	movs	r3, #1
 8002fee:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f007 f9b3 	bl	800a362 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	4413      	add	r3, r2
 800300e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003012:	461a      	mov	r2, r3
 8003014:	2308      	movs	r3, #8
 8003016:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	d008      	beq.n	8003034 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	4413      	add	r3, r2
 800302a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800302e:	461a      	mov	r2, r3
 8003030:	2310      	movs	r3, #16
 8003032:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d008      	beq.n	8003050 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	4413      	add	r3, r2
 8003046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800304a:	461a      	mov	r2, r3
 800304c:	2340      	movs	r3, #64	; 0x40
 800304e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	4413      	add	r3, r2
 8003062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003066:	461a      	mov	r2, r3
 8003068:	2302      	movs	r3, #2
 800306a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003076:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fc11 	bl	80038a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	3301      	adds	r3, #1
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	2b00      	cmp	r3, #0
 800308e:	d181      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f004 fafd 	bl	8007694 <USB_ReadInterrupts>
 800309a:	4603      	mov	r3, r0
 800309c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030a4:	d122      	bne.n	80030ec <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	69fa      	ldr	r2, [r7, #28]
 80030b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d108      	bne.n	80030d6 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030cc:	2100      	movs	r1, #0
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f007 fc4c 	bl	800a96c <HAL_PCDEx_LPM_Callback>
 80030d4:	e002      	b.n	80030dc <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f007 f9b0 	bl	800a43c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f004 facf 	bl	8007694 <USB_ReadInterrupts>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003100:	d112      	bne.n	8003128 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b01      	cmp	r3, #1
 8003110:	d102      	bne.n	8003118 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f007 f96c 	bl	800a3f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003126:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f004 fab1 	bl	8007694 <USB_ReadInterrupts>
 8003132:	4603      	mov	r3, r0
 8003134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800313c:	d121      	bne.n	8003182 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695a      	ldr	r2, [r3, #20]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800314c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d111      	bne.n	800317c <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	089b      	lsrs	r3, r3, #2
 8003168:	f003 020f 	and.w	r2, r3, #15
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003172:	2101      	movs	r1, #1
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f007 fbf9 	bl	800a96c <HAL_PCDEx_LPM_Callback>
 800317a:	e002      	b.n	8003182 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f007 f937 	bl	800a3f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f004 fa84 	bl	8007694 <USB_ReadInterrupts>
 800318c:	4603      	mov	r3, r0
 800318e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003196:	f040 80c5 	bne.w	8003324 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2110      	movs	r1, #16
 80031b4:	4618      	mov	r0, r3
 80031b6:	f003 fbf9 	bl	80069ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ba:	2300      	movs	r3, #0
 80031bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031be:	e056      	b.n	800326e <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031cc:	461a      	mov	r2, r3
 80031ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031d2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e4:	0151      	lsls	r1, r2, #5
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	440a      	add	r2, r1
 80031ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031f2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80031f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003204:	0151      	lsls	r1, r2, #5
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	440a      	add	r2, r1
 800320a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800320e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003212:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003220:	461a      	mov	r2, r3
 8003222:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003226:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003238:	0151      	lsls	r1, r2, #5
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	440a      	add	r2, r1
 800323e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003242:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003246:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003258:	0151      	lsls	r1, r2, #5
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	440a      	add	r2, r1
 800325e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003262:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003266:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326a:	3301      	adds	r3, #1
 800326c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003274:	429a      	cmp	r2, r3
 8003276:	d3a3      	bcc.n	80031c0 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003286:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800328a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	2b00      	cmp	r3, #0
 8003292:	d016      	beq.n	80032c2 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800329a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032a4:	f043 030b 	orr.w	r3, r3, #11
 80032a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ba:	f043 030b 	orr.w	r3, r3, #11
 80032be:	6453      	str	r3, [r2, #68]	; 0x44
 80032c0:	e015      	b.n	80032ee <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032d4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80032d8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e8:	f043 030b 	orr.w	r3, r3, #11
 80032ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003300:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f004 fa84 	bl	800781c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003322:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f004 f9b3 	bl	8007694 <USB_ReadInterrupts>
 800332e:	4603      	mov	r3, r0
 8003330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003338:	d124      	bne.n	8003384 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f004 fa49 	bl	80077d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f003 fb90 	bl	8006a6e <USB_GetDevSpeed>
 800334e:	4603      	mov	r3, r0
 8003350:	461a      	mov	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681c      	ldr	r4, [r3, #0]
 800335a:	f001 f9ef 	bl	800473c <HAL_RCC_GetHCLKFreq>
 800335e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003364:	b2db      	uxtb	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	4620      	mov	r0, r4
 800336a:	f003 f8eb 	bl	8006544 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f007 f81f 	bl	800a3b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003382:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f004 f983 	bl	8007694 <USB_ReadInterrupts>
 800338e:	4603      	mov	r3, r0
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b08      	cmp	r3, #8
 8003396:	d10a      	bne.n	80033ae <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f006 fffc 	bl	800a396 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f002 0208 	and.w	r2, r2, #8
 80033ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f004 f96e 	bl	8007694 <USB_ReadInterrupts>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033c2:	d10f      	bne.n	80033e4 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	4619      	mov	r1, r3
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f007 f86e 	bl	800a4b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80033e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f004 f953 	bl	8007694 <USB_ReadInterrupts>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033f8:	d10f      	bne.n	800341a <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	b2db      	uxtb	r3, r3
 8003402:	4619      	mov	r1, r3
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f007 f841 	bl	800a48c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695a      	ldr	r2, [r3, #20]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003418:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f004 f938 	bl	8007694 <USB_ReadInterrupts>
 8003424:	4603      	mov	r3, r0
 8003426:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800342a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342e:	d10a      	bne.n	8003446 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f007 f84f 	bl	800a4d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003444:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f004 f922 	bl	8007694 <USB_ReadInterrupts>
 8003450:	4603      	mov	r3, r0
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b04      	cmp	r3, #4
 8003458:	d115      	bne.n	8003486 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f007 f83f 	bl	800a4f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	e000      	b.n	8003486 <HAL_PCD_IRQHandler+0x742>
      return;
 8003484:	bf00      	nop
    }
  }
}
 8003486:	3734      	adds	r7, #52	; 0x34
 8003488:	46bd      	mov	sp, r7
 800348a:	bd90      	pop	{r4, r7, pc}

0800348c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_PCD_SetAddress+0x1a>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e013      	b.n	80034ce <HAL_PCD_SetAddress+0x42>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f004 f880 	bl	80075c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	4608      	mov	r0, r1
 80034e0:	4611      	mov	r1, r2
 80034e2:	461a      	mov	r2, r3
 80034e4:	4603      	mov	r3, r0
 80034e6:	70fb      	strb	r3, [r7, #3]
 80034e8:	460b      	mov	r3, r1
 80034ea:	803b      	strh	r3, [r7, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	da0f      	bge.n	800351c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	f003 020f 	and.w	r2, r3, #15
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	3338      	adds	r3, #56	; 0x38
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	4413      	add	r3, r2
 8003510:	3304      	adds	r3, #4
 8003512:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	705a      	strb	r2, [r3, #1]
 800351a:	e00f      	b.n	800353c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	f003 020f 	and.w	r2, r3, #15
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	3304      	adds	r3, #4
 8003534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	b2da      	uxtb	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003548:	883a      	ldrh	r2, [r7, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	78ba      	ldrb	r2, [r7, #2]
 8003552:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	785b      	ldrb	r3, [r3, #1]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d004      	beq.n	8003566 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003566:	78bb      	ldrb	r3, [r7, #2]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d102      	bne.n	8003572 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_PCD_EP_Open+0xaa>
 800357c:	2302      	movs	r3, #2
 800357e:	e00e      	b.n	800359e <HAL_PCD_EP_Open+0xc8>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68f9      	ldr	r1, [r7, #12]
 800358e:	4618      	mov	r0, r3
 8003590:	f003 fa8c 	bl	8006aac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800359c:	7afb      	ldrb	r3, [r7, #11]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	da0f      	bge.n	80035da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	f003 020f 	and.w	r2, r3, #15
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	3338      	adds	r3, #56	; 0x38
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	3304      	adds	r3, #4
 80035d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	705a      	strb	r2, [r3, #1]
 80035d8:	e00f      	b.n	80035fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035da:	78fb      	ldrb	r3, [r7, #3]
 80035dc:	f003 020f 	and.w	r2, r3, #15
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4413      	add	r3, r2
 80035f0:	3304      	adds	r3, #4
 80035f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80035fa:	78fb      	ldrb	r3, [r7, #3]
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	b2da      	uxtb	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_PCD_EP_Close+0x6e>
 8003610:	2302      	movs	r3, #2
 8003612:	e00e      	b.n	8003632 <HAL_PCD_EP_Close+0x8c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68f9      	ldr	r1, [r7, #12]
 8003622:	4618      	mov	r0, r3
 8003624:	f003 faca 	bl	8006bbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
 8003646:	460b      	mov	r3, r1
 8003648:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800364a:	7afb      	ldrb	r3, [r7, #11]
 800364c:	f003 020f 	and.w	r2, r3, #15
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	3304      	adds	r3, #4
 8003662:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2200      	movs	r2, #0
 8003674:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2200      	movs	r2, #0
 800367a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800367c:	7afb      	ldrb	r3, [r7, #11]
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	b2da      	uxtb	r2, r3
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003688:	7afb      	ldrb	r3, [r7, #11]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6979      	ldr	r1, [r7, #20]
 8003698:	4618      	mov	r0, r3
 800369a:	f003 fd47 	bl	800712c <USB_EP0StartXfer>
 800369e:	e005      	b.n	80036ac <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6979      	ldr	r1, [r7, #20]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f003 fb64 	bl	8006d74 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b086      	sub	sp, #24
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
 80036c2:	460b      	mov	r3, r1
 80036c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036c6:	7afb      	ldrb	r3, [r7, #11]
 80036c8:	f003 020f 	and.w	r2, r3, #15
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	3338      	adds	r3, #56	; 0x38
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4413      	add	r3, r2
 80036da:	3304      	adds	r3, #4
 80036dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2200      	movs	r2, #0
 80036ee:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2201      	movs	r2, #1
 80036f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036f6:	7afb      	ldrb	r3, [r7, #11]
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003702:	7afb      	ldrb	r3, [r7, #11]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	2b00      	cmp	r3, #0
 800370a:	d106      	bne.n	800371a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6979      	ldr	r1, [r7, #20]
 8003712:	4618      	mov	r0, r3
 8003714:	f003 fd0a 	bl	800712c <USB_EP0StartXfer>
 8003718:	e005      	b.n	8003726 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6979      	ldr	r1, [r7, #20]
 8003720:	4618      	mov	r0, r3
 8003722:	f003 fb27 	bl	8006d74 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	f003 020f 	and.w	r2, r3, #15
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	d901      	bls.n	800374e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e04e      	b.n	80037ec <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800374e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003752:	2b00      	cmp	r3, #0
 8003754:	da0f      	bge.n	8003776 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	f003 020f 	and.w	r2, r3, #15
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	3338      	adds	r3, #56	; 0x38
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	4413      	add	r3, r2
 800376a:	3304      	adds	r3, #4
 800376c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	705a      	strb	r2, [r3, #1]
 8003774:	e00d      	b.n	8003792 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	4413      	add	r3, r2
 8003788:	3304      	adds	r3, #4
 800378a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_PCD_EP_SetStall+0x82>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e01c      	b.n	80037ec <HAL_PCD_EP_SetStall+0xbc>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68f9      	ldr	r1, [r7, #12]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f003 fe2b 	bl	800741c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d108      	bne.n	80037e2 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037da:	4619      	mov	r1, r3
 80037dc:	4610      	mov	r0, r2
 80037de:	f004 f81d 	bl	800781c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	f003 020f 	and.w	r2, r3, #15
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	d901      	bls.n	8003812 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e042      	b.n	8003898 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003812:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003816:	2b00      	cmp	r3, #0
 8003818:	da0f      	bge.n	800383a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	f003 020f 	and.w	r2, r3, #15
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	3338      	adds	r3, #56	; 0x38
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	4413      	add	r3, r2
 800382e:	3304      	adds	r3, #4
 8003830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	705a      	strb	r2, [r3, #1]
 8003838:	e00f      	b.n	800385a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	f003 020f 	and.w	r2, r3, #15
 8003840:	4613      	mov	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	4413      	add	r3, r2
 8003850:	3304      	adds	r3, #4
 8003852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	b2da      	uxtb	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_PCD_EP_ClrStall+0x86>
 8003876:	2302      	movs	r3, #2
 8003878:	e00e      	b.n	8003898 <HAL_PCD_EP_ClrStall+0xa4>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68f9      	ldr	r1, [r7, #12]
 8003888:	4618      	mov	r0, r3
 800388a:	f003 fe35 	bl	80074f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	4613      	mov	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	3338      	adds	r3, #56	; 0x38
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4413      	add	r3, r2
 80038c4:	3304      	adds	r3, #4
 80038c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d901      	bls.n	80038d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e067      	b.n	80039a8 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d902      	bls.n	80038f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	3303      	adds	r3, #3
 80038f8:	089b      	lsrs	r3, r3, #2
 80038fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038fc:	e026      	b.n	800394c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	429a      	cmp	r2, r3
 8003912:	d902      	bls.n	800391a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3303      	adds	r3, #3
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	68d9      	ldr	r1, [r3, #12]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	b2da      	uxtb	r2, r3
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	b29b      	uxth	r3, r3
 800392e:	6978      	ldr	r0, [r7, #20]
 8003930:	f003 fd1a 	bl	8007368 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	441a      	add	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	699a      	ldr	r2, [r3, #24]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	441a      	add	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	b29b      	uxth	r3, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	429a      	cmp	r2, r3
 8003960:	d809      	bhi.n	8003976 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800396a:	429a      	cmp	r2, r3
 800396c:	d203      	bcs.n	8003976 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1c3      	bne.n	80038fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	429a      	cmp	r2, r3
 8003980:	d811      	bhi.n	80039a6 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	2201      	movs	r2, #1
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	43db      	mvns	r3, r3
 800399c:	6939      	ldr	r1, [r7, #16]
 800399e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039a2:	4013      	ands	r3, r2
 80039a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3720      	adds	r7, #32
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	333c      	adds	r3, #60	; 0x3c
 80039c8:	3304      	adds	r3, #4
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4a19      	ldr	r2, [pc, #100]	; (8003a48 <PCD_EP_OutXfrComplete_int+0x98>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d124      	bne.n	8003a30 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fc:	461a      	mov	r2, r3
 80039fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a02:	6093      	str	r3, [r2, #8]
 8003a04:	e01a      	b.n	8003a3c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2320      	movs	r3, #32
 8003a20:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	4619      	mov	r1, r3
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f006 fc7f 	bl	800a32c <HAL_PCD_DataOutStageCallback>
 8003a2e:	e005      	b.n	8003a3c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	4619      	mov	r1, r3
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f006 fc78 	bl	800a32c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	4f54310a 	.word	0x4f54310a

08003a4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	333c      	adds	r3, #60	; 0x3c
 8003a64:	3304      	adds	r3, #4
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4a0c      	ldr	r2, [pc, #48]	; (8003ab0 <PCD_EP_OutSetupPacket_int+0x64>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d90e      	bls.n	8003aa0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d009      	beq.n	8003aa0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f006 fc31 	bl	800a308 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	4f54300a 	.word	0x4f54300a

08003ab4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	70fb      	strb	r3, [r7, #3]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ad2:	883b      	ldrh	r3, [r7, #0]
 8003ad4:	0419      	lsls	r1, r3, #16
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
 8003ae0:	e028      	b.n	8003b34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	0c1b      	lsrs	r3, r3, #16
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	4413      	add	r3, r2
 8003aee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]
 8003af4:	e00d      	b.n	8003b12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	3340      	adds	r3, #64	; 0x40
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	0c1b      	lsrs	r3, r3, #16
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	4413      	add	r3, r2
 8003b0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
 8003b12:	7bfa      	ldrb	r2, [r7, #15]
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d3ec      	bcc.n	8003af6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b1c:	883b      	ldrh	r3, [r7, #0]
 8003b1e:	0418      	lsls	r0, r3, #16
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6819      	ldr	r1, [r3, #0]
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	4302      	orrs	r2, r0
 8003b2c:	3340      	adds	r3, #64	; 0x40
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	887a      	ldrh	r2, [r7, #2]
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b96:	f043 0303 	orr.w	r3, r3, #3
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bb0:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40007000 	.word	0x40007000

08003bc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd6:	d130      	bne.n	8003c3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bd8:	4b23      	ldr	r3, [pc, #140]	; (8003c68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be4:	d038      	beq.n	8003c58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003be6:	4b20      	ldr	r3, [pc, #128]	; (8003c68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bee:	4a1e      	ldr	r2, [pc, #120]	; (8003c68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bf4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bf6:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2232      	movs	r2, #50	; 0x32
 8003bfc:	fb02 f303 	mul.w	r3, r2, r3
 8003c00:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	0c9b      	lsrs	r3, r3, #18
 8003c08:	3301      	adds	r3, #1
 8003c0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c0c:	e002      	b.n	8003c14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c14:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c20:	d102      	bne.n	8003c28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1f2      	bne.n	8003c0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c28:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c34:	d110      	bne.n	8003c58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e00f      	b.n	8003c5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c46:	d007      	beq.n	8003c58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c48:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c50:	4a05      	ldr	r2, [pc, #20]	; (8003c68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40007000 	.word	0x40007000
 8003c6c:	20000144 	.word	0x20000144
 8003c70:	431bde83 	.word	0x431bde83

08003c74 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4a04      	ldr	r2, [pc, #16]	; (8003c90 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c82:	6053      	str	r3, [r2, #4]
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40007000 	.word	0x40007000

08003c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e3d4      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca6:	4ba1      	ldr	r3, [pc, #644]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cb0:	4b9e      	ldr	r3, [pc, #632]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80e4 	beq.w	8003e90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <HAL_RCC_OscConfig+0x4a>
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b0c      	cmp	r3, #12
 8003cd2:	f040 808b 	bne.w	8003dec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	f040 8087 	bne.w	8003dec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cde:	4b93      	ldr	r3, [pc, #588]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x62>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e3ac      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1a      	ldr	r2, [r3, #32]
 8003cfa:	4b8c      	ldr	r3, [pc, #560]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d004      	beq.n	8003d10 <HAL_RCC_OscConfig+0x7c>
 8003d06:	4b89      	ldr	r3, [pc, #548]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d0e:	e005      	b.n	8003d1c <HAL_RCC_OscConfig+0x88>
 8003d10:	4b86      	ldr	r3, [pc, #536]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d223      	bcs.n	8003d68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fd41 	bl	80047ac <RCC_SetFlashLatencyFromMSIRange>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e38d      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d34:	4b7d      	ldr	r3, [pc, #500]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a7c      	ldr	r2, [pc, #496]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003d3a:	f043 0308 	orr.w	r3, r3, #8
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	4b7a      	ldr	r3, [pc, #488]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	4977      	ldr	r1, [pc, #476]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d52:	4b76      	ldr	r3, [pc, #472]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	4972      	ldr	r1, [pc, #456]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	604b      	str	r3, [r1, #4]
 8003d66:	e025      	b.n	8003db4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d68:	4b70      	ldr	r3, [pc, #448]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a6f      	ldr	r2, [pc, #444]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003d6e:	f043 0308 	orr.w	r3, r3, #8
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	4b6d      	ldr	r3, [pc, #436]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	496a      	ldr	r1, [pc, #424]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d86:	4b69      	ldr	r3, [pc, #420]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	4965      	ldr	r1, [pc, #404]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d109      	bne.n	8003db4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fd01 	bl	80047ac <RCC_SetFlashLatencyFromMSIRange>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e34d      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003db4:	f000 fc36 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4b5c      	ldr	r3, [pc, #368]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	091b      	lsrs	r3, r3, #4
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	495a      	ldr	r1, [pc, #360]	; (8003f30 <HAL_RCC_OscConfig+0x29c>)
 8003dc6:	5ccb      	ldrb	r3, [r1, r3]
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd0:	4a58      	ldr	r2, [pc, #352]	; (8003f34 <HAL_RCC_OscConfig+0x2a0>)
 8003dd2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dd4:	4b58      	ldr	r3, [pc, #352]	; (8003f38 <HAL_RCC_OscConfig+0x2a4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fc ff1b 	bl	8000c14 <HAL_InitTick>
 8003dde:	4603      	mov	r3, r0
 8003de0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d052      	beq.n	8003e8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	e331      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d032      	beq.n	8003e5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003df4:	4b4d      	ldr	r3, [pc, #308]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a4c      	ldr	r2, [pc, #304]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e00:	f7fc ff58 	bl	8000cb4 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e08:	f7fc ff54 	bl	8000cb4 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e31a      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e1a:	4b44      	ldr	r3, [pc, #272]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e26:	4b41      	ldr	r3, [pc, #260]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a40      	ldr	r2, [pc, #256]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003e2c:	f043 0308 	orr.w	r3, r3, #8
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	4b3e      	ldr	r3, [pc, #248]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	493b      	ldr	r1, [pc, #236]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e44:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	4936      	ldr	r1, [pc, #216]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	604b      	str	r3, [r1, #4]
 8003e58:	e01a      	b.n	8003e90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e5a:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a33      	ldr	r2, [pc, #204]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e66:	f7fc ff25 	bl	8000cb4 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e6e:	f7fc ff21 	bl	8000cb4 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e2e7      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e80:	4b2a      	ldr	r3, [pc, #168]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f0      	bne.n	8003e6e <HAL_RCC_OscConfig+0x1da>
 8003e8c:	e000      	b.n	8003e90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d074      	beq.n	8003f86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d005      	beq.n	8003eae <HAL_RCC_OscConfig+0x21a>
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b0c      	cmp	r3, #12
 8003ea6:	d10e      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d10b      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eae:	4b1f      	ldr	r3, [pc, #124]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d064      	beq.n	8003f84 <HAL_RCC_OscConfig+0x2f0>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d160      	bne.n	8003f84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e2c4      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ece:	d106      	bne.n	8003ede <HAL_RCC_OscConfig+0x24a>
 8003ed0:	4b16      	ldr	r3, [pc, #88]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	e01d      	b.n	8003f1a <HAL_RCC_OscConfig+0x286>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee6:	d10c      	bne.n	8003f02 <HAL_RCC_OscConfig+0x26e>
 8003ee8:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a0f      	ldr	r2, [pc, #60]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003eee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0c      	ldr	r2, [pc, #48]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	e00b      	b.n	8003f1a <HAL_RCC_OscConfig+0x286>
 8003f02:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a09      	ldr	r2, [pc, #36]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a06      	ldr	r2, [pc, #24]	; (8003f2c <HAL_RCC_OscConfig+0x298>)
 8003f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d01c      	beq.n	8003f5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f22:	f7fc fec7 	bl	8000cb4 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f28:	e011      	b.n	8003f4e <HAL_RCC_OscConfig+0x2ba>
 8003f2a:	bf00      	nop
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	0800b69c 	.word	0x0800b69c
 8003f34:	20000144 	.word	0x20000144
 8003f38:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f3c:	f7fc feba 	bl	8000cb4 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	; 0x64
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e280      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f4e:	4baf      	ldr	r3, [pc, #700]	; (800420c <HAL_RCC_OscConfig+0x578>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x2a8>
 8003f5a:	e014      	b.n	8003f86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fc feaa 	bl	8000cb4 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f64:	f7fc fea6 	bl	8000cb4 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b64      	cmp	r3, #100	; 0x64
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e26c      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f76:	4ba5      	ldr	r3, [pc, #660]	; (800420c <HAL_RCC_OscConfig+0x578>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x2d0>
 8003f82:	e000      	b.n	8003f86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d060      	beq.n	8004054 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x310>
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	2b0c      	cmp	r3, #12
 8003f9c:	d119      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d116      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa4:	4b99      	ldr	r3, [pc, #612]	; (800420c <HAL_RCC_OscConfig+0x578>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_OscConfig+0x328>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e249      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fbc:	4b93      	ldr	r3, [pc, #588]	; (800420c <HAL_RCC_OscConfig+0x578>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	4990      	ldr	r1, [pc, #576]	; (800420c <HAL_RCC_OscConfig+0x578>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd0:	e040      	b.n	8004054 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d023      	beq.n	8004022 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fda:	4b8c      	ldr	r3, [pc, #560]	; (800420c <HAL_RCC_OscConfig+0x578>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a8b      	ldr	r2, [pc, #556]	; (800420c <HAL_RCC_OscConfig+0x578>)
 8003fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe6:	f7fc fe65 	bl	8000cb4 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fee:	f7fc fe61 	bl	8000cb4 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e227      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004000:	4b82      	ldr	r3, [pc, #520]	; (800420c <HAL_RCC_OscConfig+0x578>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400c:	4b7f      	ldr	r3, [pc, #508]	; (800420c <HAL_RCC_OscConfig+0x578>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	497c      	ldr	r1, [pc, #496]	; (800420c <HAL_RCC_OscConfig+0x578>)
 800401c:	4313      	orrs	r3, r2
 800401e:	604b      	str	r3, [r1, #4]
 8004020:	e018      	b.n	8004054 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004022:	4b7a      	ldr	r3, [pc, #488]	; (800420c <HAL_RCC_OscConfig+0x578>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a79      	ldr	r2, [pc, #484]	; (800420c <HAL_RCC_OscConfig+0x578>)
 8004028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800402c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fc fe41 	bl	8000cb4 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004036:	f7fc fe3d 	bl	8000cb4 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e203      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004048:	4b70      	ldr	r3, [pc, #448]	; (800420c <HAL_RCC_OscConfig+0x578>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f0      	bne.n	8004036 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d03c      	beq.n	80040da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01c      	beq.n	80040a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004068:	4b68      	ldr	r3, [pc, #416]	; (800420c <HAL_RCC_OscConfig+0x578>)
 800406a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800406e:	4a67      	ldr	r2, [pc, #412]	; (800420c <HAL_RCC_OscConfig+0x578>)
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004078:	f7fc fe1c 	bl	8000cb4 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004080:	f7fc fe18 	bl	8000cb4 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e1de      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004092:	4b5e      	ldr	r3, [pc, #376]	; (800420c <HAL_RCC_OscConfig+0x578>)
 8004094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ef      	beq.n	8004080 <HAL_RCC_OscConfig+0x3ec>
 80040a0:	e01b      	b.n	80040da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a2:	4b5a      	ldr	r3, [pc, #360]	; (800420c <HAL_RCC_OscConfig+0x578>)
 80040a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a8:	4a58      	ldr	r2, [pc, #352]	; (800420c <HAL_RCC_OscConfig+0x578>)
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b2:	f7fc fdff 	bl	8000cb4 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ba:	f7fc fdfb 	bl	8000cb4 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e1c1      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040cc:	4b4f      	ldr	r3, [pc, #316]	; (800420c <HAL_RCC_OscConfig+0x578>)
 80040ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1ef      	bne.n	80040ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80a6 	beq.w	8004234 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040e8:	2300      	movs	r3, #0
 80040ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040ec:	4b47      	ldr	r3, [pc, #284]	; (800420c <HAL_RCC_OscConfig+0x578>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10d      	bne.n	8004114 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f8:	4b44      	ldr	r3, [pc, #272]	; (800420c <HAL_RCC_OscConfig+0x578>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fc:	4a43      	ldr	r2, [pc, #268]	; (800420c <HAL_RCC_OscConfig+0x578>)
 80040fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004102:	6593      	str	r3, [r2, #88]	; 0x58
 8004104:	4b41      	ldr	r3, [pc, #260]	; (800420c <HAL_RCC_OscConfig+0x578>)
 8004106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004110:	2301      	movs	r3, #1
 8004112:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004114:	4b3e      	ldr	r3, [pc, #248]	; (8004210 <HAL_RCC_OscConfig+0x57c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d118      	bne.n	8004152 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004120:	4b3b      	ldr	r3, [pc, #236]	; (8004210 <HAL_RCC_OscConfig+0x57c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a3a      	ldr	r2, [pc, #232]	; (8004210 <HAL_RCC_OscConfig+0x57c>)
 8004126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800412c:	f7fc fdc2 	bl	8000cb4 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004134:	f7fc fdbe 	bl	8000cb4 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e184      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004146:	4b32      	ldr	r3, [pc, #200]	; (8004210 <HAL_RCC_OscConfig+0x57c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d108      	bne.n	800416c <HAL_RCC_OscConfig+0x4d8>
 800415a:	4b2c      	ldr	r3, [pc, #176]	; (800420c <HAL_RCC_OscConfig+0x578>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	4a2a      	ldr	r2, [pc, #168]	; (800420c <HAL_RCC_OscConfig+0x578>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800416a:	e024      	b.n	80041b6 <HAL_RCC_OscConfig+0x522>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b05      	cmp	r3, #5
 8004172:	d110      	bne.n	8004196 <HAL_RCC_OscConfig+0x502>
 8004174:	4b25      	ldr	r3, [pc, #148]	; (800420c <HAL_RCC_OscConfig+0x578>)
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	4a24      	ldr	r2, [pc, #144]	; (800420c <HAL_RCC_OscConfig+0x578>)
 800417c:	f043 0304 	orr.w	r3, r3, #4
 8004180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004184:	4b21      	ldr	r3, [pc, #132]	; (800420c <HAL_RCC_OscConfig+0x578>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	4a20      	ldr	r2, [pc, #128]	; (800420c <HAL_RCC_OscConfig+0x578>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004194:	e00f      	b.n	80041b6 <HAL_RCC_OscConfig+0x522>
 8004196:	4b1d      	ldr	r3, [pc, #116]	; (800420c <HAL_RCC_OscConfig+0x578>)
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	4a1b      	ldr	r2, [pc, #108]	; (800420c <HAL_RCC_OscConfig+0x578>)
 800419e:	f023 0301 	bic.w	r3, r3, #1
 80041a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041a6:	4b19      	ldr	r3, [pc, #100]	; (800420c <HAL_RCC_OscConfig+0x578>)
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	4a17      	ldr	r2, [pc, #92]	; (800420c <HAL_RCC_OscConfig+0x578>)
 80041ae:	f023 0304 	bic.w	r3, r3, #4
 80041b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d016      	beq.n	80041ec <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041be:	f7fc fd79 	bl	8000cb4 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c4:	e00a      	b.n	80041dc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c6:	f7fc fd75 	bl	8000cb4 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e139      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <HAL_RCC_OscConfig+0x578>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0ed      	beq.n	80041c6 <HAL_RCC_OscConfig+0x532>
 80041ea:	e01a      	b.n	8004222 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ec:	f7fc fd62 	bl	8000cb4 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041f2:	e00f      	b.n	8004214 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f4:	f7fc fd5e 	bl	8000cb4 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004202:	4293      	cmp	r3, r2
 8004204:	d906      	bls.n	8004214 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e122      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
 800420a:	bf00      	nop
 800420c:	40021000 	.word	0x40021000
 8004210:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004214:	4b90      	ldr	r3, [pc, #576]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e8      	bne.n	80041f4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004222:	7ffb      	ldrb	r3, [r7, #31]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d105      	bne.n	8004234 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004228:	4b8b      	ldr	r3, [pc, #556]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 800422a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422c:	4a8a      	ldr	r2, [pc, #552]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 800422e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004232:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8108 	beq.w	800444e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004242:	2b02      	cmp	r3, #2
 8004244:	f040 80d0 	bne.w	80043e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004248:	4b83      	ldr	r3, [pc, #524]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 0203 	and.w	r2, r3, #3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	429a      	cmp	r2, r3
 800425a:	d130      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	3b01      	subs	r3, #1
 8004268:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d127      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004278:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d11f      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004288:	2a07      	cmp	r2, #7
 800428a:	bf14      	ite	ne
 800428c:	2201      	movne	r2, #1
 800428e:	2200      	moveq	r2, #0
 8004290:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004292:	4293      	cmp	r3, r2
 8004294:	d113      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a0:	085b      	lsrs	r3, r3, #1
 80042a2:	3b01      	subs	r3, #1
 80042a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d109      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	3b01      	subs	r3, #1
 80042b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d06e      	beq.n	800439c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	d069      	beq.n	8004398 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042c4:	4b64      	ldr	r3, [pc, #400]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d105      	bne.n	80042dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042d0:	4b61      	ldr	r3, [pc, #388]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0b7      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042e0:	4b5d      	ldr	r3, [pc, #372]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a5c      	ldr	r2, [pc, #368]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 80042e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042ec:	f7fc fce2 	bl	8000cb4 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f4:	f7fc fcde 	bl	8000cb4 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e0a4      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004306:	4b54      	ldr	r3, [pc, #336]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004312:	4b51      	ldr	r3, [pc, #324]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	4b51      	ldr	r3, [pc, #324]	; (800445c <HAL_RCC_OscConfig+0x7c8>)
 8004318:	4013      	ands	r3, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004322:	3a01      	subs	r2, #1
 8004324:	0112      	lsls	r2, r2, #4
 8004326:	4311      	orrs	r1, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800432c:	0212      	lsls	r2, r2, #8
 800432e:	4311      	orrs	r1, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004334:	0852      	lsrs	r2, r2, #1
 8004336:	3a01      	subs	r2, #1
 8004338:	0552      	lsls	r2, r2, #21
 800433a:	4311      	orrs	r1, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004340:	0852      	lsrs	r2, r2, #1
 8004342:	3a01      	subs	r2, #1
 8004344:	0652      	lsls	r2, r2, #25
 8004346:	4311      	orrs	r1, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800434c:	0912      	lsrs	r2, r2, #4
 800434e:	0452      	lsls	r2, r2, #17
 8004350:	430a      	orrs	r2, r1
 8004352:	4941      	ldr	r1, [pc, #260]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 8004354:	4313      	orrs	r3, r2
 8004356:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004358:	4b3f      	ldr	r3, [pc, #252]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a3e      	ldr	r2, [pc, #248]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 800435e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004362:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004364:	4b3c      	ldr	r3, [pc, #240]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4a3b      	ldr	r2, [pc, #236]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 800436a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800436e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004370:	f7fc fca0 	bl	8000cb4 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004378:	f7fc fc9c 	bl	8000cb4 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e062      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438a:	4b33      	ldr	r3, [pc, #204]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004396:	e05a      	b.n	800444e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e059      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439c:	4b2e      	ldr	r3, [pc, #184]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d152      	bne.n	800444e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043a8:	4b2b      	ldr	r3, [pc, #172]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a2a      	ldr	r2, [pc, #168]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 80043ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043b4:	4b28      	ldr	r3, [pc, #160]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4a27      	ldr	r2, [pc, #156]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 80043ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043c0:	f7fc fc78 	bl	8000cb4 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fc fc74 	bl	8000cb4 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e03a      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043da:	4b1f      	ldr	r3, [pc, #124]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x734>
 80043e6:	e032      	b.n	800444e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b0c      	cmp	r3, #12
 80043ec:	d02d      	beq.n	800444a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ee:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a19      	ldr	r2, [pc, #100]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 80043f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80043fa:	4b17      	ldr	r3, [pc, #92]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d105      	bne.n	8004412 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004406:	4b14      	ldr	r3, [pc, #80]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	4a13      	ldr	r2, [pc, #76]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 800440c:	f023 0303 	bic.w	r3, r3, #3
 8004410:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004412:	4b11      	ldr	r3, [pc, #68]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	4a10      	ldr	r2, [pc, #64]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 8004418:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800441c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004420:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004422:	f7fc fc47 	bl	8000cb4 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442a:	f7fc fc43 	bl	8000cb4 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e009      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <HAL_RCC_OscConfig+0x7c4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f0      	bne.n	800442a <HAL_RCC_OscConfig+0x796>
 8004448:	e001      	b.n	800444e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40021000 	.word	0x40021000
 800445c:	f99d808c 	.word	0xf99d808c

08004460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e0c8      	b.n	8004606 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004474:	4b66      	ldr	r3, [pc, #408]	; (8004610 <HAL_RCC_ClockConfig+0x1b0>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d910      	bls.n	80044a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004482:	4b63      	ldr	r3, [pc, #396]	; (8004610 <HAL_RCC_ClockConfig+0x1b0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f023 0207 	bic.w	r2, r3, #7
 800448a:	4961      	ldr	r1, [pc, #388]	; (8004610 <HAL_RCC_ClockConfig+0x1b0>)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	4313      	orrs	r3, r2
 8004490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004492:	4b5f      	ldr	r3, [pc, #380]	; (8004610 <HAL_RCC_ClockConfig+0x1b0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d001      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0b0      	b.n	8004606 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d04c      	beq.n	800454a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d107      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b8:	4b56      	ldr	r3, [pc, #344]	; (8004614 <HAL_RCC_ClockConfig+0x1b4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d121      	bne.n	8004508 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e09e      	b.n	8004606 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d107      	bne.n	80044e0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044d0:	4b50      	ldr	r3, [pc, #320]	; (8004614 <HAL_RCC_ClockConfig+0x1b4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d115      	bne.n	8004508 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e092      	b.n	8004606 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d107      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044e8:	4b4a      	ldr	r3, [pc, #296]	; (8004614 <HAL_RCC_ClockConfig+0x1b4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e086      	b.n	8004606 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f8:	4b46      	ldr	r3, [pc, #280]	; (8004614 <HAL_RCC_ClockConfig+0x1b4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e07e      	b.n	8004606 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004508:	4b42      	ldr	r3, [pc, #264]	; (8004614 <HAL_RCC_ClockConfig+0x1b4>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f023 0203 	bic.w	r2, r3, #3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	493f      	ldr	r1, [pc, #252]	; (8004614 <HAL_RCC_ClockConfig+0x1b4>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800451a:	f7fc fbcb 	bl	8000cb4 <HAL_GetTick>
 800451e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004520:	e00a      	b.n	8004538 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004522:	f7fc fbc7 	bl	8000cb4 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e066      	b.n	8004606 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004538:	4b36      	ldr	r3, [pc, #216]	; (8004614 <HAL_RCC_ClockConfig+0x1b4>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 020c 	and.w	r2, r3, #12
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	429a      	cmp	r2, r3
 8004548:	d1eb      	bne.n	8004522 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d008      	beq.n	8004568 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004556:	4b2f      	ldr	r3, [pc, #188]	; (8004614 <HAL_RCC_ClockConfig+0x1b4>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	492c      	ldr	r1, [pc, #176]	; (8004614 <HAL_RCC_ClockConfig+0x1b4>)
 8004564:	4313      	orrs	r3, r2
 8004566:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004568:	4b29      	ldr	r3, [pc, #164]	; (8004610 <HAL_RCC_ClockConfig+0x1b0>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d210      	bcs.n	8004598 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004576:	4b26      	ldr	r3, [pc, #152]	; (8004610 <HAL_RCC_ClockConfig+0x1b0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 0207 	bic.w	r2, r3, #7
 800457e:	4924      	ldr	r1, [pc, #144]	; (8004610 <HAL_RCC_ClockConfig+0x1b0>)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	4313      	orrs	r3, r2
 8004584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b22      	ldr	r3, [pc, #136]	; (8004610 <HAL_RCC_ClockConfig+0x1b0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e036      	b.n	8004606 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d008      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a4:	4b1b      	ldr	r3, [pc, #108]	; (8004614 <HAL_RCC_ClockConfig+0x1b4>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4918      	ldr	r1, [pc, #96]	; (8004614 <HAL_RCC_ClockConfig+0x1b4>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045c2:	4b14      	ldr	r3, [pc, #80]	; (8004614 <HAL_RCC_ClockConfig+0x1b4>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4910      	ldr	r1, [pc, #64]	; (8004614 <HAL_RCC_ClockConfig+0x1b4>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045d6:	f000 f825 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80045da:	4602      	mov	r2, r0
 80045dc:	4b0d      	ldr	r3, [pc, #52]	; (8004614 <HAL_RCC_ClockConfig+0x1b4>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	091b      	lsrs	r3, r3, #4
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	490c      	ldr	r1, [pc, #48]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 80045e8:	5ccb      	ldrb	r3, [r1, r3]
 80045ea:	f003 031f 	and.w	r3, r3, #31
 80045ee:	fa22 f303 	lsr.w	r3, r2, r3
 80045f2:	4a0a      	ldr	r2, [pc, #40]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045f6:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <HAL_RCC_ClockConfig+0x1c0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fc fb0a 	bl	8000c14 <HAL_InitTick>
 8004600:	4603      	mov	r3, r0
 8004602:	72fb      	strb	r3, [r7, #11]

  return status;
 8004604:	7afb      	ldrb	r3, [r7, #11]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40022000 	.word	0x40022000
 8004614:	40021000 	.word	0x40021000
 8004618:	0800b69c 	.word	0x0800b69c
 800461c:	20000144 	.word	0x20000144
 8004620:	20000000 	.word	0x20000000

08004624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004624:	b480      	push	{r7}
 8004626:	b089      	sub	sp, #36	; 0x24
 8004628:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	2300      	movs	r3, #0
 8004630:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004632:	4b3e      	ldr	r3, [pc, #248]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 030c 	and.w	r3, r3, #12
 800463a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800463c:	4b3b      	ldr	r3, [pc, #236]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0x34>
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b0c      	cmp	r3, #12
 8004650:	d121      	bne.n	8004696 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d11e      	bne.n	8004696 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004658:	4b34      	ldr	r3, [pc, #208]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	d107      	bne.n	8004674 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004664:	4b31      	ldr	r3, [pc, #196]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 8004666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800466a:	0a1b      	lsrs	r3, r3, #8
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	e005      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004674:	4b2d      	ldr	r3, [pc, #180]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004680:	4a2b      	ldr	r2, [pc, #172]	; (8004730 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004688:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10d      	bne.n	80046ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004694:	e00a      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b04      	cmp	r3, #4
 800469a:	d102      	bne.n	80046a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800469c:	4b25      	ldr	r3, [pc, #148]	; (8004734 <HAL_RCC_GetSysClockFreq+0x110>)
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	e004      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d101      	bne.n	80046ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046a8:	4b23      	ldr	r3, [pc, #140]	; (8004738 <HAL_RCC_GetSysClockFreq+0x114>)
 80046aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b0c      	cmp	r3, #12
 80046b0:	d134      	bne.n	800471c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046b2:	4b1e      	ldr	r3, [pc, #120]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d003      	beq.n	80046ca <HAL_RCC_GetSysClockFreq+0xa6>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d003      	beq.n	80046d0 <HAL_RCC_GetSysClockFreq+0xac>
 80046c8:	e005      	b.n	80046d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046ca:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <HAL_RCC_GetSysClockFreq+0x110>)
 80046cc:	617b      	str	r3, [r7, #20]
      break;
 80046ce:	e005      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046d0:	4b19      	ldr	r3, [pc, #100]	; (8004738 <HAL_RCC_GetSysClockFreq+0x114>)
 80046d2:	617b      	str	r3, [r7, #20]
      break;
 80046d4:	e002      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	617b      	str	r3, [r7, #20]
      break;
 80046da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046dc:	4b13      	ldr	r3, [pc, #76]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	091b      	lsrs	r3, r3, #4
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	3301      	adds	r3, #1
 80046e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046ea:	4b10      	ldr	r3, [pc, #64]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	fb02 f203 	mul.w	r2, r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <HAL_RCC_GetSysClockFreq+0x108>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	0e5b      	lsrs	r3, r3, #25
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	3301      	adds	r3, #1
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	fbb2 f3f3 	udiv	r3, r2, r3
 800471a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800471c:	69bb      	ldr	r3, [r7, #24]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3724      	adds	r7, #36	; 0x24
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40021000 	.word	0x40021000
 8004730:	0800b6b4 	.word	0x0800b6b4
 8004734:	00f42400 	.word	0x00f42400
 8004738:	007a1200 	.word	0x007a1200

0800473c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004740:	4b03      	ldr	r3, [pc, #12]	; (8004750 <HAL_RCC_GetHCLKFreq+0x14>)
 8004742:	681b      	ldr	r3, [r3, #0]
}
 8004744:	4618      	mov	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	20000144 	.word	0x20000144

08004754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004758:	f7ff fff0 	bl	800473c <HAL_RCC_GetHCLKFreq>
 800475c:	4602      	mov	r2, r0
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	0a1b      	lsrs	r3, r3, #8
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	4904      	ldr	r1, [pc, #16]	; (800477c <HAL_RCC_GetPCLK1Freq+0x28>)
 800476a:	5ccb      	ldrb	r3, [r1, r3]
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004774:	4618      	mov	r0, r3
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40021000 	.word	0x40021000
 800477c:	0800b6ac 	.word	0x0800b6ac

08004780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004784:	f7ff ffda 	bl	800473c <HAL_RCC_GetHCLKFreq>
 8004788:	4602      	mov	r2, r0
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	0adb      	lsrs	r3, r3, #11
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	4904      	ldr	r1, [pc, #16]	; (80047a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004796:	5ccb      	ldrb	r3, [r1, r3]
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40021000 	.word	0x40021000
 80047a8:	0800b6ac 	.word	0x0800b6ac

080047ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047b8:	4b2a      	ldr	r3, [pc, #168]	; (8004864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047c4:	f7ff f9f2 	bl	8003bac <HAL_PWREx_GetVoltageRange>
 80047c8:	6178      	str	r0, [r7, #20]
 80047ca:	e014      	b.n	80047f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047cc:	4b25      	ldr	r3, [pc, #148]	; (8004864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d0:	4a24      	ldr	r2, [pc, #144]	; (8004864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d6:	6593      	str	r3, [r2, #88]	; 0x58
 80047d8:	4b22      	ldr	r3, [pc, #136]	; (8004864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80047e4:	f7ff f9e2 	bl	8003bac <HAL_PWREx_GetVoltageRange>
 80047e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80047ea:	4b1e      	ldr	r3, [pc, #120]	; (8004864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ee:	4a1d      	ldr	r2, [pc, #116]	; (8004864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047fc:	d10b      	bne.n	8004816 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b80      	cmp	r3, #128	; 0x80
 8004802:	d919      	bls.n	8004838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2ba0      	cmp	r3, #160	; 0xa0
 8004808:	d902      	bls.n	8004810 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800480a:	2302      	movs	r3, #2
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	e013      	b.n	8004838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004810:	2301      	movs	r3, #1
 8004812:	613b      	str	r3, [r7, #16]
 8004814:	e010      	b.n	8004838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b80      	cmp	r3, #128	; 0x80
 800481a:	d902      	bls.n	8004822 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800481c:	2303      	movs	r3, #3
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	e00a      	b.n	8004838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b80      	cmp	r3, #128	; 0x80
 8004826:	d102      	bne.n	800482e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004828:	2302      	movs	r3, #2
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	e004      	b.n	8004838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b70      	cmp	r3, #112	; 0x70
 8004832:	d101      	bne.n	8004838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004834:	2301      	movs	r3, #1
 8004836:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f023 0207 	bic.w	r2, r3, #7
 8004840:	4909      	ldr	r1, [pc, #36]	; (8004868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004848:	4b07      	ldr	r3, [pc, #28]	; (8004868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	429a      	cmp	r2, r3
 8004854:	d001      	beq.n	800485a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3718      	adds	r7, #24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40021000 	.word	0x40021000
 8004868:	40022000 	.word	0x40022000

0800486c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004874:	2300      	movs	r3, #0
 8004876:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004878:	2300      	movs	r3, #0
 800487a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004884:	2b00      	cmp	r3, #0
 8004886:	d041      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800488c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004890:	d02a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004892:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004896:	d824      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004898:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800489c:	d008      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800489e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048a2:	d81e      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80048a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ac:	d010      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048ae:	e018      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048b0:	4b86      	ldr	r3, [pc, #536]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4a85      	ldr	r2, [pc, #532]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048bc:	e015      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3304      	adds	r3, #4
 80048c2:	2100      	movs	r1, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fabb 	bl	8004e40 <RCCEx_PLLSAI1_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048ce:	e00c      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3320      	adds	r3, #32
 80048d4:	2100      	movs	r1, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fba6 	bl	8005028 <RCCEx_PLLSAI2_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048e0:	e003      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	74fb      	strb	r3, [r7, #19]
      break;
 80048e6:	e000      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80048e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ea:	7cfb      	ldrb	r3, [r7, #19]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10b      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048f0:	4b76      	ldr	r3, [pc, #472]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048fe:	4973      	ldr	r1, [pc, #460]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004906:	e001      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d041      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800491c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004920:	d02a      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004922:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004926:	d824      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004928:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800492c:	d008      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800492e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004932:	d81e      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800493c:	d010      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800493e:	e018      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004940:	4b62      	ldr	r3, [pc, #392]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4a61      	ldr	r2, [pc, #388]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800494a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800494c:	e015      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3304      	adds	r3, #4
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fa73 	bl	8004e40 <RCCEx_PLLSAI1_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800495e:	e00c      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3320      	adds	r3, #32
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fb5e 	bl	8005028 <RCCEx_PLLSAI2_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004970:	e003      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	74fb      	strb	r3, [r7, #19]
      break;
 8004976:	e000      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800497a:	7cfb      	ldrb	r3, [r7, #19]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10b      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004980:	4b52      	ldr	r3, [pc, #328]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004986:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800498e:	494f      	ldr	r1, [pc, #316]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004996:	e001      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004998:	7cfb      	ldrb	r3, [r7, #19]
 800499a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80a0 	beq.w	8004aea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049aa:	2300      	movs	r3, #0
 80049ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049ae:	4b47      	ldr	r3, [pc, #284]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80049be:	2300      	movs	r3, #0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00d      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c4:	4b41      	ldr	r3, [pc, #260]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c8:	4a40      	ldr	r2, [pc, #256]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ce:	6593      	str	r3, [r2, #88]	; 0x58
 80049d0:	4b3e      	ldr	r3, [pc, #248]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049dc:	2301      	movs	r3, #1
 80049de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049e0:	4b3b      	ldr	r3, [pc, #236]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a3a      	ldr	r2, [pc, #232]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049ec:	f7fc f962 	bl	8000cb4 <HAL_GetTick>
 80049f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049f2:	e009      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f4:	f7fc f95e 	bl	8000cb4 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d902      	bls.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	74fb      	strb	r3, [r7, #19]
        break;
 8004a06:	e005      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a08:	4b31      	ldr	r3, [pc, #196]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0ef      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004a14:	7cfb      	ldrb	r3, [r7, #19]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d15c      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a1a:	4b2c      	ldr	r3, [pc, #176]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01f      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d019      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a38:	4b24      	ldr	r3, [pc, #144]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a44:	4b21      	ldr	r3, [pc, #132]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4a:	4a20      	ldr	r2, [pc, #128]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a54:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5a:	4a1c      	ldr	r2, [pc, #112]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a64:	4a19      	ldr	r2, [pc, #100]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d016      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a76:	f7fc f91d 	bl	8000cb4 <HAL_GetTick>
 8004a7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a7c:	e00b      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7e:	f7fc f919 	bl	8000cb4 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d902      	bls.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	74fb      	strb	r3, [r7, #19]
            break;
 8004a94:	e006      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a96:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0ec      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004aa4:	7cfb      	ldrb	r3, [r7, #19]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10c      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aaa:	4b08      	ldr	r3, [pc, #32]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aba:	4904      	ldr	r1, [pc, #16]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ac2:	e009      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ac4:	7cfb      	ldrb	r3, [r7, #19]
 8004ac6:	74bb      	strb	r3, [r7, #18]
 8004ac8:	e006      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004aca:	bf00      	nop
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad4:	7cfb      	ldrb	r3, [r7, #19]
 8004ad6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ad8:	7c7b      	ldrb	r3, [r7, #17]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d105      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ade:	4b9e      	ldr	r3, [pc, #632]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae2:	4a9d      	ldr	r2, [pc, #628]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004af6:	4b98      	ldr	r3, [pc, #608]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afc:	f023 0203 	bic.w	r2, r3, #3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	4994      	ldr	r1, [pc, #592]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b18:	4b8f      	ldr	r3, [pc, #572]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1e:	f023 020c 	bic.w	r2, r3, #12
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b26:	498c      	ldr	r1, [pc, #560]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b3a:	4b87      	ldr	r3, [pc, #540]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	4983      	ldr	r1, [pc, #524]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0308 	and.w	r3, r3, #8
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b5c:	4b7e      	ldr	r3, [pc, #504]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	497b      	ldr	r1, [pc, #492]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0310 	and.w	r3, r3, #16
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b7e:	4b76      	ldr	r3, [pc, #472]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8c:	4972      	ldr	r1, [pc, #456]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ba0:	4b6d      	ldr	r3, [pc, #436]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bae:	496a      	ldr	r1, [pc, #424]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bc2:	4b65      	ldr	r3, [pc, #404]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd0:	4961      	ldr	r1, [pc, #388]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004be4:	4b5c      	ldr	r3, [pc, #368]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf2:	4959      	ldr	r1, [pc, #356]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c06:	4b54      	ldr	r3, [pc, #336]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c14:	4950      	ldr	r1, [pc, #320]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c28:	4b4b      	ldr	r3, [pc, #300]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	4948      	ldr	r1, [pc, #288]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c4a:	4b43      	ldr	r3, [pc, #268]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c58:	493f      	ldr	r1, [pc, #252]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d028      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c6c:	4b3a      	ldr	r3, [pc, #232]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c7a:	4937      	ldr	r1, [pc, #220]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c8a:	d106      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c8c:	4b32      	ldr	r3, [pc, #200]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4a31      	ldr	r2, [pc, #196]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c96:	60d3      	str	r3, [r2, #12]
 8004c98:	e011      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ca2:	d10c      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	2101      	movs	r1, #1
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 f8c8 	bl	8004e40 <RCCEx_PLLSAI1_Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004cb4:	7cfb      	ldrb	r3, [r7, #19]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004cba:	7cfb      	ldrb	r3, [r7, #19]
 8004cbc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d028      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cca:	4b23      	ldr	r3, [pc, #140]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd8:	491f      	ldr	r1, [pc, #124]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ce8:	d106      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cea:	4b1b      	ldr	r3, [pc, #108]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	4a1a      	ldr	r2, [pc, #104]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cf4:	60d3      	str	r3, [r2, #12]
 8004cf6:	e011      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3304      	adds	r3, #4
 8004d06:	2101      	movs	r1, #1
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 f899 	bl	8004e40 <RCCEx_PLLSAI1_Config>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d12:	7cfb      	ldrb	r3, [r7, #19]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004d18:	7cfb      	ldrb	r3, [r7, #19]
 8004d1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d02b      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d36:	4908      	ldr	r1, [pc, #32]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d46:	d109      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d48:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	4a02      	ldr	r2, [pc, #8]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d52:	60d3      	str	r3, [r2, #12]
 8004d54:	e014      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004d56:	bf00      	nop
 8004d58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d64:	d10c      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 f867 	bl	8004e40 <RCCEx_PLLSAI1_Config>
 8004d72:	4603      	mov	r3, r0
 8004d74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d76:	7cfb      	ldrb	r3, [r7, #19]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d7c:	7cfb      	ldrb	r3, [r7, #19]
 8004d7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d02f      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d8c:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d9a:	4928      	ldr	r1, [pc, #160]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004daa:	d10d      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3304      	adds	r3, #4
 8004db0:	2102      	movs	r1, #2
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 f844 	bl	8004e40 <RCCEx_PLLSAI1_Config>
 8004db8:	4603      	mov	r3, r0
 8004dba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dbc:	7cfb      	ldrb	r3, [r7, #19]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d014      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004dc2:	7cfb      	ldrb	r3, [r7, #19]
 8004dc4:	74bb      	strb	r3, [r7, #18]
 8004dc6:	e011      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dd0:	d10c      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3320      	adds	r3, #32
 8004dd6:	2102      	movs	r1, #2
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 f925 	bl	8005028 <RCCEx_PLLSAI2_Config>
 8004dde:	4603      	mov	r3, r0
 8004de0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004de2:	7cfb      	ldrb	r3, [r7, #19]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004de8:	7cfb      	ldrb	r3, [r7, #19]
 8004dea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004df8:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e06:	490d      	ldr	r1, [pc, #52]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00b      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e1a:	4b08      	ldr	r3, [pc, #32]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e2a:	4904      	ldr	r1, [pc, #16]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e32:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40021000 	.word	0x40021000

08004e40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e4e:	4b75      	ldr	r3, [pc, #468]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d018      	beq.n	8004e8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e5a:	4b72      	ldr	r3, [pc, #456]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f003 0203 	and.w	r2, r3, #3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d10d      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
       ||
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e72:	4b6c      	ldr	r3, [pc, #432]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	091b      	lsrs	r3, r3, #4
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
       ||
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d047      	beq.n	8004f16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	73fb      	strb	r3, [r7, #15]
 8004e8a:	e044      	b.n	8004f16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d018      	beq.n	8004ec6 <RCCEx_PLLSAI1_Config+0x86>
 8004e94:	2b03      	cmp	r3, #3
 8004e96:	d825      	bhi.n	8004ee4 <RCCEx_PLLSAI1_Config+0xa4>
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d002      	beq.n	8004ea2 <RCCEx_PLLSAI1_Config+0x62>
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d009      	beq.n	8004eb4 <RCCEx_PLLSAI1_Config+0x74>
 8004ea0:	e020      	b.n	8004ee4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ea2:	4b60      	ldr	r3, [pc, #384]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d11d      	bne.n	8004eea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eb2:	e01a      	b.n	8004eea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004eb4:	4b5b      	ldr	r3, [pc, #364]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d116      	bne.n	8004eee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ec4:	e013      	b.n	8004eee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ec6:	4b57      	ldr	r3, [pc, #348]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10f      	bne.n	8004ef2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ed2:	4b54      	ldr	r3, [pc, #336]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d109      	bne.n	8004ef2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ee2:	e006      	b.n	8004ef2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee8:	e004      	b.n	8004ef4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004eea:	bf00      	nop
 8004eec:	e002      	b.n	8004ef4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e000      	b.n	8004ef4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ef2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10d      	bne.n	8004f16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004efa:	4b4a      	ldr	r3, [pc, #296]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6819      	ldr	r1, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	4944      	ldr	r1, [pc, #272]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d17d      	bne.n	8005018 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f1c:	4b41      	ldr	r3, [pc, #260]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a40      	ldr	r2, [pc, #256]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f28:	f7fb fec4 	bl	8000cb4 <HAL_GetTick>
 8004f2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f2e:	e009      	b.n	8004f44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f30:	f7fb fec0 	bl	8000cb4 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d902      	bls.n	8004f44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	73fb      	strb	r3, [r7, #15]
        break;
 8004f42:	e005      	b.n	8004f50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f44:	4b37      	ldr	r3, [pc, #220]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1ef      	bne.n	8004f30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d160      	bne.n	8005018 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d111      	bne.n	8004f80 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f5c:	4b31      	ldr	r3, [pc, #196]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6892      	ldr	r2, [r2, #8]
 8004f6c:	0211      	lsls	r1, r2, #8
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	68d2      	ldr	r2, [r2, #12]
 8004f72:	0912      	lsrs	r2, r2, #4
 8004f74:	0452      	lsls	r2, r2, #17
 8004f76:	430a      	orrs	r2, r1
 8004f78:	492a      	ldr	r1, [pc, #168]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	610b      	str	r3, [r1, #16]
 8004f7e:	e027      	b.n	8004fd0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d112      	bne.n	8004fac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f86:	4b27      	ldr	r3, [pc, #156]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6892      	ldr	r2, [r2, #8]
 8004f96:	0211      	lsls	r1, r2, #8
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6912      	ldr	r2, [r2, #16]
 8004f9c:	0852      	lsrs	r2, r2, #1
 8004f9e:	3a01      	subs	r2, #1
 8004fa0:	0552      	lsls	r2, r2, #21
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	491f      	ldr	r1, [pc, #124]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	610b      	str	r3, [r1, #16]
 8004faa:	e011      	b.n	8004fd0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fac:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6892      	ldr	r2, [r2, #8]
 8004fbc:	0211      	lsls	r1, r2, #8
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6952      	ldr	r2, [r2, #20]
 8004fc2:	0852      	lsrs	r2, r2, #1
 8004fc4:	3a01      	subs	r2, #1
 8004fc6:	0652      	lsls	r2, r2, #25
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	4916      	ldr	r1, [pc, #88]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004fd0:	4b14      	ldr	r3, [pc, #80]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a13      	ldr	r2, [pc, #76]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fdc:	f7fb fe6a 	bl	8000cb4 <HAL_GetTick>
 8004fe0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fe2:	e009      	b.n	8004ff8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fe4:	f7fb fe66 	bl	8000cb4 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d902      	bls.n	8004ff8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ff6:	e005      	b.n	8005004 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ff8:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ef      	beq.n	8004fe4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800500a:	4b06      	ldr	r3, [pc, #24]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	4904      	ldr	r1, [pc, #16]	; (8005024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005014:	4313      	orrs	r3, r2
 8005016:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005018:	7bfb      	ldrb	r3, [r7, #15]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40021000 	.word	0x40021000

08005028 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005036:	4b6a      	ldr	r3, [pc, #424]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d018      	beq.n	8005074 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005042:	4b67      	ldr	r3, [pc, #412]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f003 0203 	and.w	r2, r3, #3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d10d      	bne.n	800506e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
       ||
 8005056:	2b00      	cmp	r3, #0
 8005058:	d009      	beq.n	800506e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800505a:	4b61      	ldr	r3, [pc, #388]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	091b      	lsrs	r3, r3, #4
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
       ||
 800506a:	429a      	cmp	r2, r3
 800506c:	d047      	beq.n	80050fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	73fb      	strb	r3, [r7, #15]
 8005072:	e044      	b.n	80050fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b03      	cmp	r3, #3
 800507a:	d018      	beq.n	80050ae <RCCEx_PLLSAI2_Config+0x86>
 800507c:	2b03      	cmp	r3, #3
 800507e:	d825      	bhi.n	80050cc <RCCEx_PLLSAI2_Config+0xa4>
 8005080:	2b01      	cmp	r3, #1
 8005082:	d002      	beq.n	800508a <RCCEx_PLLSAI2_Config+0x62>
 8005084:	2b02      	cmp	r3, #2
 8005086:	d009      	beq.n	800509c <RCCEx_PLLSAI2_Config+0x74>
 8005088:	e020      	b.n	80050cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800508a:	4b55      	ldr	r3, [pc, #340]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d11d      	bne.n	80050d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800509a:	e01a      	b.n	80050d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800509c:	4b50      	ldr	r3, [pc, #320]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d116      	bne.n	80050d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ac:	e013      	b.n	80050d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050ae:	4b4c      	ldr	r3, [pc, #304]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10f      	bne.n	80050da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050ba:	4b49      	ldr	r3, [pc, #292]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050ca:	e006      	b.n	80050da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	73fb      	strb	r3, [r7, #15]
      break;
 80050d0:	e004      	b.n	80050dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050d2:	bf00      	nop
 80050d4:	e002      	b.n	80050dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050d6:	bf00      	nop
 80050d8:	e000      	b.n	80050dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050da:	bf00      	nop
    }

    if(status == HAL_OK)
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10d      	bne.n	80050fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050e2:	4b3f      	ldr	r3, [pc, #252]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6819      	ldr	r1, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	430b      	orrs	r3, r1
 80050f8:	4939      	ldr	r1, [pc, #228]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d167      	bne.n	80051d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005104:	4b36      	ldr	r3, [pc, #216]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a35      	ldr	r2, [pc, #212]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800510a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800510e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005110:	f7fb fdd0 	bl	8000cb4 <HAL_GetTick>
 8005114:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005116:	e009      	b.n	800512c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005118:	f7fb fdcc 	bl	8000cb4 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d902      	bls.n	800512c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	73fb      	strb	r3, [r7, #15]
        break;
 800512a:	e005      	b.n	8005138 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800512c:	4b2c      	ldr	r3, [pc, #176]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1ef      	bne.n	8005118 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d14a      	bne.n	80051d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d111      	bne.n	8005168 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005144:	4b26      	ldr	r3, [pc, #152]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800514c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6892      	ldr	r2, [r2, #8]
 8005154:	0211      	lsls	r1, r2, #8
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	68d2      	ldr	r2, [r2, #12]
 800515a:	0912      	lsrs	r2, r2, #4
 800515c:	0452      	lsls	r2, r2, #17
 800515e:	430a      	orrs	r2, r1
 8005160:	491f      	ldr	r1, [pc, #124]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005162:	4313      	orrs	r3, r2
 8005164:	614b      	str	r3, [r1, #20]
 8005166:	e011      	b.n	800518c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005168:	4b1d      	ldr	r3, [pc, #116]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005170:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6892      	ldr	r2, [r2, #8]
 8005178:	0211      	lsls	r1, r2, #8
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6912      	ldr	r2, [r2, #16]
 800517e:	0852      	lsrs	r2, r2, #1
 8005180:	3a01      	subs	r2, #1
 8005182:	0652      	lsls	r2, r2, #25
 8005184:	430a      	orrs	r2, r1
 8005186:	4916      	ldr	r1, [pc, #88]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005188:	4313      	orrs	r3, r2
 800518a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800518c:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a13      	ldr	r2, [pc, #76]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005196:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005198:	f7fb fd8c 	bl	8000cb4 <HAL_GetTick>
 800519c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800519e:	e009      	b.n	80051b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051a0:	f7fb fd88 	bl	8000cb4 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d902      	bls.n	80051b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	73fb      	strb	r3, [r7, #15]
          break;
 80051b2:	e005      	b.n	80051c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051b4:	4b0a      	ldr	r3, [pc, #40]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0ef      	beq.n	80051a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80051c6:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	4904      	ldr	r1, [pc, #16]	; (80051e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40021000 	.word	0x40021000

080051e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e049      	b.n	800528a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f004 fe6a 	bl	8009ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3304      	adds	r3, #4
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f000 fab4 	bl	8005790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d001      	beq.n	80052ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e04f      	b.n	800534c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a23      	ldr	r2, [pc, #140]	; (8005358 <HAL_TIM_Base_Start_IT+0xc4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d01d      	beq.n	800530a <HAL_TIM_Base_Start_IT+0x76>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d6:	d018      	beq.n	800530a <HAL_TIM_Base_Start_IT+0x76>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1f      	ldr	r2, [pc, #124]	; (800535c <HAL_TIM_Base_Start_IT+0xc8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <HAL_TIM_Base_Start_IT+0x76>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1e      	ldr	r2, [pc, #120]	; (8005360 <HAL_TIM_Base_Start_IT+0xcc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00e      	beq.n	800530a <HAL_TIM_Base_Start_IT+0x76>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <HAL_TIM_Base_Start_IT+0xd0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_TIM_Base_Start_IT+0x76>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a1b      	ldr	r2, [pc, #108]	; (8005368 <HAL_TIM_Base_Start_IT+0xd4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_TIM_Base_Start_IT+0x76>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a19      	ldr	r2, [pc, #100]	; (800536c <HAL_TIM_Base_Start_IT+0xd8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d115      	bne.n	8005336 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	4b17      	ldr	r3, [pc, #92]	; (8005370 <HAL_TIM_Base_Start_IT+0xdc>)
 8005312:	4013      	ands	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b06      	cmp	r3, #6
 800531a:	d015      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0xb4>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005322:	d011      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005334:	e008      	b.n	8005348 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0201 	orr.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e000      	b.n	800534a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005348:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40000400 	.word	0x40000400
 8005360:	40000800 	.word	0x40000800
 8005364:	40000c00 	.word	0x40000c00
 8005368:	40013400 	.word	0x40013400
 800536c:	40014000 	.word	0x40014000
 8005370:	00010007 	.word	0x00010007

08005374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b02      	cmp	r3, #2
 8005388:	d122      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b02      	cmp	r3, #2
 8005396:	d11b      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0202 	mvn.w	r2, #2
 80053a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f9cb 	bl	8005752 <HAL_TIM_IC_CaptureCallback>
 80053bc:	e005      	b.n	80053ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f9bd 	bl	800573e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f9ce 	bl	8005766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d122      	bne.n	8005424 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d11b      	bne.n	8005424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0204 	mvn.w	r2, #4
 80053f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2202      	movs	r2, #2
 80053fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f9a1 	bl	8005752 <HAL_TIM_IC_CaptureCallback>
 8005410:	e005      	b.n	800541e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f993 	bl	800573e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f9a4 	bl	8005766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b08      	cmp	r3, #8
 8005430:	d122      	bne.n	8005478 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f003 0308 	and.w	r3, r3, #8
 800543c:	2b08      	cmp	r3, #8
 800543e:	d11b      	bne.n	8005478 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0208 	mvn.w	r2, #8
 8005448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2204      	movs	r2, #4
 800544e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f977 	bl	8005752 <HAL_TIM_IC_CaptureCallback>
 8005464:	e005      	b.n	8005472 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f969 	bl	800573e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f97a 	bl	8005766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b10      	cmp	r3, #16
 8005484:	d122      	bne.n	80054cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f003 0310 	and.w	r3, r3, #16
 8005490:	2b10      	cmp	r3, #16
 8005492:	d11b      	bne.n	80054cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0210 	mvn.w	r2, #16
 800549c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2208      	movs	r2, #8
 80054a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f94d 	bl	8005752 <HAL_TIM_IC_CaptureCallback>
 80054b8:	e005      	b.n	80054c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f93f 	bl	800573e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f950 	bl	8005766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d10e      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d107      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0201 	mvn.w	r2, #1
 80054f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f004 fa00 	bl	80098f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005502:	2b80      	cmp	r3, #128	; 0x80
 8005504:	d10e      	bne.n	8005524 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005510:	2b80      	cmp	r3, #128	; 0x80
 8005512:	d107      	bne.n	8005524 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800551c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fafc 	bl	8005b1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005532:	d10e      	bne.n	8005552 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553e:	2b80      	cmp	r3, #128	; 0x80
 8005540:	d107      	bne.n	8005552 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800554a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 faef 	bl	8005b30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555c:	2b40      	cmp	r3, #64	; 0x40
 800555e:	d10e      	bne.n	800557e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b40      	cmp	r3, #64	; 0x40
 800556c:	d107      	bne.n	800557e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f8fe 	bl	800577a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b20      	cmp	r3, #32
 800558a:	d10e      	bne.n	80055aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b20      	cmp	r3, #32
 8005598:	d107      	bne.n	80055aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f06f 0220 	mvn.w	r2, #32
 80055a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 faaf 	bl	8005b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b084      	sub	sp, #16
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d101      	bne.n	80055ca <HAL_TIM_ConfigClockSource+0x18>
 80055c6:	2302      	movs	r3, #2
 80055c8:	e0b5      	b.n	8005736 <HAL_TIM_ConfigClockSource+0x184>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2202      	movs	r2, #2
 80055d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055f4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005606:	d03e      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0xd4>
 8005608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800560c:	f200 8087 	bhi.w	800571e <HAL_TIM_ConfigClockSource+0x16c>
 8005610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005614:	f000 8085 	beq.w	8005722 <HAL_TIM_ConfigClockSource+0x170>
 8005618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561c:	d87f      	bhi.n	800571e <HAL_TIM_ConfigClockSource+0x16c>
 800561e:	2b70      	cmp	r3, #112	; 0x70
 8005620:	d01a      	beq.n	8005658 <HAL_TIM_ConfigClockSource+0xa6>
 8005622:	2b70      	cmp	r3, #112	; 0x70
 8005624:	d87b      	bhi.n	800571e <HAL_TIM_ConfigClockSource+0x16c>
 8005626:	2b60      	cmp	r3, #96	; 0x60
 8005628:	d050      	beq.n	80056cc <HAL_TIM_ConfigClockSource+0x11a>
 800562a:	2b60      	cmp	r3, #96	; 0x60
 800562c:	d877      	bhi.n	800571e <HAL_TIM_ConfigClockSource+0x16c>
 800562e:	2b50      	cmp	r3, #80	; 0x50
 8005630:	d03c      	beq.n	80056ac <HAL_TIM_ConfigClockSource+0xfa>
 8005632:	2b50      	cmp	r3, #80	; 0x50
 8005634:	d873      	bhi.n	800571e <HAL_TIM_ConfigClockSource+0x16c>
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	d058      	beq.n	80056ec <HAL_TIM_ConfigClockSource+0x13a>
 800563a:	2b40      	cmp	r3, #64	; 0x40
 800563c:	d86f      	bhi.n	800571e <HAL_TIM_ConfigClockSource+0x16c>
 800563e:	2b30      	cmp	r3, #48	; 0x30
 8005640:	d064      	beq.n	800570c <HAL_TIM_ConfigClockSource+0x15a>
 8005642:	2b30      	cmp	r3, #48	; 0x30
 8005644:	d86b      	bhi.n	800571e <HAL_TIM_ConfigClockSource+0x16c>
 8005646:	2b20      	cmp	r3, #32
 8005648:	d060      	beq.n	800570c <HAL_TIM_ConfigClockSource+0x15a>
 800564a:	2b20      	cmp	r3, #32
 800564c:	d867      	bhi.n	800571e <HAL_TIM_ConfigClockSource+0x16c>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d05c      	beq.n	800570c <HAL_TIM_ConfigClockSource+0x15a>
 8005652:	2b10      	cmp	r3, #16
 8005654:	d05a      	beq.n	800570c <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005656:	e062      	b.n	800571e <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6818      	ldr	r0, [r3, #0]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	6899      	ldr	r1, [r3, #8]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f000 f9a6 	bl	80059b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800567a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	609a      	str	r2, [r3, #8]
      break;
 8005684:	e04e      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6899      	ldr	r1, [r3, #8]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f000 f98f 	bl	80059b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056a8:	609a      	str	r2, [r3, #8]
      break;
 80056aa:	e03b      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6818      	ldr	r0, [r3, #0]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	6859      	ldr	r1, [r3, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	461a      	mov	r2, r3
 80056ba:	f000 f903 	bl	80058c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2150      	movs	r1, #80	; 0x50
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 f95c 	bl	8005982 <TIM_ITRx_SetConfig>
      break;
 80056ca:	e02b      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6818      	ldr	r0, [r3, #0]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	6859      	ldr	r1, [r3, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	461a      	mov	r2, r3
 80056da:	f000 f922 	bl	8005922 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2160      	movs	r1, #96	; 0x60
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 f94c 	bl	8005982 <TIM_ITRx_SetConfig>
      break;
 80056ea:	e01b      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	6859      	ldr	r1, [r3, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	461a      	mov	r2, r3
 80056fa:	f000 f8e3 	bl	80058c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2140      	movs	r1, #64	; 0x40
 8005704:	4618      	mov	r0, r3
 8005706:	f000 f93c 	bl	8005982 <TIM_ITRx_SetConfig>
      break;
 800570a:	e00b      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4619      	mov	r1, r3
 8005716:	4610      	mov	r0, r2
 8005718:	f000 f933 	bl	8005982 <TIM_ITRx_SetConfig>
        break;
 800571c:	e002      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800571e:	bf00      	nop
 8005720:	e000      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005722:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
	...

08005790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a40      	ldr	r2, [pc, #256]	; (80058a4 <TIM_Base_SetConfig+0x114>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d013      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ae:	d00f      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a3d      	ldr	r2, [pc, #244]	; (80058a8 <TIM_Base_SetConfig+0x118>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00b      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a3c      	ldr	r2, [pc, #240]	; (80058ac <TIM_Base_SetConfig+0x11c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d007      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a3b      	ldr	r2, [pc, #236]	; (80058b0 <TIM_Base_SetConfig+0x120>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a3a      	ldr	r2, [pc, #232]	; (80058b4 <TIM_Base_SetConfig+0x124>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d108      	bne.n	80057e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a2f      	ldr	r2, [pc, #188]	; (80058a4 <TIM_Base_SetConfig+0x114>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d01f      	beq.n	800582a <TIM_Base_SetConfig+0x9a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f0:	d01b      	beq.n	800582a <TIM_Base_SetConfig+0x9a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a2c      	ldr	r2, [pc, #176]	; (80058a8 <TIM_Base_SetConfig+0x118>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d017      	beq.n	800582a <TIM_Base_SetConfig+0x9a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2b      	ldr	r2, [pc, #172]	; (80058ac <TIM_Base_SetConfig+0x11c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <TIM_Base_SetConfig+0x9a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2a      	ldr	r2, [pc, #168]	; (80058b0 <TIM_Base_SetConfig+0x120>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00f      	beq.n	800582a <TIM_Base_SetConfig+0x9a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a29      	ldr	r2, [pc, #164]	; (80058b4 <TIM_Base_SetConfig+0x124>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00b      	beq.n	800582a <TIM_Base_SetConfig+0x9a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a28      	ldr	r2, [pc, #160]	; (80058b8 <TIM_Base_SetConfig+0x128>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d007      	beq.n	800582a <TIM_Base_SetConfig+0x9a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a27      	ldr	r2, [pc, #156]	; (80058bc <TIM_Base_SetConfig+0x12c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d003      	beq.n	800582a <TIM_Base_SetConfig+0x9a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a26      	ldr	r2, [pc, #152]	; (80058c0 <TIM_Base_SetConfig+0x130>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d108      	bne.n	800583c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a10      	ldr	r2, [pc, #64]	; (80058a4 <TIM_Base_SetConfig+0x114>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00f      	beq.n	8005888 <TIM_Base_SetConfig+0xf8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a12      	ldr	r2, [pc, #72]	; (80058b4 <TIM_Base_SetConfig+0x124>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00b      	beq.n	8005888 <TIM_Base_SetConfig+0xf8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a11      	ldr	r2, [pc, #68]	; (80058b8 <TIM_Base_SetConfig+0x128>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d007      	beq.n	8005888 <TIM_Base_SetConfig+0xf8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a10      	ldr	r2, [pc, #64]	; (80058bc <TIM_Base_SetConfig+0x12c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d003      	beq.n	8005888 <TIM_Base_SetConfig+0xf8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a0f      	ldr	r2, [pc, #60]	; (80058c0 <TIM_Base_SetConfig+0x130>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d103      	bne.n	8005890 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	615a      	str	r2, [r3, #20]
}
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40012c00 	.word	0x40012c00
 80058a8:	40000400 	.word	0x40000400
 80058ac:	40000800 	.word	0x40000800
 80058b0:	40000c00 	.word	0x40000c00
 80058b4:	40013400 	.word	0x40013400
 80058b8:	40014000 	.word	0x40014000
 80058bc:	40014400 	.word	0x40014400
 80058c0:	40014800 	.word	0x40014800

080058c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	f023 0201 	bic.w	r2, r3, #1
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f023 030a 	bic.w	r3, r3, #10
 8005900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	621a      	str	r2, [r3, #32]
}
 8005916:	bf00      	nop
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005922:	b480      	push	{r7}
 8005924:	b087      	sub	sp, #28
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	f023 0210 	bic.w	r2, r3, #16
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800594c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	031b      	lsls	r3, r3, #12
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	4313      	orrs	r3, r2
 8005956:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800595e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	4313      	orrs	r3, r2
 8005968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	621a      	str	r2, [r3, #32]
}
 8005976:	bf00      	nop
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005982:	b480      	push	{r7}
 8005984:	b085      	sub	sp, #20
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	f043 0307 	orr.w	r3, r3, #7
 80059a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	609a      	str	r2, [r3, #8]
}
 80059ac:	bf00      	nop
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
 80059c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	021a      	lsls	r2, r3, #8
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	431a      	orrs	r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4313      	orrs	r3, r2
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	609a      	str	r2, [r3, #8]
}
 80059ec:	bf00      	nop
 80059ee:	371c      	adds	r7, #28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d101      	bne.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e068      	b.n	8005ae2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a2e      	ldr	r2, [pc, #184]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d004      	beq.n	8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a2d      	ldr	r2, [pc, #180]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d108      	bne.n	8005a56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a1e      	ldr	r2, [pc, #120]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d01d      	beq.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a82:	d018      	beq.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a1b      	ldr	r2, [pc, #108]	; (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d013      	beq.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a1a      	ldr	r2, [pc, #104]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00e      	beq.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a18      	ldr	r2, [pc, #96]	; (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d009      	beq.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a13      	ldr	r2, [pc, #76]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d004      	beq.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a14      	ldr	r2, [pc, #80]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d10c      	bne.n	8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	40012c00 	.word	0x40012c00
 8005af4:	40013400 	.word	0x40013400
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40000800 	.word	0x40000800
 8005b00:	40000c00 	.word	0x40000c00
 8005b04:	40014000 	.word	0x40014000

08005b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e040      	b.n	8005bd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d106      	bne.n	8005b6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f004 f9f4 	bl	8009f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2224      	movs	r2, #36	; 0x24
 8005b70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0201 	bic.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f8c0 	bl	8005d08 <UART_SetConfig>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d101      	bne.n	8005b92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e022      	b.n	8005bd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fb3e 	bl	800621c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fbc5 	bl	8006360 <UART_CheckIdleState>
 8005bd6:	4603      	mov	r3, r0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08a      	sub	sp, #40	; 0x28
 8005be4:	af02      	add	r7, sp, #8
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	603b      	str	r3, [r7, #0]
 8005bec:	4613      	mov	r3, r2
 8005bee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	f040 8082 	bne.w	8005cfe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <HAL_UART_Transmit+0x26>
 8005c00:	88fb      	ldrh	r3, [r7, #6]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e07a      	b.n	8005d00 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_UART_Transmit+0x38>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e073      	b.n	8005d00 <HAL_UART_Transmit+0x120>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2221      	movs	r2, #33	; 0x21
 8005c2c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c2e:	f7fb f841 	bl	8000cb4 <HAL_GetTick>
 8005c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	88fa      	ldrh	r2, [r7, #6]
 8005c38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	88fa      	ldrh	r2, [r7, #6]
 8005c40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4c:	d108      	bne.n	8005c60 <HAL_UART_Transmit+0x80>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d104      	bne.n	8005c60 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	e003      	b.n	8005c68 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005c70:	e02d      	b.n	8005cce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2180      	movs	r1, #128	; 0x80
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 fbb8 	bl	80063f2 <UART_WaitOnFlagUntilTimeout>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e039      	b.n	8005d00 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10b      	bne.n	8005caa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	881a      	ldrh	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c9e:	b292      	uxth	r2, r2
 8005ca0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	3302      	adds	r3, #2
 8005ca6:	61bb      	str	r3, [r7, #24]
 8005ca8:	e008      	b.n	8005cbc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	781a      	ldrb	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	b292      	uxth	r2, r2
 8005cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1cb      	bne.n	8005c72 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2140      	movs	r1, #64	; 0x40
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 fb84 	bl	80063f2 <UART_WaitOnFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e005      	b.n	8005d00 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	e000      	b.n	8005d00 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005cfe:	2302      	movs	r3, #2
  }
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3720      	adds	r7, #32
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d08:	b5b0      	push	{r4, r5, r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4bad      	ldr	r3, [pc, #692]	; (8005fe8 <UART_SetConfig+0x2e0>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6812      	ldr	r2, [r2, #0]
 8005d3a:	69f9      	ldr	r1, [r7, #28]
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4aa2      	ldr	r2, [pc, #648]	; (8005fec <UART_SetConfig+0x2e4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d004      	beq.n	8005d70 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a99      	ldr	r2, [pc, #612]	; (8005ff0 <UART_SetConfig+0x2e8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d121      	bne.n	8005dd2 <UART_SetConfig+0xca>
 8005d8e:	4b99      	ldr	r3, [pc, #612]	; (8005ff4 <UART_SetConfig+0x2ec>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d94:	f003 0303 	and.w	r3, r3, #3
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d817      	bhi.n	8005dcc <UART_SetConfig+0xc4>
 8005d9c:	a201      	add	r2, pc, #4	; (adr r2, 8005da4 <UART_SetConfig+0x9c>)
 8005d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da2:	bf00      	nop
 8005da4:	08005db5 	.word	0x08005db5
 8005da8:	08005dc1 	.word	0x08005dc1
 8005dac:	08005dbb 	.word	0x08005dbb
 8005db0:	08005dc7 	.word	0x08005dc7
 8005db4:	2301      	movs	r3, #1
 8005db6:	76fb      	strb	r3, [r7, #27]
 8005db8:	e0e7      	b.n	8005f8a <UART_SetConfig+0x282>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	76fb      	strb	r3, [r7, #27]
 8005dbe:	e0e4      	b.n	8005f8a <UART_SetConfig+0x282>
 8005dc0:	2304      	movs	r3, #4
 8005dc2:	76fb      	strb	r3, [r7, #27]
 8005dc4:	e0e1      	b.n	8005f8a <UART_SetConfig+0x282>
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	76fb      	strb	r3, [r7, #27]
 8005dca:	e0de      	b.n	8005f8a <UART_SetConfig+0x282>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	76fb      	strb	r3, [r7, #27]
 8005dd0:	e0db      	b.n	8005f8a <UART_SetConfig+0x282>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a88      	ldr	r2, [pc, #544]	; (8005ff8 <UART_SetConfig+0x2f0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d132      	bne.n	8005e42 <UART_SetConfig+0x13a>
 8005ddc:	4b85      	ldr	r3, [pc, #532]	; (8005ff4 <UART_SetConfig+0x2ec>)
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de2:	f003 030c 	and.w	r3, r3, #12
 8005de6:	2b0c      	cmp	r3, #12
 8005de8:	d828      	bhi.n	8005e3c <UART_SetConfig+0x134>
 8005dea:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <UART_SetConfig+0xe8>)
 8005dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df0:	08005e25 	.word	0x08005e25
 8005df4:	08005e3d 	.word	0x08005e3d
 8005df8:	08005e3d 	.word	0x08005e3d
 8005dfc:	08005e3d 	.word	0x08005e3d
 8005e00:	08005e31 	.word	0x08005e31
 8005e04:	08005e3d 	.word	0x08005e3d
 8005e08:	08005e3d 	.word	0x08005e3d
 8005e0c:	08005e3d 	.word	0x08005e3d
 8005e10:	08005e2b 	.word	0x08005e2b
 8005e14:	08005e3d 	.word	0x08005e3d
 8005e18:	08005e3d 	.word	0x08005e3d
 8005e1c:	08005e3d 	.word	0x08005e3d
 8005e20:	08005e37 	.word	0x08005e37
 8005e24:	2300      	movs	r3, #0
 8005e26:	76fb      	strb	r3, [r7, #27]
 8005e28:	e0af      	b.n	8005f8a <UART_SetConfig+0x282>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	76fb      	strb	r3, [r7, #27]
 8005e2e:	e0ac      	b.n	8005f8a <UART_SetConfig+0x282>
 8005e30:	2304      	movs	r3, #4
 8005e32:	76fb      	strb	r3, [r7, #27]
 8005e34:	e0a9      	b.n	8005f8a <UART_SetConfig+0x282>
 8005e36:	2308      	movs	r3, #8
 8005e38:	76fb      	strb	r3, [r7, #27]
 8005e3a:	e0a6      	b.n	8005f8a <UART_SetConfig+0x282>
 8005e3c:	2310      	movs	r3, #16
 8005e3e:	76fb      	strb	r3, [r7, #27]
 8005e40:	e0a3      	b.n	8005f8a <UART_SetConfig+0x282>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a6d      	ldr	r2, [pc, #436]	; (8005ffc <UART_SetConfig+0x2f4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d120      	bne.n	8005e8e <UART_SetConfig+0x186>
 8005e4c:	4b69      	ldr	r3, [pc, #420]	; (8005ff4 <UART_SetConfig+0x2ec>)
 8005e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e56:	2b30      	cmp	r3, #48	; 0x30
 8005e58:	d013      	beq.n	8005e82 <UART_SetConfig+0x17a>
 8005e5a:	2b30      	cmp	r3, #48	; 0x30
 8005e5c:	d814      	bhi.n	8005e88 <UART_SetConfig+0x180>
 8005e5e:	2b20      	cmp	r3, #32
 8005e60:	d009      	beq.n	8005e76 <UART_SetConfig+0x16e>
 8005e62:	2b20      	cmp	r3, #32
 8005e64:	d810      	bhi.n	8005e88 <UART_SetConfig+0x180>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <UART_SetConfig+0x168>
 8005e6a:	2b10      	cmp	r3, #16
 8005e6c:	d006      	beq.n	8005e7c <UART_SetConfig+0x174>
 8005e6e:	e00b      	b.n	8005e88 <UART_SetConfig+0x180>
 8005e70:	2300      	movs	r3, #0
 8005e72:	76fb      	strb	r3, [r7, #27]
 8005e74:	e089      	b.n	8005f8a <UART_SetConfig+0x282>
 8005e76:	2302      	movs	r3, #2
 8005e78:	76fb      	strb	r3, [r7, #27]
 8005e7a:	e086      	b.n	8005f8a <UART_SetConfig+0x282>
 8005e7c:	2304      	movs	r3, #4
 8005e7e:	76fb      	strb	r3, [r7, #27]
 8005e80:	e083      	b.n	8005f8a <UART_SetConfig+0x282>
 8005e82:	2308      	movs	r3, #8
 8005e84:	76fb      	strb	r3, [r7, #27]
 8005e86:	e080      	b.n	8005f8a <UART_SetConfig+0x282>
 8005e88:	2310      	movs	r3, #16
 8005e8a:	76fb      	strb	r3, [r7, #27]
 8005e8c:	e07d      	b.n	8005f8a <UART_SetConfig+0x282>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a5b      	ldr	r2, [pc, #364]	; (8006000 <UART_SetConfig+0x2f8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d120      	bne.n	8005eda <UART_SetConfig+0x1d2>
 8005e98:	4b56      	ldr	r3, [pc, #344]	; (8005ff4 <UART_SetConfig+0x2ec>)
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ea2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ea4:	d013      	beq.n	8005ece <UART_SetConfig+0x1c6>
 8005ea6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ea8:	d814      	bhi.n	8005ed4 <UART_SetConfig+0x1cc>
 8005eaa:	2b80      	cmp	r3, #128	; 0x80
 8005eac:	d009      	beq.n	8005ec2 <UART_SetConfig+0x1ba>
 8005eae:	2b80      	cmp	r3, #128	; 0x80
 8005eb0:	d810      	bhi.n	8005ed4 <UART_SetConfig+0x1cc>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <UART_SetConfig+0x1b4>
 8005eb6:	2b40      	cmp	r3, #64	; 0x40
 8005eb8:	d006      	beq.n	8005ec8 <UART_SetConfig+0x1c0>
 8005eba:	e00b      	b.n	8005ed4 <UART_SetConfig+0x1cc>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	76fb      	strb	r3, [r7, #27]
 8005ec0:	e063      	b.n	8005f8a <UART_SetConfig+0x282>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	76fb      	strb	r3, [r7, #27]
 8005ec6:	e060      	b.n	8005f8a <UART_SetConfig+0x282>
 8005ec8:	2304      	movs	r3, #4
 8005eca:	76fb      	strb	r3, [r7, #27]
 8005ecc:	e05d      	b.n	8005f8a <UART_SetConfig+0x282>
 8005ece:	2308      	movs	r3, #8
 8005ed0:	76fb      	strb	r3, [r7, #27]
 8005ed2:	e05a      	b.n	8005f8a <UART_SetConfig+0x282>
 8005ed4:	2310      	movs	r3, #16
 8005ed6:	76fb      	strb	r3, [r7, #27]
 8005ed8:	e057      	b.n	8005f8a <UART_SetConfig+0x282>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a49      	ldr	r2, [pc, #292]	; (8006004 <UART_SetConfig+0x2fc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d125      	bne.n	8005f30 <UART_SetConfig+0x228>
 8005ee4:	4b43      	ldr	r3, [pc, #268]	; (8005ff4 <UART_SetConfig+0x2ec>)
 8005ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ef2:	d017      	beq.n	8005f24 <UART_SetConfig+0x21c>
 8005ef4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ef8:	d817      	bhi.n	8005f2a <UART_SetConfig+0x222>
 8005efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005efe:	d00b      	beq.n	8005f18 <UART_SetConfig+0x210>
 8005f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f04:	d811      	bhi.n	8005f2a <UART_SetConfig+0x222>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <UART_SetConfig+0x20a>
 8005f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f0e:	d006      	beq.n	8005f1e <UART_SetConfig+0x216>
 8005f10:	e00b      	b.n	8005f2a <UART_SetConfig+0x222>
 8005f12:	2300      	movs	r3, #0
 8005f14:	76fb      	strb	r3, [r7, #27]
 8005f16:	e038      	b.n	8005f8a <UART_SetConfig+0x282>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	76fb      	strb	r3, [r7, #27]
 8005f1c:	e035      	b.n	8005f8a <UART_SetConfig+0x282>
 8005f1e:	2304      	movs	r3, #4
 8005f20:	76fb      	strb	r3, [r7, #27]
 8005f22:	e032      	b.n	8005f8a <UART_SetConfig+0x282>
 8005f24:	2308      	movs	r3, #8
 8005f26:	76fb      	strb	r3, [r7, #27]
 8005f28:	e02f      	b.n	8005f8a <UART_SetConfig+0x282>
 8005f2a:	2310      	movs	r3, #16
 8005f2c:	76fb      	strb	r3, [r7, #27]
 8005f2e:	e02c      	b.n	8005f8a <UART_SetConfig+0x282>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2d      	ldr	r2, [pc, #180]	; (8005fec <UART_SetConfig+0x2e4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d125      	bne.n	8005f86 <UART_SetConfig+0x27e>
 8005f3a:	4b2e      	ldr	r3, [pc, #184]	; (8005ff4 <UART_SetConfig+0x2ec>)
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f48:	d017      	beq.n	8005f7a <UART_SetConfig+0x272>
 8005f4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f4e:	d817      	bhi.n	8005f80 <UART_SetConfig+0x278>
 8005f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f54:	d00b      	beq.n	8005f6e <UART_SetConfig+0x266>
 8005f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f5a:	d811      	bhi.n	8005f80 <UART_SetConfig+0x278>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <UART_SetConfig+0x260>
 8005f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f64:	d006      	beq.n	8005f74 <UART_SetConfig+0x26c>
 8005f66:	e00b      	b.n	8005f80 <UART_SetConfig+0x278>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	76fb      	strb	r3, [r7, #27]
 8005f6c:	e00d      	b.n	8005f8a <UART_SetConfig+0x282>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	76fb      	strb	r3, [r7, #27]
 8005f72:	e00a      	b.n	8005f8a <UART_SetConfig+0x282>
 8005f74:	2304      	movs	r3, #4
 8005f76:	76fb      	strb	r3, [r7, #27]
 8005f78:	e007      	b.n	8005f8a <UART_SetConfig+0x282>
 8005f7a:	2308      	movs	r3, #8
 8005f7c:	76fb      	strb	r3, [r7, #27]
 8005f7e:	e004      	b.n	8005f8a <UART_SetConfig+0x282>
 8005f80:	2310      	movs	r3, #16
 8005f82:	76fb      	strb	r3, [r7, #27]
 8005f84:	e001      	b.n	8005f8a <UART_SetConfig+0x282>
 8005f86:	2310      	movs	r3, #16
 8005f88:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a17      	ldr	r2, [pc, #92]	; (8005fec <UART_SetConfig+0x2e4>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	f040 8087 	bne.w	80060a4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f96:	7efb      	ldrb	r3, [r7, #27]
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d837      	bhi.n	800600c <UART_SetConfig+0x304>
 8005f9c:	a201      	add	r2, pc, #4	; (adr r2, 8005fa4 <UART_SetConfig+0x29c>)
 8005f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa2:	bf00      	nop
 8005fa4:	08005fc9 	.word	0x08005fc9
 8005fa8:	0800600d 	.word	0x0800600d
 8005fac:	08005fd1 	.word	0x08005fd1
 8005fb0:	0800600d 	.word	0x0800600d
 8005fb4:	08005fd7 	.word	0x08005fd7
 8005fb8:	0800600d 	.word	0x0800600d
 8005fbc:	0800600d 	.word	0x0800600d
 8005fc0:	0800600d 	.word	0x0800600d
 8005fc4:	08005fdf 	.word	0x08005fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fc8:	f7fe fbc4 	bl	8004754 <HAL_RCC_GetPCLK1Freq>
 8005fcc:	6178      	str	r0, [r7, #20]
        break;
 8005fce:	e022      	b.n	8006016 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fd0:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <UART_SetConfig+0x300>)
 8005fd2:	617b      	str	r3, [r7, #20]
        break;
 8005fd4:	e01f      	b.n	8006016 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fd6:	f7fe fb25 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 8005fda:	6178      	str	r0, [r7, #20]
        break;
 8005fdc:	e01b      	b.n	8006016 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fe2:	617b      	str	r3, [r7, #20]
        break;
 8005fe4:	e017      	b.n	8006016 <UART_SetConfig+0x30e>
 8005fe6:	bf00      	nop
 8005fe8:	efff69f3 	.word	0xefff69f3
 8005fec:	40008000 	.word	0x40008000
 8005ff0:	40013800 	.word	0x40013800
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	40004400 	.word	0x40004400
 8005ffc:	40004800 	.word	0x40004800
 8006000:	40004c00 	.word	0x40004c00
 8006004:	40005000 	.word	0x40005000
 8006008:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	76bb      	strb	r3, [r7, #26]
        break;
 8006014:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 80f1 	beq.w	8006200 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	4613      	mov	r3, r2
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	4413      	add	r3, r2
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	429a      	cmp	r2, r3
 800602c:	d305      	bcc.n	800603a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	429a      	cmp	r2, r3
 8006038:	d902      	bls.n	8006040 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	76bb      	strb	r3, [r7, #26]
 800603e:	e0df      	b.n	8006200 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	4618      	mov	r0, r3
 8006044:	f04f 0100 	mov.w	r1, #0
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	020b      	lsls	r3, r1, #8
 8006052:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006056:	0202      	lsls	r2, r0, #8
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	6849      	ldr	r1, [r1, #4]
 800605c:	0849      	lsrs	r1, r1, #1
 800605e:	4608      	mov	r0, r1
 8006060:	f04f 0100 	mov.w	r1, #0
 8006064:	1814      	adds	r4, r2, r0
 8006066:	eb43 0501 	adc.w	r5, r3, r1
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	461a      	mov	r2, r3
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	4620      	mov	r0, r4
 8006076:	4629      	mov	r1, r5
 8006078:	f7fa fc38 	bl	80008ec <__aeabi_uldivmod>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4613      	mov	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800608a:	d308      	bcc.n	800609e <UART_SetConfig+0x396>
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006092:	d204      	bcs.n	800609e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	60da      	str	r2, [r3, #12]
 800609c:	e0b0      	b.n	8006200 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	76bb      	strb	r3, [r7, #26]
 80060a2:	e0ad      	b.n	8006200 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ac:	d15c      	bne.n	8006168 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80060ae:	7efb      	ldrb	r3, [r7, #27]
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d828      	bhi.n	8006106 <UART_SetConfig+0x3fe>
 80060b4:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <UART_SetConfig+0x3b4>)
 80060b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ba:	bf00      	nop
 80060bc:	080060e1 	.word	0x080060e1
 80060c0:	080060e9 	.word	0x080060e9
 80060c4:	080060f1 	.word	0x080060f1
 80060c8:	08006107 	.word	0x08006107
 80060cc:	080060f7 	.word	0x080060f7
 80060d0:	08006107 	.word	0x08006107
 80060d4:	08006107 	.word	0x08006107
 80060d8:	08006107 	.word	0x08006107
 80060dc:	080060ff 	.word	0x080060ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e0:	f7fe fb38 	bl	8004754 <HAL_RCC_GetPCLK1Freq>
 80060e4:	6178      	str	r0, [r7, #20]
        break;
 80060e6:	e013      	b.n	8006110 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060e8:	f7fe fb4a 	bl	8004780 <HAL_RCC_GetPCLK2Freq>
 80060ec:	6178      	str	r0, [r7, #20]
        break;
 80060ee:	e00f      	b.n	8006110 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060f0:	4b49      	ldr	r3, [pc, #292]	; (8006218 <UART_SetConfig+0x510>)
 80060f2:	617b      	str	r3, [r7, #20]
        break;
 80060f4:	e00c      	b.n	8006110 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060f6:	f7fe fa95 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80060fa:	6178      	str	r0, [r7, #20]
        break;
 80060fc:	e008      	b.n	8006110 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006102:	617b      	str	r3, [r7, #20]
        break;
 8006104:	e004      	b.n	8006110 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	76bb      	strb	r3, [r7, #26]
        break;
 800610e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d074      	beq.n	8006200 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	005a      	lsls	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	085b      	lsrs	r3, r3, #1
 8006120:	441a      	add	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	fbb2 f3f3 	udiv	r3, r2, r3
 800612a:	b29b      	uxth	r3, r3
 800612c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	2b0f      	cmp	r3, #15
 8006132:	d916      	bls.n	8006162 <UART_SetConfig+0x45a>
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800613a:	d212      	bcs.n	8006162 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	b29b      	uxth	r3, r3
 8006140:	f023 030f 	bic.w	r3, r3, #15
 8006144:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	085b      	lsrs	r3, r3, #1
 800614a:	b29b      	uxth	r3, r3
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	b29a      	uxth	r2, r3
 8006152:	89fb      	ldrh	r3, [r7, #14]
 8006154:	4313      	orrs	r3, r2
 8006156:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	89fa      	ldrh	r2, [r7, #14]
 800615e:	60da      	str	r2, [r3, #12]
 8006160:	e04e      	b.n	8006200 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	76bb      	strb	r3, [r7, #26]
 8006166:	e04b      	b.n	8006200 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006168:	7efb      	ldrb	r3, [r7, #27]
 800616a:	2b08      	cmp	r3, #8
 800616c:	d827      	bhi.n	80061be <UART_SetConfig+0x4b6>
 800616e:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <UART_SetConfig+0x46c>)
 8006170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006174:	08006199 	.word	0x08006199
 8006178:	080061a1 	.word	0x080061a1
 800617c:	080061a9 	.word	0x080061a9
 8006180:	080061bf 	.word	0x080061bf
 8006184:	080061af 	.word	0x080061af
 8006188:	080061bf 	.word	0x080061bf
 800618c:	080061bf 	.word	0x080061bf
 8006190:	080061bf 	.word	0x080061bf
 8006194:	080061b7 	.word	0x080061b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006198:	f7fe fadc 	bl	8004754 <HAL_RCC_GetPCLK1Freq>
 800619c:	6178      	str	r0, [r7, #20]
        break;
 800619e:	e013      	b.n	80061c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061a0:	f7fe faee 	bl	8004780 <HAL_RCC_GetPCLK2Freq>
 80061a4:	6178      	str	r0, [r7, #20]
        break;
 80061a6:	e00f      	b.n	80061c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061a8:	4b1b      	ldr	r3, [pc, #108]	; (8006218 <UART_SetConfig+0x510>)
 80061aa:	617b      	str	r3, [r7, #20]
        break;
 80061ac:	e00c      	b.n	80061c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ae:	f7fe fa39 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80061b2:	6178      	str	r0, [r7, #20]
        break;
 80061b4:	e008      	b.n	80061c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ba:	617b      	str	r3, [r7, #20]
        break;
 80061bc:	e004      	b.n	80061c8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	76bb      	strb	r3, [r7, #26]
        break;
 80061c6:	bf00      	nop
    }

    if (pclk != 0U)
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d018      	beq.n	8006200 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	085a      	lsrs	r2, r3, #1
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	441a      	add	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	2b0f      	cmp	r3, #15
 80061e8:	d908      	bls.n	80061fc <UART_SetConfig+0x4f4>
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f0:	d204      	bcs.n	80061fc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	60da      	str	r2, [r3, #12]
 80061fa:	e001      	b.n	8006200 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800620c:	7ebb      	ldrb	r3, [r7, #26]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3720      	adds	r7, #32
 8006212:	46bd      	mov	sp, r7
 8006214:	bdb0      	pop	{r4, r5, r7, pc}
 8006216:	bf00      	nop
 8006218:	00f42400 	.word	0x00f42400

0800621c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00a      	beq.n	8006246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00a      	beq.n	800628a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	f003 0308 	and.w	r3, r3, #8
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	f003 0310 	and.w	r3, r3, #16
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00a      	beq.n	80062ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01a      	beq.n	8006332 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800631a:	d10a      	bne.n	8006332 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	605a      	str	r2, [r3, #4]
  }
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af02      	add	r7, sp, #8
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006370:	f7fa fca0 	bl	8000cb4 <HAL_GetTick>
 8006374:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b08      	cmp	r3, #8
 8006382:	d10e      	bne.n	80063a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006384:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f82d 	bl	80063f2 <UART_WaitOnFlagUntilTimeout>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e023      	b.n	80063ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d10e      	bne.n	80063ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f817 	bl	80063f2 <UART_WaitOnFlagUntilTimeout>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e00d      	b.n	80063ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2220      	movs	r2, #32
 80063d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	60f8      	str	r0, [r7, #12]
 80063fa:	60b9      	str	r1, [r7, #8]
 80063fc:	603b      	str	r3, [r7, #0]
 80063fe:	4613      	mov	r3, r2
 8006400:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006402:	e05e      	b.n	80064c2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800640a:	d05a      	beq.n	80064c2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640c:	f7fa fc52 	bl	8000cb4 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	429a      	cmp	r2, r3
 800641a:	d302      	bcc.n	8006422 <UART_WaitOnFlagUntilTimeout+0x30>
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d11b      	bne.n	800645a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006430:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0201 	bic.w	r2, r2, #1
 8006440:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2220      	movs	r2, #32
 8006446:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e043      	b.n	80064e2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d02c      	beq.n	80064c2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006476:	d124      	bne.n	80064c2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006480:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006490:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0201 	bic.w	r2, r2, #1
 80064a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2220      	movs	r2, #32
 80064a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2220      	movs	r2, #32
 80064ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e00f      	b.n	80064e2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69da      	ldr	r2, [r3, #28]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4013      	ands	r3, r2
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	bf0c      	ite	eq
 80064d2:	2301      	moveq	r3, #1
 80064d4:	2300      	movne	r3, #0
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	461a      	mov	r2, r3
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d091      	beq.n	8006404 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064ea:	b084      	sub	sp, #16
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	f107 001c 	add.w	r0, r7, #28
 80064f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f001 f9cf 	bl	80078ac <USB_CoreReset>
 800650e:	4603      	mov	r3, r0
 8006510:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	d106      	bne.n	8006526 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	639a      	str	r2, [r3, #56]	; 0x38
 8006524:	e005      	b.n	8006532 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006532:	7bfb      	ldrb	r3, [r7, #15]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800653e:	b004      	add	sp, #16
 8006540:	4770      	bx	lr
	...

08006544 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	4613      	mov	r3, r2
 8006550:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006552:	79fb      	ldrb	r3, [r7, #7]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d165      	bne.n	8006624 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4a3e      	ldr	r2, [pc, #248]	; (8006654 <USB_SetTurnaroundTime+0x110>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d906      	bls.n	800656e <USB_SetTurnaroundTime+0x2a>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4a3d      	ldr	r2, [pc, #244]	; (8006658 <USB_SetTurnaroundTime+0x114>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d202      	bcs.n	800656e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006568:	230f      	movs	r3, #15
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e05c      	b.n	8006628 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	4a39      	ldr	r2, [pc, #228]	; (8006658 <USB_SetTurnaroundTime+0x114>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d306      	bcc.n	8006584 <USB_SetTurnaroundTime+0x40>
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	4a38      	ldr	r2, [pc, #224]	; (800665c <USB_SetTurnaroundTime+0x118>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d202      	bcs.n	8006584 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800657e:	230e      	movs	r3, #14
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	e051      	b.n	8006628 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4a35      	ldr	r2, [pc, #212]	; (800665c <USB_SetTurnaroundTime+0x118>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d306      	bcc.n	800659a <USB_SetTurnaroundTime+0x56>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	4a34      	ldr	r2, [pc, #208]	; (8006660 <USB_SetTurnaroundTime+0x11c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d202      	bcs.n	800659a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006594:	230d      	movs	r3, #13
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e046      	b.n	8006628 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4a30      	ldr	r2, [pc, #192]	; (8006660 <USB_SetTurnaroundTime+0x11c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d306      	bcc.n	80065b0 <USB_SetTurnaroundTime+0x6c>
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	4a2f      	ldr	r2, [pc, #188]	; (8006664 <USB_SetTurnaroundTime+0x120>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d802      	bhi.n	80065b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80065aa:	230c      	movs	r3, #12
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	e03b      	b.n	8006628 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4a2c      	ldr	r2, [pc, #176]	; (8006664 <USB_SetTurnaroundTime+0x120>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d906      	bls.n	80065c6 <USB_SetTurnaroundTime+0x82>
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	4a2b      	ldr	r2, [pc, #172]	; (8006668 <USB_SetTurnaroundTime+0x124>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d802      	bhi.n	80065c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80065c0:	230b      	movs	r3, #11
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	e030      	b.n	8006628 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	4a27      	ldr	r2, [pc, #156]	; (8006668 <USB_SetTurnaroundTime+0x124>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d906      	bls.n	80065dc <USB_SetTurnaroundTime+0x98>
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	4a26      	ldr	r2, [pc, #152]	; (800666c <USB_SetTurnaroundTime+0x128>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d802      	bhi.n	80065dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80065d6:	230a      	movs	r3, #10
 80065d8:	617b      	str	r3, [r7, #20]
 80065da:	e025      	b.n	8006628 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4a23      	ldr	r2, [pc, #140]	; (800666c <USB_SetTurnaroundTime+0x128>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d906      	bls.n	80065f2 <USB_SetTurnaroundTime+0xae>
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	4a22      	ldr	r2, [pc, #136]	; (8006670 <USB_SetTurnaroundTime+0x12c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d202      	bcs.n	80065f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80065ec:	2309      	movs	r3, #9
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	e01a      	b.n	8006628 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	4a1e      	ldr	r2, [pc, #120]	; (8006670 <USB_SetTurnaroundTime+0x12c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d306      	bcc.n	8006608 <USB_SetTurnaroundTime+0xc4>
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	4a1d      	ldr	r2, [pc, #116]	; (8006674 <USB_SetTurnaroundTime+0x130>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d802      	bhi.n	8006608 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006602:	2308      	movs	r3, #8
 8006604:	617b      	str	r3, [r7, #20]
 8006606:	e00f      	b.n	8006628 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	4a1a      	ldr	r2, [pc, #104]	; (8006674 <USB_SetTurnaroundTime+0x130>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d906      	bls.n	800661e <USB_SetTurnaroundTime+0xda>
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	4a19      	ldr	r2, [pc, #100]	; (8006678 <USB_SetTurnaroundTime+0x134>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d202      	bcs.n	800661e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006618:	2307      	movs	r3, #7
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	e004      	b.n	8006628 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800661e:	2306      	movs	r3, #6
 8006620:	617b      	str	r3, [r7, #20]
 8006622:	e001      	b.n	8006628 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006624:	2309      	movs	r3, #9
 8006626:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	68da      	ldr	r2, [r3, #12]
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	029b      	lsls	r3, r3, #10
 800663c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006640:	431a      	orrs	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	371c      	adds	r7, #28
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	00d8acbf 	.word	0x00d8acbf
 8006658:	00e4e1c0 	.word	0x00e4e1c0
 800665c:	00f42400 	.word	0x00f42400
 8006660:	01067380 	.word	0x01067380
 8006664:	011a499f 	.word	0x011a499f
 8006668:	01312cff 	.word	0x01312cff
 800666c:	014ca43f 	.word	0x014ca43f
 8006670:	016e3600 	.word	0x016e3600
 8006674:	01a6ab1f 	.word	0x01a6ab1f
 8006678:	01e84800 	.word	0x01e84800

0800667c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f043 0201 	orr.w	r2, r3, #1
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f023 0201 	bic.w	r2, r3, #1
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d106      	bne.n	80066ec <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	60da      	str	r2, [r3, #12]
 80066ea:	e00b      	b.n	8006704 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60da      	str	r2, [r3, #12]
 80066fe:	e001      	b.n	8006704 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e003      	b.n	800670c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006704:	2032      	movs	r0, #50	; 0x32
 8006706:	f7fa fae1 	bl	8000ccc <HAL_Delay>

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006714:	b084      	sub	sp, #16
 8006716:	b580      	push	{r7, lr}
 8006718:	b086      	sub	sp, #24
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800672e:	2300      	movs	r3, #0
 8006730:	613b      	str	r3, [r7, #16]
 8006732:	e009      	b.n	8006748 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	3340      	adds	r3, #64	; 0x40
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	2200      	movs	r2, #0
 8006740:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	3301      	adds	r3, #1
 8006746:	613b      	str	r3, [r7, #16]
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2b0e      	cmp	r3, #14
 800674c:	d9f2      	bls.n	8006734 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800674e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d11c      	bne.n	800678e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006762:	f043 0302 	orr.w	r3, r3, #2
 8006766:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	e005      	b.n	800679a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006792:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067a0:	461a      	mov	r2, r3
 80067a2:	2300      	movs	r3, #0
 80067a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ac:	4619      	mov	r1, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b4:	461a      	mov	r2, r3
 80067b6:	680b      	ldr	r3, [r1, #0]
 80067b8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067ba:	2103      	movs	r1, #3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f93d 	bl	8006a3c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067c2:	2110      	movs	r1, #16
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f8f1 	bl	80069ac <USB_FlushTxFifo>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f90f 	bl	80069f8 <USB_FlushRxFifo>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ea:	461a      	mov	r2, r3
 80067ec:	2300      	movs	r3, #0
 80067ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f6:	461a      	mov	r2, r3
 80067f8:	2300      	movs	r3, #0
 80067fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006802:	461a      	mov	r2, r3
 8006804:	2300      	movs	r3, #0
 8006806:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006808:	2300      	movs	r3, #0
 800680a:	613b      	str	r3, [r7, #16]
 800680c:	e043      	b.n	8006896 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006824:	d118      	bne.n	8006858 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10a      	bne.n	8006842 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006838:	461a      	mov	r2, r3
 800683a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	e013      	b.n	800686a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684e:	461a      	mov	r2, r3
 8006850:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	e008      	b.n	800686a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006864:	461a      	mov	r2, r3
 8006866:	2300      	movs	r3, #0
 8006868:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006876:	461a      	mov	r2, r3
 8006878:	2300      	movs	r3, #0
 800687a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006888:	461a      	mov	r2, r3
 800688a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800688e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	3301      	adds	r3, #1
 8006894:	613b      	str	r3, [r7, #16]
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	429a      	cmp	r2, r3
 800689c:	d3b7      	bcc.n	800680e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800689e:	2300      	movs	r3, #0
 80068a0:	613b      	str	r3, [r7, #16]
 80068a2:	e043      	b.n	800692c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068ba:	d118      	bne.n	80068ee <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10a      	bne.n	80068d8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ce:	461a      	mov	r2, r3
 80068d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	e013      	b.n	8006900 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e4:	461a      	mov	r2, r3
 80068e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	e008      	b.n	8006900 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fa:	461a      	mov	r2, r3
 80068fc:	2300      	movs	r3, #0
 80068fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690c:	461a      	mov	r2, r3
 800690e:	2300      	movs	r3, #0
 8006910:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691e:	461a      	mov	r2, r3
 8006920:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006924:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	3301      	adds	r3, #1
 800692a:	613b      	str	r3, [r7, #16]
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	429a      	cmp	r2, r3
 8006932:	d3b7      	bcc.n	80068a4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006942:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006946:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006954:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f043 0210 	orr.w	r2, r3, #16
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	699a      	ldr	r2, [r3, #24]
 8006966:	4b10      	ldr	r3, [pc, #64]	; (80069a8 <USB_DevInit+0x294>)
 8006968:	4313      	orrs	r3, r2
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800696e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	f043 0208 	orr.w	r2, r3, #8
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006982:	2b01      	cmp	r3, #1
 8006984:	d107      	bne.n	8006996 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800698e:	f043 0304 	orr.w	r3, r3, #4
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006996:	7dfb      	ldrb	r3, [r7, #23]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069a2:	b004      	add	sp, #16
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	803c3800 	.word	0x803c3800

080069ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	019b      	lsls	r3, r3, #6
 80069be:	f043 0220 	orr.w	r2, r3, #32
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3301      	adds	r3, #1
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4a09      	ldr	r2, [pc, #36]	; (80069f4 <USB_FlushTxFifo+0x48>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d901      	bls.n	80069d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e006      	b.n	80069e6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b20      	cmp	r3, #32
 80069e2:	d0f0      	beq.n	80069c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	00030d40 	.word	0x00030d40

080069f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2210      	movs	r2, #16
 8006a08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4a09      	ldr	r2, [pc, #36]	; (8006a38 <USB_FlushRxFifo+0x40>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d901      	bls.n	8006a1c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e006      	b.n	8006a2a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	f003 0310 	and.w	r3, r3, #16
 8006a24:	2b10      	cmp	r3, #16
 8006a26:	d0f0      	beq.n	8006a0a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	00030d40 	.word	0x00030d40

08006a3c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	68f9      	ldr	r1, [r7, #12]
 8006a58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b087      	sub	sp, #28
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 0306 	and.w	r3, r3, #6
 8006a86:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d002      	beq.n	8006a94 <USB_GetDevSpeed+0x26>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b06      	cmp	r3, #6
 8006a92:	d102      	bne.n	8006a9a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a94:	2302      	movs	r3, #2
 8006a96:	75fb      	strb	r3, [r7, #23]
 8006a98:	e001      	b.n	8006a9e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006a9a:	230f      	movs	r3, #15
 8006a9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	785b      	ldrb	r3, [r3, #1]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d13a      	bne.n	8006b3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ace:	69da      	ldr	r2, [r3, #28]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	f003 030f 	and.w	r3, r3, #15
 8006ad8:	2101      	movs	r1, #1
 8006ada:	fa01 f303 	lsl.w	r3, r1, r3
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	68f9      	ldr	r1, [r7, #12]
 8006ae2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d155      	bne.n	8006bac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	78db      	ldrb	r3, [r3, #3]
 8006b1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	059b      	lsls	r3, r3, #22
 8006b22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b24:	4313      	orrs	r3, r2
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	0151      	lsls	r1, r2, #5
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	440a      	add	r2, r1
 8006b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	e036      	b.n	8006bac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b44:	69da      	ldr	r2, [r3, #28]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	f003 030f 	and.w	r3, r3, #15
 8006b4e:	2101      	movs	r1, #1
 8006b50:	fa01 f303 	lsl.w	r3, r1, r3
 8006b54:	041b      	lsls	r3, r3, #16
 8006b56:	68f9      	ldr	r1, [r7, #12]
 8006b58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d11a      	bne.n	8006bac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	78db      	ldrb	r3, [r3, #3]
 8006b90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b92:	430b      	orrs	r3, r1
 8006b94:	4313      	orrs	r3, r2
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006baa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
	...

08006bbc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	785b      	ldrb	r3, [r3, #1]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d161      	bne.n	8006c9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bee:	d11f      	bne.n	8006c30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	0151      	lsls	r1, r2, #5
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	440a      	add	r2, r1
 8006c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	0151      	lsls	r1, r2, #5
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	440a      	add	r2, r1
 8006c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	f003 030f 	and.w	r3, r3, #15
 8006c40:	2101      	movs	r1, #1
 8006c42:	fa01 f303 	lsl.w	r3, r1, r3
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	43db      	mvns	r3, r3
 8006c4a:	68f9      	ldr	r1, [r7, #12]
 8006c4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c50:	4013      	ands	r3, r2
 8006c52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5a:	69da      	ldr	r2, [r3, #28]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	2101      	movs	r1, #1
 8006c66:	fa01 f303 	lsl.w	r3, r1, r3
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	43db      	mvns	r3, r3
 8006c6e:	68f9      	ldr	r1, [r7, #12]
 8006c70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c74:	4013      	ands	r3, r2
 8006c76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	0159      	lsls	r1, r3, #5
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	440b      	add	r3, r1
 8006c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c92:	4619      	mov	r1, r3
 8006c94:	4b35      	ldr	r3, [pc, #212]	; (8006d6c <USB_DeactivateEndpoint+0x1b0>)
 8006c96:	4013      	ands	r3, r2
 8006c98:	600b      	str	r3, [r1, #0]
 8006c9a:	e060      	b.n	8006d5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cb2:	d11f      	bne.n	8006cf4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	0151      	lsls	r1, r2, #5
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	440a      	add	r2, r1
 8006cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cd2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	0151      	lsls	r1, r2, #5
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	440a      	add	r2, r1
 8006cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	f003 030f 	and.w	r3, r3, #15
 8006d04:	2101      	movs	r1, #1
 8006d06:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0a:	041b      	lsls	r3, r3, #16
 8006d0c:	43db      	mvns	r3, r3
 8006d0e:	68f9      	ldr	r1, [r7, #12]
 8006d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d14:	4013      	ands	r3, r2
 8006d16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1e:	69da      	ldr	r2, [r3, #28]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	f003 030f 	and.w	r3, r3, #15
 8006d28:	2101      	movs	r1, #1
 8006d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d2e:	041b      	lsls	r3, r3, #16
 8006d30:	43db      	mvns	r3, r3
 8006d32:	68f9      	ldr	r1, [r7, #12]
 8006d34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d38:	4013      	ands	r3, r2
 8006d3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	0159      	lsls	r1, r3, #5
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	440b      	add	r3, r1
 8006d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d56:	4619      	mov	r1, r3
 8006d58:	4b05      	ldr	r3, [pc, #20]	; (8006d70 <USB_DeactivateEndpoint+0x1b4>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3714      	adds	r7, #20
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	ec337800 	.word	0xec337800
 8006d70:	eff37800 	.word	0xeff37800

08006d74 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	785b      	ldrb	r3, [r3, #1]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	f040 810a 	bne.w	8006fa6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d132      	bne.n	8006e00 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006db8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	0151      	lsls	r1, r2, #5
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	440a      	add	r2, r1
 8006dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ddc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	0151      	lsls	r1, r2, #5
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	440a      	add	r2, r1
 8006df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df8:	0cdb      	lsrs	r3, r3, #19
 8006dfa:	04db      	lsls	r3, r3, #19
 8006dfc:	6113      	str	r3, [r2, #16]
 8006dfe:	e074      	b.n	8006eea <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	0151      	lsls	r1, r2, #5
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	440a      	add	r2, r1
 8006e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e1a:	0cdb      	lsrs	r3, r3, #19
 8006e1c:	04db      	lsls	r3, r3, #19
 8006e1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	0151      	lsls	r1, r2, #5
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	440a      	add	r2, r1
 8006e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e50:	691a      	ldr	r2, [r3, #16]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	6959      	ldr	r1, [r3, #20]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	440b      	add	r3, r1
 8006e5c:	1e59      	subs	r1, r3, #1
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e66:	04d9      	lsls	r1, r3, #19
 8006e68:	4baf      	ldr	r3, [pc, #700]	; (8007128 <USB_EPStartXfer+0x3b4>)
 8006e6a:	400b      	ands	r3, r1
 8006e6c:	6939      	ldr	r1, [r7, #16]
 8006e6e:	0148      	lsls	r0, r1, #5
 8006e70:	6979      	ldr	r1, [r7, #20]
 8006e72:	4401      	add	r1, r0
 8006e74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e88:	691a      	ldr	r2, [r3, #16]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e92:	6939      	ldr	r1, [r7, #16]
 8006e94:	0148      	lsls	r0, r1, #5
 8006e96:	6979      	ldr	r1, [r7, #20]
 8006e98:	4401      	add	r1, r0
 8006e9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	78db      	ldrb	r3, [r3, #3]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d11f      	bne.n	8006eea <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	0151      	lsls	r1, r2, #5
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	440a      	add	r2, r1
 8006ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ec4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006ec8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	0151      	lsls	r1, r2, #5
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	440a      	add	r2, r1
 8006ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ee8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	0151      	lsls	r1, r2, #5
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	440a      	add	r2, r1
 8006f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f08:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	78db      	ldrb	r3, [r3, #3]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d015      	beq.n	8006f3e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 8100 	beq.w	800711c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	f003 030f 	and.w	r3, r3, #15
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f32:	6979      	ldr	r1, [r7, #20]
 8006f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	634b      	str	r3, [r1, #52]	; 0x34
 8006f3c:	e0ee      	b.n	800711c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d110      	bne.n	8006f70 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	0151      	lsls	r1, r2, #5
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	440a      	add	r2, r1
 8006f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f6c:	6013      	str	r3, [r2, #0]
 8006f6e:	e00f      	b.n	8006f90 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	0151      	lsls	r1, r2, #5
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	440a      	add	r2, r1
 8006f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f8e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	68d9      	ldr	r1, [r3, #12]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781a      	ldrb	r2, [r3, #0]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f9e2 	bl	8007368 <USB_WritePacket>
 8006fa4:	e0ba      	b.n	800711c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	0151      	lsls	r1, r2, #5
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	440a      	add	r2, r1
 8006fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fc0:	0cdb      	lsrs	r3, r3, #19
 8006fc2:	04db      	lsls	r3, r3, #19
 8006fc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	0151      	lsls	r1, r2, #5
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	440a      	add	r2, r1
 8006fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fe0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fe4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fe8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d123      	bne.n	800703a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffe:	691a      	ldr	r2, [r3, #16]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007008:	6939      	ldr	r1, [r7, #16]
 800700a:	0148      	lsls	r0, r1, #5
 800700c:	6979      	ldr	r1, [r7, #20]
 800700e:	4401      	add	r1, r0
 8007010:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007014:	4313      	orrs	r3, r2
 8007016:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	440a      	add	r2, r1
 800702e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007032:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007036:	6113      	str	r3, [r2, #16]
 8007038:	e033      	b.n	80070a2 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	695a      	ldr	r2, [r3, #20]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	4413      	add	r3, r2
 8007044:	1e5a      	subs	r2, r3, #1
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	fbb2 f3f3 	udiv	r3, r2, r3
 800704e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705c:	691a      	ldr	r2, [r3, #16]
 800705e:	89fb      	ldrh	r3, [r7, #14]
 8007060:	04d9      	lsls	r1, r3, #19
 8007062:	4b31      	ldr	r3, [pc, #196]	; (8007128 <USB_EPStartXfer+0x3b4>)
 8007064:	400b      	ands	r3, r1
 8007066:	6939      	ldr	r1, [r7, #16]
 8007068:	0148      	lsls	r0, r1, #5
 800706a:	6979      	ldr	r1, [r7, #20]
 800706c:	4401      	add	r1, r0
 800706e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007072:	4313      	orrs	r3, r2
 8007074:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007082:	691a      	ldr	r2, [r3, #16]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	89f9      	ldrh	r1, [r7, #14]
 800708a:	fb01 f303 	mul.w	r3, r1, r3
 800708e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007092:	6939      	ldr	r1, [r7, #16]
 8007094:	0148      	lsls	r0, r1, #5
 8007096:	6979      	ldr	r1, [r7, #20]
 8007098:	4401      	add	r1, r0
 800709a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800709e:	4313      	orrs	r3, r2
 80070a0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	78db      	ldrb	r3, [r3, #3]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d128      	bne.n	80070fc <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d110      	bne.n	80070dc <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	0151      	lsls	r1, r2, #5
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	440a      	add	r2, r1
 80070d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	e00f      	b.n	80070fc <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	0151      	lsls	r1, r2, #5
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	440a      	add	r2, r1
 80070f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	0151      	lsls	r1, r2, #5
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	440a      	add	r2, r1
 8007112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007116:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800711a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	1ff80000 	.word	0x1ff80000

0800712c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	785b      	ldrb	r3, [r3, #1]
 8007144:	2b01      	cmp	r3, #1
 8007146:	f040 80ab 	bne.w	80072a0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d132      	bne.n	80071b8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4413      	add	r3, r2
 800715a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	0151      	lsls	r1, r2, #5
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	440a      	add	r2, r1
 8007168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800716c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007170:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007174:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4413      	add	r3, r2
 800717e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	0151      	lsls	r1, r2, #5
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	440a      	add	r2, r1
 800718c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007190:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007194:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	0151      	lsls	r1, r2, #5
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	440a      	add	r2, r1
 80071ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b0:	0cdb      	lsrs	r3, r3, #19
 80071b2:	04db      	lsls	r3, r3, #19
 80071b4:	6113      	str	r3, [r2, #16]
 80071b6:	e04e      	b.n	8007256 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	0151      	lsls	r1, r2, #5
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	440a      	add	r2, r1
 80071ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d2:	0cdb      	lsrs	r3, r3, #19
 80071d4:	04db      	lsls	r3, r3, #19
 80071d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071fa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	695a      	ldr	r2, [r3, #20]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	429a      	cmp	r2, r3
 8007206:	d903      	bls.n	8007210 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	0151      	lsls	r1, r2, #5
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	440a      	add	r2, r1
 8007226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800722a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800722e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723c:	691a      	ldr	r2, [r3, #16]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007246:	68b9      	ldr	r1, [r7, #8]
 8007248:	0148      	lsls	r0, r1, #5
 800724a:	68f9      	ldr	r1, [r7, #12]
 800724c:	4401      	add	r1, r0
 800724e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007252:	4313      	orrs	r3, r2
 8007254:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	0151      	lsls	r1, r2, #5
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	440a      	add	r2, r1
 800726c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007270:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007274:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d06d      	beq.n	800735a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	f003 030f 	and.w	r3, r3, #15
 800728e:	2101      	movs	r1, #1
 8007290:	fa01 f303 	lsl.w	r3, r1, r3
 8007294:	68f9      	ldr	r1, [r7, #12]
 8007296:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800729a:	4313      	orrs	r3, r2
 800729c:	634b      	str	r3, [r1, #52]	; 0x34
 800729e:	e05c      	b.n	800735a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	0151      	lsls	r1, r2, #5
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	440a      	add	r2, r1
 80072b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ba:	0cdb      	lsrs	r3, r3, #19
 80072bc:	04db      	lsls	r3, r3, #19
 80072be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	0151      	lsls	r1, r2, #5
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	440a      	add	r2, r1
 80072d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072e2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	0151      	lsls	r1, r2, #5
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	440a      	add	r2, r1
 800730a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800730e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007312:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007320:	691a      	ldr	r2, [r3, #16]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800732a:	68b9      	ldr	r1, [r7, #8]
 800732c:	0148      	lsls	r0, r1, #5
 800732e:	68f9      	ldr	r1, [r7, #12]
 8007330:	4401      	add	r1, r0
 8007332:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007336:	4313      	orrs	r3, r2
 8007338:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	0151      	lsls	r1, r2, #5
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	440a      	add	r2, r1
 8007350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007354:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007358:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007368:	b480      	push	{r7}
 800736a:	b089      	sub	sp, #36	; 0x24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	4611      	mov	r1, r2
 8007374:	461a      	mov	r2, r3
 8007376:	460b      	mov	r3, r1
 8007378:	71fb      	strb	r3, [r7, #7]
 800737a:	4613      	mov	r3, r2
 800737c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007386:	88bb      	ldrh	r3, [r7, #4]
 8007388:	3303      	adds	r3, #3
 800738a:	089b      	lsrs	r3, r3, #2
 800738c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800738e:	2300      	movs	r3, #0
 8007390:	61bb      	str	r3, [r7, #24]
 8007392:	e00f      	b.n	80073b4 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	031a      	lsls	r2, r3, #12
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	4413      	add	r3, r2
 800739c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073a0:	461a      	mov	r2, r3
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	3304      	adds	r3, #4
 80073ac:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	3301      	adds	r3, #1
 80073b2:	61bb      	str	r3, [r7, #24]
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d3eb      	bcc.n	8007394 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3724      	adds	r7, #36	; 0x24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b089      	sub	sp, #36	; 0x24
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	60f8      	str	r0, [r7, #12]
 80073d2:	60b9      	str	r1, [r7, #8]
 80073d4:	4613      	mov	r3, r2
 80073d6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80073e0:	88fb      	ldrh	r3, [r7, #6]
 80073e2:	3303      	adds	r3, #3
 80073e4:	089b      	lsrs	r3, r3, #2
 80073e6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80073e8:	2300      	movs	r3, #0
 80073ea:	61bb      	str	r3, [r7, #24]
 80073ec:	e00b      	b.n	8007406 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	601a      	str	r2, [r3, #0]
    pDest++;
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	3304      	adds	r3, #4
 80073fe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	3301      	adds	r3, #1
 8007404:	61bb      	str	r3, [r7, #24]
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	429a      	cmp	r2, r3
 800740c:	d3ef      	bcc.n	80073ee <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800740e:	69fb      	ldr	r3, [r7, #28]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3724      	adds	r7, #36	; 0x24
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	785b      	ldrb	r3, [r3, #1]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d12c      	bne.n	8007492 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	db12      	blt.n	8007470 <USB_EPSetStall+0x54>
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00f      	beq.n	8007470 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	0151      	lsls	r1, r2, #5
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	440a      	add	r2, r1
 8007466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800746a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800746e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	0151      	lsls	r1, r2, #5
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	440a      	add	r2, r1
 8007486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800748a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	e02b      	b.n	80074ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	db12      	blt.n	80074ca <USB_EPSetStall+0xae>
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00f      	beq.n	80074ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	0151      	lsls	r1, r2, #5
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	440a      	add	r2, r1
 80074c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	0151      	lsls	r1, r2, #5
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	440a      	add	r2, r1
 80074e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	785b      	ldrb	r3, [r3, #1]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d128      	bne.n	8007566 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	0151      	lsls	r1, r2, #5
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	440a      	add	r2, r1
 800752a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800752e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007532:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	78db      	ldrb	r3, [r3, #3]
 8007538:	2b03      	cmp	r3, #3
 800753a:	d003      	beq.n	8007544 <USB_EPClearStall+0x4c>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	78db      	ldrb	r3, [r3, #3]
 8007540:	2b02      	cmp	r3, #2
 8007542:	d138      	bne.n	80075b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4413      	add	r3, r2
 800754c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	0151      	lsls	r1, r2, #5
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	440a      	add	r2, r1
 800755a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800755e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	e027      	b.n	80075b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	0151      	lsls	r1, r2, #5
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	440a      	add	r2, r1
 800757c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007580:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007584:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	78db      	ldrb	r3, [r3, #3]
 800758a:	2b03      	cmp	r3, #3
 800758c:	d003      	beq.n	8007596 <USB_EPClearStall+0x9e>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	78db      	ldrb	r3, [r3, #3]
 8007592:	2b02      	cmp	r3, #2
 8007594:	d10f      	bne.n	80075b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	0151      	lsls	r1, r2, #5
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	440a      	add	r2, r1
 80075ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80075e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	011b      	lsls	r3, r3, #4
 80075f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80075f8:	68f9      	ldr	r1, [r7, #12]
 80075fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075fe:	4313      	orrs	r3, r2
 8007600:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800762a:	f023 0303 	bic.w	r3, r3, #3
 800762e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800763e:	f023 0302 	bic.w	r3, r3, #2
 8007642:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007652:	b480      	push	{r7}
 8007654:	b085      	sub	sp, #20
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800766c:	f023 0303 	bic.w	r3, r3, #3
 8007670:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007680:	f043 0302 	orr.w	r3, r3, #2
 8007684:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	4013      	ands	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076ac:	68fb      	ldr	r3, [r7, #12]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	4013      	ands	r3, r2
 80076dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	0c1b      	lsrs	r3, r3, #16
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b085      	sub	sp, #20
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	4013      	ands	r3, r2
 8007710:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	b29b      	uxth	r3, r3
}
 8007716:	4618      	mov	r0, r3
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007722:	b480      	push	{r7}
 8007724:	b085      	sub	sp, #20
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	460b      	mov	r3, r1
 800772c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007732:	78fb      	ldrb	r3, [r7, #3]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4413      	add	r3, r2
 800773a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	4013      	ands	r3, r2
 800774e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007750:	68bb      	ldr	r3, [r7, #8]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800775e:	b480      	push	{r7}
 8007760:	b087      	sub	sp, #28
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800777e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007780:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007782:	78fb      	ldrb	r3, [r7, #3]
 8007784:	f003 030f 	and.w	r3, r3, #15
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	fa22 f303 	lsr.w	r3, r2, r3
 800778e:	01db      	lsls	r3, r3, #7
 8007790:	b2db      	uxtb	r3, r3
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	4313      	orrs	r3, r2
 8007796:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007798:	78fb      	ldrb	r3, [r7, #3]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	4013      	ands	r3, r2
 80077aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077ac:	68bb      	ldr	r3, [r7, #8]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	371c      	adds	r7, #28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	f003 0301 	and.w	r3, r3, #1
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b085      	sub	sp, #20
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80077f4:	f023 0307 	bic.w	r3, r3, #7
 80077f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800780c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	333c      	adds	r3, #60	; 0x3c
 800782e:	3304      	adds	r3, #4
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	4a1c      	ldr	r2, [pc, #112]	; (80078a8 <USB_EP0_OutStart+0x8c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d90a      	bls.n	8007852 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800784c:	d101      	bne.n	8007852 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	e024      	b.n	800789c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007858:	461a      	mov	r2, r3
 800785a:	2300      	movs	r3, #0
 800785c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800786c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007870:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007880:	f043 0318 	orr.w	r3, r3, #24
 8007884:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007894:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007898:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	4f54300a 	.word	0x4f54300a

080078ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	3301      	adds	r3, #1
 80078bc:	60fb      	str	r3, [r7, #12]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4a13      	ldr	r2, [pc, #76]	; (8007910 <USB_CoreReset+0x64>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d901      	bls.n	80078ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e01b      	b.n	8007902 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	daf2      	bge.n	80078b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	f043 0201 	orr.w	r2, r3, #1
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3301      	adds	r3, #1
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4a09      	ldr	r2, [pc, #36]	; (8007910 <USB_CoreReset+0x64>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d901      	bls.n	80078f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e006      	b.n	8007902 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d0f0      	beq.n	80078e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	00030d40 	.word	0x00030d40

08007914 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007920:	2010      	movs	r0, #16
 8007922:	f003 f871 	bl	800aa08 <USBD_static_malloc>
 8007926:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d105      	bne.n	800793a <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007936:	2302      	movs	r3, #2
 8007938:	e01b      	b.n	8007972 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	7c1b      	ldrb	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d103      	bne.n	8007952 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2207      	movs	r2, #7
 800794e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007950:	e002      	b.n	8007958 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	220a      	movs	r2, #10
 8007956:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007958:	2304      	movs	r3, #4
 800795a:	2203      	movs	r2, #3
 800795c:	2181      	movs	r1, #129	; 0x81
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f002 fe52 	bl	800a608 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b082      	sub	sp, #8
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	460b      	mov	r3, r1
 8007984:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007986:	2181      	movs	r1, #129	; 0x81
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f002 fe7b 	bl	800a684 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d009      	beq.n	80079b8 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079aa:	4618      	mov	r0, r3
 80079ac:	f003 f83a 	bl	800aa24 <USBD_static_free>
    pdev->pClassData = NULL;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
	...

080079c4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079d4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e0e8      	b.n	8007bba <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d046      	beq.n	8007a82 <USBD_HID_Setup+0xbe>
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	f040 80d8 	bne.w	8007baa <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	785b      	ldrb	r3, [r3, #1]
 80079fe:	3b02      	subs	r3, #2
 8007a00:	2b09      	cmp	r3, #9
 8007a02:	d836      	bhi.n	8007a72 <USBD_HID_Setup+0xae>
 8007a04:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <USBD_HID_Setup+0x48>)
 8007a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0a:	bf00      	nop
 8007a0c:	08007a63 	.word	0x08007a63
 8007a10:	08007a43 	.word	0x08007a43
 8007a14:	08007a73 	.word	0x08007a73
 8007a18:	08007a73 	.word	0x08007a73
 8007a1c:	08007a73 	.word	0x08007a73
 8007a20:	08007a73 	.word	0x08007a73
 8007a24:	08007a73 	.word	0x08007a73
 8007a28:	08007a73 	.word	0x08007a73
 8007a2c:	08007a51 	.word	0x08007a51
 8007a30:	08007a35 	.word	0x08007a35
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	885b      	ldrh	r3, [r3, #2]
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	601a      	str	r2, [r3, #0]
          break;
 8007a40:	e01e      	b.n	8007a80 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2201      	movs	r2, #1
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 fa4c 	bl	8008ee6 <USBD_CtlSendData>
          break;
 8007a4e:	e017      	b.n	8007a80 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	885b      	ldrh	r3, [r3, #2]
 8007a54:	0a1b      	lsrs	r3, r3, #8
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	605a      	str	r2, [r3, #4]
          break;
 8007a60:	e00e      	b.n	8007a80 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3304      	adds	r3, #4
 8007a66:	2201      	movs	r2, #1
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f001 fa3b 	bl	8008ee6 <USBD_CtlSendData>
          break;
 8007a70:	e006      	b.n	8007a80 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 f9c5 	bl	8008e04 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a7e:	bf00      	nop
      }
      break;
 8007a80:	e09a      	b.n	8007bb8 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	785b      	ldrb	r3, [r3, #1]
 8007a86:	2b0b      	cmp	r3, #11
 8007a88:	f200 8086 	bhi.w	8007b98 <USBD_HID_Setup+0x1d4>
 8007a8c:	a201      	add	r2, pc, #4	; (adr r2, 8007a94 <USBD_HID_Setup+0xd0>)
 8007a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a92:	bf00      	nop
 8007a94:	08007ac5 	.word	0x08007ac5
 8007a98:	08007ba7 	.word	0x08007ba7
 8007a9c:	08007b99 	.word	0x08007b99
 8007aa0:	08007b99 	.word	0x08007b99
 8007aa4:	08007b99 	.word	0x08007b99
 8007aa8:	08007b99 	.word	0x08007b99
 8007aac:	08007aef 	.word	0x08007aef
 8007ab0:	08007b99 	.word	0x08007b99
 8007ab4:	08007b99 	.word	0x08007b99
 8007ab8:	08007b99 	.word	0x08007b99
 8007abc:	08007b47 	.word	0x08007b47
 8007ac0:	08007b71 	.word	0x08007b71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	d107      	bne.n	8007ae0 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ad0:	f107 030a 	add.w	r3, r7, #10
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 fa04 	bl	8008ee6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ade:	e063      	b.n	8007ba8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f001 f98e 	bl	8008e04 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	75fb      	strb	r3, [r7, #23]
          break;
 8007aec:	e05c      	b.n	8007ba8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	885b      	ldrh	r3, [r3, #2]
 8007af2:	0a1b      	lsrs	r3, r3, #8
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	2b22      	cmp	r3, #34	; 0x22
 8007af8:	d108      	bne.n	8007b0c <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	88db      	ldrh	r3, [r3, #6]
 8007afe:	2b4a      	cmp	r3, #74	; 0x4a
 8007b00:	bf28      	it	cs
 8007b02:	234a      	movcs	r3, #74	; 0x4a
 8007b04:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007b06:	4b2f      	ldr	r3, [pc, #188]	; (8007bc4 <USBD_HID_Setup+0x200>)
 8007b08:	613b      	str	r3, [r7, #16]
 8007b0a:	e015      	b.n	8007b38 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	885b      	ldrh	r3, [r3, #2]
 8007b10:	0a1b      	lsrs	r3, r3, #8
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	2b21      	cmp	r3, #33	; 0x21
 8007b16:	d108      	bne.n	8007b2a <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8007b18:	4b2b      	ldr	r3, [pc, #172]	; (8007bc8 <USBD_HID_Setup+0x204>)
 8007b1a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	88db      	ldrh	r3, [r3, #6]
 8007b20:	2b09      	cmp	r3, #9
 8007b22:	bf28      	it	cs
 8007b24:	2309      	movcs	r3, #9
 8007b26:	82bb      	strh	r3, [r7, #20]
 8007b28:	e006      	b.n	8007b38 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 f969 	bl	8008e04 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b32:	2303      	movs	r3, #3
 8007b34:	75fb      	strb	r3, [r7, #23]
            break;
 8007b36:	e037      	b.n	8007ba8 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b38:	8abb      	ldrh	r3, [r7, #20]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	6939      	ldr	r1, [r7, #16]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f001 f9d1 	bl	8008ee6 <USBD_CtlSendData>
          break;
 8007b44:	e030      	b.n	8007ba8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d107      	bne.n	8007b62 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3308      	adds	r3, #8
 8007b56:	2201      	movs	r2, #1
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f001 f9c3 	bl	8008ee6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b60:	e022      	b.n	8007ba8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 f94d 	bl	8008e04 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b6e:	e01b      	b.n	8007ba8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d106      	bne.n	8007b8a <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	885b      	ldrh	r3, [r3, #2]
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	461a      	mov	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b88:	e00e      	b.n	8007ba8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 f939 	bl	8008e04 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b92:	2303      	movs	r3, #3
 8007b94:	75fb      	strb	r3, [r7, #23]
          break;
 8007b96:	e007      	b.n	8007ba8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 f932 	bl	8008e04 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	75fb      	strb	r3, [r7, #23]
          break;
 8007ba4:	e000      	b.n	8007ba8 <USBD_HID_Setup+0x1e4>
          break;
 8007ba6:	bf00      	nop
      }
      break;
 8007ba8:	e006      	b.n	8007bb8 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f001 f929 	bl	8008e04 <USBD_CtlError>
      ret = USBD_FAIL;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb6:	bf00      	nop
  }

  return (uint8_t)ret;
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	200000c4 	.word	0x200000c4
 8007bc8:	200000ac 	.word	0x200000ac

08007bcc <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007be0:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d101      	bne.n	8007bec <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e013      	b.n	8007c14 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d10c      	bne.n	8007c12 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	7b1b      	ldrb	r3, [r3, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d108      	bne.n	8007c12 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	2201      	movs	r2, #1
 8007c04:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8007c06:	88fb      	ldrh	r3, [r7, #6]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	2181      	movs	r1, #129	; 0x81
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f002 fe3d 	bl	800a88c <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2222      	movs	r2, #34	; 0x22
 8007c28:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8007c2a:	4b03      	ldr	r3, [pc, #12]	; (8007c38 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	20000040 	.word	0x20000040

08007c3c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2222      	movs	r2, #34	; 0x22
 8007c48:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8007c4a:	4b03      	ldr	r3, [pc, #12]	; (8007c58 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	20000064 	.word	0x20000064

08007c5c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2222      	movs	r2, #34	; 0x22
 8007c68:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8007c6a:	4b03      	ldr	r3, [pc, #12]	; (8007c78 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	20000088 	.word	0x20000088

08007c7c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c8e:	2200      	movs	r2, #0
 8007c90:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	220a      	movs	r2, #10
 8007cac:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007cae:	4b03      	ldr	r3, [pc, #12]	; (8007cbc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	200000b8 	.word	0x200000b8

08007cc0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e01f      	b.n	8007d18 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	79fa      	ldrb	r2, [r7, #7]
 8007d0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f002 fbfd 	bl	800a50c <USBD_LL_Init>
 8007d12:	4603      	mov	r3, r0
 8007d14:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3718      	adds	r7, #24
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e016      	b.n	8007d66 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	f107 020e 	add.w	r2, r7, #14
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4798      	blx	r3
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b082      	sub	sp, #8
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f002 fc14 	bl	800a5a4 <USBD_LL_Start>
 8007d7c:	4603      	mov	r3, r0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007da8:	2303      	movs	r3, #3
 8007daa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d009      	beq.n	8007dca <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	78fa      	ldrb	r2, [r7, #3]
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d007      	beq.n	8007dfa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	78fa      	ldrb	r2, [r7, #3]
 8007df4:	4611      	mov	r1, r2
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	4798      	blx	r3
  }

  return USBD_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 ffba 	bl	8008d90 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e38:	f003 031f 	and.w	r3, r3, #31
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d01a      	beq.n	8007e76 <USBD_LL_SetupStage+0x72>
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d822      	bhi.n	8007e8a <USBD_LL_SetupStage+0x86>
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <USBD_LL_SetupStage+0x4a>
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d00a      	beq.n	8007e62 <USBD_LL_SetupStage+0x5e>
 8007e4c:	e01d      	b.n	8007e8a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e54:	4619      	mov	r1, r3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa62 	bl	8008320 <USBD_StdDevReq>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e60:	e020      	b.n	8007ea4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fac6 	bl	80083fc <USBD_StdItfReq>
 8007e70:	4603      	mov	r3, r0
 8007e72:	73fb      	strb	r3, [r7, #15]
      break;
 8007e74:	e016      	b.n	8007ea4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fb05 	bl	800848e <USBD_StdEPReq>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73fb      	strb	r3, [r7, #15]
      break;
 8007e88:	e00c      	b.n	8007ea4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f002 fc29 	bl	800a6f0 <USBD_LL_StallEP>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ea2:	bf00      	nop
  }

  return ret;
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b086      	sub	sp, #24
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	60f8      	str	r0, [r7, #12]
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	607a      	str	r2, [r7, #4]
 8007eba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007ebc:	7afb      	ldrb	r3, [r7, #11]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d138      	bne.n	8007f34 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ec8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ed0:	2b03      	cmp	r3, #3
 8007ed2:	d14a      	bne.n	8007f6a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d913      	bls.n	8007f08 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	689a      	ldr	r2, [r3, #8]
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	1ad2      	subs	r2, r2, r3
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	bf28      	it	cs
 8007efa:	4613      	movcs	r3, r2
 8007efc:	461a      	mov	r2, r3
 8007efe:	6879      	ldr	r1, [r7, #4]
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f001 f81c 	bl	8008f3e <USBD_CtlContinueRx>
 8007f06:	e030      	b.n	8007f6a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d10b      	bne.n	8007f2c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d005      	beq.n	8007f2c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f001 f817 	bl	8008f60 <USBD_CtlSendStatus>
 8007f32:	e01a      	b.n	8007f6a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d114      	bne.n	8007f6a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00e      	beq.n	8007f6a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	7afa      	ldrb	r2, [r7, #11]
 8007f56:	4611      	mov	r1, r2
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	4798      	blx	r3
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
 8007f68:	e000      	b.n	8007f6c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3718      	adds	r7, #24
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007f82:	7afb      	ldrb	r3, [r7, #11]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d16b      	bne.n	8008060 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3314      	adds	r3, #20
 8007f8c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d156      	bne.n	8008046 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	689a      	ldr	r2, [r3, #8]
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d914      	bls.n	8007fce <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	689a      	ldr	r2, [r3, #8]
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	1ad2      	subs	r2, r2, r3
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	6879      	ldr	r1, [r7, #4]
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f000 ffae 	bl	8008f1c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f002 fc98 	bl	800a8fc <USBD_LL_PrepareReceive>
 8007fcc:	e03b      	b.n	8008046 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d11c      	bne.n	8008014 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	685a      	ldr	r2, [r3, #4]
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d316      	bcc.n	8008014 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d20f      	bcs.n	8008014 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 ff8f 	bl	8008f1c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008006:	2300      	movs	r3, #0
 8008008:	2200      	movs	r2, #0
 800800a:	2100      	movs	r1, #0
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f002 fc75 	bl	800a8fc <USBD_LL_PrepareReceive>
 8008012:	e018      	b.n	8008046 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b03      	cmp	r3, #3
 800801e:	d10b      	bne.n	8008038 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d005      	beq.n	8008038 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008038:	2180      	movs	r1, #128	; 0x80
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f002 fb58 	bl	800a6f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f000 ffa0 	bl	8008f86 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800804c:	2b01      	cmp	r3, #1
 800804e:	d122      	bne.n	8008096 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7ff fe98 	bl	8007d86 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800805e:	e01a      	b.n	8008096 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b03      	cmp	r3, #3
 800806a:	d114      	bne.n	8008096 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00e      	beq.n	8008096 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	7afa      	ldrb	r2, [r7, #11]
 8008082:	4611      	mov	r1, r2
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	4798      	blx	r3
 8008088:	4603      	mov	r3, r0
 800808a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800808c:	7dfb      	ldrb	r3, [r7, #23]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008092:	7dfb      	ldrb	r3, [r7, #23]
 8008094:	e000      	b.n	8008098 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3718      	adds	r7, #24
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e02f      	b.n	8008134 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00f      	beq.n	80080fe <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d009      	beq.n	80080fe <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	6852      	ldr	r2, [r2, #4]
 80080f6:	b2d2      	uxtb	r2, r2
 80080f8:	4611      	mov	r1, r2
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080fe:	2340      	movs	r3, #64	; 0x40
 8008100:	2200      	movs	r2, #0
 8008102:	2100      	movs	r1, #0
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f002 fa7f 	bl	800a608 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2240      	movs	r2, #64	; 0x40
 8008116:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800811a:	2340      	movs	r3, #64	; 0x40
 800811c:	2200      	movs	r2, #0
 800811e:	2180      	movs	r1, #128	; 0x80
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f002 fa71 	bl	800a608 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2240      	movs	r2, #64	; 0x40
 8008130:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	78fa      	ldrb	r2, [r7, #3]
 800814c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800816a:	b2da      	uxtb	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2204      	movs	r2, #4
 8008176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b04      	cmp	r3, #4
 800819a:	d106      	bne.n	80081aa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e012      	b.n	80081f4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b03      	cmp	r3, #3
 80081d8:	d10b      	bne.n	80081f2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d005      	beq.n	80081f2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008212:	2303      	movs	r3, #3
 8008214:	e014      	b.n	8008240 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b03      	cmp	r3, #3
 8008220:	d10d      	bne.n	800823e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d007      	beq.n	800823e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	78fa      	ldrb	r2, [r7, #3]
 8008238:	4611      	mov	r1, r2
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800825e:	2303      	movs	r3, #3
 8008260:	e014      	b.n	800828c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b03      	cmp	r3, #3
 800826c:	d10d      	bne.n	800828a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008276:	2b00      	cmp	r3, #0
 8008278:	d007      	beq.n	800828a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	78fa      	ldrb	r2, [r7, #3]
 8008284:	4611      	mov	r1, r2
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d009      	beq.n	80082d8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	6852      	ldr	r2, [r2, #4]
 80082d0:	b2d2      	uxtb	r2, r2
 80082d2:	4611      	mov	r1, r2
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	4798      	blx	r3
  }

  return USBD_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b087      	sub	sp, #28
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	3301      	adds	r3, #1
 80082f8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008300:	8a3b      	ldrh	r3, [r7, #16]
 8008302:	021b      	lsls	r3, r3, #8
 8008304:	b21a      	sxth	r2, r3
 8008306:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800830a:	4313      	orrs	r3, r2
 800830c:	b21b      	sxth	r3, r3
 800830e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008310:	89fb      	ldrh	r3, [r7, #14]
}
 8008312:	4618      	mov	r0, r3
 8008314:	371c      	adds	r7, #28
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
	...

08008320 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008336:	2b40      	cmp	r3, #64	; 0x40
 8008338:	d005      	beq.n	8008346 <USBD_StdDevReq+0x26>
 800833a:	2b40      	cmp	r3, #64	; 0x40
 800833c:	d853      	bhi.n	80083e6 <USBD_StdDevReq+0xc6>
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00b      	beq.n	800835a <USBD_StdDevReq+0x3a>
 8008342:	2b20      	cmp	r3, #32
 8008344:	d14f      	bne.n	80083e6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	4798      	blx	r3
 8008354:	4603      	mov	r3, r0
 8008356:	73fb      	strb	r3, [r7, #15]
      break;
 8008358:	e04a      	b.n	80083f0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	785b      	ldrb	r3, [r3, #1]
 800835e:	2b09      	cmp	r3, #9
 8008360:	d83b      	bhi.n	80083da <USBD_StdDevReq+0xba>
 8008362:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <USBD_StdDevReq+0x48>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	080083bd 	.word	0x080083bd
 800836c:	080083d1 	.word	0x080083d1
 8008370:	080083db 	.word	0x080083db
 8008374:	080083c7 	.word	0x080083c7
 8008378:	080083db 	.word	0x080083db
 800837c:	0800839b 	.word	0x0800839b
 8008380:	08008391 	.word	0x08008391
 8008384:	080083db 	.word	0x080083db
 8008388:	080083b3 	.word	0x080083b3
 800838c:	080083a5 	.word	0x080083a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f9de 	bl	8008754 <USBD_GetDescriptor>
          break;
 8008398:	e024      	b.n	80083e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fb6d 	bl	8008a7c <USBD_SetAddress>
          break;
 80083a2:	e01f      	b.n	80083e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fbac 	bl	8008b04 <USBD_SetConfig>
 80083ac:	4603      	mov	r3, r0
 80083ae:	73fb      	strb	r3, [r7, #15]
          break;
 80083b0:	e018      	b.n	80083e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fc4b 	bl	8008c50 <USBD_GetConfig>
          break;
 80083ba:	e013      	b.n	80083e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fc7c 	bl	8008cbc <USBD_GetStatus>
          break;
 80083c4:	e00e      	b.n	80083e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fcab 	bl	8008d24 <USBD_SetFeature>
          break;
 80083ce:	e009      	b.n	80083e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fcba 	bl	8008d4c <USBD_ClrFeature>
          break;
 80083d8:	e004      	b.n	80083e4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fd11 	bl	8008e04 <USBD_CtlError>
          break;
 80083e2:	bf00      	nop
      }
      break;
 80083e4:	e004      	b.n	80083f0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fd0b 	bl	8008e04 <USBD_CtlError>
      break;
 80083ee:	bf00      	nop
  }

  return ret;
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop

080083fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008412:	2b40      	cmp	r3, #64	; 0x40
 8008414:	d005      	beq.n	8008422 <USBD_StdItfReq+0x26>
 8008416:	2b40      	cmp	r3, #64	; 0x40
 8008418:	d82f      	bhi.n	800847a <USBD_StdItfReq+0x7e>
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <USBD_StdItfReq+0x26>
 800841e:	2b20      	cmp	r3, #32
 8008420:	d12b      	bne.n	800847a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008428:	b2db      	uxtb	r3, r3
 800842a:	3b01      	subs	r3, #1
 800842c:	2b02      	cmp	r3, #2
 800842e:	d81d      	bhi.n	800846c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	889b      	ldrh	r3, [r3, #4]
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b01      	cmp	r3, #1
 8008438:	d813      	bhi.n	8008462 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	4798      	blx	r3
 8008448:	4603      	mov	r3, r0
 800844a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	88db      	ldrh	r3, [r3, #6]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d110      	bne.n	8008476 <USBD_StdItfReq+0x7a>
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10d      	bne.n	8008476 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fd80 	bl	8008f60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008460:	e009      	b.n	8008476 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fccd 	bl	8008e04 <USBD_CtlError>
          break;
 800846a:	e004      	b.n	8008476 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fcc8 	bl	8008e04 <USBD_CtlError>
          break;
 8008474:	e000      	b.n	8008478 <USBD_StdItfReq+0x7c>
          break;
 8008476:	bf00      	nop
      }
      break;
 8008478:	e004      	b.n	8008484 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800847a:	6839      	ldr	r1, [r7, #0]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fcc1 	bl	8008e04 <USBD_CtlError>
      break;
 8008482:	bf00      	nop
  }

  return ret;
 8008484:	7bfb      	ldrb	r3, [r7, #15]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	889b      	ldrh	r3, [r3, #4]
 80084a0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084aa:	2b40      	cmp	r3, #64	; 0x40
 80084ac:	d007      	beq.n	80084be <USBD_StdEPReq+0x30>
 80084ae:	2b40      	cmp	r3, #64	; 0x40
 80084b0:	f200 8145 	bhi.w	800873e <USBD_StdEPReq+0x2b0>
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00c      	beq.n	80084d2 <USBD_StdEPReq+0x44>
 80084b8:	2b20      	cmp	r3, #32
 80084ba:	f040 8140 	bne.w	800873e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	4798      	blx	r3
 80084cc:	4603      	mov	r3, r0
 80084ce:	73fb      	strb	r3, [r7, #15]
      break;
 80084d0:	e13a      	b.n	8008748 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	785b      	ldrb	r3, [r3, #1]
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d007      	beq.n	80084ea <USBD_StdEPReq+0x5c>
 80084da:	2b03      	cmp	r3, #3
 80084dc:	f300 8129 	bgt.w	8008732 <USBD_StdEPReq+0x2a4>
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d07f      	beq.n	80085e4 <USBD_StdEPReq+0x156>
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d03c      	beq.n	8008562 <USBD_StdEPReq+0xd4>
 80084e8:	e123      	b.n	8008732 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d002      	beq.n	80084fc <USBD_StdEPReq+0x6e>
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d016      	beq.n	8008528 <USBD_StdEPReq+0x9a>
 80084fa:	e02c      	b.n	8008556 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084fc:	7bbb      	ldrb	r3, [r7, #14]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00d      	beq.n	800851e <USBD_StdEPReq+0x90>
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	2b80      	cmp	r3, #128	; 0x80
 8008506:	d00a      	beq.n	800851e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008508:	7bbb      	ldrb	r3, [r7, #14]
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f002 f8ef 	bl	800a6f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008512:	2180      	movs	r1, #128	; 0x80
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f002 f8eb 	bl	800a6f0 <USBD_LL_StallEP>
 800851a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800851c:	e020      	b.n	8008560 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fc6f 	bl	8008e04 <USBD_CtlError>
              break;
 8008526:	e01b      	b.n	8008560 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	885b      	ldrh	r3, [r3, #2]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10e      	bne.n	800854e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008530:	7bbb      	ldrb	r3, [r7, #14]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00b      	beq.n	800854e <USBD_StdEPReq+0xc0>
 8008536:	7bbb      	ldrb	r3, [r7, #14]
 8008538:	2b80      	cmp	r3, #128	; 0x80
 800853a:	d008      	beq.n	800854e <USBD_StdEPReq+0xc0>
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	88db      	ldrh	r3, [r3, #6]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d104      	bne.n	800854e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f002 f8d1 	bl	800a6f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fd06 	bl	8008f60 <USBD_CtlSendStatus>

              break;
 8008554:	e004      	b.n	8008560 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fc53 	bl	8008e04 <USBD_CtlError>
              break;
 800855e:	bf00      	nop
          }
          break;
 8008560:	e0ec      	b.n	800873c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008568:	b2db      	uxtb	r3, r3
 800856a:	2b02      	cmp	r3, #2
 800856c:	d002      	beq.n	8008574 <USBD_StdEPReq+0xe6>
 800856e:	2b03      	cmp	r3, #3
 8008570:	d016      	beq.n	80085a0 <USBD_StdEPReq+0x112>
 8008572:	e030      	b.n	80085d6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00d      	beq.n	8008596 <USBD_StdEPReq+0x108>
 800857a:	7bbb      	ldrb	r3, [r7, #14]
 800857c:	2b80      	cmp	r3, #128	; 0x80
 800857e:	d00a      	beq.n	8008596 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f002 f8b3 	bl	800a6f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800858a:	2180      	movs	r1, #128	; 0x80
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f002 f8af 	bl	800a6f0 <USBD_LL_StallEP>
 8008592:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008594:	e025      	b.n	80085e2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fc33 	bl	8008e04 <USBD_CtlError>
              break;
 800859e:	e020      	b.n	80085e2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	885b      	ldrh	r3, [r3, #2]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d11b      	bne.n	80085e0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d004      	beq.n	80085bc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f002 f8d0 	bl	800a75c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fccf 	bl	8008f60 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	4798      	blx	r3
 80085d0:	4603      	mov	r3, r0
 80085d2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80085d4:	e004      	b.n	80085e0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fc13 	bl	8008e04 <USBD_CtlError>
              break;
 80085de:	e000      	b.n	80085e2 <USBD_StdEPReq+0x154>
              break;
 80085e0:	bf00      	nop
          }
          break;
 80085e2:	e0ab      	b.n	800873c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d002      	beq.n	80085f6 <USBD_StdEPReq+0x168>
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	d032      	beq.n	800865a <USBD_StdEPReq+0x1cc>
 80085f4:	e097      	b.n	8008726 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d007      	beq.n	800860c <USBD_StdEPReq+0x17e>
 80085fc:	7bbb      	ldrb	r3, [r7, #14]
 80085fe:	2b80      	cmp	r3, #128	; 0x80
 8008600:	d004      	beq.n	800860c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fbfd 	bl	8008e04 <USBD_CtlError>
                break;
 800860a:	e091      	b.n	8008730 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800860c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008610:	2b00      	cmp	r3, #0
 8008612:	da0b      	bge.n	800862c <USBD_StdEPReq+0x19e>
 8008614:	7bbb      	ldrb	r3, [r7, #14]
 8008616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800861a:	4613      	mov	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4413      	add	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	3310      	adds	r3, #16
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	4413      	add	r3, r2
 8008628:	3304      	adds	r3, #4
 800862a:	e00b      	b.n	8008644 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008632:	4613      	mov	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	4413      	add	r3, r2
 8008642:	3304      	adds	r3, #4
 8008644:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2202      	movs	r2, #2
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fc47 	bl	8008ee6 <USBD_CtlSendData>
              break;
 8008658:	e06a      	b.n	8008730 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800865a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800865e:	2b00      	cmp	r3, #0
 8008660:	da11      	bge.n	8008686 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	f003 020f 	and.w	r2, r3, #15
 8008668:	6879      	ldr	r1, [r7, #4]
 800866a:	4613      	mov	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	440b      	add	r3, r1
 8008674:	3324      	adds	r3, #36	; 0x24
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d117      	bne.n	80086ac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fbc0 	bl	8008e04 <USBD_CtlError>
                  break;
 8008684:	e054      	b.n	8008730 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	f003 020f 	and.w	r2, r3, #15
 800868c:	6879      	ldr	r1, [r7, #4]
 800868e:	4613      	mov	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	440b      	add	r3, r1
 8008698:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d104      	bne.n	80086ac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fbad 	bl	8008e04 <USBD_CtlError>
                  break;
 80086aa:	e041      	b.n	8008730 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	da0b      	bge.n	80086cc <USBD_StdEPReq+0x23e>
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086ba:	4613      	mov	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	3310      	adds	r3, #16
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	4413      	add	r3, r2
 80086c8:	3304      	adds	r3, #4
 80086ca:	e00b      	b.n	80086e4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086cc:	7bbb      	ldrb	r3, [r7, #14]
 80086ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086d2:	4613      	mov	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	4413      	add	r3, r2
 80086e2:	3304      	adds	r3, #4
 80086e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086e6:	7bbb      	ldrb	r3, [r7, #14]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <USBD_StdEPReq+0x264>
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	2b80      	cmp	r3, #128	; 0x80
 80086f0:	d103      	bne.n	80086fa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	e00e      	b.n	8008718 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
 80086fc:	4619      	mov	r1, r3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f002 f862 	bl	800a7c8 <USBD_LL_IsStallEP>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2201      	movs	r2, #1
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	e002      	b.n	8008718 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	2202      	movs	r2, #2
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fbe1 	bl	8008ee6 <USBD_CtlSendData>
              break;
 8008724:	e004      	b.n	8008730 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fb6b 	bl	8008e04 <USBD_CtlError>
              break;
 800872e:	bf00      	nop
          }
          break;
 8008730:	e004      	b.n	800873c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fb65 	bl	8008e04 <USBD_CtlError>
          break;
 800873a:	bf00      	nop
      }
      break;
 800873c:	e004      	b.n	8008748 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fb5f 	bl	8008e04 <USBD_CtlError>
      break;
 8008746:	bf00      	nop
  }

  return ret;
 8008748:	7bfb      	ldrb	r3, [r7, #15]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800875e:	2300      	movs	r3, #0
 8008760:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008762:	2300      	movs	r3, #0
 8008764:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	885b      	ldrh	r3, [r3, #2]
 800876e:	0a1b      	lsrs	r3, r3, #8
 8008770:	b29b      	uxth	r3, r3
 8008772:	3b01      	subs	r3, #1
 8008774:	2b0e      	cmp	r3, #14
 8008776:	f200 8152 	bhi.w	8008a1e <USBD_GetDescriptor+0x2ca>
 800877a:	a201      	add	r2, pc, #4	; (adr r2, 8008780 <USBD_GetDescriptor+0x2c>)
 800877c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008780:	080087f1 	.word	0x080087f1
 8008784:	08008809 	.word	0x08008809
 8008788:	08008849 	.word	0x08008849
 800878c:	08008a1f 	.word	0x08008a1f
 8008790:	08008a1f 	.word	0x08008a1f
 8008794:	080089bf 	.word	0x080089bf
 8008798:	080089eb 	.word	0x080089eb
 800879c:	08008a1f 	.word	0x08008a1f
 80087a0:	08008a1f 	.word	0x08008a1f
 80087a4:	08008a1f 	.word	0x08008a1f
 80087a8:	08008a1f 	.word	0x08008a1f
 80087ac:	08008a1f 	.word	0x08008a1f
 80087b0:	08008a1f 	.word	0x08008a1f
 80087b4:	08008a1f 	.word	0x08008a1f
 80087b8:	080087bd 	.word	0x080087bd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c2:	69db      	ldr	r3, [r3, #28]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00b      	beq.n	80087e0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ce:	69db      	ldr	r3, [r3, #28]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	7c12      	ldrb	r2, [r2, #16]
 80087d4:	f107 0108 	add.w	r1, r7, #8
 80087d8:	4610      	mov	r0, r2
 80087da:	4798      	blx	r3
 80087dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087de:	e126      	b.n	8008a2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fb0e 	bl	8008e04 <USBD_CtlError>
        err++;
 80087e8:	7afb      	ldrb	r3, [r7, #11]
 80087ea:	3301      	adds	r3, #1
 80087ec:	72fb      	strb	r3, [r7, #11]
      break;
 80087ee:	e11e      	b.n	8008a2e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	7c12      	ldrb	r2, [r2, #16]
 80087fc:	f107 0108 	add.w	r1, r7, #8
 8008800:	4610      	mov	r0, r2
 8008802:	4798      	blx	r3
 8008804:	60f8      	str	r0, [r7, #12]
      break;
 8008806:	e112      	b.n	8008a2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	7c1b      	ldrb	r3, [r3, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10d      	bne.n	800882c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008818:	f107 0208 	add.w	r2, r7, #8
 800881c:	4610      	mov	r0, r2
 800881e:	4798      	blx	r3
 8008820:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3301      	adds	r3, #1
 8008826:	2202      	movs	r2, #2
 8008828:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800882a:	e100      	b.n	8008a2e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008834:	f107 0208 	add.w	r2, r7, #8
 8008838:	4610      	mov	r0, r2
 800883a:	4798      	blx	r3
 800883c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	3301      	adds	r3, #1
 8008842:	2202      	movs	r2, #2
 8008844:	701a      	strb	r2, [r3, #0]
      break;
 8008846:	e0f2      	b.n	8008a2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	885b      	ldrh	r3, [r3, #2]
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b05      	cmp	r3, #5
 8008850:	f200 80ac 	bhi.w	80089ac <USBD_GetDescriptor+0x258>
 8008854:	a201      	add	r2, pc, #4	; (adr r2, 800885c <USBD_GetDescriptor+0x108>)
 8008856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885a:	bf00      	nop
 800885c:	08008875 	.word	0x08008875
 8008860:	080088a9 	.word	0x080088a9
 8008864:	080088dd 	.word	0x080088dd
 8008868:	08008911 	.word	0x08008911
 800886c:	08008945 	.word	0x08008945
 8008870:	08008979 	.word	0x08008979
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00b      	beq.n	8008898 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	7c12      	ldrb	r2, [r2, #16]
 800888c:	f107 0108 	add.w	r1, r7, #8
 8008890:	4610      	mov	r0, r2
 8008892:	4798      	blx	r3
 8008894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008896:	e091      	b.n	80089bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fab2 	bl	8008e04 <USBD_CtlError>
            err++;
 80088a0:	7afb      	ldrb	r3, [r7, #11]
 80088a2:	3301      	adds	r3, #1
 80088a4:	72fb      	strb	r3, [r7, #11]
          break;
 80088a6:	e089      	b.n	80089bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00b      	beq.n	80088cc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	7c12      	ldrb	r2, [r2, #16]
 80088c0:	f107 0108 	add.w	r1, r7, #8
 80088c4:	4610      	mov	r0, r2
 80088c6:	4798      	blx	r3
 80088c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088ca:	e077      	b.n	80089bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fa98 	bl	8008e04 <USBD_CtlError>
            err++;
 80088d4:	7afb      	ldrb	r3, [r7, #11]
 80088d6:	3301      	adds	r3, #1
 80088d8:	72fb      	strb	r3, [r7, #11]
          break;
 80088da:	e06f      	b.n	80089bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00b      	beq.n	8008900 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	7c12      	ldrb	r2, [r2, #16]
 80088f4:	f107 0108 	add.w	r1, r7, #8
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
 80088fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088fe:	e05d      	b.n	80089bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008900:	6839      	ldr	r1, [r7, #0]
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fa7e 	bl	8008e04 <USBD_CtlError>
            err++;
 8008908:	7afb      	ldrb	r3, [r7, #11]
 800890a:	3301      	adds	r3, #1
 800890c:	72fb      	strb	r3, [r7, #11]
          break;
 800890e:	e055      	b.n	80089bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00b      	beq.n	8008934 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	7c12      	ldrb	r2, [r2, #16]
 8008928:	f107 0108 	add.w	r1, r7, #8
 800892c:	4610      	mov	r0, r2
 800892e:	4798      	blx	r3
 8008930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008932:	e043      	b.n	80089bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fa64 	bl	8008e04 <USBD_CtlError>
            err++;
 800893c:	7afb      	ldrb	r3, [r7, #11]
 800893e:	3301      	adds	r3, #1
 8008940:	72fb      	strb	r3, [r7, #11]
          break;
 8008942:	e03b      	b.n	80089bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00b      	beq.n	8008968 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008956:	695b      	ldr	r3, [r3, #20]
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	7c12      	ldrb	r2, [r2, #16]
 800895c:	f107 0108 	add.w	r1, r7, #8
 8008960:	4610      	mov	r0, r2
 8008962:	4798      	blx	r3
 8008964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008966:	e029      	b.n	80089bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fa4a 	bl	8008e04 <USBD_CtlError>
            err++;
 8008970:	7afb      	ldrb	r3, [r7, #11]
 8008972:	3301      	adds	r3, #1
 8008974:	72fb      	strb	r3, [r7, #11]
          break;
 8008976:	e021      	b.n	80089bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00b      	beq.n	800899c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	7c12      	ldrb	r2, [r2, #16]
 8008990:	f107 0108 	add.w	r1, r7, #8
 8008994:	4610      	mov	r0, r2
 8008996:	4798      	blx	r3
 8008998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800899a:	e00f      	b.n	80089bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fa30 	bl	8008e04 <USBD_CtlError>
            err++;
 80089a4:	7afb      	ldrb	r3, [r7, #11]
 80089a6:	3301      	adds	r3, #1
 80089a8:	72fb      	strb	r3, [r7, #11]
          break;
 80089aa:	e007      	b.n	80089bc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fa28 	bl	8008e04 <USBD_CtlError>
          err++;
 80089b4:	7afb      	ldrb	r3, [r7, #11]
 80089b6:	3301      	adds	r3, #1
 80089b8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80089ba:	bf00      	nop
      }
      break;
 80089bc:	e037      	b.n	8008a2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	7c1b      	ldrb	r3, [r3, #16]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d109      	bne.n	80089da <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ce:	f107 0208 	add.w	r2, r7, #8
 80089d2:	4610      	mov	r0, r2
 80089d4:	4798      	blx	r3
 80089d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089d8:	e029      	b.n	8008a2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fa11 	bl	8008e04 <USBD_CtlError>
        err++;
 80089e2:	7afb      	ldrb	r3, [r7, #11]
 80089e4:	3301      	adds	r3, #1
 80089e6:	72fb      	strb	r3, [r7, #11]
      break;
 80089e8:	e021      	b.n	8008a2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	7c1b      	ldrb	r3, [r3, #16]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10d      	bne.n	8008a0e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fa:	f107 0208 	add.w	r2, r7, #8
 80089fe:	4610      	mov	r0, r2
 8008a00:	4798      	blx	r3
 8008a02:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3301      	adds	r3, #1
 8008a08:	2207      	movs	r2, #7
 8008a0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a0c:	e00f      	b.n	8008a2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f9f7 	bl	8008e04 <USBD_CtlError>
        err++;
 8008a16:	7afb      	ldrb	r3, [r7, #11]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	72fb      	strb	r3, [r7, #11]
      break;
 8008a1c:	e007      	b.n	8008a2e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f9ef 	bl	8008e04 <USBD_CtlError>
      err++;
 8008a26:	7afb      	ldrb	r3, [r7, #11]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	72fb      	strb	r3, [r7, #11]
      break;
 8008a2c:	bf00      	nop
  }

  if (err != 0U)
 8008a2e:	7afb      	ldrb	r3, [r7, #11]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d11e      	bne.n	8008a72 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	88db      	ldrh	r3, [r3, #6]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d016      	beq.n	8008a6a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008a3c:	893b      	ldrh	r3, [r7, #8]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00e      	beq.n	8008a60 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	88da      	ldrh	r2, [r3, #6]
 8008a46:	893b      	ldrh	r3, [r7, #8]
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	bf28      	it	cs
 8008a4c:	4613      	movcs	r3, r2
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a52:	893b      	ldrh	r3, [r7, #8]
 8008a54:	461a      	mov	r2, r3
 8008a56:	68f9      	ldr	r1, [r7, #12]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fa44 	bl	8008ee6 <USBD_CtlSendData>
 8008a5e:	e009      	b.n	8008a74 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f9ce 	bl	8008e04 <USBD_CtlError>
 8008a68:	e004      	b.n	8008a74 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fa78 	bl	8008f60 <USBD_CtlSendStatus>
 8008a70:	e000      	b.n	8008a74 <USBD_GetDescriptor+0x320>
    return;
 8008a72:	bf00      	nop
  }
}
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop

08008a7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	889b      	ldrh	r3, [r3, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d131      	bne.n	8008af2 <USBD_SetAddress+0x76>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	88db      	ldrh	r3, [r3, #6]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d12d      	bne.n	8008af2 <USBD_SetAddress+0x76>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	885b      	ldrh	r3, [r3, #2]
 8008a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8008a9c:	d829      	bhi.n	8008af2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	885b      	ldrh	r3, [r3, #2]
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	d104      	bne.n	8008ac0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f9a3 	bl	8008e04 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008abe:	e01d      	b.n	8008afc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	7bfa      	ldrb	r2, [r7, #15]
 8008ac4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 fea7 	bl	800a820 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fa44 	bl	8008f60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d004      	beq.n	8008ae8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2202      	movs	r2, #2
 8008ae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae6:	e009      	b.n	8008afc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af0:	e004      	b.n	8008afc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f985 	bl	8008e04 <USBD_CtlError>
  }
}
 8008afa:	bf00      	nop
 8008afc:	bf00      	nop
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	885b      	ldrh	r3, [r3, #2]
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	4b4c      	ldr	r3, [pc, #304]	; (8008c4c <USBD_SetConfig+0x148>)
 8008b1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b1c:	4b4b      	ldr	r3, [pc, #300]	; (8008c4c <USBD_SetConfig+0x148>)
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d905      	bls.n	8008b30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b24:	6839      	ldr	r1, [r7, #0]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f96c 	bl	8008e04 <USBD_CtlError>
    return USBD_FAIL;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e088      	b.n	8008c42 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d002      	beq.n	8008b42 <USBD_SetConfig+0x3e>
 8008b3c:	2b03      	cmp	r3, #3
 8008b3e:	d025      	beq.n	8008b8c <USBD_SetConfig+0x88>
 8008b40:	e071      	b.n	8008c26 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b42:	4b42      	ldr	r3, [pc, #264]	; (8008c4c <USBD_SetConfig+0x148>)
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d01c      	beq.n	8008b84 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008b4a:	4b40      	ldr	r3, [pc, #256]	; (8008c4c <USBD_SetConfig+0x148>)
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b54:	4b3d      	ldr	r3, [pc, #244]	; (8008c4c <USBD_SetConfig+0x148>)
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	4619      	mov	r1, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7ff f91e 	bl	8007d9c <USBD_SetClassConfig>
 8008b60:	4603      	mov	r3, r0
 8008b62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d004      	beq.n	8008b74 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f949 	bl	8008e04 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b72:	e065      	b.n	8008c40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f9f3 	bl	8008f60 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2203      	movs	r2, #3
 8008b7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b82:	e05d      	b.n	8008c40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 f9eb 	bl	8008f60 <USBD_CtlSendStatus>
      break;
 8008b8a:	e059      	b.n	8008c40 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008b8c:	4b2f      	ldr	r3, [pc, #188]	; (8008c4c <USBD_SetConfig+0x148>)
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d112      	bne.n	8008bba <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2202      	movs	r2, #2
 8008b98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008b9c:	4b2b      	ldr	r3, [pc, #172]	; (8008c4c <USBD_SetConfig+0x148>)
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ba6:	4b29      	ldr	r3, [pc, #164]	; (8008c4c <USBD_SetConfig+0x148>)
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	4619      	mov	r1, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f7ff f911 	bl	8007dd4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f9d4 	bl	8008f60 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bb8:	e042      	b.n	8008c40 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008bba:	4b24      	ldr	r3, [pc, #144]	; (8008c4c <USBD_SetConfig+0x148>)
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d02a      	beq.n	8008c1e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7ff f8ff 	bl	8007dd4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008bd6:	4b1d      	ldr	r3, [pc, #116]	; (8008c4c <USBD_SetConfig+0x148>)
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008be0:	4b1a      	ldr	r3, [pc, #104]	; (8008c4c <USBD_SetConfig+0x148>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7ff f8d8 	bl	8007d9c <USBD_SetClassConfig>
 8008bec:	4603      	mov	r3, r0
 8008bee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00f      	beq.n	8008c16 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f903 	bl	8008e04 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff f8e4 	bl	8007dd4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c14:	e014      	b.n	8008c40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f9a2 	bl	8008f60 <USBD_CtlSendStatus>
      break;
 8008c1c:	e010      	b.n	8008c40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f99e 	bl	8008f60 <USBD_CtlSendStatus>
      break;
 8008c24:	e00c      	b.n	8008c40 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f8eb 	bl	8008e04 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c2e:	4b07      	ldr	r3, [pc, #28]	; (8008c4c <USBD_SetConfig+0x148>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	4619      	mov	r1, r3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7ff f8cd 	bl	8007dd4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8008c3e:	bf00      	nop
  }

  return ret;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20000228 	.word	0x20000228

08008c50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	88db      	ldrh	r3, [r3, #6]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d004      	beq.n	8008c6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f8cd 	bl	8008e04 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c6a:	e023      	b.n	8008cb4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	dc02      	bgt.n	8008c7e <USBD_GetConfig+0x2e>
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	dc03      	bgt.n	8008c84 <USBD_GetConfig+0x34>
 8008c7c:	e015      	b.n	8008caa <USBD_GetConfig+0x5a>
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	d00b      	beq.n	8008c9a <USBD_GetConfig+0x4a>
 8008c82:	e012      	b.n	8008caa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	3308      	adds	r3, #8
 8008c8e:	2201      	movs	r2, #1
 8008c90:	4619      	mov	r1, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f927 	bl	8008ee6 <USBD_CtlSendData>
        break;
 8008c98:	e00c      	b.n	8008cb4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f91f 	bl	8008ee6 <USBD_CtlSendData>
        break;
 8008ca8:	e004      	b.n	8008cb4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f8a9 	bl	8008e04 <USBD_CtlError>
        break;
 8008cb2:	bf00      	nop
}
 8008cb4:	bf00      	nop
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d81e      	bhi.n	8008d12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	88db      	ldrh	r3, [r3, #6]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d004      	beq.n	8008ce6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f890 	bl	8008e04 <USBD_CtlError>
        break;
 8008ce4:	e01a      	b.n	8008d1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d005      	beq.n	8008d02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f043 0202 	orr.w	r2, r3, #2
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	330c      	adds	r3, #12
 8008d06:	2202      	movs	r2, #2
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f8eb 	bl	8008ee6 <USBD_CtlSendData>
      break;
 8008d10:	e004      	b.n	8008d1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 f875 	bl	8008e04 <USBD_CtlError>
      break;
 8008d1a:	bf00      	nop
  }
}
 8008d1c:	bf00      	nop
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	885b      	ldrh	r3, [r3, #2]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d106      	bne.n	8008d44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f90e 	bl	8008f60 <USBD_CtlSendStatus>
  }
}
 8008d44:	bf00      	nop
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d80b      	bhi.n	8008d7c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	885b      	ldrh	r3, [r3, #2]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d10c      	bne.n	8008d86 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f8f3 	bl	8008f60 <USBD_CtlSendStatus>
      }
      break;
 8008d7a:	e004      	b.n	8008d86 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f840 	bl	8008e04 <USBD_CtlError>
      break;
 8008d84:	e000      	b.n	8008d88 <USBD_ClrFeature+0x3c>
      break;
 8008d86:	bf00      	nop
  }
}
 8008d88:	bf00      	nop
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	781a      	ldrb	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3301      	adds	r3, #1
 8008daa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	781a      	ldrb	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3301      	adds	r3, #1
 8008db8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f7ff fa91 	bl	80082e2 <SWAPBYTE>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f7ff fa84 	bl	80082e2 <SWAPBYTE>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	461a      	mov	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3301      	adds	r3, #1
 8008de6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3301      	adds	r3, #1
 8008dec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f7ff fa77 	bl	80082e2 <SWAPBYTE>
 8008df4:	4603      	mov	r3, r0
 8008df6:	461a      	mov	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	80da      	strh	r2, [r3, #6]
}
 8008dfc:	bf00      	nop
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e0e:	2180      	movs	r1, #128	; 0x80
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 fc6d 	bl	800a6f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e16:	2100      	movs	r1, #0
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f001 fc69 	bl	800a6f0 <USBD_LL_StallEP>
}
 8008e1e:	bf00      	nop
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b086      	sub	sp, #24
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	60f8      	str	r0, [r7, #12]
 8008e2e:	60b9      	str	r1, [r7, #8]
 8008e30:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e32:	2300      	movs	r3, #0
 8008e34:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d036      	beq.n	8008eaa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e40:	6938      	ldr	r0, [r7, #16]
 8008e42:	f000 f836 	bl	8008eb2 <USBD_GetLen>
 8008e46:	4603      	mov	r3, r0
 8008e48:	3301      	adds	r3, #1
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	005b      	lsls	r3, r3, #1
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e54:	7dfb      	ldrb	r3, [r7, #23]
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	4413      	add	r3, r2
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	7812      	ldrb	r2, [r2, #0]
 8008e5e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
 8008e62:	3301      	adds	r3, #1
 8008e64:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	2203      	movs	r2, #3
 8008e6e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e70:	7dfb      	ldrb	r3, [r7, #23]
 8008e72:	3301      	adds	r3, #1
 8008e74:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008e76:	e013      	b.n	8008ea0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	693a      	ldr	r2, [r7, #16]
 8008e80:	7812      	ldrb	r2, [r2, #0]
 8008e82:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	3301      	adds	r3, #1
 8008e88:	613b      	str	r3, [r7, #16]
    idx++;
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008e90:	7dfb      	ldrb	r3, [r7, #23]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	4413      	add	r3, r2
 8008e96:	2200      	movs	r2, #0
 8008e98:	701a      	strb	r2, [r3, #0]
    idx++;
 8008e9a:	7dfb      	ldrb	r3, [r7, #23]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1e7      	bne.n	8008e78 <USBD_GetString+0x52>
 8008ea8:	e000      	b.n	8008eac <USBD_GetString+0x86>
    return;
 8008eaa:	bf00      	nop
  }
}
 8008eac:	3718      	adds	r7, #24
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b085      	sub	sp, #20
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ec2:	e005      	b.n	8008ed0 <USBD_GetLen+0x1e>
  {
    len++;
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1f5      	bne.n	8008ec4 <USBD_GetLen+0x12>
  }

  return len;
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b084      	sub	sp, #16
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f001 fcbd 	bl	800a88c <USBD_LL_Transmit>

  return USBD_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f001 fcac 	bl	800a88c <USBD_LL_Transmit>

  return USBD_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b084      	sub	sp, #16
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	60f8      	str	r0, [r7, #12]
 8008f46:	60b9      	str	r1, [r7, #8]
 8008f48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	2100      	movs	r1, #0
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f001 fcd3 	bl	800a8fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2204      	movs	r2, #4
 8008f6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f70:	2300      	movs	r3, #0
 8008f72:	2200      	movs	r2, #0
 8008f74:	2100      	movs	r1, #0
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f001 fc88 	bl	800a88c <USBD_LL_Transmit>

  return USBD_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b082      	sub	sp, #8
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2205      	movs	r2, #5
 8008f92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f96:	2300      	movs	r3, #0
 8008f98:	2200      	movs	r2, #0
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f001 fcad 	bl	800a8fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8008fba:	2110      	movs	r1, #16
 8008fbc:	20d4      	movs	r0, #212	; 0xd4
 8008fbe:	f000 fded 	bl	8009b9c <SENSOR_IO_Read>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8008fc6:	88fb      	ldrh	r3, [r7, #6]
 8008fc8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8008fca:	7bbb      	ldrb	r3, [r7, #14]
 8008fcc:	f003 0303 	and.w	r3, r3, #3
 8008fd0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8008fd2:	7bba      	ldrb	r2, [r7, #14]
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	2110      	movs	r1, #16
 8008fe0:	20d4      	movs	r0, #212	; 0xd4
 8008fe2:	f000 fdc1 	bl	8009b68 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8008fe6:	2112      	movs	r1, #18
 8008fe8:	20d4      	movs	r0, #212	; 0xd4
 8008fea:	f000 fdd7 	bl	8009b9c <SENSOR_IO_Read>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8008ff2:	88fb      	ldrh	r3, [r7, #6]
 8008ff4:	0a1b      	lsrs	r3, r3, #8
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8009000:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8009002:	7bba      	ldrb	r2, [r7, #14]
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	4313      	orrs	r3, r2
 8009008:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800900a:	7bbb      	ldrb	r3, [r7, #14]
 800900c:	461a      	mov	r2, r3
 800900e:	2112      	movs	r1, #18
 8009010:	20d4      	movs	r0, #212	; 0xd4
 8009012:	f000 fda9 	bl	8009b68 <SENSOR_IO_Write>
}
 8009016:	bf00      	nop
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b082      	sub	sp, #8
 8009022:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8009024:	2300      	movs	r3, #0
 8009026:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009028:	2110      	movs	r1, #16
 800902a:	20d4      	movs	r0, #212	; 0xd4
 800902c:	f000 fdb6 	bl	8009b9c <SENSOR_IO_Read>
 8009030:	4603      	mov	r3, r0
 8009032:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8009034:	79fb      	ldrb	r3, [r7, #7]
 8009036:	f003 030f 	and.w	r3, r3, #15
 800903a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	461a      	mov	r2, r3
 8009040:	2110      	movs	r1, #16
 8009042:	20d4      	movs	r0, #212	; 0xd4
 8009044:	f000 fd90 	bl	8009b68 <SENSOR_IO_Write>
}
 8009048:	bf00      	nop
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8009050:	b580      	push	{r7, lr}
 8009052:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8009054:	f000 fd7e 	bl	8009b54 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8009058:	210f      	movs	r1, #15
 800905a:	20d4      	movs	r0, #212	; 0xd4
 800905c:	f000 fd9e 	bl	8009b9c <SENSOR_IO_Read>
 8009060:	4603      	mov	r3, r0
}
 8009062:	4618      	mov	r0, r3
 8009064:	bd80      	pop	{r7, pc}

08009066 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	4603      	mov	r3, r0
 800906e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009070:	2300      	movs	r3, #0
 8009072:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8009074:	2115      	movs	r1, #21
 8009076:	20d4      	movs	r0, #212	; 0xd4
 8009078:	f000 fd90 	bl	8009b9c <SENSOR_IO_Read>
 800907c:	4603      	mov	r3, r0
 800907e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8009080:	7bfb      	ldrb	r3, [r7, #15]
 8009082:	f023 0310 	bic.w	r3, r3, #16
 8009086:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8009088:	88fb      	ldrh	r3, [r7, #6]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d003      	beq.n	8009096 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800908e:	7bfb      	ldrb	r3, [r7, #15]
 8009090:	f043 0310 	orr.w	r3, r3, #16
 8009094:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	461a      	mov	r2, r3
 800909a:	2115      	movs	r1, #21
 800909c:	20d4      	movs	r0, #212	; 0xd4
 800909e:	f000 fd63 	bl	8009b68 <SENSOR_IO_Write>
}
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b088      	sub	sp, #32
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80090bc:	f04f 0300 	mov.w	r3, #0
 80090c0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80090c2:	2110      	movs	r1, #16
 80090c4:	20d4      	movs	r0, #212	; 0xd4
 80090c6:	f000 fd69 	bl	8009b9c <SENSOR_IO_Read>
 80090ca:	4603      	mov	r3, r0
 80090cc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80090ce:	f107 0208 	add.w	r2, r7, #8
 80090d2:	2306      	movs	r3, #6
 80090d4:	2128      	movs	r1, #40	; 0x28
 80090d6:	20d4      	movs	r0, #212	; 0xd4
 80090d8:	f000 fd7e 	bl	8009bd8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80090dc:	2300      	movs	r3, #0
 80090de:	77fb      	strb	r3, [r7, #31]
 80090e0:	e01f      	b.n	8009122 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80090e2:	7ffb      	ldrb	r3, [r7, #31]
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	3301      	adds	r3, #1
 80090e8:	f107 0220 	add.w	r2, r7, #32
 80090ec:	4413      	add	r3, r2
 80090ee:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	021b      	lsls	r3, r3, #8
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	7ffb      	ldrb	r3, [r7, #31]
 80090fa:	005b      	lsls	r3, r3, #1
 80090fc:	f107 0120 	add.w	r1, r7, #32
 8009100:	440b      	add	r3, r1
 8009102:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009106:	b29b      	uxth	r3, r3
 8009108:	4413      	add	r3, r2
 800910a:	b29a      	uxth	r2, r3
 800910c:	7ffb      	ldrb	r3, [r7, #31]
 800910e:	b212      	sxth	r2, r2
 8009110:	005b      	lsls	r3, r3, #1
 8009112:	f107 0120 	add.w	r1, r7, #32
 8009116:	440b      	add	r3, r1
 8009118:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800911c:	7ffb      	ldrb	r3, [r7, #31]
 800911e:	3301      	adds	r3, #1
 8009120:	77fb      	strb	r3, [r7, #31]
 8009122:	7ffb      	ldrb	r3, [r7, #31]
 8009124:	2b02      	cmp	r3, #2
 8009126:	d9dc      	bls.n	80090e2 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8009128:	7dfb      	ldrb	r3, [r7, #23]
 800912a:	f003 030c 	and.w	r3, r3, #12
 800912e:	2b0c      	cmp	r3, #12
 8009130:	d828      	bhi.n	8009184 <LSM6DSL_AccReadXYZ+0xd8>
 8009132:	a201      	add	r2, pc, #4	; (adr r2, 8009138 <LSM6DSL_AccReadXYZ+0x8c>)
 8009134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009138:	0800916d 	.word	0x0800916d
 800913c:	08009185 	.word	0x08009185
 8009140:	08009185 	.word	0x08009185
 8009144:	08009185 	.word	0x08009185
 8009148:	0800917f 	.word	0x0800917f
 800914c:	08009185 	.word	0x08009185
 8009150:	08009185 	.word	0x08009185
 8009154:	08009185 	.word	0x08009185
 8009158:	08009173 	.word	0x08009173
 800915c:	08009185 	.word	0x08009185
 8009160:	08009185 	.word	0x08009185
 8009164:	08009185 	.word	0x08009185
 8009168:	08009179 	.word	0x08009179
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800916c:	4b19      	ldr	r3, [pc, #100]	; (80091d4 <LSM6DSL_AccReadXYZ+0x128>)
 800916e:	61bb      	str	r3, [r7, #24]
    break;
 8009170:	e008      	b.n	8009184 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8009172:	4b19      	ldr	r3, [pc, #100]	; (80091d8 <LSM6DSL_AccReadXYZ+0x12c>)
 8009174:	61bb      	str	r3, [r7, #24]
    break;
 8009176:	e005      	b.n	8009184 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8009178:	4b18      	ldr	r3, [pc, #96]	; (80091dc <LSM6DSL_AccReadXYZ+0x130>)
 800917a:	61bb      	str	r3, [r7, #24]
    break;
 800917c:	e002      	b.n	8009184 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800917e:	4b18      	ldr	r3, [pc, #96]	; (80091e0 <LSM6DSL_AccReadXYZ+0x134>)
 8009180:	61bb      	str	r3, [r7, #24]
    break;    
 8009182:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8009184:	2300      	movs	r3, #0
 8009186:	77fb      	strb	r3, [r7, #31]
 8009188:	e01b      	b.n	80091c2 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800918a:	7ffb      	ldrb	r3, [r7, #31]
 800918c:	005b      	lsls	r3, r3, #1
 800918e:	f107 0220 	add.w	r2, r7, #32
 8009192:	4413      	add	r3, r2
 8009194:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8009198:	ee07 3a90 	vmov	s15, r3
 800919c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80091a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80091a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a8:	7ffb      	ldrb	r3, [r7, #31]
 80091aa:	005b      	lsls	r3, r3, #1
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	4413      	add	r3, r2
 80091b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091b4:	ee17 2a90 	vmov	r2, s15
 80091b8:	b212      	sxth	r2, r2
 80091ba:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80091bc:	7ffb      	ldrb	r3, [r7, #31]
 80091be:	3301      	adds	r3, #1
 80091c0:	77fb      	strb	r3, [r7, #31]
 80091c2:	7ffb      	ldrb	r3, [r7, #31]
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d9e0      	bls.n	800918a <LSM6DSL_AccReadXYZ+0xde>
  }
}
 80091c8:	bf00      	nop
 80091ca:	bf00      	nop
 80091cc:	3720      	adds	r7, #32
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	3d79db23 	.word	0x3d79db23
 80091d8:	3df9db23 	.word	0x3df9db23
 80091dc:	3e79db23 	.word	0x3e79db23
 80091e0:	3ef9db23 	.word	0x3ef9db23
 80091e4:	00000000 	.word	0x00000000

080091e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//populate the sinePeriod array with values
	for (int i = 0; i < size; i++) {
 80091ee:	2300      	movs	r3, #0
 80091f0:	60fb      	str	r3, [r7, #12]
 80091f2:	e02a      	b.n	800924a <main+0x62>
		// using 8 bit precision for DAC input, the range is from 0 - 255.
		// to use 2/3 of the range, range is 42.5 - 212.5

		sineValue[i] = 85 * arm_sin_f32(2*M_PI/20 * i) + 128; // uses 2/3 range
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f7f7 fabf 	bl	8000778 <__aeabi_i2d>
 80091fa:	a376      	add	r3, pc, #472	; (adr r3, 80093d4 <main+0x1ec>)
 80091fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009200:	f7f7 f83e 	bl	8000280 <__aeabi_dmul>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	4610      	mov	r0, r2
 800920a:	4619      	mov	r1, r3
 800920c:	f7f7 fb1e 	bl	800084c <__aeabi_d2f>
 8009210:	4603      	mov	r3, r0
 8009212:	ee00 3a10 	vmov	s0, r3
 8009216:	f001 fd61 	bl	800acdc <arm_sin_f32>
 800921a:	eef0 7a40 	vmov.f32	s15, s0
 800921e:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80093a0 <main+0x1b8>
 8009222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009226:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80093a4 <main+0x1bc>
 800922a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800922e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009232:	edc7 7a01 	vstr	s15, [r7, #4]
 8009236:	793b      	ldrb	r3, [r7, #4]
 8009238:	b2d9      	uxtb	r1, r3
 800923a:	4a5b      	ldr	r2, [pc, #364]	; (80093a8 <main+0x1c0>)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	4413      	add	r3, r2
 8009240:	460a      	mov	r2, r1
 8009242:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++) {
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	3301      	adds	r3, #1
 8009248:	60fb      	str	r3, [r7, #12]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f240 52db 	movw	r2, #1499	; 0x5db
 8009250:	4293      	cmp	r3, r2
 8009252:	ddcf      	ble.n	80091f4 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009254:	f7f7 fcc6 	bl	8000be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009258:	f000 f8c0 	bl	80093dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800925c:	f000 fa6c 	bl	8009738 <MX_GPIO_Init>
  MX_I2C1_Init();
 8009260:	f000 f940 	bl	80094e4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8009264:	f000 ff98 	bl	800a198 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8009268:	f000 f97c 	bl	8009564 <MX_TIM2_Init>
  MX_DMA_Init();
 800926c:	f000 fa46 	bl	80096fc <MX_DMA_Init>
  MX_DAC1_Init();
 8009270:	f000 f906 	bl	8009480 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8009274:	f000 fa12 	bl	800969c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8009278:	f000 f9c2 	bl	8009600 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 800927c:	f000 fcca 	bl	8009c14 <BSP_ACCELERO_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8009280:	484a      	ldr	r0, [pc, #296]	; (80093ac <main+0x1c4>)
 8009282:	f7fc f807 	bl	8005294 <HAL_TIM_Base_Start_IT>
  HAL_UART_Init(&huart1);
 8009286:	484a      	ldr	r0, [pc, #296]	; (80093b0 <main+0x1c8>)
 8009288:	f7fc fc5c 	bl	8005b44 <HAL_UART_Init>

  // Start timer 4 for speaker
  HAL_TIM_Base_Start_IT(&htim4);
 800928c:	4849      	ldr	r0, [pc, #292]	; (80093b4 <main+0x1cc>)
 800928e:	f7fc f801 	bl	8005294 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  BSP_ACCELERO_AccGetXYZ(acceleroResults);
 8009292:	4849      	ldr	r0, [pc, #292]	; (80093b8 <main+0x1d0>)
 8009294:	f000 fcfc 	bl	8009c90 <BSP_ACCELERO_AccGetXYZ>
	  x = acceleroResults[0];
 8009298:	4b47      	ldr	r3, [pc, #284]	; (80093b8 <main+0x1d0>)
 800929a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800929e:	4b47      	ldr	r3, [pc, #284]	; (80093bc <main+0x1d4>)
 80092a0:	801a      	strh	r2, [r3, #0]
	  y = acceleroResults[1];
 80092a2:	4b45      	ldr	r3, [pc, #276]	; (80093b8 <main+0x1d0>)
 80092a4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80092a8:	4b45      	ldr	r3, [pc, #276]	; (80093c0 <main+0x1d8>)
 80092aa:	801a      	strh	r2, [r3, #0]
//	  else {
//		  mousehid.mouse_y = 0;
//	  }

	/* Absolute algorithm ----------------------------------------*/
	  if (x < -200){
 80092ac:	4b43      	ldr	r3, [pc, #268]	; (80093bc <main+0x1d4>)
 80092ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092b2:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 80092b6:	da0d      	bge.n	80092d4 <main+0xec>
		  mousehid.mouse_x = x/10;
 80092b8:	4b40      	ldr	r3, [pc, #256]	; (80093bc <main+0x1d4>)
 80092ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092be:	4a41      	ldr	r2, [pc, #260]	; (80093c4 <main+0x1dc>)
 80092c0:	fb82 1203 	smull	r1, r2, r2, r3
 80092c4:	1092      	asrs	r2, r2, #2
 80092c6:	17db      	asrs	r3, r3, #31
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	b21b      	sxth	r3, r3
 80092cc:	b25a      	sxtb	r2, r3
 80092ce:	4b3e      	ldr	r3, [pc, #248]	; (80093c8 <main+0x1e0>)
 80092d0:	705a      	strb	r2, [r3, #1]
 80092d2:	e015      	b.n	8009300 <main+0x118>
	  }
	  else if (x > 200){
 80092d4:	4b39      	ldr	r3, [pc, #228]	; (80093bc <main+0x1d4>)
 80092d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092da:	2bc8      	cmp	r3, #200	; 0xc8
 80092dc:	dd0d      	ble.n	80092fa <main+0x112>
		  mousehid.mouse_x = x/10;
 80092de:	4b37      	ldr	r3, [pc, #220]	; (80093bc <main+0x1d4>)
 80092e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092e4:	4a37      	ldr	r2, [pc, #220]	; (80093c4 <main+0x1dc>)
 80092e6:	fb82 1203 	smull	r1, r2, r2, r3
 80092ea:	1092      	asrs	r2, r2, #2
 80092ec:	17db      	asrs	r3, r3, #31
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	b21b      	sxth	r3, r3
 80092f2:	b25a      	sxtb	r2, r3
 80092f4:	4b34      	ldr	r3, [pc, #208]	; (80093c8 <main+0x1e0>)
 80092f6:	705a      	strb	r2, [r3, #1]
 80092f8:	e002      	b.n	8009300 <main+0x118>
	  }
	  else {
		  mousehid.mouse_x = 0;
 80092fa:	4b33      	ldr	r3, [pc, #204]	; (80093c8 <main+0x1e0>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	705a      	strb	r2, [r3, #1]
	  }

	  if (y < -200){
 8009300:	4b2f      	ldr	r3, [pc, #188]	; (80093c0 <main+0x1d8>)
 8009302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009306:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 800930a:	da0d      	bge.n	8009328 <main+0x140>
		  mousehid.mouse_y = y/5;
 800930c:	4b2c      	ldr	r3, [pc, #176]	; (80093c0 <main+0x1d8>)
 800930e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009312:	4a2c      	ldr	r2, [pc, #176]	; (80093c4 <main+0x1dc>)
 8009314:	fb82 1203 	smull	r1, r2, r2, r3
 8009318:	1052      	asrs	r2, r2, #1
 800931a:	17db      	asrs	r3, r3, #31
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	b21b      	sxth	r3, r3
 8009320:	b25a      	sxtb	r2, r3
 8009322:	4b29      	ldr	r3, [pc, #164]	; (80093c8 <main+0x1e0>)
 8009324:	709a      	strb	r2, [r3, #2]
 8009326:	e015      	b.n	8009354 <main+0x16c>
	  }
	  else if(y > 200){
 8009328:	4b25      	ldr	r3, [pc, #148]	; (80093c0 <main+0x1d8>)
 800932a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800932e:	2bc8      	cmp	r3, #200	; 0xc8
 8009330:	dd0d      	ble.n	800934e <main+0x166>
		  mousehid.mouse_y = y/5;
 8009332:	4b23      	ldr	r3, [pc, #140]	; (80093c0 <main+0x1d8>)
 8009334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009338:	4a22      	ldr	r2, [pc, #136]	; (80093c4 <main+0x1dc>)
 800933a:	fb82 1203 	smull	r1, r2, r2, r3
 800933e:	1052      	asrs	r2, r2, #1
 8009340:	17db      	asrs	r3, r3, #31
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	b21b      	sxth	r3, r3
 8009346:	b25a      	sxtb	r2, r3
 8009348:	4b1f      	ldr	r3, [pc, #124]	; (80093c8 <main+0x1e0>)
 800934a:	709a      	strb	r2, [r3, #2]
 800934c:	e002      	b.n	8009354 <main+0x16c>
	  }
	  else {
		  mousehid.mouse_y = 0;
 800934e:	4b1e      	ldr	r3, [pc, #120]	; (80093c8 <main+0x1e0>)
 8009350:	2200      	movs	r2, #0
 8009352:	709a      	strb	r2, [r3, #2]
//		  mousehid.mouse_x= (newyval)/3;
//	  }
//
//	  else mousehid.mouse_x = 0;

	  if (button_flag==1)
 8009354:	4b1d      	ldr	r3, [pc, #116]	; (80093cc <main+0x1e4>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d115      	bne.n	8009388 <main+0x1a0>
	  {
	   mousehid.button = 1;
 800935c:	4b1a      	ldr	r3, [pc, #104]	; (80093c8 <main+0x1e0>)
 800935e:	2201      	movs	r2, #1
 8009360:	701a      	strb	r2, [r3, #0]
	   USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8009362:	2204      	movs	r2, #4
 8009364:	4918      	ldr	r1, [pc, #96]	; (80093c8 <main+0x1e0>)
 8009366:	481a      	ldr	r0, [pc, #104]	; (80093d0 <main+0x1e8>)
 8009368:	f7fe fc30 	bl	8007bcc <USBD_HID_SendReport>
	   HAL_Delay (50);
 800936c:	2032      	movs	r0, #50	; 0x32
 800936e:	f7f7 fcad 	bl	8000ccc <HAL_Delay>
	   mousehid.button = 0;
 8009372:	4b15      	ldr	r3, [pc, #84]	; (80093c8 <main+0x1e0>)
 8009374:	2200      	movs	r2, #0
 8009376:	701a      	strb	r2, [r3, #0]

	   USBD_HID_SendReport(&hUsbDeviceFS,&mousehid, sizeof (mousehid));
 8009378:	2204      	movs	r2, #4
 800937a:	4913      	ldr	r1, [pc, #76]	; (80093c8 <main+0x1e0>)
 800937c:	4814      	ldr	r0, [pc, #80]	; (80093d0 <main+0x1e8>)
 800937e:	f7fe fc25 	bl	8007bcc <USBD_HID_SendReport>
	   button_flag =0;
 8009382:	4b12      	ldr	r3, [pc, #72]	; (80093cc <main+0x1e4>)
 8009384:	2200      	movs	r2, #0
 8009386:	701a      	strb	r2, [r3, #0]
	  }
	  USBD_HID_SendReport(&hUsbDeviceFS,&mousehid, sizeof (mousehid));
 8009388:	2204      	movs	r2, #4
 800938a:	490f      	ldr	r1, [pc, #60]	; (80093c8 <main+0x1e0>)
 800938c:	4810      	ldr	r0, [pc, #64]	; (80093d0 <main+0x1e8>)
 800938e:	f7fe fc1d 	bl	8007bcc <USBD_HID_SendReport>

//	  x_prev = x;
//	  y_prev = y;

	  HAL_Delay(10);
 8009392:	200a      	movs	r0, #10
 8009394:	f7f7 fc9a 	bl	8000ccc <HAL_Delay>
  {
 8009398:	e77b      	b.n	8009292 <main+0xaa>
 800939a:	bf00      	nop
 800939c:	f3af 8000 	nop.w
 80093a0:	42aa0000 	.word	0x42aa0000
 80093a4:	43000000 	.word	0x43000000
 80093a8:	20000494 	.word	0x20000494
 80093ac:	20000448 	.word	0x20000448
 80093b0:	2000035c 	.word	0x2000035c
 80093b4:	20000264 	.word	0x20000264
 80093b8:	2000025c 	.word	0x2000025c
 80093bc:	20000262 	.word	0x20000262
 80093c0:	20000444 	.word	0x20000444
 80093c4:	66666667 	.word	0x66666667
 80093c8:	2000022c 	.word	0x2000022c
 80093cc:	20000230 	.word	0x20000230
 80093d0:	20000b40 	.word	0x20000b40
 80093d4:	769cf0e0 	.word	0x769cf0e0
 80093d8:	3fd41b2f 	.word	0x3fd41b2f

080093dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b096      	sub	sp, #88	; 0x58
 80093e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80093e2:	f107 0314 	add.w	r3, r7, #20
 80093e6:	2244      	movs	r2, #68	; 0x44
 80093e8:	2100      	movs	r1, #0
 80093ea:	4618      	mov	r0, r3
 80093ec:	f001 fce6 	bl	800adbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80093f0:	463b      	mov	r3, r7
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]
 80093f6:	605a      	str	r2, [r3, #4]
 80093f8:	609a      	str	r2, [r3, #8]
 80093fa:	60da      	str	r2, [r3, #12]
 80093fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80093fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009402:	f7fa fbe1 	bl	8003bc8 <HAL_PWREx_ControlVoltageScaling>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d001      	beq.n	8009410 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800940c:	f000 faa4 	bl	8009958 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8009410:	2310      	movs	r3, #16
 8009412:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8009414:	2301      	movs	r3, #1
 8009416:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8009418:	2300      	movs	r3, #0
 800941a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800941c:	2360      	movs	r3, #96	; 0x60
 800941e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009420:	2302      	movs	r3, #2
 8009422:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8009424:	2301      	movs	r3, #1
 8009426:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8009428:	2301      	movs	r3, #1
 800942a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800942c:	2328      	movs	r3, #40	; 0x28
 800942e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8009430:	2307      	movs	r3, #7
 8009432:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009434:	2302      	movs	r3, #2
 8009436:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009438:	2302      	movs	r3, #2
 800943a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800943c:	f107 0314 	add.w	r3, r7, #20
 8009440:	4618      	mov	r0, r3
 8009442:	f7fa fc27 	bl	8003c94 <HAL_RCC_OscConfig>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800944c:	f000 fa84 	bl	8009958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009450:	230f      	movs	r3, #15
 8009452:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009454:	2303      	movs	r3, #3
 8009456:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009458:	2300      	movs	r3, #0
 800945a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800945c:	2300      	movs	r3, #0
 800945e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009460:	2300      	movs	r3, #0
 8009462:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009464:	463b      	mov	r3, r7
 8009466:	2104      	movs	r1, #4
 8009468:	4618      	mov	r0, r3
 800946a:	f7fa fff9 	bl	8004460 <HAL_RCC_ClockConfig>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8009474:	f000 fa70 	bl	8009958 <Error_Handler>
  }
}
 8009478:	bf00      	nop
 800947a:	3758      	adds	r7, #88	; 0x58
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b08a      	sub	sp, #40	; 0x28
 8009484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8009486:	1d3b      	adds	r3, r7, #4
 8009488:	2224      	movs	r2, #36	; 0x24
 800948a:	2100      	movs	r1, #0
 800948c:	4618      	mov	r0, r3
 800948e:	f001 fc95 	bl	800adbc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8009492:	4b12      	ldr	r3, [pc, #72]	; (80094dc <MX_DAC1_Init+0x5c>)
 8009494:	4a12      	ldr	r2, [pc, #72]	; (80094e0 <MX_DAC1_Init+0x60>)
 8009496:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8009498:	4810      	ldr	r0, [pc, #64]	; (80094dc <MX_DAC1_Init+0x5c>)
 800949a:	f7f7 fd4c 	bl	8000f36 <HAL_DAC_Init>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d001      	beq.n	80094a8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80094a4:	f000 fa58 	bl	8009958 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80094a8:	2300      	movs	r3, #0
 80094aa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 80094ac:	232c      	movs	r3, #44	; 0x2c
 80094ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80094b0:	2300      	movs	r3, #0
 80094b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80094b4:	2300      	movs	r3, #0
 80094b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80094b8:	2300      	movs	r3, #0
 80094ba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80094bc:	1d3b      	adds	r3, r7, #4
 80094be:	2200      	movs	r2, #0
 80094c0:	4619      	mov	r1, r3
 80094c2:	4806      	ldr	r0, [pc, #24]	; (80094dc <MX_DAC1_Init+0x5c>)
 80094c4:	f7f7 fe89 	bl	80011da <HAL_DAC_ConfigChannel>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80094ce:	f000 fa43 	bl	8009958 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80094d2:	bf00      	nop
 80094d4:	3728      	adds	r7, #40	; 0x28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	200002b0 	.word	0x200002b0
 80094e0:	40007400 	.word	0x40007400

080094e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80094e8:	4b1b      	ldr	r3, [pc, #108]	; (8009558 <MX_I2C1_Init+0x74>)
 80094ea:	4a1c      	ldr	r2, [pc, #112]	; (800955c <MX_I2C1_Init+0x78>)
 80094ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80094ee:	4b1a      	ldr	r3, [pc, #104]	; (8009558 <MX_I2C1_Init+0x74>)
 80094f0:	4a1b      	ldr	r2, [pc, #108]	; (8009560 <MX_I2C1_Init+0x7c>)
 80094f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80094f4:	4b18      	ldr	r3, [pc, #96]	; (8009558 <MX_I2C1_Init+0x74>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80094fa:	4b17      	ldr	r3, [pc, #92]	; (8009558 <MX_I2C1_Init+0x74>)
 80094fc:	2201      	movs	r2, #1
 80094fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009500:	4b15      	ldr	r3, [pc, #84]	; (8009558 <MX_I2C1_Init+0x74>)
 8009502:	2200      	movs	r2, #0
 8009504:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8009506:	4b14      	ldr	r3, [pc, #80]	; (8009558 <MX_I2C1_Init+0x74>)
 8009508:	2200      	movs	r2, #0
 800950a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800950c:	4b12      	ldr	r3, [pc, #72]	; (8009558 <MX_I2C1_Init+0x74>)
 800950e:	2200      	movs	r2, #0
 8009510:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009512:	4b11      	ldr	r3, [pc, #68]	; (8009558 <MX_I2C1_Init+0x74>)
 8009514:	2200      	movs	r2, #0
 8009516:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009518:	4b0f      	ldr	r3, [pc, #60]	; (8009558 <MX_I2C1_Init+0x74>)
 800951a:	2200      	movs	r2, #0
 800951c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800951e:	480e      	ldr	r0, [pc, #56]	; (8009558 <MX_I2C1_Init+0x74>)
 8009520:	f7f8 fd1e 	bl	8001f60 <HAL_I2C_Init>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800952a:	f000 fa15 	bl	8009958 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800952e:	2100      	movs	r1, #0
 8009530:	4809      	ldr	r0, [pc, #36]	; (8009558 <MX_I2C1_Init+0x74>)
 8009532:	f7f9 fa1d 	bl	8002970 <HAL_I2CEx_ConfigAnalogFilter>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d001      	beq.n	8009540 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800953c:	f000 fa0c 	bl	8009958 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009540:	2100      	movs	r1, #0
 8009542:	4805      	ldr	r0, [pc, #20]	; (8009558 <MX_I2C1_Init+0x74>)
 8009544:	f7f9 fa5f 	bl	8002a06 <HAL_I2CEx_ConfigDigitalFilter>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d001      	beq.n	8009552 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800954e:	f000 fa03 	bl	8009958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009552:	bf00      	nop
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	200002c4 	.word	0x200002c4
 800955c:	40005400 	.word	0x40005400
 8009560:	10909cec 	.word	0x10909cec

08009564 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b088      	sub	sp, #32
 8009568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800956a:	f107 0310 	add.w	r3, r7, #16
 800956e:	2200      	movs	r2, #0
 8009570:	601a      	str	r2, [r3, #0]
 8009572:	605a      	str	r2, [r3, #4]
 8009574:	609a      	str	r2, [r3, #8]
 8009576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009578:	1d3b      	adds	r3, r7, #4
 800957a:	2200      	movs	r2, #0
 800957c:	601a      	str	r2, [r3, #0]
 800957e:	605a      	str	r2, [r3, #4]
 8009580:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009582:	4b1d      	ldr	r3, [pc, #116]	; (80095f8 <MX_TIM2_Init+0x94>)
 8009584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009588:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800958a:	4b1b      	ldr	r3, [pc, #108]	; (80095f8 <MX_TIM2_Init+0x94>)
 800958c:	2200      	movs	r2, #0
 800958e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009590:	4b19      	ldr	r3, [pc, #100]	; (80095f8 <MX_TIM2_Init+0x94>)
 8009592:	2200      	movs	r2, #0
 8009594:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000000;
 8009596:	4b18      	ldr	r3, [pc, #96]	; (80095f8 <MX_TIM2_Init+0x94>)
 8009598:	4a18      	ldr	r2, [pc, #96]	; (80095fc <MX_TIM2_Init+0x98>)
 800959a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800959c:	4b16      	ldr	r3, [pc, #88]	; (80095f8 <MX_TIM2_Init+0x94>)
 800959e:	2200      	movs	r2, #0
 80095a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095a2:	4b15      	ldr	r3, [pc, #84]	; (80095f8 <MX_TIM2_Init+0x94>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80095a8:	4813      	ldr	r0, [pc, #76]	; (80095f8 <MX_TIM2_Init+0x94>)
 80095aa:	f7fb fe1b 	bl	80051e4 <HAL_TIM_Base_Init>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80095b4:	f000 f9d0 	bl	8009958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80095b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80095be:	f107 0310 	add.w	r3, r7, #16
 80095c2:	4619      	mov	r1, r3
 80095c4:	480c      	ldr	r0, [pc, #48]	; (80095f8 <MX_TIM2_Init+0x94>)
 80095c6:	f7fb fff4 	bl	80055b2 <HAL_TIM_ConfigClockSource>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80095d0:	f000 f9c2 	bl	8009958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80095d4:	2320      	movs	r3, #32
 80095d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80095d8:	2300      	movs	r3, #0
 80095da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80095dc:	1d3b      	adds	r3, r7, #4
 80095de:	4619      	mov	r1, r3
 80095e0:	4805      	ldr	r0, [pc, #20]	; (80095f8 <MX_TIM2_Init+0x94>)
 80095e2:	f7fc fa09 	bl	80059f8 <HAL_TIMEx_MasterConfigSynchronization>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80095ec:	f000 f9b4 	bl	8009958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80095f0:	bf00      	nop
 80095f2:	3720      	adds	r7, #32
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	20000448 	.word	0x20000448
 80095fc:	007a1200 	.word	0x007a1200

08009600 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b088      	sub	sp, #32
 8009604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009606:	f107 0310 	add.w	r3, r7, #16
 800960a:	2200      	movs	r2, #0
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	605a      	str	r2, [r3, #4]
 8009610:	609a      	str	r2, [r3, #8]
 8009612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009614:	1d3b      	adds	r3, r7, #4
 8009616:	2200      	movs	r2, #0
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	605a      	str	r2, [r3, #4]
 800961c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800961e:	4b1d      	ldr	r3, [pc, #116]	; (8009694 <MX_TIM4_Init+0x94>)
 8009620:	4a1d      	ldr	r2, [pc, #116]	; (8009698 <MX_TIM4_Init+0x98>)
 8009622:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8009624:	4b1b      	ldr	r3, [pc, #108]	; (8009694 <MX_TIM4_Init+0x94>)
 8009626:	2200      	movs	r2, #0
 8009628:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800962a:	4b1a      	ldr	r3, [pc, #104]	; (8009694 <MX_TIM4_Init+0x94>)
 800962c:	2200      	movs	r2, #0
 800962e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1814;
 8009630:	4b18      	ldr	r3, [pc, #96]	; (8009694 <MX_TIM4_Init+0x94>)
 8009632:	f240 7216 	movw	r2, #1814	; 0x716
 8009636:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009638:	4b16      	ldr	r3, [pc, #88]	; (8009694 <MX_TIM4_Init+0x94>)
 800963a:	2200      	movs	r2, #0
 800963c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800963e:	4b15      	ldr	r3, [pc, #84]	; (8009694 <MX_TIM4_Init+0x94>)
 8009640:	2200      	movs	r2, #0
 8009642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009644:	4813      	ldr	r0, [pc, #76]	; (8009694 <MX_TIM4_Init+0x94>)
 8009646:	f7fb fdcd 	bl	80051e4 <HAL_TIM_Base_Init>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8009650:	f000 f982 	bl	8009958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009658:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800965a:	f107 0310 	add.w	r3, r7, #16
 800965e:	4619      	mov	r1, r3
 8009660:	480c      	ldr	r0, [pc, #48]	; (8009694 <MX_TIM4_Init+0x94>)
 8009662:	f7fb ffa6 	bl	80055b2 <HAL_TIM_ConfigClockSource>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800966c:	f000 f974 	bl	8009958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009670:	2320      	movs	r3, #32
 8009672:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009674:	2300      	movs	r3, #0
 8009676:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009678:	1d3b      	adds	r3, r7, #4
 800967a:	4619      	mov	r1, r3
 800967c:	4805      	ldr	r0, [pc, #20]	; (8009694 <MX_TIM4_Init+0x94>)
 800967e:	f7fc f9bb 	bl	80059f8 <HAL_TIMEx_MasterConfigSynchronization>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8009688:	f000 f966 	bl	8009958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800968c:	bf00      	nop
 800968e:	3720      	adds	r7, #32
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	20000264 	.word	0x20000264
 8009698:	40000800 	.word	0x40000800

0800969c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80096a0:	4b14      	ldr	r3, [pc, #80]	; (80096f4 <MX_USART1_UART_Init+0x58>)
 80096a2:	4a15      	ldr	r2, [pc, #84]	; (80096f8 <MX_USART1_UART_Init+0x5c>)
 80096a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80096a6:	4b13      	ldr	r3, [pc, #76]	; (80096f4 <MX_USART1_UART_Init+0x58>)
 80096a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80096ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80096ae:	4b11      	ldr	r3, [pc, #68]	; (80096f4 <MX_USART1_UART_Init+0x58>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80096b4:	4b0f      	ldr	r3, [pc, #60]	; (80096f4 <MX_USART1_UART_Init+0x58>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80096ba:	4b0e      	ldr	r3, [pc, #56]	; (80096f4 <MX_USART1_UART_Init+0x58>)
 80096bc:	2200      	movs	r2, #0
 80096be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80096c0:	4b0c      	ldr	r3, [pc, #48]	; (80096f4 <MX_USART1_UART_Init+0x58>)
 80096c2:	220c      	movs	r2, #12
 80096c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80096c6:	4b0b      	ldr	r3, [pc, #44]	; (80096f4 <MX_USART1_UART_Init+0x58>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80096cc:	4b09      	ldr	r3, [pc, #36]	; (80096f4 <MX_USART1_UART_Init+0x58>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80096d2:	4b08      	ldr	r3, [pc, #32]	; (80096f4 <MX_USART1_UART_Init+0x58>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80096d8:	4b06      	ldr	r3, [pc, #24]	; (80096f4 <MX_USART1_UART_Init+0x58>)
 80096da:	2200      	movs	r2, #0
 80096dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80096de:	4805      	ldr	r0, [pc, #20]	; (80096f4 <MX_USART1_UART_Init+0x58>)
 80096e0:	f7fc fa30 	bl	8005b44 <HAL_UART_Init>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80096ea:	f000 f935 	bl	8009958 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80096ee:	bf00      	nop
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	2000035c 	.word	0x2000035c
 80096f8:	40013800 	.word	0x40013800

080096fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009702:	4b0c      	ldr	r3, [pc, #48]	; (8009734 <MX_DMA_Init+0x38>)
 8009704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009706:	4a0b      	ldr	r2, [pc, #44]	; (8009734 <MX_DMA_Init+0x38>)
 8009708:	f043 0301 	orr.w	r3, r3, #1
 800970c:	6493      	str	r3, [r2, #72]	; 0x48
 800970e:	4b09      	ldr	r3, [pc, #36]	; (8009734 <MX_DMA_Init+0x38>)
 8009710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	607b      	str	r3, [r7, #4]
 8009718:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800971a:	2200      	movs	r2, #0
 800971c:	2100      	movs	r1, #0
 800971e:	200d      	movs	r0, #13
 8009720:	f7f7 fbd3 	bl	8000eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8009724:	200d      	movs	r0, #13
 8009726:	f7f7 fbec 	bl	8000f02 <HAL_NVIC_EnableIRQ>

}
 800972a:	bf00      	nop
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	40021000 	.word	0x40021000

08009738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b08a      	sub	sp, #40	; 0x28
 800973c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800973e:	f107 0314 	add.w	r3, r7, #20
 8009742:	2200      	movs	r2, #0
 8009744:	601a      	str	r2, [r3, #0]
 8009746:	605a      	str	r2, [r3, #4]
 8009748:	609a      	str	r2, [r3, #8]
 800974a:	60da      	str	r2, [r3, #12]
 800974c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800974e:	4b4f      	ldr	r3, [pc, #316]	; (800988c <MX_GPIO_Init+0x154>)
 8009750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009752:	4a4e      	ldr	r2, [pc, #312]	; (800988c <MX_GPIO_Init+0x154>)
 8009754:	f043 0310 	orr.w	r3, r3, #16
 8009758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800975a:	4b4c      	ldr	r3, [pc, #304]	; (800988c <MX_GPIO_Init+0x154>)
 800975c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800975e:	f003 0310 	and.w	r3, r3, #16
 8009762:	613b      	str	r3, [r7, #16]
 8009764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009766:	4b49      	ldr	r3, [pc, #292]	; (800988c <MX_GPIO_Init+0x154>)
 8009768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800976a:	4a48      	ldr	r2, [pc, #288]	; (800988c <MX_GPIO_Init+0x154>)
 800976c:	f043 0304 	orr.w	r3, r3, #4
 8009770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009772:	4b46      	ldr	r3, [pc, #280]	; (800988c <MX_GPIO_Init+0x154>)
 8009774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009776:	f003 0304 	and.w	r3, r3, #4
 800977a:	60fb      	str	r3, [r7, #12]
 800977c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800977e:	4b43      	ldr	r3, [pc, #268]	; (800988c <MX_GPIO_Init+0x154>)
 8009780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009782:	4a42      	ldr	r2, [pc, #264]	; (800988c <MX_GPIO_Init+0x154>)
 8009784:	f043 0301 	orr.w	r3, r3, #1
 8009788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800978a:	4b40      	ldr	r3, [pc, #256]	; (800988c <MX_GPIO_Init+0x154>)
 800978c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	60bb      	str	r3, [r7, #8]
 8009794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009796:	4b3d      	ldr	r3, [pc, #244]	; (800988c <MX_GPIO_Init+0x154>)
 8009798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800979a:	4a3c      	ldr	r2, [pc, #240]	; (800988c <MX_GPIO_Init+0x154>)
 800979c:	f043 0302 	orr.w	r3, r3, #2
 80097a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097a2:	4b3a      	ldr	r3, [pc, #232]	; (800988c <MX_GPIO_Init+0x154>)
 80097a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097a6:	f003 0302 	and.w	r3, r3, #2
 80097aa:	607b      	str	r3, [r7, #4]
 80097ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80097ae:	4b37      	ldr	r3, [pc, #220]	; (800988c <MX_GPIO_Init+0x154>)
 80097b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097b2:	4a36      	ldr	r2, [pc, #216]	; (800988c <MX_GPIO_Init+0x154>)
 80097b4:	f043 0308 	orr.w	r3, r3, #8
 80097b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097ba:	4b34      	ldr	r3, [pc, #208]	; (800988c <MX_GPIO_Init+0x154>)
 80097bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097be:	f003 0308 	and.w	r3, r3, #8
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 80097c6:	2201      	movs	r2, #1
 80097c8:	2108      	movs	r1, #8
 80097ca:	4831      	ldr	r0, [pc, #196]	; (8009890 <MX_GPIO_Init+0x158>)
 80097cc:	f7f8 fb7e 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80097d0:	2200      	movs	r2, #0
 80097d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80097d6:	482f      	ldr	r0, [pc, #188]	; (8009894 <MX_GPIO_Init+0x15c>)
 80097d8:	f7f8 fb78 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_ERROR_Pin */
  GPIO_InitStruct.Pin = LED_ERROR_Pin;
 80097dc:	2308      	movs	r3, #8
 80097de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097e0:	2301      	movs	r3, #1
 80097e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097e4:	2300      	movs	r3, #0
 80097e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097e8:	2300      	movs	r3, #0
 80097ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_ERROR_GPIO_Port, &GPIO_InitStruct);
 80097ec:	f107 0314 	add.w	r3, r7, #20
 80097f0:	4619      	mov	r1, r3
 80097f2:	4827      	ldr	r0, [pc, #156]	; (8009890 <MX_GPIO_Init+0x158>)
 80097f4:	f7f8 f8cc 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSHBUTTON_Pin */
  GPIO_InitStruct.Pin = PUSHBUTTON_Pin;
 80097f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80097fe:	4b26      	ldr	r3, [pc, #152]	; (8009898 <MX_GPIO_Init+0x160>)
 8009800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009802:	2300      	movs	r3, #0
 8009804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 8009806:	f107 0314 	add.w	r3, r7, #20
 800980a:	4619      	mov	r1, r3
 800980c:	4823      	ldr	r0, [pc, #140]	; (800989c <MX_GPIO_Init+0x164>)
 800980e:	f7f8 f8bf 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : test_push_Pin */
  GPIO_InitStruct.Pin = test_push_Pin;
 8009812:	2301      	movs	r3, #1
 8009814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009816:	4b20      	ldr	r3, [pc, #128]	; (8009898 <MX_GPIO_Init+0x160>)
 8009818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800981a:	2302      	movs	r3, #2
 800981c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(test_push_GPIO_Port, &GPIO_InitStruct);
 800981e:	f107 0314 	add.w	r3, r7, #20
 8009822:	4619      	mov	r1, r3
 8009824:	481d      	ldr	r0, [pc, #116]	; (800989c <MX_GPIO_Init+0x164>)
 8009826:	f7f8 f8b3 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800982a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800982e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009830:	2301      	movs	r3, #1
 8009832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009834:	2300      	movs	r3, #0
 8009836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009838:	2300      	movs	r3, #0
 800983a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800983c:	f107 0314 	add.w	r3, r7, #20
 8009840:	4619      	mov	r1, r3
 8009842:	4814      	ldr	r0, [pc, #80]	; (8009894 <MX_GPIO_Init+0x15c>)
 8009844:	f7f8 f8a4 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009848:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800984c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800984e:	4b12      	ldr	r3, [pc, #72]	; (8009898 <MX_GPIO_Init+0x160>)
 8009850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009852:	2300      	movs	r3, #0
 8009854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009856:	f107 0314 	add.w	r3, r7, #20
 800985a:	4619      	mov	r1, r3
 800985c:	4810      	ldr	r0, [pc, #64]	; (80098a0 <MX_GPIO_Init+0x168>)
 800985e:	f7f8 f897 	bl	8001990 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8009862:	2200      	movs	r2, #0
 8009864:	2101      	movs	r1, #1
 8009866:	2006      	movs	r0, #6
 8009868:	f7f7 fb2f 	bl	8000eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800986c:	2006      	movs	r0, #6
 800986e:	f7f7 fb48 	bl	8000f02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8009872:	2200      	movs	r2, #0
 8009874:	2105      	movs	r1, #5
 8009876:	2028      	movs	r0, #40	; 0x28
 8009878:	f7f7 fb27 	bl	8000eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800987c:	2028      	movs	r0, #40	; 0x28
 800987e:	f7f7 fb40 	bl	8000f02 <HAL_NVIC_EnableIRQ>

}
 8009882:	bf00      	nop
 8009884:	3728      	adds	r7, #40	; 0x28
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	40021000 	.word	0x40021000
 8009890:	48001000 	.word	0x48001000
 8009894:	48000400 	.word	0x48000400
 8009898:	10110000 	.word	0x10110000
 800989c:	48000800 	.word	0x48000800
 80098a0:	48000c00 	.word	0x48000c00

080098a4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
/**
 * @brief Push-button Handler
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af02      	add	r7, sp, #8
 80098aa:	4603      	mov	r3, r0
 80098ac:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PUSHBUTTON_Pin)
 80098ae:	88fb      	ldrh	r3, [r7, #6]
 80098b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098b4:	d114      	bne.n	80098e0 <HAL_GPIO_EXTI_Callback+0x3c>
	{
		 button_flag = 1;
 80098b6:	4b0c      	ldr	r3, [pc, #48]	; (80098e8 <HAL_GPIO_EXTI_Callback+0x44>)
 80098b8:	2201      	movs	r2, #1
 80098ba:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80098bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80098c0:	480a      	ldr	r0, [pc, #40]	; (80098ec <HAL_GPIO_EXTI_Callback+0x48>)
 80098c2:	f7f8 fb1b 	bl	8001efc <HAL_GPIO_TogglePin>
		 HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80098c6:	2100      	movs	r1, #0
 80098c8:	4809      	ldr	r0, [pc, #36]	; (80098f0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80098ca:	f7f7 fc23 	bl	8001114 <HAL_DAC_Stop_DMA>
		 HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineValue, size, DAC_ALIGN_8B_R);
 80098ce:	2308      	movs	r3, #8
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80098d6:	4a07      	ldr	r2, [pc, #28]	; (80098f4 <HAL_GPIO_EXTI_Callback+0x50>)
 80098d8:	2100      	movs	r1, #0
 80098da:	4805      	ldr	r0, [pc, #20]	; (80098f0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80098dc:	f7f7 fb4e 	bl	8000f7c <HAL_DAC_Start_DMA>
//		 HAL_Delay(10);
//		 mousehid.button = 0;
//		 USBD_HID_SendReport(&hUsbDeviceFS,&mousehid, sizeof (mousehid));
	}

}
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20000230 	.word	0x20000230
 80098ec:	48000400 	.word	0x48000400
 80098f0:	200002b0 	.word	0x200002b0
 80098f4:	20000494 	.word	0x20000494

080098f8 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief Interrupts Handler for TIM2
 *  At 80MHz system clock, prescaler = 0 and counter period = 8000000, this happens at 10Hz
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b098      	sub	sp, #96	; 0x60
 80098fc:	af02      	add	r7, sp, #8
 80098fe:	6078      	str	r0, [r7, #4]
	// Read acclerometer values, store in acceleroResults array
//	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	BSP_ACCELERO_AccGetXYZ(acceleroResults);
 8009900:	4812      	ldr	r0, [pc, #72]	; (800994c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8009902:	f000 f9c5 	bl	8009c90 <BSP_ACCELERO_AccGetXYZ>
//	// Format: (X, Y, Z), if printf is to be reconfigured (Cumbersome!)
//	// printf("(%d, %d, %d)\n", acceleroResults[0], acceleroResults[1], acceleroResults[2]);
	char XYZ[80];
	sprintf(XYZ, "%d, %d, %d, End\r", acceleroResults[0], acceleroResults[1], acceleroResults[2]);
 8009906:	4b11      	ldr	r3, [pc, #68]	; (800994c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8009908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800990c:	461a      	mov	r2, r3
 800990e:	4b0f      	ldr	r3, [pc, #60]	; (800994c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8009910:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009914:	4619      	mov	r1, r3
 8009916:	4b0d      	ldr	r3, [pc, #52]	; (800994c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8009918:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800991c:	f107 0008 	add.w	r0, r7, #8
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	460b      	mov	r3, r1
 8009924:	490a      	ldr	r1, [pc, #40]	; (8009950 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8009926:	f001 fa51 	bl	800adcc <siprintf>
	HAL_UART_Transmit(&huart1, XYZ, (uint16_t)strlen(XYZ), 10);
 800992a:	f107 0308 	add.w	r3, r7, #8
 800992e:	4618      	mov	r0, r3
 8009930:	f7f6 fc4e 	bl	80001d0 <strlen>
 8009934:	4603      	mov	r3, r0
 8009936:	b29a      	uxth	r2, r3
 8009938:	f107 0108 	add.w	r1, r7, #8
 800993c:	230a      	movs	r3, #10
 800993e:	4805      	ldr	r0, [pc, #20]	; (8009954 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8009940:	f7fc f94e 	bl	8005be0 <HAL_UART_Transmit>
}
 8009944:	bf00      	nop
 8009946:	3758      	adds	r7, #88	; 0x58
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	2000025c 	.word	0x2000025c
 8009950:	0800b640 	.word	0x0800b640
 8009954:	2000035c 	.word	0x2000035c

08009958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
 800995c:	2200      	movs	r2, #0
 800995e:	2108      	movs	r1, #8
 8009960:	4803      	ldr	r0, [pc, #12]	; (8009970 <Error_Handler+0x18>)
 8009962:	f7f8 fab3 	bl	8001ecc <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009966:	b672      	cpsid	i
}
 8009968:	bf00      	nop
  __disable_irq();
  __BKPT();
 800996a:	be00      	bkpt	0x0000
  while (1)
 800996c:	e7fe      	b.n	800996c <Error_Handler+0x14>
 800996e:	bf00      	nop
 8009970:	48001000 	.word	0x48001000

08009974 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b08a      	sub	sp, #40	; 0x28
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800997c:	4b27      	ldr	r3, [pc, #156]	; (8009a1c <I2Cx_MspInit+0xa8>)
 800997e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009980:	4a26      	ldr	r2, [pc, #152]	; (8009a1c <I2Cx_MspInit+0xa8>)
 8009982:	f043 0302 	orr.w	r3, r3, #2
 8009986:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009988:	4b24      	ldr	r3, [pc, #144]	; (8009a1c <I2Cx_MspInit+0xa8>)
 800998a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800998c:	f003 0302 	and.w	r3, r3, #2
 8009990:	613b      	str	r3, [r7, #16]
 8009992:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8009994:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009998:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800999a:	2312      	movs	r3, #18
 800999c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800999e:	2301      	movs	r3, #1
 80099a0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099a2:	2303      	movs	r3, #3
 80099a4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80099a6:	2304      	movs	r3, #4
 80099a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80099aa:	f107 0314 	add.w	r3, r7, #20
 80099ae:	4619      	mov	r1, r3
 80099b0:	481b      	ldr	r0, [pc, #108]	; (8009a20 <I2Cx_MspInit+0xac>)
 80099b2:	f7f7 ffed 	bl	8001990 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80099b6:	f107 0314 	add.w	r3, r7, #20
 80099ba:	4619      	mov	r1, r3
 80099bc:	4818      	ldr	r0, [pc, #96]	; (8009a20 <I2Cx_MspInit+0xac>)
 80099be:	f7f7 ffe7 	bl	8001990 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80099c2:	4b16      	ldr	r3, [pc, #88]	; (8009a1c <I2Cx_MspInit+0xa8>)
 80099c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099c6:	4a15      	ldr	r2, [pc, #84]	; (8009a1c <I2Cx_MspInit+0xa8>)
 80099c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80099cc:	6593      	str	r3, [r2, #88]	; 0x58
 80099ce:	4b13      	ldr	r3, [pc, #76]	; (8009a1c <I2Cx_MspInit+0xa8>)
 80099d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099d6:	60fb      	str	r3, [r7, #12]
 80099d8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80099da:	4b10      	ldr	r3, [pc, #64]	; (8009a1c <I2Cx_MspInit+0xa8>)
 80099dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099de:	4a0f      	ldr	r2, [pc, #60]	; (8009a1c <I2Cx_MspInit+0xa8>)
 80099e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80099e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80099e6:	4b0d      	ldr	r3, [pc, #52]	; (8009a1c <I2Cx_MspInit+0xa8>)
 80099e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ea:	4a0c      	ldr	r2, [pc, #48]	; (8009a1c <I2Cx_MspInit+0xa8>)
 80099ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80099f0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80099f2:	2200      	movs	r2, #0
 80099f4:	210f      	movs	r1, #15
 80099f6:	2021      	movs	r0, #33	; 0x21
 80099f8:	f7f7 fa67 	bl	8000eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80099fc:	2021      	movs	r0, #33	; 0x21
 80099fe:	f7f7 fa80 	bl	8000f02 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8009a02:	2200      	movs	r2, #0
 8009a04:	210f      	movs	r1, #15
 8009a06:	2022      	movs	r0, #34	; 0x22
 8009a08:	f7f7 fa5f 	bl	8000eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8009a0c:	2022      	movs	r0, #34	; 0x22
 8009a0e:	f7f7 fa78 	bl	8000f02 <HAL_NVIC_EnableIRQ>
}
 8009a12:	bf00      	nop
 8009a14:	3728      	adds	r7, #40	; 0x28
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	40021000 	.word	0x40021000
 8009a20:	48000400 	.word	0x48000400

08009a24 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a12      	ldr	r2, [pc, #72]	; (8009a78 <I2Cx_Init+0x54>)
 8009a30:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a11      	ldr	r2, [pc, #68]	; (8009a7c <I2Cx_Init+0x58>)
 8009a36:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f7ff ff89 	bl	8009974 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7f8 fa7c 	bl	8001f60 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8009a68:	2100      	movs	r1, #0
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f7f8 ff80 	bl	8002970 <HAL_I2CEx_ConfigAnalogFilter>
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	40005800 	.word	0x40005800
 8009a7c:	00702681 	.word	0x00702681

08009a80 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b08a      	sub	sp, #40	; 0x28
 8009a84:	af04      	add	r7, sp, #16
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	4608      	mov	r0, r1
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	4603      	mov	r3, r0
 8009a90:	72fb      	strb	r3, [r7, #11]
 8009a92:	460b      	mov	r3, r1
 8009a94:	813b      	strh	r3, [r7, #8]
 8009a96:	4613      	mov	r3, r2
 8009a98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009a9e:	7afb      	ldrb	r3, [r7, #11]
 8009aa0:	b299      	uxth	r1, r3
 8009aa2:	88f8      	ldrh	r0, [r7, #6]
 8009aa4:	893a      	ldrh	r2, [r7, #8]
 8009aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009aaa:	9302      	str	r3, [sp, #8]
 8009aac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009aae:	9301      	str	r3, [sp, #4]
 8009ab0:	6a3b      	ldr	r3, [r7, #32]
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f7f8 fc24 	bl	8002304 <HAL_I2C_Mem_Read>
 8009abc:	4603      	mov	r3, r0
 8009abe:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009ac0:	7dfb      	ldrb	r3, [r7, #23]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d004      	beq.n	8009ad0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8009ac6:	7afb      	ldrb	r3, [r7, #11]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f000 f832 	bl	8009b34 <I2Cx_Error>
  }
  return status;
 8009ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b08a      	sub	sp, #40	; 0x28
 8009ade:	af04      	add	r7, sp, #16
 8009ae0:	60f8      	str	r0, [r7, #12]
 8009ae2:	4608      	mov	r0, r1
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	4603      	mov	r3, r0
 8009aea:	72fb      	strb	r3, [r7, #11]
 8009aec:	460b      	mov	r3, r1
 8009aee:	813b      	strh	r3, [r7, #8]
 8009af0:	4613      	mov	r3, r2
 8009af2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009af8:	7afb      	ldrb	r3, [r7, #11]
 8009afa:	b299      	uxth	r1, r3
 8009afc:	88f8      	ldrh	r0, [r7, #6]
 8009afe:	893a      	ldrh	r2, [r7, #8]
 8009b00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009b04:	9302      	str	r3, [sp, #8]
 8009b06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	6a3b      	ldr	r3, [r7, #32]
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	4603      	mov	r3, r0
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f7f8 fae3 	bl	80020dc <HAL_I2C_Mem_Write>
 8009b16:	4603      	mov	r3, r0
 8009b18:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d004      	beq.n	8009b2a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009b20:	7afb      	ldrb	r3, [r7, #11]
 8009b22:	4619      	mov	r1, r3
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f000 f805 	bl	8009b34 <I2Cx_Error>
  }
  return status;
 8009b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3718      	adds	r7, #24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7f8 fa9c 	bl	800207e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7ff ff6c 	bl	8009a24 <I2Cx_Init>
}
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8009b58:	4802      	ldr	r0, [pc, #8]	; (8009b64 <SENSOR_IO_Init+0x10>)
 8009b5a:	f7ff ff63 	bl	8009a24 <I2Cx_Init>
}
 8009b5e:	bf00      	nop
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	20000af4 	.word	0x20000af4

08009b68 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af02      	add	r7, sp, #8
 8009b6e:	4603      	mov	r3, r0
 8009b70:	71fb      	strb	r3, [r7, #7]
 8009b72:	460b      	mov	r3, r1
 8009b74:	71bb      	strb	r3, [r7, #6]
 8009b76:	4613      	mov	r3, r2
 8009b78:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8009b7a:	79bb      	ldrb	r3, [r7, #6]
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	79f9      	ldrb	r1, [r7, #7]
 8009b80:	2301      	movs	r3, #1
 8009b82:	9301      	str	r3, [sp, #4]
 8009b84:	1d7b      	adds	r3, r7, #5
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	2301      	movs	r3, #1
 8009b8a:	4803      	ldr	r0, [pc, #12]	; (8009b98 <SENSOR_IO_Write+0x30>)
 8009b8c:	f7ff ffa5 	bl	8009ada <I2Cx_WriteMultiple>
}
 8009b90:	bf00      	nop
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	20000af4 	.word	0x20000af4

08009b9c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af02      	add	r7, sp, #8
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	460a      	mov	r2, r1
 8009ba6:	71fb      	strb	r3, [r7, #7]
 8009ba8:	4613      	mov	r3, r2
 8009baa:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8009bac:	2300      	movs	r3, #0
 8009bae:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8009bb0:	79bb      	ldrb	r3, [r7, #6]
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	79f9      	ldrb	r1, [r7, #7]
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	9301      	str	r3, [sp, #4]
 8009bba:	f107 030f 	add.w	r3, r7, #15
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	4804      	ldr	r0, [pc, #16]	; (8009bd4 <SENSOR_IO_Read+0x38>)
 8009bc4:	f7ff ff5c 	bl	8009a80 <I2Cx_ReadMultiple>

  return read_value;
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20000af4 	.word	0x20000af4

08009bd8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af02      	add	r7, sp, #8
 8009bde:	603a      	str	r2, [r7, #0]
 8009be0:	461a      	mov	r2, r3
 8009be2:	4603      	mov	r3, r0
 8009be4:	71fb      	strb	r3, [r7, #7]
 8009be6:	460b      	mov	r3, r1
 8009be8:	71bb      	strb	r3, [r7, #6]
 8009bea:	4613      	mov	r3, r2
 8009bec:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8009bee:	79bb      	ldrb	r3, [r7, #6]
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	79f9      	ldrb	r1, [r7, #7]
 8009bf4:	88bb      	ldrh	r3, [r7, #4]
 8009bf6:	9301      	str	r3, [sp, #4]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	4804      	ldr	r0, [pc, #16]	; (8009c10 <SENSOR_IO_ReadMultiple+0x38>)
 8009c00:	f7ff ff3e 	bl	8009a80 <I2Cx_ReadMultiple>
 8009c04:	4603      	mov	r3, r0
 8009c06:	b29b      	uxth	r3, r3
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	20000af4 	.word	0x20000af4

08009c14 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8009c22:	4b19      	ldr	r3, [pc, #100]	; (8009c88 <BSP_ACCELERO_Init+0x74>)
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	4798      	blx	r3
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b6a      	cmp	r3, #106	; 0x6a
 8009c2c:	d002      	beq.n	8009c34 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	73fb      	strb	r3, [r7, #15]
 8009c32:	e024      	b.n	8009c7e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8009c34:	4b15      	ldr	r3, [pc, #84]	; (8009c8c <BSP_ACCELERO_Init+0x78>)
 8009c36:	4a14      	ldr	r2, [pc, #80]	; (8009c88 <BSP_ACCELERO_Init+0x74>)
 8009c38:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8009c3a:	2330      	movs	r3, #48	; 0x30
 8009c3c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8009c42:	2300      	movs	r3, #0
 8009c44:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8009c46:	2340      	movs	r3, #64	; 0x40
 8009c48:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8009c52:	797a      	ldrb	r2, [r7, #5]
 8009c54:	7abb      	ldrb	r3, [r7, #10]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8009c5c:	7a3b      	ldrb	r3, [r7, #8]
 8009c5e:	f043 0304 	orr.w	r3, r3, #4
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	021b      	lsls	r3, r3, #8
 8009c66:	b21a      	sxth	r2, r3
 8009c68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	b21b      	sxth	r3, r3
 8009c70:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8009c72:	4b06      	ldr	r3, [pc, #24]	; (8009c8c <BSP_ACCELERO_Init+0x78>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	89ba      	ldrh	r2, [r7, #12]
 8009c7a:	4610      	mov	r0, r2
 8009c7c:	4798      	blx	r3
  }  

  return ret;
 8009c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	20000110 	.word	0x20000110
 8009c8c:	20000234 	.word	0x20000234

08009c90 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8009c98:	4b08      	ldr	r3, [pc, #32]	; (8009cbc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d009      	beq.n	8009cb4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8009ca0:	4b06      	ldr	r3, [pc, #24]	; (8009cbc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d004      	beq.n	8009cb4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8009caa:	4b04      	ldr	r3, [pc, #16]	; (8009cbc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	4798      	blx	r3
    }
  }
}
 8009cb4:	bf00      	nop
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	20000234 	.word	0x20000234

08009cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009cc6:	4b0f      	ldr	r3, [pc, #60]	; (8009d04 <HAL_MspInit+0x44>)
 8009cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cca:	4a0e      	ldr	r2, [pc, #56]	; (8009d04 <HAL_MspInit+0x44>)
 8009ccc:	f043 0301 	orr.w	r3, r3, #1
 8009cd0:	6613      	str	r3, [r2, #96]	; 0x60
 8009cd2:	4b0c      	ldr	r3, [pc, #48]	; (8009d04 <HAL_MspInit+0x44>)
 8009cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cd6:	f003 0301 	and.w	r3, r3, #1
 8009cda:	607b      	str	r3, [r7, #4]
 8009cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009cde:	4b09      	ldr	r3, [pc, #36]	; (8009d04 <HAL_MspInit+0x44>)
 8009ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ce2:	4a08      	ldr	r2, [pc, #32]	; (8009d04 <HAL_MspInit+0x44>)
 8009ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8009cea:	4b06      	ldr	r3, [pc, #24]	; (8009d04 <HAL_MspInit+0x44>)
 8009cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cf2:	603b      	str	r3, [r7, #0]
 8009cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009cf6:	bf00      	nop
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	40021000 	.word	0x40021000

08009d08 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b08a      	sub	sp, #40	; 0x28
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d10:	f107 0314 	add.w	r3, r7, #20
 8009d14:	2200      	movs	r2, #0
 8009d16:	601a      	str	r2, [r3, #0]
 8009d18:	605a      	str	r2, [r3, #4]
 8009d1a:	609a      	str	r2, [r3, #8]
 8009d1c:	60da      	str	r2, [r3, #12]
 8009d1e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a2a      	ldr	r2, [pc, #168]	; (8009dd0 <HAL_DAC_MspInit+0xc8>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d14e      	bne.n	8009dc8 <HAL_DAC_MspInit+0xc0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8009d2a:	4b2a      	ldr	r3, [pc, #168]	; (8009dd4 <HAL_DAC_MspInit+0xcc>)
 8009d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d2e:	4a29      	ldr	r2, [pc, #164]	; (8009dd4 <HAL_DAC_MspInit+0xcc>)
 8009d30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d34:	6593      	str	r3, [r2, #88]	; 0x58
 8009d36:	4b27      	ldr	r3, [pc, #156]	; (8009dd4 <HAL_DAC_MspInit+0xcc>)
 8009d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d3e:	613b      	str	r3, [r7, #16]
 8009d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d42:	4b24      	ldr	r3, [pc, #144]	; (8009dd4 <HAL_DAC_MspInit+0xcc>)
 8009d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d46:	4a23      	ldr	r2, [pc, #140]	; (8009dd4 <HAL_DAC_MspInit+0xcc>)
 8009d48:	f043 0301 	orr.w	r3, r3, #1
 8009d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d4e:	4b21      	ldr	r3, [pc, #132]	; (8009dd4 <HAL_DAC_MspInit+0xcc>)
 8009d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d52:	f003 0301 	and.w	r3, r3, #1
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009d5a:	2310      	movs	r3, #16
 8009d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d62:	2300      	movs	r3, #0
 8009d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d66:	f107 0314 	add.w	r3, r7, #20
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009d70:	f7f7 fe0e 	bl	8001990 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8009d74:	4b18      	ldr	r3, [pc, #96]	; (8009dd8 <HAL_DAC_MspInit+0xd0>)
 8009d76:	4a19      	ldr	r2, [pc, #100]	; (8009ddc <HAL_DAC_MspInit+0xd4>)
 8009d78:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8009d7a:	4b17      	ldr	r3, [pc, #92]	; (8009dd8 <HAL_DAC_MspInit+0xd0>)
 8009d7c:	2206      	movs	r2, #6
 8009d7e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009d80:	4b15      	ldr	r3, [pc, #84]	; (8009dd8 <HAL_DAC_MspInit+0xd0>)
 8009d82:	2210      	movs	r2, #16
 8009d84:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009d86:	4b14      	ldr	r3, [pc, #80]	; (8009dd8 <HAL_DAC_MspInit+0xd0>)
 8009d88:	2200      	movs	r2, #0
 8009d8a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8009d8c:	4b12      	ldr	r3, [pc, #72]	; (8009dd8 <HAL_DAC_MspInit+0xd0>)
 8009d8e:	2280      	movs	r2, #128	; 0x80
 8009d90:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009d92:	4b11      	ldr	r3, [pc, #68]	; (8009dd8 <HAL_DAC_MspInit+0xd0>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009d98:	4b0f      	ldr	r3, [pc, #60]	; (8009dd8 <HAL_DAC_MspInit+0xd0>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8009d9e:	4b0e      	ldr	r3, [pc, #56]	; (8009dd8 <HAL_DAC_MspInit+0xd0>)
 8009da0:	2200      	movs	r2, #0
 8009da2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009da4:	4b0c      	ldr	r3, [pc, #48]	; (8009dd8 <HAL_DAC_MspInit+0xd0>)
 8009da6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009daa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8009dac:	480a      	ldr	r0, [pc, #40]	; (8009dd8 <HAL_DAC_MspInit+0xd0>)
 8009dae:	f7f7 fbb9 	bl	8001524 <HAL_DMA_Init>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8009db8:	f7ff fdce 	bl	8009958 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a06      	ldr	r2, [pc, #24]	; (8009dd8 <HAL_DAC_MspInit+0xd0>)
 8009dc0:	609a      	str	r2, [r3, #8]
 8009dc2:	4a05      	ldr	r2, [pc, #20]	; (8009dd8 <HAL_DAC_MspInit+0xd0>)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8009dc8:	bf00      	nop
 8009dca:	3728      	adds	r7, #40	; 0x28
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	40007400 	.word	0x40007400
 8009dd4:	40021000 	.word	0x40021000
 8009dd8:	20000314 	.word	0x20000314
 8009ddc:	40020030 	.word	0x40020030

08009de0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b0ac      	sub	sp, #176	; 0xb0
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009de8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009dec:	2200      	movs	r2, #0
 8009dee:	601a      	str	r2, [r3, #0]
 8009df0:	605a      	str	r2, [r3, #4]
 8009df2:	609a      	str	r2, [r3, #8]
 8009df4:	60da      	str	r2, [r3, #12]
 8009df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009df8:	f107 0314 	add.w	r3, r7, #20
 8009dfc:	2288      	movs	r2, #136	; 0x88
 8009dfe:	2100      	movs	r1, #0
 8009e00:	4618      	mov	r0, r3
 8009e02:	f000 ffdb 	bl	800adbc <memset>
  if(hi2c->Instance==I2C1)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a21      	ldr	r2, [pc, #132]	; (8009e90 <HAL_I2C_MspInit+0xb0>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d13b      	bne.n	8009e88 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8009e10:	2340      	movs	r3, #64	; 0x40
 8009e12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8009e14:	2300      	movs	r3, #0
 8009e16:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009e18:	f107 0314 	add.w	r3, r7, #20
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fa fd25 	bl	800486c <HAL_RCCEx_PeriphCLKConfig>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d001      	beq.n	8009e2c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8009e28:	f7ff fd96 	bl	8009958 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e2c:	4b19      	ldr	r3, [pc, #100]	; (8009e94 <HAL_I2C_MspInit+0xb4>)
 8009e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e30:	4a18      	ldr	r2, [pc, #96]	; (8009e94 <HAL_I2C_MspInit+0xb4>)
 8009e32:	f043 0302 	orr.w	r3, r3, #2
 8009e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e38:	4b16      	ldr	r3, [pc, #88]	; (8009e94 <HAL_I2C_MspInit+0xb4>)
 8009e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e3c:	f003 0302 	and.w	r3, r3, #2
 8009e40:	613b      	str	r3, [r7, #16]
 8009e42:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009e44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009e48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009e4c:	2312      	movs	r3, #18
 8009e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009e5e:	2304      	movs	r3, #4
 8009e60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009e68:	4619      	mov	r1, r3
 8009e6a:	480b      	ldr	r0, [pc, #44]	; (8009e98 <HAL_I2C_MspInit+0xb8>)
 8009e6c:	f7f7 fd90 	bl	8001990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009e70:	4b08      	ldr	r3, [pc, #32]	; (8009e94 <HAL_I2C_MspInit+0xb4>)
 8009e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e74:	4a07      	ldr	r2, [pc, #28]	; (8009e94 <HAL_I2C_MspInit+0xb4>)
 8009e76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8009e7c:	4b05      	ldr	r3, [pc, #20]	; (8009e94 <HAL_I2C_MspInit+0xb4>)
 8009e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e84:	60fb      	str	r3, [r7, #12]
 8009e86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009e88:	bf00      	nop
 8009e8a:	37b0      	adds	r7, #176	; 0xb0
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	40005400 	.word	0x40005400
 8009e94:	40021000 	.word	0x40021000
 8009e98:	48000400 	.word	0x48000400

08009e9c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a0b      	ldr	r2, [pc, #44]	; (8009ed8 <HAL_I2C_MspDeInit+0x3c>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d10f      	bne.n	8009ece <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8009eae:	4b0b      	ldr	r3, [pc, #44]	; (8009edc <HAL_I2C_MspDeInit+0x40>)
 8009eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb2:	4a0a      	ldr	r2, [pc, #40]	; (8009edc <HAL_I2C_MspDeInit+0x40>)
 8009eb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009eb8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8009eba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009ebe:	4808      	ldr	r0, [pc, #32]	; (8009ee0 <HAL_I2C_MspDeInit+0x44>)
 8009ec0:	f7f7 ff10 	bl	8001ce4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8009ec4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009ec8:	4805      	ldr	r0, [pc, #20]	; (8009ee0 <HAL_I2C_MspDeInit+0x44>)
 8009eca:	f7f7 ff0b 	bl	8001ce4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8009ece:	bf00      	nop
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	40005400 	.word	0x40005400
 8009edc:	40021000 	.word	0x40021000
 8009ee0:	48000400 	.word	0x48000400

08009ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ef4:	d114      	bne.n	8009f20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009ef6:	4b15      	ldr	r3, [pc, #84]	; (8009f4c <HAL_TIM_Base_MspInit+0x68>)
 8009ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009efa:	4a14      	ldr	r2, [pc, #80]	; (8009f4c <HAL_TIM_Base_MspInit+0x68>)
 8009efc:	f043 0301 	orr.w	r3, r3, #1
 8009f00:	6593      	str	r3, [r2, #88]	; 0x58
 8009f02:	4b12      	ldr	r3, [pc, #72]	; (8009f4c <HAL_TIM_Base_MspInit+0x68>)
 8009f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f06:	f003 0301 	and.w	r3, r3, #1
 8009f0a:	60fb      	str	r3, [r7, #12]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8009f0e:	2200      	movs	r2, #0
 8009f10:	2100      	movs	r1, #0
 8009f12:	201c      	movs	r0, #28
 8009f14:	f7f6 ffd9 	bl	8000eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009f18:	201c      	movs	r0, #28
 8009f1a:	f7f6 fff2 	bl	8000f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8009f1e:	e010      	b.n	8009f42 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a0a      	ldr	r2, [pc, #40]	; (8009f50 <HAL_TIM_Base_MspInit+0x6c>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d10b      	bne.n	8009f42 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009f2a:	4b08      	ldr	r3, [pc, #32]	; (8009f4c <HAL_TIM_Base_MspInit+0x68>)
 8009f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f2e:	4a07      	ldr	r2, [pc, #28]	; (8009f4c <HAL_TIM_Base_MspInit+0x68>)
 8009f30:	f043 0304 	orr.w	r3, r3, #4
 8009f34:	6593      	str	r3, [r2, #88]	; 0x58
 8009f36:	4b05      	ldr	r3, [pc, #20]	; (8009f4c <HAL_TIM_Base_MspInit+0x68>)
 8009f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f3a:	f003 0304 	and.w	r3, r3, #4
 8009f3e:	60bb      	str	r3, [r7, #8]
 8009f40:	68bb      	ldr	r3, [r7, #8]
}
 8009f42:	bf00      	nop
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	40021000 	.word	0x40021000
 8009f50:	40000800 	.word	0x40000800

08009f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b0ac      	sub	sp, #176	; 0xb0
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009f60:	2200      	movs	r2, #0
 8009f62:	601a      	str	r2, [r3, #0]
 8009f64:	605a      	str	r2, [r3, #4]
 8009f66:	609a      	str	r2, [r3, #8]
 8009f68:	60da      	str	r2, [r3, #12]
 8009f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009f6c:	f107 0314 	add.w	r3, r7, #20
 8009f70:	2288      	movs	r2, #136	; 0x88
 8009f72:	2100      	movs	r1, #0
 8009f74:	4618      	mov	r0, r3
 8009f76:	f000 ff21 	bl	800adbc <memset>
  if(huart->Instance==USART1)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a21      	ldr	r2, [pc, #132]	; (800a004 <HAL_UART_MspInit+0xb0>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d13a      	bne.n	8009ffa <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8009f84:	2301      	movs	r3, #1
 8009f86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009f8c:	f107 0314 	add.w	r3, r7, #20
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7fa fc6b 	bl	800486c <HAL_RCCEx_PeriphCLKConfig>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d001      	beq.n	8009fa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8009f9c:	f7ff fcdc 	bl	8009958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009fa0:	4b19      	ldr	r3, [pc, #100]	; (800a008 <HAL_UART_MspInit+0xb4>)
 8009fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fa4:	4a18      	ldr	r2, [pc, #96]	; (800a008 <HAL_UART_MspInit+0xb4>)
 8009fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009faa:	6613      	str	r3, [r2, #96]	; 0x60
 8009fac:	4b16      	ldr	r3, [pc, #88]	; (800a008 <HAL_UART_MspInit+0xb4>)
 8009fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fb4:	613b      	str	r3, [r7, #16]
 8009fb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009fb8:	4b13      	ldr	r3, [pc, #76]	; (800a008 <HAL_UART_MspInit+0xb4>)
 8009fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fbc:	4a12      	ldr	r2, [pc, #72]	; (800a008 <HAL_UART_MspInit+0xb4>)
 8009fbe:	f043 0302 	orr.w	r3, r3, #2
 8009fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fc4:	4b10      	ldr	r3, [pc, #64]	; (800a008 <HAL_UART_MspInit+0xb4>)
 8009fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fc8:	f003 0302 	and.w	r3, r3, #2
 8009fcc:	60fb      	str	r3, [r7, #12]
 8009fce:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009fd0:	23c0      	movs	r3, #192	; 0xc0
 8009fd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fd6:	2302      	movs	r3, #2
 8009fd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009fe8:	2307      	movs	r3, #7
 8009fea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	4805      	ldr	r0, [pc, #20]	; (800a00c <HAL_UART_MspInit+0xb8>)
 8009ff6:	f7f7 fccb 	bl	8001990 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009ffa:	bf00      	nop
 8009ffc:	37b0      	adds	r7, #176	; 0xb0
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	40013800 	.word	0x40013800
 800a008:	40021000 	.word	0x40021000
 800a00c:	48000400 	.word	0x48000400

0800a010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a010:	b480      	push	{r7}
 800a012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a014:	e7fe      	b.n	800a014 <NMI_Handler+0x4>

0800a016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a016:	b480      	push	{r7}
 800a018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a01a:	e7fe      	b.n	800a01a <HardFault_Handler+0x4>

0800a01c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a01c:	b480      	push	{r7}
 800a01e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a020:	e7fe      	b.n	800a020 <MemManage_Handler+0x4>

0800a022 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a022:	b480      	push	{r7}
 800a024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a026:	e7fe      	b.n	800a026 <BusFault_Handler+0x4>

0800a028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a028:	b480      	push	{r7}
 800a02a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a02c:	e7fe      	b.n	800a02c <UsageFault_Handler+0x4>

0800a02e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a02e:	b480      	push	{r7}
 800a030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a032:	bf00      	nop
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a03c:	b480      	push	{r7}
 800a03e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a040:	bf00      	nop
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a04a:	b480      	push	{r7}
 800a04c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a04e:	bf00      	nop
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a05c:	f7f6 fe16 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a060:	bf00      	nop
 800a062:	bd80      	pop	{r7, pc}

0800a064 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800a068:	2001      	movs	r0, #1
 800a06a:	f7f7 ff61 	bl	8001f30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800a06e:	bf00      	nop
 800a070:	bd80      	pop	{r7, pc}
	...

0800a074 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800a078:	4802      	ldr	r0, [pc, #8]	; (800a084 <DMA1_Channel3_IRQHandler+0x10>)
 800a07a:	f7f7 fba9 	bl	80017d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800a07e:	bf00      	nop
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	20000314 	.word	0x20000314

0800a088 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a08c:	4802      	ldr	r0, [pc, #8]	; (800a098 <TIM2_IRQHandler+0x10>)
 800a08e:	f7fb f971 	bl	8005374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a092:	bf00      	nop
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	20000448 	.word	0x20000448

0800a09c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800a0a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a0a4:	f7f7 ff44 	bl	8001f30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800a0a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a0ac:	f7f7 ff40 	bl	8001f30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a0b0:	bf00      	nop
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a0b8:	4802      	ldr	r0, [pc, #8]	; (800a0c4 <OTG_FS_IRQHandler+0x10>)
 800a0ba:	f7f8 fe43 	bl	8002d44 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a0be:	bf00      	nop
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	20000e10 	.word	0x20000e10

0800a0c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a0d0:	4a14      	ldr	r2, [pc, #80]	; (800a124 <_sbrk+0x5c>)
 800a0d2:	4b15      	ldr	r3, [pc, #84]	; (800a128 <_sbrk+0x60>)
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a0dc:	4b13      	ldr	r3, [pc, #76]	; (800a12c <_sbrk+0x64>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d102      	bne.n	800a0ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a0e4:	4b11      	ldr	r3, [pc, #68]	; (800a12c <_sbrk+0x64>)
 800a0e6:	4a12      	ldr	r2, [pc, #72]	; (800a130 <_sbrk+0x68>)
 800a0e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a0ea:	4b10      	ldr	r3, [pc, #64]	; (800a12c <_sbrk+0x64>)
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d207      	bcs.n	800a108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a0f8:	f000 fe36 	bl	800ad68 <__errno>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	220c      	movs	r2, #12
 800a100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a106:	e009      	b.n	800a11c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a108:	4b08      	ldr	r3, [pc, #32]	; (800a12c <_sbrk+0x64>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a10e:	4b07      	ldr	r3, [pc, #28]	; (800a12c <_sbrk+0x64>)
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4413      	add	r3, r2
 800a116:	4a05      	ldr	r2, [pc, #20]	; (800a12c <_sbrk+0x64>)
 800a118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a11a:	68fb      	ldr	r3, [r7, #12]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3718      	adds	r7, #24
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	20018000 	.word	0x20018000
 800a128:	00000400 	.word	0x00000400
 800a12c:	20000238 	.word	0x20000238
 800a130:	20001428 	.word	0x20001428

0800a134 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800a134:	b480      	push	{r7}
 800a136:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800a138:	4b15      	ldr	r3, [pc, #84]	; (800a190 <SystemInit+0x5c>)
 800a13a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a13e:	4a14      	ldr	r2, [pc, #80]	; (800a190 <SystemInit+0x5c>)
 800a140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800a148:	4b12      	ldr	r3, [pc, #72]	; (800a194 <SystemInit+0x60>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a11      	ldr	r2, [pc, #68]	; (800a194 <SystemInit+0x60>)
 800a14e:	f043 0301 	orr.w	r3, r3, #1
 800a152:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800a154:	4b0f      	ldr	r3, [pc, #60]	; (800a194 <SystemInit+0x60>)
 800a156:	2200      	movs	r2, #0
 800a158:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800a15a:	4b0e      	ldr	r3, [pc, #56]	; (800a194 <SystemInit+0x60>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a0d      	ldr	r2, [pc, #52]	; (800a194 <SystemInit+0x60>)
 800a160:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800a164:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800a168:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800a16a:	4b0a      	ldr	r3, [pc, #40]	; (800a194 <SystemInit+0x60>)
 800a16c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a170:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a172:	4b08      	ldr	r3, [pc, #32]	; (800a194 <SystemInit+0x60>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a07      	ldr	r2, [pc, #28]	; (800a194 <SystemInit+0x60>)
 800a178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a17c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800a17e:	4b05      	ldr	r3, [pc, #20]	; (800a194 <SystemInit+0x60>)
 800a180:	2200      	movs	r2, #0
 800a182:	619a      	str	r2, [r3, #24]
}
 800a184:	bf00      	nop
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	e000ed00 	.word	0xe000ed00
 800a194:	40021000 	.word	0x40021000

0800a198 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a19c:	2200      	movs	r2, #0
 800a19e:	490e      	ldr	r1, [pc, #56]	; (800a1d8 <MX_USB_DEVICE_Init+0x40>)
 800a1a0:	480e      	ldr	r0, [pc, #56]	; (800a1dc <MX_USB_DEVICE_Init+0x44>)
 800a1a2:	f7fd fd8d 	bl	8007cc0 <USBD_Init>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a1ac:	f7ff fbd4 	bl	8009958 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a1b0:	490b      	ldr	r1, [pc, #44]	; (800a1e0 <MX_USB_DEVICE_Init+0x48>)
 800a1b2:	480a      	ldr	r0, [pc, #40]	; (800a1dc <MX_USB_DEVICE_Init+0x44>)
 800a1b4:	f7fd fdb4 	bl	8007d20 <USBD_RegisterClass>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d001      	beq.n	800a1c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1be:	f7ff fbcb 	bl	8009958 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a1c2:	4806      	ldr	r0, [pc, #24]	; (800a1dc <MX_USB_DEVICE_Init+0x44>)
 800a1c4:	f7fd fdd3 	bl	8007d6e <USBD_Start>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a1ce:	f7ff fbc3 	bl	8009958 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a1d2:	bf00      	nop
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20000148 	.word	0x20000148
 800a1dc:	20000b40 	.word	0x20000b40
 800a1e0:	20000008 	.word	0x20000008

0800a1e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b0ac      	sub	sp, #176	; 0xb0
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	605a      	str	r2, [r3, #4]
 800a1f6:	609a      	str	r2, [r3, #8]
 800a1f8:	60da      	str	r2, [r3, #12]
 800a1fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a1fc:	f107 0314 	add.w	r3, r7, #20
 800a200:	2288      	movs	r2, #136	; 0x88
 800a202:	2100      	movs	r1, #0
 800a204:	4618      	mov	r0, r3
 800a206:	f000 fdd9 	bl	800adbc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a212:	d173      	bne.n	800a2fc <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a218:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a21a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a21e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800a222:	2301      	movs	r3, #1
 800a224:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800a226:	2301      	movs	r3, #1
 800a228:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800a22a:	2318      	movs	r3, #24
 800a22c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800a22e:	2307      	movs	r3, #7
 800a230:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800a232:	2302      	movs	r3, #2
 800a234:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800a236:	2302      	movs	r3, #2
 800a238:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800a23a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a23e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a240:	f107 0314 	add.w	r3, r7, #20
 800a244:	4618      	mov	r0, r3
 800a246:	f7fa fb11 	bl	800486c <HAL_RCCEx_PeriphCLKConfig>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800a250:	f7ff fb82 	bl	8009958 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a254:	4b2b      	ldr	r3, [pc, #172]	; (800a304 <HAL_PCD_MspInit+0x120>)
 800a256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a258:	4a2a      	ldr	r2, [pc, #168]	; (800a304 <HAL_PCD_MspInit+0x120>)
 800a25a:	f043 0301 	orr.w	r3, r3, #1
 800a25e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a260:	4b28      	ldr	r3, [pc, #160]	; (800a304 <HAL_PCD_MspInit+0x120>)
 800a262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a264:	f003 0301 	and.w	r3, r3, #1
 800a268:	613b      	str	r3, [r7, #16]
 800a26a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a26c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a274:	2302      	movs	r3, #2
 800a276:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a27a:	2300      	movs	r3, #0
 800a27c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a280:	2303      	movs	r3, #3
 800a282:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a286:	230a      	movs	r3, #10
 800a288:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a28c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a290:	4619      	mov	r1, r3
 800a292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a296:	f7f7 fb7b 	bl	8001990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a29a:	4b1a      	ldr	r3, [pc, #104]	; (800a304 <HAL_PCD_MspInit+0x120>)
 800a29c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a29e:	4a19      	ldr	r2, [pc, #100]	; (800a304 <HAL_PCD_MspInit+0x120>)
 800a2a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a2a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a2a6:	4b17      	ldr	r3, [pc, #92]	; (800a304 <HAL_PCD_MspInit+0x120>)
 800a2a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a2b2:	4b14      	ldr	r3, [pc, #80]	; (800a304 <HAL_PCD_MspInit+0x120>)
 800a2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d114      	bne.n	800a2e8 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a2be:	4b11      	ldr	r3, [pc, #68]	; (800a304 <HAL_PCD_MspInit+0x120>)
 800a2c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2c2:	4a10      	ldr	r2, [pc, #64]	; (800a304 <HAL_PCD_MspInit+0x120>)
 800a2c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2c8:	6593      	str	r3, [r2, #88]	; 0x58
 800a2ca:	4b0e      	ldr	r3, [pc, #56]	; (800a304 <HAL_PCD_MspInit+0x120>)
 800a2cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2d2:	60bb      	str	r3, [r7, #8]
 800a2d4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800a2d6:	f7f9 fccd 	bl	8003c74 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2da:	4b0a      	ldr	r3, [pc, #40]	; (800a304 <HAL_PCD_MspInit+0x120>)
 800a2dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2de:	4a09      	ldr	r2, [pc, #36]	; (800a304 <HAL_PCD_MspInit+0x120>)
 800a2e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2e4:	6593      	str	r3, [r2, #88]	; 0x58
 800a2e6:	e001      	b.n	800a2ec <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a2e8:	f7f9 fcc4 	bl	8003c74 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	2043      	movs	r0, #67	; 0x43
 800a2f2:	f7f6 fdea 	bl	8000eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a2f6:	2043      	movs	r0, #67	; 0x43
 800a2f8:	f7f6 fe03 	bl	8000f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a2fc:	bf00      	nop
 800a2fe:	37b0      	adds	r7, #176	; 0xb0
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	40021000 	.word	0x40021000

0800a308 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a31c:	4619      	mov	r1, r3
 800a31e:	4610      	mov	r0, r2
 800a320:	f7fd fd70 	bl	8007e04 <USBD_LL_SetupStage>
}
 800a324:	bf00      	nop
 800a326:	3708      	adds	r7, #8
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	460b      	mov	r3, r1
 800a336:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a33e:	78fa      	ldrb	r2, [r7, #3]
 800a340:	6879      	ldr	r1, [r7, #4]
 800a342:	4613      	mov	r3, r2
 800a344:	00db      	lsls	r3, r3, #3
 800a346:	1a9b      	subs	r3, r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	440b      	add	r3, r1
 800a34c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	78fb      	ldrb	r3, [r7, #3]
 800a354:	4619      	mov	r1, r3
 800a356:	f7fd fdaa 	bl	8007eae <USBD_LL_DataOutStage>
}
 800a35a:	bf00      	nop
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	460b      	mov	r3, r1
 800a36c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a374:	78fa      	ldrb	r2, [r7, #3]
 800a376:	6879      	ldr	r1, [r7, #4]
 800a378:	4613      	mov	r3, r2
 800a37a:	00db      	lsls	r3, r3, #3
 800a37c:	1a9b      	subs	r3, r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	440b      	add	r3, r1
 800a382:	3348      	adds	r3, #72	; 0x48
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	78fb      	ldrb	r3, [r7, #3]
 800a388:	4619      	mov	r1, r3
 800a38a:	f7fd fdf3 	bl	8007f74 <USBD_LL_DataInStage>
}
 800a38e:	bf00      	nop
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fd ff07 	bl	80081b8 <USBD_LL_SOF>
}
 800a3aa:	bf00      	nop
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d001      	beq.n	800a3ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a3c6:	f7ff fac7 	bl	8009958 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a3d0:	7bfa      	ldrb	r2, [r7, #15]
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7fd feb1 	bl	800813c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fd fe5d 	bl	80080a0 <USBD_LL_Reset>
}
 800a3e6:	bf00      	nop
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	6812      	ldr	r2, [r2, #0]
 800a406:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a40a:	f043 0301 	orr.w	r3, r3, #1
 800a40e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a416:	4618      	mov	r0, r3
 800a418:	f7fd fea0 	bl	800815c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a1b      	ldr	r3, [r3, #32]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d005      	beq.n	800a430 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a424:	4b04      	ldr	r3, [pc, #16]	; (800a438 <HAL_PCD_SuspendCallback+0x48>)
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	4a03      	ldr	r2, [pc, #12]	; (800a438 <HAL_PCD_SuspendCallback+0x48>)
 800a42a:	f043 0306 	orr.w	r3, r3, #6
 800a42e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a430:	bf00      	nop
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	e000ed00 	.word	0xe000ed00

0800a43c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	6812      	ldr	r2, [r2, #0]
 800a452:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a456:	f023 0301 	bic.w	r3, r3, #1
 800a45a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a1b      	ldr	r3, [r3, #32]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d007      	beq.n	800a474 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a464:	4b08      	ldr	r3, [pc, #32]	; (800a488 <HAL_PCD_ResumeCallback+0x4c>)
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	4a07      	ldr	r2, [pc, #28]	; (800a488 <HAL_PCD_ResumeCallback+0x4c>)
 800a46a:	f023 0306 	bic.w	r3, r3, #6
 800a46e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a470:	f000 fae2 	bl	800aa38 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fd fe84 	bl	8008188 <USBD_LL_Resume>
}
 800a480:	bf00      	nop
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	e000ed00 	.word	0xe000ed00

0800a48c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a49e:	78fa      	ldrb	r2, [r7, #3]
 800a4a0:	4611      	mov	r1, r2
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7fd fed0 	bl	8008248 <USBD_LL_IsoOUTIncomplete>
}
 800a4a8:	bf00      	nop
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a4c2:	78fa      	ldrb	r2, [r7, #3]
 800a4c4:	4611      	mov	r1, r2
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fd fe98 	bl	80081fc <USBD_LL_IsoINIncomplete>
}
 800a4cc:	bf00      	nop
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fd fed6 	bl	8008294 <USBD_LL_DevConnected>
}
 800a4e8:	bf00      	nop
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fd fed3 	bl	80082aa <USBD_LL_DevDisconnected>
}
 800a504:	bf00      	nop
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d13c      	bne.n	800a596 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a51c:	4a20      	ldr	r2, [pc, #128]	; (800a5a0 <USBD_LL_Init+0x94>)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a1e      	ldr	r2, [pc, #120]	; (800a5a0 <USBD_LL_Init+0x94>)
 800a528:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a52c:	4b1c      	ldr	r3, [pc, #112]	; (800a5a0 <USBD_LL_Init+0x94>)
 800a52e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a532:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a534:	4b1a      	ldr	r3, [pc, #104]	; (800a5a0 <USBD_LL_Init+0x94>)
 800a536:	2206      	movs	r2, #6
 800a538:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a53a:	4b19      	ldr	r3, [pc, #100]	; (800a5a0 <USBD_LL_Init+0x94>)
 800a53c:	2202      	movs	r2, #2
 800a53e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a540:	4b17      	ldr	r3, [pc, #92]	; (800a5a0 <USBD_LL_Init+0x94>)
 800a542:	2202      	movs	r2, #2
 800a544:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a546:	4b16      	ldr	r3, [pc, #88]	; (800a5a0 <USBD_LL_Init+0x94>)
 800a548:	2200      	movs	r2, #0
 800a54a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a54c:	4b14      	ldr	r3, [pc, #80]	; (800a5a0 <USBD_LL_Init+0x94>)
 800a54e:	2200      	movs	r2, #0
 800a550:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a552:	4b13      	ldr	r3, [pc, #76]	; (800a5a0 <USBD_LL_Init+0x94>)
 800a554:	2200      	movs	r2, #0
 800a556:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800a558:	4b11      	ldr	r3, [pc, #68]	; (800a5a0 <USBD_LL_Init+0x94>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a55e:	4b10      	ldr	r3, [pc, #64]	; (800a5a0 <USBD_LL_Init+0x94>)
 800a560:	2200      	movs	r2, #0
 800a562:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a564:	4b0e      	ldr	r3, [pc, #56]	; (800a5a0 <USBD_LL_Init+0x94>)
 800a566:	2200      	movs	r2, #0
 800a568:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a56a:	480d      	ldr	r0, [pc, #52]	; (800a5a0 <USBD_LL_Init+0x94>)
 800a56c:	f7f8 fa97 	bl	8002a9e <HAL_PCD_Init>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a576:	f7ff f9ef 	bl	8009958 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a57a:	2180      	movs	r1, #128	; 0x80
 800a57c:	4808      	ldr	r0, [pc, #32]	; (800a5a0 <USBD_LL_Init+0x94>)
 800a57e:	f7f9 fae0 	bl	8003b42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a582:	2240      	movs	r2, #64	; 0x40
 800a584:	2100      	movs	r1, #0
 800a586:	4806      	ldr	r0, [pc, #24]	; (800a5a0 <USBD_LL_Init+0x94>)
 800a588:	f7f9 fa94 	bl	8003ab4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a58c:	2280      	movs	r2, #128	; 0x80
 800a58e:	2101      	movs	r1, #1
 800a590:	4803      	ldr	r0, [pc, #12]	; (800a5a0 <USBD_LL_Init+0x94>)
 800a592:	f7f9 fa8f 	bl	8003ab4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	20000e10 	.word	0x20000e10

0800a5a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7f8 fb93 	bl	8002ce6 <HAL_PCD_Start>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a5c4:	7bbb      	ldrb	r3, [r7, #14]
 800a5c6:	2b03      	cmp	r3, #3
 800a5c8:	d816      	bhi.n	800a5f8 <USBD_LL_Start+0x54>
 800a5ca:	a201      	add	r2, pc, #4	; (adr r2, 800a5d0 <USBD_LL_Start+0x2c>)
 800a5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d0:	0800a5e1 	.word	0x0800a5e1
 800a5d4:	0800a5e7 	.word	0x0800a5e7
 800a5d8:	0800a5ed 	.word	0x0800a5ed
 800a5dc:	0800a5f3 	.word	0x0800a5f3
    case HAL_OK :
      usb_status = USBD_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5e4:	e00b      	b.n	800a5fe <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ea:	e008      	b.n	800a5fe <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f0:	e005      	b.n	800a5fe <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f6:	e002      	b.n	800a5fe <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a5fc:	bf00      	nop
  }
  return usb_status;
 800a5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	4608      	mov	r0, r1
 800a612:	4611      	mov	r1, r2
 800a614:	461a      	mov	r2, r3
 800a616:	4603      	mov	r3, r0
 800a618:	70fb      	strb	r3, [r7, #3]
 800a61a:	460b      	mov	r3, r1
 800a61c:	70bb      	strb	r3, [r7, #2]
 800a61e:	4613      	mov	r3, r2
 800a620:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a622:	2300      	movs	r3, #0
 800a624:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a630:	78bb      	ldrb	r3, [r7, #2]
 800a632:	883a      	ldrh	r2, [r7, #0]
 800a634:	78f9      	ldrb	r1, [r7, #3]
 800a636:	f7f8 ff4e 	bl	80034d6 <HAL_PCD_EP_Open>
 800a63a:	4603      	mov	r3, r0
 800a63c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a63e:	7bbb      	ldrb	r3, [r7, #14]
 800a640:	2b03      	cmp	r3, #3
 800a642:	d817      	bhi.n	800a674 <USBD_LL_OpenEP+0x6c>
 800a644:	a201      	add	r2, pc, #4	; (adr r2, 800a64c <USBD_LL_OpenEP+0x44>)
 800a646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64a:	bf00      	nop
 800a64c:	0800a65d 	.word	0x0800a65d
 800a650:	0800a663 	.word	0x0800a663
 800a654:	0800a669 	.word	0x0800a669
 800a658:	0800a66f 	.word	0x0800a66f
    case HAL_OK :
      usb_status = USBD_OK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	73fb      	strb	r3, [r7, #15]
    break;
 800a660:	e00b      	b.n	800a67a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a662:	2303      	movs	r3, #3
 800a664:	73fb      	strb	r3, [r7, #15]
    break;
 800a666:	e008      	b.n	800a67a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a668:	2301      	movs	r3, #1
 800a66a:	73fb      	strb	r3, [r7, #15]
    break;
 800a66c:	e005      	b.n	800a67a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a66e:	2303      	movs	r3, #3
 800a670:	73fb      	strb	r3, [r7, #15]
    break;
 800a672:	e002      	b.n	800a67a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a674:	2303      	movs	r3, #3
 800a676:	73fb      	strb	r3, [r7, #15]
    break;
 800a678:	bf00      	nop
  }
  return usb_status;
 800a67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	460b      	mov	r3, r1
 800a68e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a690:	2300      	movs	r3, #0
 800a692:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a694:	2300      	movs	r3, #0
 800a696:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a69e:	78fa      	ldrb	r2, [r7, #3]
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7f8 ff7f 	bl	80035a6 <HAL_PCD_EP_Close>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a6ac:	7bbb      	ldrb	r3, [r7, #14]
 800a6ae:	2b03      	cmp	r3, #3
 800a6b0:	d816      	bhi.n	800a6e0 <USBD_LL_CloseEP+0x5c>
 800a6b2:	a201      	add	r2, pc, #4	; (adr r2, 800a6b8 <USBD_LL_CloseEP+0x34>)
 800a6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b8:	0800a6c9 	.word	0x0800a6c9
 800a6bc:	0800a6cf 	.word	0x0800a6cf
 800a6c0:	0800a6d5 	.word	0x0800a6d5
 800a6c4:	0800a6db 	.word	0x0800a6db
    case HAL_OK :
      usb_status = USBD_OK;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a6cc:	e00b      	b.n	800a6e6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a6ce:	2303      	movs	r3, #3
 800a6d0:	73fb      	strb	r3, [r7, #15]
    break;
 800a6d2:	e008      	b.n	800a6e6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a6d8:	e005      	b.n	800a6e6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a6de:	e002      	b.n	800a6e6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a6e4:	bf00      	nop
  }
  return usb_status;
 800a6e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a70a:	78fa      	ldrb	r2, [r7, #3]
 800a70c:	4611      	mov	r1, r2
 800a70e:	4618      	mov	r0, r3
 800a710:	f7f9 f80e 	bl	8003730 <HAL_PCD_EP_SetStall>
 800a714:	4603      	mov	r3, r0
 800a716:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a718:	7bbb      	ldrb	r3, [r7, #14]
 800a71a:	2b03      	cmp	r3, #3
 800a71c:	d816      	bhi.n	800a74c <USBD_LL_StallEP+0x5c>
 800a71e:	a201      	add	r2, pc, #4	; (adr r2, 800a724 <USBD_LL_StallEP+0x34>)
 800a720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a724:	0800a735 	.word	0x0800a735
 800a728:	0800a73b 	.word	0x0800a73b
 800a72c:	0800a741 	.word	0x0800a741
 800a730:	0800a747 	.word	0x0800a747
    case HAL_OK :
      usb_status = USBD_OK;
 800a734:	2300      	movs	r3, #0
 800a736:	73fb      	strb	r3, [r7, #15]
    break;
 800a738:	e00b      	b.n	800a752 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a73a:	2303      	movs	r3, #3
 800a73c:	73fb      	strb	r3, [r7, #15]
    break;
 800a73e:	e008      	b.n	800a752 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a740:	2301      	movs	r3, #1
 800a742:	73fb      	strb	r3, [r7, #15]
    break;
 800a744:	e005      	b.n	800a752 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a746:	2303      	movs	r3, #3
 800a748:	73fb      	strb	r3, [r7, #15]
    break;
 800a74a:	e002      	b.n	800a752 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a74c:	2303      	movs	r3, #3
 800a74e:	73fb      	strb	r3, [r7, #15]
    break;
 800a750:	bf00      	nop
  }
  return usb_status;
 800a752:	7bfb      	ldrb	r3, [r7, #15]
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	460b      	mov	r3, r1
 800a766:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a768:	2300      	movs	r3, #0
 800a76a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a76c:	2300      	movs	r3, #0
 800a76e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a776:	78fa      	ldrb	r2, [r7, #3]
 800a778:	4611      	mov	r1, r2
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7f9 f83a 	bl	80037f4 <HAL_PCD_EP_ClrStall>
 800a780:	4603      	mov	r3, r0
 800a782:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a784:	7bbb      	ldrb	r3, [r7, #14]
 800a786:	2b03      	cmp	r3, #3
 800a788:	d816      	bhi.n	800a7b8 <USBD_LL_ClearStallEP+0x5c>
 800a78a:	a201      	add	r2, pc, #4	; (adr r2, 800a790 <USBD_LL_ClearStallEP+0x34>)
 800a78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a790:	0800a7a1 	.word	0x0800a7a1
 800a794:	0800a7a7 	.word	0x0800a7a7
 800a798:	0800a7ad 	.word	0x0800a7ad
 800a79c:	0800a7b3 	.word	0x0800a7b3
    case HAL_OK :
      usb_status = USBD_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7a4:	e00b      	b.n	800a7be <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a7aa:	e008      	b.n	800a7be <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a7b0:	e005      	b.n	800a7be <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a7b6:	e002      	b.n	800a7be <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a7b8:	2303      	movs	r3, #3
 800a7ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a7bc:	bf00      	nop
  }
  return usb_status;
 800a7be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a7dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	da0b      	bge.n	800a7fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a7e4:	78fb      	ldrb	r3, [r7, #3]
 800a7e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7ea:	68f9      	ldr	r1, [r7, #12]
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	00db      	lsls	r3, r3, #3
 800a7f0:	1a9b      	subs	r3, r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	440b      	add	r3, r1
 800a7f6:	333e      	adds	r3, #62	; 0x3e
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	e00b      	b.n	800a814 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a7fc:	78fb      	ldrb	r3, [r7, #3]
 800a7fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a802:	68f9      	ldr	r1, [r7, #12]
 800a804:	4613      	mov	r3, r2
 800a806:	00db      	lsls	r3, r3, #3
 800a808:	1a9b      	subs	r3, r3, r2
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	440b      	add	r3, r1
 800a80e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a812:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a814:	4618      	mov	r0, r3
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a82c:	2300      	movs	r3, #0
 800a82e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a830:	2300      	movs	r3, #0
 800a832:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a83a:	78fa      	ldrb	r2, [r7, #3]
 800a83c:	4611      	mov	r1, r2
 800a83e:	4618      	mov	r0, r3
 800a840:	f7f8 fe24 	bl	800348c <HAL_PCD_SetAddress>
 800a844:	4603      	mov	r3, r0
 800a846:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a848:	7bbb      	ldrb	r3, [r7, #14]
 800a84a:	2b03      	cmp	r3, #3
 800a84c:	d816      	bhi.n	800a87c <USBD_LL_SetUSBAddress+0x5c>
 800a84e:	a201      	add	r2, pc, #4	; (adr r2, 800a854 <USBD_LL_SetUSBAddress+0x34>)
 800a850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a854:	0800a865 	.word	0x0800a865
 800a858:	0800a86b 	.word	0x0800a86b
 800a85c:	0800a871 	.word	0x0800a871
 800a860:	0800a877 	.word	0x0800a877
    case HAL_OK :
      usb_status = USBD_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	73fb      	strb	r3, [r7, #15]
    break;
 800a868:	e00b      	b.n	800a882 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a86a:	2303      	movs	r3, #3
 800a86c:	73fb      	strb	r3, [r7, #15]
    break;
 800a86e:	e008      	b.n	800a882 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a870:	2301      	movs	r3, #1
 800a872:	73fb      	strb	r3, [r7, #15]
    break;
 800a874:	e005      	b.n	800a882 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a876:	2303      	movs	r3, #3
 800a878:	73fb      	strb	r3, [r7, #15]
    break;
 800a87a:	e002      	b.n	800a882 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a87c:	2303      	movs	r3, #3
 800a87e:	73fb      	strb	r3, [r7, #15]
    break;
 800a880:	bf00      	nop
  }
  return usb_status;
 800a882:	7bfb      	ldrb	r3, [r7, #15]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	607a      	str	r2, [r7, #4]
 800a896:	603b      	str	r3, [r7, #0]
 800a898:	460b      	mov	r3, r1
 800a89a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a8aa:	7af9      	ldrb	r1, [r7, #11]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	f7f8 ff01 	bl	80036b6 <HAL_PCD_EP_Transmit>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a8b8:	7dbb      	ldrb	r3, [r7, #22]
 800a8ba:	2b03      	cmp	r3, #3
 800a8bc:	d816      	bhi.n	800a8ec <USBD_LL_Transmit+0x60>
 800a8be:	a201      	add	r2, pc, #4	; (adr r2, 800a8c4 <USBD_LL_Transmit+0x38>)
 800a8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c4:	0800a8d5 	.word	0x0800a8d5
 800a8c8:	0800a8db 	.word	0x0800a8db
 800a8cc:	0800a8e1 	.word	0x0800a8e1
 800a8d0:	0800a8e7 	.word	0x0800a8e7
    case HAL_OK :
      usb_status = USBD_OK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	75fb      	strb	r3, [r7, #23]
    break;
 800a8d8:	e00b      	b.n	800a8f2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	75fb      	strb	r3, [r7, #23]
    break;
 800a8de:	e008      	b.n	800a8f2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	75fb      	strb	r3, [r7, #23]
    break;
 800a8e4:	e005      	b.n	800a8f2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8e6:	2303      	movs	r3, #3
 800a8e8:	75fb      	strb	r3, [r7, #23]
    break;
 800a8ea:	e002      	b.n	800a8f2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	75fb      	strb	r3, [r7, #23]
    break;
 800a8f0:	bf00      	nop
  }
  return usb_status;
 800a8f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3718      	adds	r7, #24
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b086      	sub	sp, #24
 800a900:	af00      	add	r7, sp, #0
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	607a      	str	r2, [r7, #4]
 800a906:	603b      	str	r3, [r7, #0]
 800a908:	460b      	mov	r3, r1
 800a90a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a90c:	2300      	movs	r3, #0
 800a90e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a910:	2300      	movs	r3, #0
 800a912:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a91a:	7af9      	ldrb	r1, [r7, #11]
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	f7f8 fe8b 	bl	800363a <HAL_PCD_EP_Receive>
 800a924:	4603      	mov	r3, r0
 800a926:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a928:	7dbb      	ldrb	r3, [r7, #22]
 800a92a:	2b03      	cmp	r3, #3
 800a92c:	d816      	bhi.n	800a95c <USBD_LL_PrepareReceive+0x60>
 800a92e:	a201      	add	r2, pc, #4	; (adr r2, 800a934 <USBD_LL_PrepareReceive+0x38>)
 800a930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a934:	0800a945 	.word	0x0800a945
 800a938:	0800a94b 	.word	0x0800a94b
 800a93c:	0800a951 	.word	0x0800a951
 800a940:	0800a957 	.word	0x0800a957
    case HAL_OK :
      usb_status = USBD_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	75fb      	strb	r3, [r7, #23]
    break;
 800a948:	e00b      	b.n	800a962 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a94a:	2303      	movs	r3, #3
 800a94c:	75fb      	strb	r3, [r7, #23]
    break;
 800a94e:	e008      	b.n	800a962 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a950:	2301      	movs	r3, #1
 800a952:	75fb      	strb	r3, [r7, #23]
    break;
 800a954:	e005      	b.n	800a962 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a956:	2303      	movs	r3, #3
 800a958:	75fb      	strb	r3, [r7, #23]
    break;
 800a95a:	e002      	b.n	800a962 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800a95c:	2303      	movs	r3, #3
 800a95e:	75fb      	strb	r3, [r7, #23]
    break;
 800a960:	bf00      	nop
  }
  return usb_status;
 800a962:	7dfb      	ldrb	r3, [r7, #23]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3718      	adds	r7, #24
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	460b      	mov	r3, r1
 800a976:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a978:	78fb      	ldrb	r3, [r7, #3]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <HAL_PCDEx_LPM_Callback+0x18>
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d01f      	beq.n	800a9c2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a982:	e03b      	b.n	800a9fc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a1b      	ldr	r3, [r3, #32]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d007      	beq.n	800a99c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a98c:	f000 f854 	bl	800aa38 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a990:	4b1c      	ldr	r3, [pc, #112]	; (800aa04 <HAL_PCDEx_LPM_Callback+0x98>)
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	4a1b      	ldr	r2, [pc, #108]	; (800aa04 <HAL_PCDEx_LPM_Callback+0x98>)
 800a996:	f023 0306 	bic.w	r3, r3, #6
 800a99a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	6812      	ldr	r2, [r2, #0]
 800a9aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a9ae:	f023 0301 	bic.w	r3, r3, #1
 800a9b2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fd fbe4 	bl	8008188 <USBD_LL_Resume>
    break;
 800a9c0:	e01c      	b.n	800a9fc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	6812      	ldr	r2, [r2, #0]
 800a9d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a9d4:	f043 0301 	orr.w	r3, r3, #1
 800a9d8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7fd fbbb 	bl	800815c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a1b      	ldr	r3, [r3, #32]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d005      	beq.n	800a9fa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a9ee:	4b05      	ldr	r3, [pc, #20]	; (800aa04 <HAL_PCDEx_LPM_Callback+0x98>)
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	4a04      	ldr	r2, [pc, #16]	; (800aa04 <HAL_PCDEx_LPM_Callback+0x98>)
 800a9f4:	f043 0306 	orr.w	r3, r3, #6
 800a9f8:	6113      	str	r3, [r2, #16]
    break;
 800a9fa:	bf00      	nop
}
 800a9fc:	bf00      	nop
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	e000ed00 	.word	0xe000ed00

0800aa08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aa10:	4b03      	ldr	r3, [pc, #12]	; (800aa20 <USBD_static_malloc+0x18>)
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	370c      	adds	r7, #12
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	2000023c 	.word	0x2000023c

0800aa24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]

}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800aa3c:	f7fe fcce 	bl	80093dc <SystemClock_Config>
}
 800aa40:	bf00      	nop
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	6039      	str	r1, [r7, #0]
 800aa4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	2212      	movs	r2, #18
 800aa54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa56:	4b03      	ldr	r3, [pc, #12]	; (800aa64 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr
 800aa64:	20000168 	.word	0x20000168

0800aa68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	4603      	mov	r3, r0
 800aa70:	6039      	str	r1, [r7, #0]
 800aa72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	2204      	movs	r2, #4
 800aa78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa7a:	4b03      	ldr	r3, [pc, #12]	; (800aa88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr
 800aa88:	20000188 	.word	0x20000188

0800aa8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	4603      	mov	r3, r0
 800aa94:	6039      	str	r1, [r7, #0]
 800aa96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa98:	79fb      	ldrb	r3, [r7, #7]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d105      	bne.n	800aaaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	4907      	ldr	r1, [pc, #28]	; (800aac0 <USBD_FS_ProductStrDescriptor+0x34>)
 800aaa2:	4808      	ldr	r0, [pc, #32]	; (800aac4 <USBD_FS_ProductStrDescriptor+0x38>)
 800aaa4:	f7fe f9bf 	bl	8008e26 <USBD_GetString>
 800aaa8:	e004      	b.n	800aab4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	4904      	ldr	r1, [pc, #16]	; (800aac0 <USBD_FS_ProductStrDescriptor+0x34>)
 800aaae:	4805      	ldr	r0, [pc, #20]	; (800aac4 <USBD_FS_ProductStrDescriptor+0x38>)
 800aab0:	f7fe f9b9 	bl	8008e26 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aab4:	4b02      	ldr	r3, [pc, #8]	; (800aac0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3708      	adds	r7, #8
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	20001218 	.word	0x20001218
 800aac4:	0800b654 	.word	0x0800b654

0800aac8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	4603      	mov	r3, r0
 800aad0:	6039      	str	r1, [r7, #0]
 800aad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aad4:	683a      	ldr	r2, [r7, #0]
 800aad6:	4904      	ldr	r1, [pc, #16]	; (800aae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aad8:	4804      	ldr	r0, [pc, #16]	; (800aaec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aada:	f7fe f9a4 	bl	8008e26 <USBD_GetString>
  return USBD_StrDesc;
 800aade:	4b02      	ldr	r3, [pc, #8]	; (800aae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	20001218 	.word	0x20001218
 800aaec:	0800b66c 	.word	0x0800b66c

0800aaf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	6039      	str	r1, [r7, #0]
 800aafa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	221a      	movs	r2, #26
 800ab00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab02:	f000 f855 	bl	800abb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ab06:	4b02      	ldr	r3, [pc, #8]	; (800ab10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	2000018c 	.word	0x2000018c

0800ab14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	6039      	str	r1, [r7, #0]
 800ab1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab20:	79fb      	ldrb	r3, [r7, #7]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d105      	bne.n	800ab32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab26:	683a      	ldr	r2, [r7, #0]
 800ab28:	4907      	ldr	r1, [pc, #28]	; (800ab48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab2a:	4808      	ldr	r0, [pc, #32]	; (800ab4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab2c:	f7fe f97b 	bl	8008e26 <USBD_GetString>
 800ab30:	e004      	b.n	800ab3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab32:	683a      	ldr	r2, [r7, #0]
 800ab34:	4904      	ldr	r1, [pc, #16]	; (800ab48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab36:	4805      	ldr	r0, [pc, #20]	; (800ab4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab38:	f7fe f975 	bl	8008e26 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab3c:	4b02      	ldr	r3, [pc, #8]	; (800ab48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	20001218 	.word	0x20001218
 800ab4c:	0800b680 	.word	0x0800b680

0800ab50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	4603      	mov	r3, r0
 800ab58:	6039      	str	r1, [r7, #0]
 800ab5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d105      	bne.n	800ab6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	4907      	ldr	r1, [pc, #28]	; (800ab84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab66:	4808      	ldr	r0, [pc, #32]	; (800ab88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab68:	f7fe f95d 	bl	8008e26 <USBD_GetString>
 800ab6c:	e004      	b.n	800ab78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	4904      	ldr	r1, [pc, #16]	; (800ab84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab72:	4805      	ldr	r0, [pc, #20]	; (800ab88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab74:	f7fe f957 	bl	8008e26 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab78:	4b02      	ldr	r3, [pc, #8]	; (800ab84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20001218 	.word	0x20001218
 800ab88:	0800b68c 	.word	0x0800b68c

0800ab8c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4603      	mov	r3, r0
 800ab94:	6039      	str	r1, [r7, #0]
 800ab96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	220c      	movs	r2, #12
 800ab9c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ab9e:	4b03      	ldr	r3, [pc, #12]	; (800abac <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr
 800abac:	2000017c 	.word	0x2000017c

0800abb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800abb6:	4b0f      	ldr	r3, [pc, #60]	; (800abf4 <Get_SerialNum+0x44>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800abbc:	4b0e      	ldr	r3, [pc, #56]	; (800abf8 <Get_SerialNum+0x48>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800abc2:	4b0e      	ldr	r3, [pc, #56]	; (800abfc <Get_SerialNum+0x4c>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4413      	add	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d009      	beq.n	800abea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800abd6:	2208      	movs	r2, #8
 800abd8:	4909      	ldr	r1, [pc, #36]	; (800ac00 <Get_SerialNum+0x50>)
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f000 f814 	bl	800ac08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abe0:	2204      	movs	r2, #4
 800abe2:	4908      	ldr	r1, [pc, #32]	; (800ac04 <Get_SerialNum+0x54>)
 800abe4:	68b8      	ldr	r0, [r7, #8]
 800abe6:	f000 f80f 	bl	800ac08 <IntToUnicode>
  }
}
 800abea:	bf00      	nop
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	1fff7590 	.word	0x1fff7590
 800abf8:	1fff7594 	.word	0x1fff7594
 800abfc:	1fff7598 	.word	0x1fff7598
 800ac00:	2000018e 	.word	0x2000018e
 800ac04:	2000019e 	.word	0x2000019e

0800ac08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b087      	sub	sp, #28
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	4613      	mov	r3, r2
 800ac14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	75fb      	strb	r3, [r7, #23]
 800ac1e:	e027      	b.n	800ac70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	0f1b      	lsrs	r3, r3, #28
 800ac24:	2b09      	cmp	r3, #9
 800ac26:	d80b      	bhi.n	800ac40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	0f1b      	lsrs	r3, r3, #28
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	7dfb      	ldrb	r3, [r7, #23]
 800ac30:	005b      	lsls	r3, r3, #1
 800ac32:	4619      	mov	r1, r3
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	440b      	add	r3, r1
 800ac38:	3230      	adds	r2, #48	; 0x30
 800ac3a:	b2d2      	uxtb	r2, r2
 800ac3c:	701a      	strb	r2, [r3, #0]
 800ac3e:	e00a      	b.n	800ac56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	0f1b      	lsrs	r3, r3, #28
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	7dfb      	ldrb	r3, [r7, #23]
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	440b      	add	r3, r1
 800ac50:	3237      	adds	r2, #55	; 0x37
 800ac52:	b2d2      	uxtb	r2, r2
 800ac54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	011b      	lsls	r3, r3, #4
 800ac5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac5c:	7dfb      	ldrb	r3, [r7, #23]
 800ac5e:	005b      	lsls	r3, r3, #1
 800ac60:	3301      	adds	r3, #1
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	4413      	add	r3, r2
 800ac66:	2200      	movs	r2, #0
 800ac68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac6a:	7dfb      	ldrb	r3, [r7, #23]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	75fb      	strb	r3, [r7, #23]
 800ac70:	7dfa      	ldrb	r2, [r7, #23]
 800ac72:	79fb      	ldrb	r3, [r7, #7]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d3d3      	bcc.n	800ac20 <IntToUnicode+0x18>
  }
}
 800ac78:	bf00      	nop
 800ac7a:	bf00      	nop
 800ac7c:	371c      	adds	r7, #28
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
	...

0800ac88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800ac88:	f8df d034 	ldr.w	sp, [pc, #52]	; 800acc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800ac8c:	f7ff fa52 	bl	800a134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800ac90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800ac92:	e003      	b.n	800ac9c <LoopCopyDataInit>

0800ac94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800ac94:	4b0b      	ldr	r3, [pc, #44]	; (800acc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800ac96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800ac98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800ac9a:	3104      	adds	r1, #4

0800ac9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800ac9c:	480a      	ldr	r0, [pc, #40]	; (800acc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800ac9e:	4b0b      	ldr	r3, [pc, #44]	; (800accc <LoopForever+0xe>)
	adds	r2, r0, r1
 800aca0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800aca2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800aca4:	d3f6      	bcc.n	800ac94 <CopyDataInit>
	ldr	r2, =_sbss
 800aca6:	4a0a      	ldr	r2, [pc, #40]	; (800acd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 800aca8:	e002      	b.n	800acb0 <LoopFillZerobss>

0800acaa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800acaa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800acac:	f842 3b04 	str.w	r3, [r2], #4

0800acb0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800acb0:	4b08      	ldr	r3, [pc, #32]	; (800acd4 <LoopForever+0x16>)
	cmp	r2, r3
 800acb2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800acb4:	d3f9      	bcc.n	800acaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800acb6:	f000 f85d 	bl	800ad74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800acba:	f7fe fa95 	bl	80091e8 <main>

0800acbe <LoopForever>:

LoopForever:
    b LoopForever
 800acbe:	e7fe      	b.n	800acbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800acc0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800acc4:	0800bf2c 	.word	0x0800bf2c
	ldr	r0, =_sdata
 800acc8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800accc:	2000020c 	.word	0x2000020c
	ldr	r2, =_sbss
 800acd0:	2000020c 	.word	0x2000020c
	ldr	r3, = _ebss
 800acd4:	20001428 	.word	0x20001428

0800acd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800acd8:	e7fe      	b.n	800acd8 <ADC1_2_IRQHandler>
	...

0800acdc <arm_sin_f32>:
 800acdc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ad5c <arm_sin_f32+0x80>
 800ace0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ace4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ace8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acec:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800acf0:	d504      	bpl.n	800acfc <arm_sin_f32+0x20>
 800acf2:	ee17 3a90 	vmov	r3, s15
 800acf6:	3b01      	subs	r3, #1
 800acf8:	ee07 3a90 	vmov	s15, r3
 800acfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad00:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800ad60 <arm_sin_f32+0x84>
 800ad04:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ad08:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ad0c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ad10:	ee17 3a90 	vmov	r3, s15
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad1a:	d21a      	bcs.n	800ad52 <arm_sin_f32+0x76>
 800ad1c:	ee07 3a90 	vmov	s15, r3
 800ad20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad24:	1c59      	adds	r1, r3, #1
 800ad26:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ad2a:	4a0e      	ldr	r2, [pc, #56]	; (800ad64 <arm_sin_f32+0x88>)
 800ad2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ad30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad34:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ad38:	ed93 7a00 	vldr	s14, [r3]
 800ad3c:	edd2 6a00 	vldr	s13, [r2]
 800ad40:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ad44:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ad48:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad4c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ad50:	4770      	bx	lr
 800ad52:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ad56:	2101      	movs	r1, #1
 800ad58:	2300      	movs	r3, #0
 800ad5a:	e7e6      	b.n	800ad2a <arm_sin_f32+0x4e>
 800ad5c:	3e22f983 	.word	0x3e22f983
 800ad60:	44000000 	.word	0x44000000
 800ad64:	0800b6e4 	.word	0x0800b6e4

0800ad68 <__errno>:
 800ad68:	4b01      	ldr	r3, [pc, #4]	; (800ad70 <__errno+0x8>)
 800ad6a:	6818      	ldr	r0, [r3, #0]
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	200001a8 	.word	0x200001a8

0800ad74 <__libc_init_array>:
 800ad74:	b570      	push	{r4, r5, r6, lr}
 800ad76:	4d0d      	ldr	r5, [pc, #52]	; (800adac <__libc_init_array+0x38>)
 800ad78:	4c0d      	ldr	r4, [pc, #52]	; (800adb0 <__libc_init_array+0x3c>)
 800ad7a:	1b64      	subs	r4, r4, r5
 800ad7c:	10a4      	asrs	r4, r4, #2
 800ad7e:	2600      	movs	r6, #0
 800ad80:	42a6      	cmp	r6, r4
 800ad82:	d109      	bne.n	800ad98 <__libc_init_array+0x24>
 800ad84:	4d0b      	ldr	r5, [pc, #44]	; (800adb4 <__libc_init_array+0x40>)
 800ad86:	4c0c      	ldr	r4, [pc, #48]	; (800adb8 <__libc_init_array+0x44>)
 800ad88:	f000 fc4e 	bl	800b628 <_init>
 800ad8c:	1b64      	subs	r4, r4, r5
 800ad8e:	10a4      	asrs	r4, r4, #2
 800ad90:	2600      	movs	r6, #0
 800ad92:	42a6      	cmp	r6, r4
 800ad94:	d105      	bne.n	800ada2 <__libc_init_array+0x2e>
 800ad96:	bd70      	pop	{r4, r5, r6, pc}
 800ad98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad9c:	4798      	blx	r3
 800ad9e:	3601      	adds	r6, #1
 800ada0:	e7ee      	b.n	800ad80 <__libc_init_array+0xc>
 800ada2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ada6:	4798      	blx	r3
 800ada8:	3601      	adds	r6, #1
 800adaa:	e7f2      	b.n	800ad92 <__libc_init_array+0x1e>
 800adac:	0800bf24 	.word	0x0800bf24
 800adb0:	0800bf24 	.word	0x0800bf24
 800adb4:	0800bf24 	.word	0x0800bf24
 800adb8:	0800bf28 	.word	0x0800bf28

0800adbc <memset>:
 800adbc:	4402      	add	r2, r0
 800adbe:	4603      	mov	r3, r0
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d100      	bne.n	800adc6 <memset+0xa>
 800adc4:	4770      	bx	lr
 800adc6:	f803 1b01 	strb.w	r1, [r3], #1
 800adca:	e7f9      	b.n	800adc0 <memset+0x4>

0800adcc <siprintf>:
 800adcc:	b40e      	push	{r1, r2, r3}
 800adce:	b500      	push	{lr}
 800add0:	b09c      	sub	sp, #112	; 0x70
 800add2:	ab1d      	add	r3, sp, #116	; 0x74
 800add4:	9002      	str	r0, [sp, #8]
 800add6:	9006      	str	r0, [sp, #24]
 800add8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800addc:	4809      	ldr	r0, [pc, #36]	; (800ae04 <siprintf+0x38>)
 800adde:	9107      	str	r1, [sp, #28]
 800ade0:	9104      	str	r1, [sp, #16]
 800ade2:	4909      	ldr	r1, [pc, #36]	; (800ae08 <siprintf+0x3c>)
 800ade4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ade8:	9105      	str	r1, [sp, #20]
 800adea:	6800      	ldr	r0, [r0, #0]
 800adec:	9301      	str	r3, [sp, #4]
 800adee:	a902      	add	r1, sp, #8
 800adf0:	f000 f868 	bl	800aec4 <_svfiprintf_r>
 800adf4:	9b02      	ldr	r3, [sp, #8]
 800adf6:	2200      	movs	r2, #0
 800adf8:	701a      	strb	r2, [r3, #0]
 800adfa:	b01c      	add	sp, #112	; 0x70
 800adfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae00:	b003      	add	sp, #12
 800ae02:	4770      	bx	lr
 800ae04:	200001a8 	.word	0x200001a8
 800ae08:	ffff0208 	.word	0xffff0208

0800ae0c <__ssputs_r>:
 800ae0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae10:	688e      	ldr	r6, [r1, #8]
 800ae12:	429e      	cmp	r6, r3
 800ae14:	4682      	mov	sl, r0
 800ae16:	460c      	mov	r4, r1
 800ae18:	4690      	mov	r8, r2
 800ae1a:	461f      	mov	r7, r3
 800ae1c:	d838      	bhi.n	800ae90 <__ssputs_r+0x84>
 800ae1e:	898a      	ldrh	r2, [r1, #12]
 800ae20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae24:	d032      	beq.n	800ae8c <__ssputs_r+0x80>
 800ae26:	6825      	ldr	r5, [r4, #0]
 800ae28:	6909      	ldr	r1, [r1, #16]
 800ae2a:	eba5 0901 	sub.w	r9, r5, r1
 800ae2e:	6965      	ldr	r5, [r4, #20]
 800ae30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae38:	3301      	adds	r3, #1
 800ae3a:	444b      	add	r3, r9
 800ae3c:	106d      	asrs	r5, r5, #1
 800ae3e:	429d      	cmp	r5, r3
 800ae40:	bf38      	it	cc
 800ae42:	461d      	movcc	r5, r3
 800ae44:	0553      	lsls	r3, r2, #21
 800ae46:	d531      	bpl.n	800aeac <__ssputs_r+0xa0>
 800ae48:	4629      	mov	r1, r5
 800ae4a:	f000 fb47 	bl	800b4dc <_malloc_r>
 800ae4e:	4606      	mov	r6, r0
 800ae50:	b950      	cbnz	r0, 800ae68 <__ssputs_r+0x5c>
 800ae52:	230c      	movs	r3, #12
 800ae54:	f8ca 3000 	str.w	r3, [sl]
 800ae58:	89a3      	ldrh	r3, [r4, #12]
 800ae5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae5e:	81a3      	strh	r3, [r4, #12]
 800ae60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae68:	6921      	ldr	r1, [r4, #16]
 800ae6a:	464a      	mov	r2, r9
 800ae6c:	f000 fabe 	bl	800b3ec <memcpy>
 800ae70:	89a3      	ldrh	r3, [r4, #12]
 800ae72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae7a:	81a3      	strh	r3, [r4, #12]
 800ae7c:	6126      	str	r6, [r4, #16]
 800ae7e:	6165      	str	r5, [r4, #20]
 800ae80:	444e      	add	r6, r9
 800ae82:	eba5 0509 	sub.w	r5, r5, r9
 800ae86:	6026      	str	r6, [r4, #0]
 800ae88:	60a5      	str	r5, [r4, #8]
 800ae8a:	463e      	mov	r6, r7
 800ae8c:	42be      	cmp	r6, r7
 800ae8e:	d900      	bls.n	800ae92 <__ssputs_r+0x86>
 800ae90:	463e      	mov	r6, r7
 800ae92:	4632      	mov	r2, r6
 800ae94:	6820      	ldr	r0, [r4, #0]
 800ae96:	4641      	mov	r1, r8
 800ae98:	f000 fab6 	bl	800b408 <memmove>
 800ae9c:	68a3      	ldr	r3, [r4, #8]
 800ae9e:	6822      	ldr	r2, [r4, #0]
 800aea0:	1b9b      	subs	r3, r3, r6
 800aea2:	4432      	add	r2, r6
 800aea4:	60a3      	str	r3, [r4, #8]
 800aea6:	6022      	str	r2, [r4, #0]
 800aea8:	2000      	movs	r0, #0
 800aeaa:	e7db      	b.n	800ae64 <__ssputs_r+0x58>
 800aeac:	462a      	mov	r2, r5
 800aeae:	f000 fb6f 	bl	800b590 <_realloc_r>
 800aeb2:	4606      	mov	r6, r0
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	d1e1      	bne.n	800ae7c <__ssputs_r+0x70>
 800aeb8:	6921      	ldr	r1, [r4, #16]
 800aeba:	4650      	mov	r0, sl
 800aebc:	f000 fabe 	bl	800b43c <_free_r>
 800aec0:	e7c7      	b.n	800ae52 <__ssputs_r+0x46>
	...

0800aec4 <_svfiprintf_r>:
 800aec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec8:	4698      	mov	r8, r3
 800aeca:	898b      	ldrh	r3, [r1, #12]
 800aecc:	061b      	lsls	r3, r3, #24
 800aece:	b09d      	sub	sp, #116	; 0x74
 800aed0:	4607      	mov	r7, r0
 800aed2:	460d      	mov	r5, r1
 800aed4:	4614      	mov	r4, r2
 800aed6:	d50e      	bpl.n	800aef6 <_svfiprintf_r+0x32>
 800aed8:	690b      	ldr	r3, [r1, #16]
 800aeda:	b963      	cbnz	r3, 800aef6 <_svfiprintf_r+0x32>
 800aedc:	2140      	movs	r1, #64	; 0x40
 800aede:	f000 fafd 	bl	800b4dc <_malloc_r>
 800aee2:	6028      	str	r0, [r5, #0]
 800aee4:	6128      	str	r0, [r5, #16]
 800aee6:	b920      	cbnz	r0, 800aef2 <_svfiprintf_r+0x2e>
 800aee8:	230c      	movs	r3, #12
 800aeea:	603b      	str	r3, [r7, #0]
 800aeec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aef0:	e0d1      	b.n	800b096 <_svfiprintf_r+0x1d2>
 800aef2:	2340      	movs	r3, #64	; 0x40
 800aef4:	616b      	str	r3, [r5, #20]
 800aef6:	2300      	movs	r3, #0
 800aef8:	9309      	str	r3, [sp, #36]	; 0x24
 800aefa:	2320      	movs	r3, #32
 800aefc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af00:	f8cd 800c 	str.w	r8, [sp, #12]
 800af04:	2330      	movs	r3, #48	; 0x30
 800af06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b0b0 <_svfiprintf_r+0x1ec>
 800af0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af0e:	f04f 0901 	mov.w	r9, #1
 800af12:	4623      	mov	r3, r4
 800af14:	469a      	mov	sl, r3
 800af16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af1a:	b10a      	cbz	r2, 800af20 <_svfiprintf_r+0x5c>
 800af1c:	2a25      	cmp	r2, #37	; 0x25
 800af1e:	d1f9      	bne.n	800af14 <_svfiprintf_r+0x50>
 800af20:	ebba 0b04 	subs.w	fp, sl, r4
 800af24:	d00b      	beq.n	800af3e <_svfiprintf_r+0x7a>
 800af26:	465b      	mov	r3, fp
 800af28:	4622      	mov	r2, r4
 800af2a:	4629      	mov	r1, r5
 800af2c:	4638      	mov	r0, r7
 800af2e:	f7ff ff6d 	bl	800ae0c <__ssputs_r>
 800af32:	3001      	adds	r0, #1
 800af34:	f000 80aa 	beq.w	800b08c <_svfiprintf_r+0x1c8>
 800af38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af3a:	445a      	add	r2, fp
 800af3c:	9209      	str	r2, [sp, #36]	; 0x24
 800af3e:	f89a 3000 	ldrb.w	r3, [sl]
 800af42:	2b00      	cmp	r3, #0
 800af44:	f000 80a2 	beq.w	800b08c <_svfiprintf_r+0x1c8>
 800af48:	2300      	movs	r3, #0
 800af4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af52:	f10a 0a01 	add.w	sl, sl, #1
 800af56:	9304      	str	r3, [sp, #16]
 800af58:	9307      	str	r3, [sp, #28]
 800af5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af5e:	931a      	str	r3, [sp, #104]	; 0x68
 800af60:	4654      	mov	r4, sl
 800af62:	2205      	movs	r2, #5
 800af64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af68:	4851      	ldr	r0, [pc, #324]	; (800b0b0 <_svfiprintf_r+0x1ec>)
 800af6a:	f7f5 f939 	bl	80001e0 <memchr>
 800af6e:	9a04      	ldr	r2, [sp, #16]
 800af70:	b9d8      	cbnz	r0, 800afaa <_svfiprintf_r+0xe6>
 800af72:	06d0      	lsls	r0, r2, #27
 800af74:	bf44      	itt	mi
 800af76:	2320      	movmi	r3, #32
 800af78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af7c:	0711      	lsls	r1, r2, #28
 800af7e:	bf44      	itt	mi
 800af80:	232b      	movmi	r3, #43	; 0x2b
 800af82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af86:	f89a 3000 	ldrb.w	r3, [sl]
 800af8a:	2b2a      	cmp	r3, #42	; 0x2a
 800af8c:	d015      	beq.n	800afba <_svfiprintf_r+0xf6>
 800af8e:	9a07      	ldr	r2, [sp, #28]
 800af90:	4654      	mov	r4, sl
 800af92:	2000      	movs	r0, #0
 800af94:	f04f 0c0a 	mov.w	ip, #10
 800af98:	4621      	mov	r1, r4
 800af9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af9e:	3b30      	subs	r3, #48	; 0x30
 800afa0:	2b09      	cmp	r3, #9
 800afa2:	d94e      	bls.n	800b042 <_svfiprintf_r+0x17e>
 800afa4:	b1b0      	cbz	r0, 800afd4 <_svfiprintf_r+0x110>
 800afa6:	9207      	str	r2, [sp, #28]
 800afa8:	e014      	b.n	800afd4 <_svfiprintf_r+0x110>
 800afaa:	eba0 0308 	sub.w	r3, r0, r8
 800afae:	fa09 f303 	lsl.w	r3, r9, r3
 800afb2:	4313      	orrs	r3, r2
 800afb4:	9304      	str	r3, [sp, #16]
 800afb6:	46a2      	mov	sl, r4
 800afb8:	e7d2      	b.n	800af60 <_svfiprintf_r+0x9c>
 800afba:	9b03      	ldr	r3, [sp, #12]
 800afbc:	1d19      	adds	r1, r3, #4
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	9103      	str	r1, [sp, #12]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	bfbb      	ittet	lt
 800afc6:	425b      	neglt	r3, r3
 800afc8:	f042 0202 	orrlt.w	r2, r2, #2
 800afcc:	9307      	strge	r3, [sp, #28]
 800afce:	9307      	strlt	r3, [sp, #28]
 800afd0:	bfb8      	it	lt
 800afd2:	9204      	strlt	r2, [sp, #16]
 800afd4:	7823      	ldrb	r3, [r4, #0]
 800afd6:	2b2e      	cmp	r3, #46	; 0x2e
 800afd8:	d10c      	bne.n	800aff4 <_svfiprintf_r+0x130>
 800afda:	7863      	ldrb	r3, [r4, #1]
 800afdc:	2b2a      	cmp	r3, #42	; 0x2a
 800afde:	d135      	bne.n	800b04c <_svfiprintf_r+0x188>
 800afe0:	9b03      	ldr	r3, [sp, #12]
 800afe2:	1d1a      	adds	r2, r3, #4
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	9203      	str	r2, [sp, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	bfb8      	it	lt
 800afec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aff0:	3402      	adds	r4, #2
 800aff2:	9305      	str	r3, [sp, #20]
 800aff4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b0c0 <_svfiprintf_r+0x1fc>
 800aff8:	7821      	ldrb	r1, [r4, #0]
 800affa:	2203      	movs	r2, #3
 800affc:	4650      	mov	r0, sl
 800affe:	f7f5 f8ef 	bl	80001e0 <memchr>
 800b002:	b140      	cbz	r0, 800b016 <_svfiprintf_r+0x152>
 800b004:	2340      	movs	r3, #64	; 0x40
 800b006:	eba0 000a 	sub.w	r0, r0, sl
 800b00a:	fa03 f000 	lsl.w	r0, r3, r0
 800b00e:	9b04      	ldr	r3, [sp, #16]
 800b010:	4303      	orrs	r3, r0
 800b012:	3401      	adds	r4, #1
 800b014:	9304      	str	r3, [sp, #16]
 800b016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b01a:	4826      	ldr	r0, [pc, #152]	; (800b0b4 <_svfiprintf_r+0x1f0>)
 800b01c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b020:	2206      	movs	r2, #6
 800b022:	f7f5 f8dd 	bl	80001e0 <memchr>
 800b026:	2800      	cmp	r0, #0
 800b028:	d038      	beq.n	800b09c <_svfiprintf_r+0x1d8>
 800b02a:	4b23      	ldr	r3, [pc, #140]	; (800b0b8 <_svfiprintf_r+0x1f4>)
 800b02c:	bb1b      	cbnz	r3, 800b076 <_svfiprintf_r+0x1b2>
 800b02e:	9b03      	ldr	r3, [sp, #12]
 800b030:	3307      	adds	r3, #7
 800b032:	f023 0307 	bic.w	r3, r3, #7
 800b036:	3308      	adds	r3, #8
 800b038:	9303      	str	r3, [sp, #12]
 800b03a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b03c:	4433      	add	r3, r6
 800b03e:	9309      	str	r3, [sp, #36]	; 0x24
 800b040:	e767      	b.n	800af12 <_svfiprintf_r+0x4e>
 800b042:	fb0c 3202 	mla	r2, ip, r2, r3
 800b046:	460c      	mov	r4, r1
 800b048:	2001      	movs	r0, #1
 800b04a:	e7a5      	b.n	800af98 <_svfiprintf_r+0xd4>
 800b04c:	2300      	movs	r3, #0
 800b04e:	3401      	adds	r4, #1
 800b050:	9305      	str	r3, [sp, #20]
 800b052:	4619      	mov	r1, r3
 800b054:	f04f 0c0a 	mov.w	ip, #10
 800b058:	4620      	mov	r0, r4
 800b05a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b05e:	3a30      	subs	r2, #48	; 0x30
 800b060:	2a09      	cmp	r2, #9
 800b062:	d903      	bls.n	800b06c <_svfiprintf_r+0x1a8>
 800b064:	2b00      	cmp	r3, #0
 800b066:	d0c5      	beq.n	800aff4 <_svfiprintf_r+0x130>
 800b068:	9105      	str	r1, [sp, #20]
 800b06a:	e7c3      	b.n	800aff4 <_svfiprintf_r+0x130>
 800b06c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b070:	4604      	mov	r4, r0
 800b072:	2301      	movs	r3, #1
 800b074:	e7f0      	b.n	800b058 <_svfiprintf_r+0x194>
 800b076:	ab03      	add	r3, sp, #12
 800b078:	9300      	str	r3, [sp, #0]
 800b07a:	462a      	mov	r2, r5
 800b07c:	4b0f      	ldr	r3, [pc, #60]	; (800b0bc <_svfiprintf_r+0x1f8>)
 800b07e:	a904      	add	r1, sp, #16
 800b080:	4638      	mov	r0, r7
 800b082:	f3af 8000 	nop.w
 800b086:	1c42      	adds	r2, r0, #1
 800b088:	4606      	mov	r6, r0
 800b08a:	d1d6      	bne.n	800b03a <_svfiprintf_r+0x176>
 800b08c:	89ab      	ldrh	r3, [r5, #12]
 800b08e:	065b      	lsls	r3, r3, #25
 800b090:	f53f af2c 	bmi.w	800aeec <_svfiprintf_r+0x28>
 800b094:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b096:	b01d      	add	sp, #116	; 0x74
 800b098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b09c:	ab03      	add	r3, sp, #12
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	462a      	mov	r2, r5
 800b0a2:	4b06      	ldr	r3, [pc, #24]	; (800b0bc <_svfiprintf_r+0x1f8>)
 800b0a4:	a904      	add	r1, sp, #16
 800b0a6:	4638      	mov	r0, r7
 800b0a8:	f000 f87a 	bl	800b1a0 <_printf_i>
 800b0ac:	e7eb      	b.n	800b086 <_svfiprintf_r+0x1c2>
 800b0ae:	bf00      	nop
 800b0b0:	0800bee8 	.word	0x0800bee8
 800b0b4:	0800bef2 	.word	0x0800bef2
 800b0b8:	00000000 	.word	0x00000000
 800b0bc:	0800ae0d 	.word	0x0800ae0d
 800b0c0:	0800beee 	.word	0x0800beee

0800b0c4 <_printf_common>:
 800b0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c8:	4616      	mov	r6, r2
 800b0ca:	4699      	mov	r9, r3
 800b0cc:	688a      	ldr	r2, [r1, #8]
 800b0ce:	690b      	ldr	r3, [r1, #16]
 800b0d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	bfb8      	it	lt
 800b0d8:	4613      	movlt	r3, r2
 800b0da:	6033      	str	r3, [r6, #0]
 800b0dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0e0:	4607      	mov	r7, r0
 800b0e2:	460c      	mov	r4, r1
 800b0e4:	b10a      	cbz	r2, 800b0ea <_printf_common+0x26>
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	6033      	str	r3, [r6, #0]
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	0699      	lsls	r1, r3, #26
 800b0ee:	bf42      	ittt	mi
 800b0f0:	6833      	ldrmi	r3, [r6, #0]
 800b0f2:	3302      	addmi	r3, #2
 800b0f4:	6033      	strmi	r3, [r6, #0]
 800b0f6:	6825      	ldr	r5, [r4, #0]
 800b0f8:	f015 0506 	ands.w	r5, r5, #6
 800b0fc:	d106      	bne.n	800b10c <_printf_common+0x48>
 800b0fe:	f104 0a19 	add.w	sl, r4, #25
 800b102:	68e3      	ldr	r3, [r4, #12]
 800b104:	6832      	ldr	r2, [r6, #0]
 800b106:	1a9b      	subs	r3, r3, r2
 800b108:	42ab      	cmp	r3, r5
 800b10a:	dc26      	bgt.n	800b15a <_printf_common+0x96>
 800b10c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b110:	1e13      	subs	r3, r2, #0
 800b112:	6822      	ldr	r2, [r4, #0]
 800b114:	bf18      	it	ne
 800b116:	2301      	movne	r3, #1
 800b118:	0692      	lsls	r2, r2, #26
 800b11a:	d42b      	bmi.n	800b174 <_printf_common+0xb0>
 800b11c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b120:	4649      	mov	r1, r9
 800b122:	4638      	mov	r0, r7
 800b124:	47c0      	blx	r8
 800b126:	3001      	adds	r0, #1
 800b128:	d01e      	beq.n	800b168 <_printf_common+0xa4>
 800b12a:	6823      	ldr	r3, [r4, #0]
 800b12c:	68e5      	ldr	r5, [r4, #12]
 800b12e:	6832      	ldr	r2, [r6, #0]
 800b130:	f003 0306 	and.w	r3, r3, #6
 800b134:	2b04      	cmp	r3, #4
 800b136:	bf08      	it	eq
 800b138:	1aad      	subeq	r5, r5, r2
 800b13a:	68a3      	ldr	r3, [r4, #8]
 800b13c:	6922      	ldr	r2, [r4, #16]
 800b13e:	bf0c      	ite	eq
 800b140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b144:	2500      	movne	r5, #0
 800b146:	4293      	cmp	r3, r2
 800b148:	bfc4      	itt	gt
 800b14a:	1a9b      	subgt	r3, r3, r2
 800b14c:	18ed      	addgt	r5, r5, r3
 800b14e:	2600      	movs	r6, #0
 800b150:	341a      	adds	r4, #26
 800b152:	42b5      	cmp	r5, r6
 800b154:	d11a      	bne.n	800b18c <_printf_common+0xc8>
 800b156:	2000      	movs	r0, #0
 800b158:	e008      	b.n	800b16c <_printf_common+0xa8>
 800b15a:	2301      	movs	r3, #1
 800b15c:	4652      	mov	r2, sl
 800b15e:	4649      	mov	r1, r9
 800b160:	4638      	mov	r0, r7
 800b162:	47c0      	blx	r8
 800b164:	3001      	adds	r0, #1
 800b166:	d103      	bne.n	800b170 <_printf_common+0xac>
 800b168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b170:	3501      	adds	r5, #1
 800b172:	e7c6      	b.n	800b102 <_printf_common+0x3e>
 800b174:	18e1      	adds	r1, r4, r3
 800b176:	1c5a      	adds	r2, r3, #1
 800b178:	2030      	movs	r0, #48	; 0x30
 800b17a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b17e:	4422      	add	r2, r4
 800b180:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b184:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b188:	3302      	adds	r3, #2
 800b18a:	e7c7      	b.n	800b11c <_printf_common+0x58>
 800b18c:	2301      	movs	r3, #1
 800b18e:	4622      	mov	r2, r4
 800b190:	4649      	mov	r1, r9
 800b192:	4638      	mov	r0, r7
 800b194:	47c0      	blx	r8
 800b196:	3001      	adds	r0, #1
 800b198:	d0e6      	beq.n	800b168 <_printf_common+0xa4>
 800b19a:	3601      	adds	r6, #1
 800b19c:	e7d9      	b.n	800b152 <_printf_common+0x8e>
	...

0800b1a0 <_printf_i>:
 800b1a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1a4:	460c      	mov	r4, r1
 800b1a6:	4691      	mov	r9, r2
 800b1a8:	7e27      	ldrb	r7, [r4, #24]
 800b1aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b1ac:	2f78      	cmp	r7, #120	; 0x78
 800b1ae:	4680      	mov	r8, r0
 800b1b0:	469a      	mov	sl, r3
 800b1b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1b6:	d807      	bhi.n	800b1c8 <_printf_i+0x28>
 800b1b8:	2f62      	cmp	r7, #98	; 0x62
 800b1ba:	d80a      	bhi.n	800b1d2 <_printf_i+0x32>
 800b1bc:	2f00      	cmp	r7, #0
 800b1be:	f000 80d8 	beq.w	800b372 <_printf_i+0x1d2>
 800b1c2:	2f58      	cmp	r7, #88	; 0x58
 800b1c4:	f000 80a3 	beq.w	800b30e <_printf_i+0x16e>
 800b1c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b1cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1d0:	e03a      	b.n	800b248 <_printf_i+0xa8>
 800b1d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1d6:	2b15      	cmp	r3, #21
 800b1d8:	d8f6      	bhi.n	800b1c8 <_printf_i+0x28>
 800b1da:	a001      	add	r0, pc, #4	; (adr r0, 800b1e0 <_printf_i+0x40>)
 800b1dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b1e0:	0800b239 	.word	0x0800b239
 800b1e4:	0800b24d 	.word	0x0800b24d
 800b1e8:	0800b1c9 	.word	0x0800b1c9
 800b1ec:	0800b1c9 	.word	0x0800b1c9
 800b1f0:	0800b1c9 	.word	0x0800b1c9
 800b1f4:	0800b1c9 	.word	0x0800b1c9
 800b1f8:	0800b24d 	.word	0x0800b24d
 800b1fc:	0800b1c9 	.word	0x0800b1c9
 800b200:	0800b1c9 	.word	0x0800b1c9
 800b204:	0800b1c9 	.word	0x0800b1c9
 800b208:	0800b1c9 	.word	0x0800b1c9
 800b20c:	0800b359 	.word	0x0800b359
 800b210:	0800b27d 	.word	0x0800b27d
 800b214:	0800b33b 	.word	0x0800b33b
 800b218:	0800b1c9 	.word	0x0800b1c9
 800b21c:	0800b1c9 	.word	0x0800b1c9
 800b220:	0800b37b 	.word	0x0800b37b
 800b224:	0800b1c9 	.word	0x0800b1c9
 800b228:	0800b27d 	.word	0x0800b27d
 800b22c:	0800b1c9 	.word	0x0800b1c9
 800b230:	0800b1c9 	.word	0x0800b1c9
 800b234:	0800b343 	.word	0x0800b343
 800b238:	680b      	ldr	r3, [r1, #0]
 800b23a:	1d1a      	adds	r2, r3, #4
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	600a      	str	r2, [r1, #0]
 800b240:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b248:	2301      	movs	r3, #1
 800b24a:	e0a3      	b.n	800b394 <_printf_i+0x1f4>
 800b24c:	6825      	ldr	r5, [r4, #0]
 800b24e:	6808      	ldr	r0, [r1, #0]
 800b250:	062e      	lsls	r6, r5, #24
 800b252:	f100 0304 	add.w	r3, r0, #4
 800b256:	d50a      	bpl.n	800b26e <_printf_i+0xce>
 800b258:	6805      	ldr	r5, [r0, #0]
 800b25a:	600b      	str	r3, [r1, #0]
 800b25c:	2d00      	cmp	r5, #0
 800b25e:	da03      	bge.n	800b268 <_printf_i+0xc8>
 800b260:	232d      	movs	r3, #45	; 0x2d
 800b262:	426d      	negs	r5, r5
 800b264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b268:	485e      	ldr	r0, [pc, #376]	; (800b3e4 <_printf_i+0x244>)
 800b26a:	230a      	movs	r3, #10
 800b26c:	e019      	b.n	800b2a2 <_printf_i+0x102>
 800b26e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b272:	6805      	ldr	r5, [r0, #0]
 800b274:	600b      	str	r3, [r1, #0]
 800b276:	bf18      	it	ne
 800b278:	b22d      	sxthne	r5, r5
 800b27a:	e7ef      	b.n	800b25c <_printf_i+0xbc>
 800b27c:	680b      	ldr	r3, [r1, #0]
 800b27e:	6825      	ldr	r5, [r4, #0]
 800b280:	1d18      	adds	r0, r3, #4
 800b282:	6008      	str	r0, [r1, #0]
 800b284:	0628      	lsls	r0, r5, #24
 800b286:	d501      	bpl.n	800b28c <_printf_i+0xec>
 800b288:	681d      	ldr	r5, [r3, #0]
 800b28a:	e002      	b.n	800b292 <_printf_i+0xf2>
 800b28c:	0669      	lsls	r1, r5, #25
 800b28e:	d5fb      	bpl.n	800b288 <_printf_i+0xe8>
 800b290:	881d      	ldrh	r5, [r3, #0]
 800b292:	4854      	ldr	r0, [pc, #336]	; (800b3e4 <_printf_i+0x244>)
 800b294:	2f6f      	cmp	r7, #111	; 0x6f
 800b296:	bf0c      	ite	eq
 800b298:	2308      	moveq	r3, #8
 800b29a:	230a      	movne	r3, #10
 800b29c:	2100      	movs	r1, #0
 800b29e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b2a2:	6866      	ldr	r6, [r4, #4]
 800b2a4:	60a6      	str	r6, [r4, #8]
 800b2a6:	2e00      	cmp	r6, #0
 800b2a8:	bfa2      	ittt	ge
 800b2aa:	6821      	ldrge	r1, [r4, #0]
 800b2ac:	f021 0104 	bicge.w	r1, r1, #4
 800b2b0:	6021      	strge	r1, [r4, #0]
 800b2b2:	b90d      	cbnz	r5, 800b2b8 <_printf_i+0x118>
 800b2b4:	2e00      	cmp	r6, #0
 800b2b6:	d04d      	beq.n	800b354 <_printf_i+0x1b4>
 800b2b8:	4616      	mov	r6, r2
 800b2ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800b2be:	fb03 5711 	mls	r7, r3, r1, r5
 800b2c2:	5dc7      	ldrb	r7, [r0, r7]
 800b2c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b2c8:	462f      	mov	r7, r5
 800b2ca:	42bb      	cmp	r3, r7
 800b2cc:	460d      	mov	r5, r1
 800b2ce:	d9f4      	bls.n	800b2ba <_printf_i+0x11a>
 800b2d0:	2b08      	cmp	r3, #8
 800b2d2:	d10b      	bne.n	800b2ec <_printf_i+0x14c>
 800b2d4:	6823      	ldr	r3, [r4, #0]
 800b2d6:	07df      	lsls	r7, r3, #31
 800b2d8:	d508      	bpl.n	800b2ec <_printf_i+0x14c>
 800b2da:	6923      	ldr	r3, [r4, #16]
 800b2dc:	6861      	ldr	r1, [r4, #4]
 800b2de:	4299      	cmp	r1, r3
 800b2e0:	bfde      	ittt	le
 800b2e2:	2330      	movle	r3, #48	; 0x30
 800b2e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b2e8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800b2ec:	1b92      	subs	r2, r2, r6
 800b2ee:	6122      	str	r2, [r4, #16]
 800b2f0:	f8cd a000 	str.w	sl, [sp]
 800b2f4:	464b      	mov	r3, r9
 800b2f6:	aa03      	add	r2, sp, #12
 800b2f8:	4621      	mov	r1, r4
 800b2fa:	4640      	mov	r0, r8
 800b2fc:	f7ff fee2 	bl	800b0c4 <_printf_common>
 800b300:	3001      	adds	r0, #1
 800b302:	d14c      	bne.n	800b39e <_printf_i+0x1fe>
 800b304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b308:	b004      	add	sp, #16
 800b30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b30e:	4835      	ldr	r0, [pc, #212]	; (800b3e4 <_printf_i+0x244>)
 800b310:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b314:	6823      	ldr	r3, [r4, #0]
 800b316:	680e      	ldr	r6, [r1, #0]
 800b318:	061f      	lsls	r7, r3, #24
 800b31a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b31e:	600e      	str	r6, [r1, #0]
 800b320:	d514      	bpl.n	800b34c <_printf_i+0x1ac>
 800b322:	07d9      	lsls	r1, r3, #31
 800b324:	bf44      	itt	mi
 800b326:	f043 0320 	orrmi.w	r3, r3, #32
 800b32a:	6023      	strmi	r3, [r4, #0]
 800b32c:	b91d      	cbnz	r5, 800b336 <_printf_i+0x196>
 800b32e:	6823      	ldr	r3, [r4, #0]
 800b330:	f023 0320 	bic.w	r3, r3, #32
 800b334:	6023      	str	r3, [r4, #0]
 800b336:	2310      	movs	r3, #16
 800b338:	e7b0      	b.n	800b29c <_printf_i+0xfc>
 800b33a:	6823      	ldr	r3, [r4, #0]
 800b33c:	f043 0320 	orr.w	r3, r3, #32
 800b340:	6023      	str	r3, [r4, #0]
 800b342:	2378      	movs	r3, #120	; 0x78
 800b344:	4828      	ldr	r0, [pc, #160]	; (800b3e8 <_printf_i+0x248>)
 800b346:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b34a:	e7e3      	b.n	800b314 <_printf_i+0x174>
 800b34c:	065e      	lsls	r6, r3, #25
 800b34e:	bf48      	it	mi
 800b350:	b2ad      	uxthmi	r5, r5
 800b352:	e7e6      	b.n	800b322 <_printf_i+0x182>
 800b354:	4616      	mov	r6, r2
 800b356:	e7bb      	b.n	800b2d0 <_printf_i+0x130>
 800b358:	680b      	ldr	r3, [r1, #0]
 800b35a:	6826      	ldr	r6, [r4, #0]
 800b35c:	6960      	ldr	r0, [r4, #20]
 800b35e:	1d1d      	adds	r5, r3, #4
 800b360:	600d      	str	r5, [r1, #0]
 800b362:	0635      	lsls	r5, r6, #24
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	d501      	bpl.n	800b36c <_printf_i+0x1cc>
 800b368:	6018      	str	r0, [r3, #0]
 800b36a:	e002      	b.n	800b372 <_printf_i+0x1d2>
 800b36c:	0671      	lsls	r1, r6, #25
 800b36e:	d5fb      	bpl.n	800b368 <_printf_i+0x1c8>
 800b370:	8018      	strh	r0, [r3, #0]
 800b372:	2300      	movs	r3, #0
 800b374:	6123      	str	r3, [r4, #16]
 800b376:	4616      	mov	r6, r2
 800b378:	e7ba      	b.n	800b2f0 <_printf_i+0x150>
 800b37a:	680b      	ldr	r3, [r1, #0]
 800b37c:	1d1a      	adds	r2, r3, #4
 800b37e:	600a      	str	r2, [r1, #0]
 800b380:	681e      	ldr	r6, [r3, #0]
 800b382:	6862      	ldr	r2, [r4, #4]
 800b384:	2100      	movs	r1, #0
 800b386:	4630      	mov	r0, r6
 800b388:	f7f4 ff2a 	bl	80001e0 <memchr>
 800b38c:	b108      	cbz	r0, 800b392 <_printf_i+0x1f2>
 800b38e:	1b80      	subs	r0, r0, r6
 800b390:	6060      	str	r0, [r4, #4]
 800b392:	6863      	ldr	r3, [r4, #4]
 800b394:	6123      	str	r3, [r4, #16]
 800b396:	2300      	movs	r3, #0
 800b398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b39c:	e7a8      	b.n	800b2f0 <_printf_i+0x150>
 800b39e:	6923      	ldr	r3, [r4, #16]
 800b3a0:	4632      	mov	r2, r6
 800b3a2:	4649      	mov	r1, r9
 800b3a4:	4640      	mov	r0, r8
 800b3a6:	47d0      	blx	sl
 800b3a8:	3001      	adds	r0, #1
 800b3aa:	d0ab      	beq.n	800b304 <_printf_i+0x164>
 800b3ac:	6823      	ldr	r3, [r4, #0]
 800b3ae:	079b      	lsls	r3, r3, #30
 800b3b0:	d413      	bmi.n	800b3da <_printf_i+0x23a>
 800b3b2:	68e0      	ldr	r0, [r4, #12]
 800b3b4:	9b03      	ldr	r3, [sp, #12]
 800b3b6:	4298      	cmp	r0, r3
 800b3b8:	bfb8      	it	lt
 800b3ba:	4618      	movlt	r0, r3
 800b3bc:	e7a4      	b.n	800b308 <_printf_i+0x168>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	4632      	mov	r2, r6
 800b3c2:	4649      	mov	r1, r9
 800b3c4:	4640      	mov	r0, r8
 800b3c6:	47d0      	blx	sl
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	d09b      	beq.n	800b304 <_printf_i+0x164>
 800b3cc:	3501      	adds	r5, #1
 800b3ce:	68e3      	ldr	r3, [r4, #12]
 800b3d0:	9903      	ldr	r1, [sp, #12]
 800b3d2:	1a5b      	subs	r3, r3, r1
 800b3d4:	42ab      	cmp	r3, r5
 800b3d6:	dcf2      	bgt.n	800b3be <_printf_i+0x21e>
 800b3d8:	e7eb      	b.n	800b3b2 <_printf_i+0x212>
 800b3da:	2500      	movs	r5, #0
 800b3dc:	f104 0619 	add.w	r6, r4, #25
 800b3e0:	e7f5      	b.n	800b3ce <_printf_i+0x22e>
 800b3e2:	bf00      	nop
 800b3e4:	0800bef9 	.word	0x0800bef9
 800b3e8:	0800bf0a 	.word	0x0800bf0a

0800b3ec <memcpy>:
 800b3ec:	440a      	add	r2, r1
 800b3ee:	4291      	cmp	r1, r2
 800b3f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b3f4:	d100      	bne.n	800b3f8 <memcpy+0xc>
 800b3f6:	4770      	bx	lr
 800b3f8:	b510      	push	{r4, lr}
 800b3fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b402:	4291      	cmp	r1, r2
 800b404:	d1f9      	bne.n	800b3fa <memcpy+0xe>
 800b406:	bd10      	pop	{r4, pc}

0800b408 <memmove>:
 800b408:	4288      	cmp	r0, r1
 800b40a:	b510      	push	{r4, lr}
 800b40c:	eb01 0402 	add.w	r4, r1, r2
 800b410:	d902      	bls.n	800b418 <memmove+0x10>
 800b412:	4284      	cmp	r4, r0
 800b414:	4623      	mov	r3, r4
 800b416:	d807      	bhi.n	800b428 <memmove+0x20>
 800b418:	1e43      	subs	r3, r0, #1
 800b41a:	42a1      	cmp	r1, r4
 800b41c:	d008      	beq.n	800b430 <memmove+0x28>
 800b41e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b422:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b426:	e7f8      	b.n	800b41a <memmove+0x12>
 800b428:	4402      	add	r2, r0
 800b42a:	4601      	mov	r1, r0
 800b42c:	428a      	cmp	r2, r1
 800b42e:	d100      	bne.n	800b432 <memmove+0x2a>
 800b430:	bd10      	pop	{r4, pc}
 800b432:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b436:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b43a:	e7f7      	b.n	800b42c <memmove+0x24>

0800b43c <_free_r>:
 800b43c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b43e:	2900      	cmp	r1, #0
 800b440:	d048      	beq.n	800b4d4 <_free_r+0x98>
 800b442:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b446:	9001      	str	r0, [sp, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f1a1 0404 	sub.w	r4, r1, #4
 800b44e:	bfb8      	it	lt
 800b450:	18e4      	addlt	r4, r4, r3
 800b452:	f000 f8d3 	bl	800b5fc <__malloc_lock>
 800b456:	4a20      	ldr	r2, [pc, #128]	; (800b4d8 <_free_r+0x9c>)
 800b458:	9801      	ldr	r0, [sp, #4]
 800b45a:	6813      	ldr	r3, [r2, #0]
 800b45c:	4615      	mov	r5, r2
 800b45e:	b933      	cbnz	r3, 800b46e <_free_r+0x32>
 800b460:	6063      	str	r3, [r4, #4]
 800b462:	6014      	str	r4, [r2, #0]
 800b464:	b003      	add	sp, #12
 800b466:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b46a:	f000 b8cd 	b.w	800b608 <__malloc_unlock>
 800b46e:	42a3      	cmp	r3, r4
 800b470:	d90b      	bls.n	800b48a <_free_r+0x4e>
 800b472:	6821      	ldr	r1, [r4, #0]
 800b474:	1862      	adds	r2, r4, r1
 800b476:	4293      	cmp	r3, r2
 800b478:	bf04      	itt	eq
 800b47a:	681a      	ldreq	r2, [r3, #0]
 800b47c:	685b      	ldreq	r3, [r3, #4]
 800b47e:	6063      	str	r3, [r4, #4]
 800b480:	bf04      	itt	eq
 800b482:	1852      	addeq	r2, r2, r1
 800b484:	6022      	streq	r2, [r4, #0]
 800b486:	602c      	str	r4, [r5, #0]
 800b488:	e7ec      	b.n	800b464 <_free_r+0x28>
 800b48a:	461a      	mov	r2, r3
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	b10b      	cbz	r3, 800b494 <_free_r+0x58>
 800b490:	42a3      	cmp	r3, r4
 800b492:	d9fa      	bls.n	800b48a <_free_r+0x4e>
 800b494:	6811      	ldr	r1, [r2, #0]
 800b496:	1855      	adds	r5, r2, r1
 800b498:	42a5      	cmp	r5, r4
 800b49a:	d10b      	bne.n	800b4b4 <_free_r+0x78>
 800b49c:	6824      	ldr	r4, [r4, #0]
 800b49e:	4421      	add	r1, r4
 800b4a0:	1854      	adds	r4, r2, r1
 800b4a2:	42a3      	cmp	r3, r4
 800b4a4:	6011      	str	r1, [r2, #0]
 800b4a6:	d1dd      	bne.n	800b464 <_free_r+0x28>
 800b4a8:	681c      	ldr	r4, [r3, #0]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	6053      	str	r3, [r2, #4]
 800b4ae:	4421      	add	r1, r4
 800b4b0:	6011      	str	r1, [r2, #0]
 800b4b2:	e7d7      	b.n	800b464 <_free_r+0x28>
 800b4b4:	d902      	bls.n	800b4bc <_free_r+0x80>
 800b4b6:	230c      	movs	r3, #12
 800b4b8:	6003      	str	r3, [r0, #0]
 800b4ba:	e7d3      	b.n	800b464 <_free_r+0x28>
 800b4bc:	6825      	ldr	r5, [r4, #0]
 800b4be:	1961      	adds	r1, r4, r5
 800b4c0:	428b      	cmp	r3, r1
 800b4c2:	bf04      	itt	eq
 800b4c4:	6819      	ldreq	r1, [r3, #0]
 800b4c6:	685b      	ldreq	r3, [r3, #4]
 800b4c8:	6063      	str	r3, [r4, #4]
 800b4ca:	bf04      	itt	eq
 800b4cc:	1949      	addeq	r1, r1, r5
 800b4ce:	6021      	streq	r1, [r4, #0]
 800b4d0:	6054      	str	r4, [r2, #4]
 800b4d2:	e7c7      	b.n	800b464 <_free_r+0x28>
 800b4d4:	b003      	add	sp, #12
 800b4d6:	bd30      	pop	{r4, r5, pc}
 800b4d8:	20000250 	.word	0x20000250

0800b4dc <_malloc_r>:
 800b4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4de:	1ccd      	adds	r5, r1, #3
 800b4e0:	f025 0503 	bic.w	r5, r5, #3
 800b4e4:	3508      	adds	r5, #8
 800b4e6:	2d0c      	cmp	r5, #12
 800b4e8:	bf38      	it	cc
 800b4ea:	250c      	movcc	r5, #12
 800b4ec:	2d00      	cmp	r5, #0
 800b4ee:	4606      	mov	r6, r0
 800b4f0:	db01      	blt.n	800b4f6 <_malloc_r+0x1a>
 800b4f2:	42a9      	cmp	r1, r5
 800b4f4:	d903      	bls.n	800b4fe <_malloc_r+0x22>
 800b4f6:	230c      	movs	r3, #12
 800b4f8:	6033      	str	r3, [r6, #0]
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4fe:	f000 f87d 	bl	800b5fc <__malloc_lock>
 800b502:	4921      	ldr	r1, [pc, #132]	; (800b588 <_malloc_r+0xac>)
 800b504:	680a      	ldr	r2, [r1, #0]
 800b506:	4614      	mov	r4, r2
 800b508:	b99c      	cbnz	r4, 800b532 <_malloc_r+0x56>
 800b50a:	4f20      	ldr	r7, [pc, #128]	; (800b58c <_malloc_r+0xb0>)
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	b923      	cbnz	r3, 800b51a <_malloc_r+0x3e>
 800b510:	4621      	mov	r1, r4
 800b512:	4630      	mov	r0, r6
 800b514:	f000 f862 	bl	800b5dc <_sbrk_r>
 800b518:	6038      	str	r0, [r7, #0]
 800b51a:	4629      	mov	r1, r5
 800b51c:	4630      	mov	r0, r6
 800b51e:	f000 f85d 	bl	800b5dc <_sbrk_r>
 800b522:	1c43      	adds	r3, r0, #1
 800b524:	d123      	bne.n	800b56e <_malloc_r+0x92>
 800b526:	230c      	movs	r3, #12
 800b528:	6033      	str	r3, [r6, #0]
 800b52a:	4630      	mov	r0, r6
 800b52c:	f000 f86c 	bl	800b608 <__malloc_unlock>
 800b530:	e7e3      	b.n	800b4fa <_malloc_r+0x1e>
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	1b5b      	subs	r3, r3, r5
 800b536:	d417      	bmi.n	800b568 <_malloc_r+0x8c>
 800b538:	2b0b      	cmp	r3, #11
 800b53a:	d903      	bls.n	800b544 <_malloc_r+0x68>
 800b53c:	6023      	str	r3, [r4, #0]
 800b53e:	441c      	add	r4, r3
 800b540:	6025      	str	r5, [r4, #0]
 800b542:	e004      	b.n	800b54e <_malloc_r+0x72>
 800b544:	6863      	ldr	r3, [r4, #4]
 800b546:	42a2      	cmp	r2, r4
 800b548:	bf0c      	ite	eq
 800b54a:	600b      	streq	r3, [r1, #0]
 800b54c:	6053      	strne	r3, [r2, #4]
 800b54e:	4630      	mov	r0, r6
 800b550:	f000 f85a 	bl	800b608 <__malloc_unlock>
 800b554:	f104 000b 	add.w	r0, r4, #11
 800b558:	1d23      	adds	r3, r4, #4
 800b55a:	f020 0007 	bic.w	r0, r0, #7
 800b55e:	1ac2      	subs	r2, r0, r3
 800b560:	d0cc      	beq.n	800b4fc <_malloc_r+0x20>
 800b562:	1a1b      	subs	r3, r3, r0
 800b564:	50a3      	str	r3, [r4, r2]
 800b566:	e7c9      	b.n	800b4fc <_malloc_r+0x20>
 800b568:	4622      	mov	r2, r4
 800b56a:	6864      	ldr	r4, [r4, #4]
 800b56c:	e7cc      	b.n	800b508 <_malloc_r+0x2c>
 800b56e:	1cc4      	adds	r4, r0, #3
 800b570:	f024 0403 	bic.w	r4, r4, #3
 800b574:	42a0      	cmp	r0, r4
 800b576:	d0e3      	beq.n	800b540 <_malloc_r+0x64>
 800b578:	1a21      	subs	r1, r4, r0
 800b57a:	4630      	mov	r0, r6
 800b57c:	f000 f82e 	bl	800b5dc <_sbrk_r>
 800b580:	3001      	adds	r0, #1
 800b582:	d1dd      	bne.n	800b540 <_malloc_r+0x64>
 800b584:	e7cf      	b.n	800b526 <_malloc_r+0x4a>
 800b586:	bf00      	nop
 800b588:	20000250 	.word	0x20000250
 800b58c:	20000254 	.word	0x20000254

0800b590 <_realloc_r>:
 800b590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b592:	4607      	mov	r7, r0
 800b594:	4614      	mov	r4, r2
 800b596:	460e      	mov	r6, r1
 800b598:	b921      	cbnz	r1, 800b5a4 <_realloc_r+0x14>
 800b59a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b59e:	4611      	mov	r1, r2
 800b5a0:	f7ff bf9c 	b.w	800b4dc <_malloc_r>
 800b5a4:	b922      	cbnz	r2, 800b5b0 <_realloc_r+0x20>
 800b5a6:	f7ff ff49 	bl	800b43c <_free_r>
 800b5aa:	4625      	mov	r5, r4
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5b0:	f000 f830 	bl	800b614 <_malloc_usable_size_r>
 800b5b4:	42a0      	cmp	r0, r4
 800b5b6:	d20f      	bcs.n	800b5d8 <_realloc_r+0x48>
 800b5b8:	4621      	mov	r1, r4
 800b5ba:	4638      	mov	r0, r7
 800b5bc:	f7ff ff8e 	bl	800b4dc <_malloc_r>
 800b5c0:	4605      	mov	r5, r0
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d0f2      	beq.n	800b5ac <_realloc_r+0x1c>
 800b5c6:	4631      	mov	r1, r6
 800b5c8:	4622      	mov	r2, r4
 800b5ca:	f7ff ff0f 	bl	800b3ec <memcpy>
 800b5ce:	4631      	mov	r1, r6
 800b5d0:	4638      	mov	r0, r7
 800b5d2:	f7ff ff33 	bl	800b43c <_free_r>
 800b5d6:	e7e9      	b.n	800b5ac <_realloc_r+0x1c>
 800b5d8:	4635      	mov	r5, r6
 800b5da:	e7e7      	b.n	800b5ac <_realloc_r+0x1c>

0800b5dc <_sbrk_r>:
 800b5dc:	b538      	push	{r3, r4, r5, lr}
 800b5de:	4d06      	ldr	r5, [pc, #24]	; (800b5f8 <_sbrk_r+0x1c>)
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	4608      	mov	r0, r1
 800b5e6:	602b      	str	r3, [r5, #0]
 800b5e8:	f7fe fd6e 	bl	800a0c8 <_sbrk>
 800b5ec:	1c43      	adds	r3, r0, #1
 800b5ee:	d102      	bne.n	800b5f6 <_sbrk_r+0x1a>
 800b5f0:	682b      	ldr	r3, [r5, #0]
 800b5f2:	b103      	cbz	r3, 800b5f6 <_sbrk_r+0x1a>
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	bd38      	pop	{r3, r4, r5, pc}
 800b5f8:	20001418 	.word	0x20001418

0800b5fc <__malloc_lock>:
 800b5fc:	4801      	ldr	r0, [pc, #4]	; (800b604 <__malloc_lock+0x8>)
 800b5fe:	f000 b811 	b.w	800b624 <__retarget_lock_acquire_recursive>
 800b602:	bf00      	nop
 800b604:	20001420 	.word	0x20001420

0800b608 <__malloc_unlock>:
 800b608:	4801      	ldr	r0, [pc, #4]	; (800b610 <__malloc_unlock+0x8>)
 800b60a:	f000 b80c 	b.w	800b626 <__retarget_lock_release_recursive>
 800b60e:	bf00      	nop
 800b610:	20001420 	.word	0x20001420

0800b614 <_malloc_usable_size_r>:
 800b614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b618:	1f18      	subs	r0, r3, #4
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	bfbc      	itt	lt
 800b61e:	580b      	ldrlt	r3, [r1, r0]
 800b620:	18c0      	addlt	r0, r0, r3
 800b622:	4770      	bx	lr

0800b624 <__retarget_lock_acquire_recursive>:
 800b624:	4770      	bx	lr

0800b626 <__retarget_lock_release_recursive>:
 800b626:	4770      	bx	lr

0800b628 <_init>:
 800b628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b62a:	bf00      	nop
 800b62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b62e:	bc08      	pop	{r3}
 800b630:	469e      	mov	lr, r3
 800b632:	4770      	bx	lr

0800b634 <_fini>:
 800b634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b636:	bf00      	nop
 800b638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b63a:	bc08      	pop	{r3}
 800b63c:	469e      	mov	lr, r3
 800b63e:	4770      	bx	lr
