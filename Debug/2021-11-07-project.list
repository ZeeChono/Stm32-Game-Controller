
2021-11-07-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b60c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d4  0800b79c  0800b79c  0001b79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c070  0800c070  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c070  0800c070  0001c070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c078  0800c078  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c078  0800c078  0001c078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c07c  0800c07c  0001c07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800c080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001220  2000020c  0800c28c  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000142c  0800c28c  0002142c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a158  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fd9  00000000  00000000  0004a394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c98  00000000  00000000  0004f370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a88  00000000  00000000  00051008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c310  00000000  00000000  00052a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021bcf  00000000  00000000  0007eda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe1d6  00000000  00000000  000a096f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  0019eb45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c0c  00000000  00000000  0019ec10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  001a681c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b784 	.word	0x0800b784

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	0800b784 	.word	0x0800b784

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000900:	f000 b96e 	b.w	8000be0 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468c      	mov	ip, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	f040 8083 	bne.w	8000a32 <__udivmoddi4+0x116>
 800092c:	428a      	cmp	r2, r1
 800092e:	4617      	mov	r7, r2
 8000930:	d947      	bls.n	80009c2 <__udivmoddi4+0xa6>
 8000932:	fab2 f282 	clz	r2, r2
 8000936:	b142      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000938:	f1c2 0020 	rsb	r0, r2, #32
 800093c:	fa24 f000 	lsr.w	r0, r4, r0
 8000940:	4091      	lsls	r1, r2
 8000942:	4097      	lsls	r7, r2
 8000944:	ea40 0c01 	orr.w	ip, r0, r1
 8000948:	4094      	lsls	r4, r2
 800094a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800094e:	0c23      	lsrs	r3, r4, #16
 8000950:	fbbc f6f8 	udiv	r6, ip, r8
 8000954:	fa1f fe87 	uxth.w	lr, r7
 8000958:	fb08 c116 	mls	r1, r8, r6, ip
 800095c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000960:	fb06 f10e 	mul.w	r1, r6, lr
 8000964:	4299      	cmp	r1, r3
 8000966:	d909      	bls.n	800097c <__udivmoddi4+0x60>
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800096e:	f080 8119 	bcs.w	8000ba4 <__udivmoddi4+0x288>
 8000972:	4299      	cmp	r1, r3
 8000974:	f240 8116 	bls.w	8000ba4 <__udivmoddi4+0x288>
 8000978:	3e02      	subs	r6, #2
 800097a:	443b      	add	r3, r7
 800097c:	1a5b      	subs	r3, r3, r1
 800097e:	b2a4      	uxth	r4, r4
 8000980:	fbb3 f0f8 	udiv	r0, r3, r8
 8000984:	fb08 3310 	mls	r3, r8, r0, r3
 8000988:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800098c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000990:	45a6      	cmp	lr, r4
 8000992:	d909      	bls.n	80009a8 <__udivmoddi4+0x8c>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800099a:	f080 8105 	bcs.w	8000ba8 <__udivmoddi4+0x28c>
 800099e:	45a6      	cmp	lr, r4
 80009a0:	f240 8102 	bls.w	8000ba8 <__udivmoddi4+0x28c>
 80009a4:	3802      	subs	r0, #2
 80009a6:	443c      	add	r4, r7
 80009a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ac:	eba4 040e 	sub.w	r4, r4, lr
 80009b0:	2600      	movs	r6, #0
 80009b2:	b11d      	cbz	r5, 80009bc <__udivmoddi4+0xa0>
 80009b4:	40d4      	lsrs	r4, r2
 80009b6:	2300      	movs	r3, #0
 80009b8:	e9c5 4300 	strd	r4, r3, [r5]
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	b902      	cbnz	r2, 80009c6 <__udivmoddi4+0xaa>
 80009c4:	deff      	udf	#255	; 0xff
 80009c6:	fab2 f282 	clz	r2, r2
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d150      	bne.n	8000a70 <__udivmoddi4+0x154>
 80009ce:	1bcb      	subs	r3, r1, r7
 80009d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	2601      	movs	r6, #1
 80009da:	fbb3 fcfe 	udiv	ip, r3, lr
 80009de:	0c21      	lsrs	r1, r4, #16
 80009e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009e8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0xe4>
 80009f0:	1879      	adds	r1, r7, r1
 80009f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0xe2>
 80009f8:	428b      	cmp	r3, r1
 80009fa:	f200 80e9 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 80009fe:	4684      	mov	ip, r0
 8000a00:	1ac9      	subs	r1, r1, r3
 8000a02:	b2a3      	uxth	r3, r4
 8000a04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a10:	fb08 f800 	mul.w	r8, r8, r0
 8000a14:	45a0      	cmp	r8, r4
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x10c>
 8000a18:	193c      	adds	r4, r7, r4
 8000a1a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x10a>
 8000a20:	45a0      	cmp	r8, r4
 8000a22:	f200 80d9 	bhi.w	8000bd8 <__udivmoddi4+0x2bc>
 8000a26:	4618      	mov	r0, r3
 8000a28:	eba4 0408 	sub.w	r4, r4, r8
 8000a2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a30:	e7bf      	b.n	80009b2 <__udivmoddi4+0x96>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d909      	bls.n	8000a4a <__udivmoddi4+0x12e>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	f000 80b1 	beq.w	8000b9e <__udivmoddi4+0x282>
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a42:	4630      	mov	r0, r6
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	fab3 f683 	clz	r6, r3
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d14a      	bne.n	8000ae8 <__udivmoddi4+0x1cc>
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d302      	bcc.n	8000a5c <__udivmoddi4+0x140>
 8000a56:	4282      	cmp	r2, r0
 8000a58:	f200 80b8 	bhi.w	8000bcc <__udivmoddi4+0x2b0>
 8000a5c:	1a84      	subs	r4, r0, r2
 8000a5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a62:	2001      	movs	r0, #1
 8000a64:	468c      	mov	ip, r1
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d0a8      	beq.n	80009bc <__udivmoddi4+0xa0>
 8000a6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a6e:	e7a5      	b.n	80009bc <__udivmoddi4+0xa0>
 8000a70:	f1c2 0320 	rsb	r3, r2, #32
 8000a74:	fa20 f603 	lsr.w	r6, r0, r3
 8000a78:	4097      	lsls	r7, r2
 8000a7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a82:	40d9      	lsrs	r1, r3
 8000a84:	4330      	orrs	r0, r6
 8000a86:	0c03      	lsrs	r3, r0, #16
 8000a88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a98:	fb06 f108 	mul.w	r1, r6, r8
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000aa2:	d909      	bls.n	8000ab8 <__udivmoddi4+0x19c>
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000aaa:	f080 808d 	bcs.w	8000bc8 <__udivmoddi4+0x2ac>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 808a 	bls.w	8000bc8 <__udivmoddi4+0x2ac>
 8000ab4:	3e02      	subs	r6, #2
 8000ab6:	443b      	add	r3, r7
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	b281      	uxth	r1, r0
 8000abc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac8:	fb00 f308 	mul.w	r3, r0, r8
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x1c4>
 8000ad0:	1879      	adds	r1, r7, r1
 8000ad2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ad6:	d273      	bcs.n	8000bc0 <__udivmoddi4+0x2a4>
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d971      	bls.n	8000bc0 <__udivmoddi4+0x2a4>
 8000adc:	3802      	subs	r0, #2
 8000ade:	4439      	add	r1, r7
 8000ae0:	1acb      	subs	r3, r1, r3
 8000ae2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ae6:	e778      	b.n	80009da <__udivmoddi4+0xbe>
 8000ae8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aec:	fa03 f406 	lsl.w	r4, r3, r6
 8000af0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000af4:	431c      	orrs	r4, r3
 8000af6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000afa:	fa01 f306 	lsl.w	r3, r1, r6
 8000afe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b06:	431f      	orrs	r7, r3
 8000b08:	0c3b      	lsrs	r3, r7, #16
 8000b0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b0e:	fa1f f884 	uxth.w	r8, r4
 8000b12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b1e:	458a      	cmp	sl, r1
 8000b20:	fa02 f206 	lsl.w	r2, r2, r6
 8000b24:	fa00 f306 	lsl.w	r3, r0, r6
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x220>
 8000b2a:	1861      	adds	r1, r4, r1
 8000b2c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000b30:	d248      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b32:	458a      	cmp	sl, r1
 8000b34:	d946      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b36:	f1a9 0902 	sub.w	r9, r9, #2
 8000b3a:	4421      	add	r1, r4
 8000b3c:	eba1 010a 	sub.w	r1, r1, sl
 8000b40:	b2bf      	uxth	r7, r7
 8000b42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b4e:	fb00 f808 	mul.w	r8, r0, r8
 8000b52:	45b8      	cmp	r8, r7
 8000b54:	d907      	bls.n	8000b66 <__udivmoddi4+0x24a>
 8000b56:	19e7      	adds	r7, r4, r7
 8000b58:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b5c:	d22e      	bcs.n	8000bbc <__udivmoddi4+0x2a0>
 8000b5e:	45b8      	cmp	r8, r7
 8000b60:	d92c      	bls.n	8000bbc <__udivmoddi4+0x2a0>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4427      	add	r7, r4
 8000b66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b6a:	eba7 0708 	sub.w	r7, r7, r8
 8000b6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b72:	454f      	cmp	r7, r9
 8000b74:	46c6      	mov	lr, r8
 8000b76:	4649      	mov	r1, r9
 8000b78:	d31a      	bcc.n	8000bb0 <__udivmoddi4+0x294>
 8000b7a:	d017      	beq.n	8000bac <__udivmoddi4+0x290>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x27a>
 8000b7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b82:	eb67 0701 	sbc.w	r7, r7, r1
 8000b86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b8a:	40f2      	lsrs	r2, r6
 8000b8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b90:	40f7      	lsrs	r7, r6
 8000b92:	e9c5 2700 	strd	r2, r7, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	462e      	mov	r6, r5
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	e70b      	b.n	80009bc <__udivmoddi4+0xa0>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	e6e9      	b.n	800097c <__udivmoddi4+0x60>
 8000ba8:	4618      	mov	r0, r3
 8000baa:	e6fd      	b.n	80009a8 <__udivmoddi4+0x8c>
 8000bac:	4543      	cmp	r3, r8
 8000bae:	d2e5      	bcs.n	8000b7c <__udivmoddi4+0x260>
 8000bb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000bb8:	3801      	subs	r0, #1
 8000bba:	e7df      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e7d2      	b.n	8000b66 <__udivmoddi4+0x24a>
 8000bc0:	4660      	mov	r0, ip
 8000bc2:	e78d      	b.n	8000ae0 <__udivmoddi4+0x1c4>
 8000bc4:	4681      	mov	r9, r0
 8000bc6:	e7b9      	b.n	8000b3c <__udivmoddi4+0x220>
 8000bc8:	4666      	mov	r6, ip
 8000bca:	e775      	b.n	8000ab8 <__udivmoddi4+0x19c>
 8000bcc:	4630      	mov	r0, r6
 8000bce:	e74a      	b.n	8000a66 <__udivmoddi4+0x14a>
 8000bd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bd4:	4439      	add	r1, r7
 8000bd6:	e713      	b.n	8000a00 <__udivmoddi4+0xe4>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	e724      	b.n	8000a28 <__udivmoddi4+0x10c>
 8000bde:	bf00      	nop

08000be0 <__aeabi_idiv0>:
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bee:	2003      	movs	r0, #3
 8000bf0:	f000 f980 	bl	8000ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f000 f80d 	bl	8000c14 <HAL_InitTick>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d002      	beq.n	8000c06 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	e001      	b.n	8000c0a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c06:	f009 f909 	bl	8009e1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_InitTick+0x6c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d023      	beq.n	8000c70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <HAL_InitTick+0x70>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_InitTick+0x6c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f98d 	bl	8000f5e <HAL_SYSTICK_Config>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d10f      	bne.n	8000c6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b0f      	cmp	r3, #15
 8000c4e:	d809      	bhi.n	8000c64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c50:	2200      	movs	r2, #0
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c58:	f000 f957 	bl	8000f0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_InitTick+0x74>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	e007      	b.n	8000c74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e004      	b.n	8000c74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e001      	b.n	8000c74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000004 	.word	0x20000004
 8000c84:	20000144 	.word	0x20000144
 8000c88:	20000000 	.word	0x20000000

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000004 	.word	0x20000004
 8000cb0:	2000025c 	.word	0x2000025c

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	2000025c 	.word	0x2000025c

08000ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd4:	f7ff ffee 	bl	8000cb4 <HAL_GetTick>
 8000cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ce4:	d005      	beq.n	8000cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_Delay+0x44>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf2:	bf00      	nop
 8000cf4:	f7ff ffde 	bl	8000cb4 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d8f7      	bhi.n	8000cf4 <HAL_Delay+0x28>
  {
  }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_SuspendTick+0x1c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <HAL_SuspendTick+0x1c>)
 8000d1e:	f023 0302 	bic.w	r3, r3, #2
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e010 	.word	0xe000e010

08000d34 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_ResumeTick+0x1c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_ResumeTick+0x1c>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <__NVIC_EnableIRQ+0x38>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	; (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	; 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec0:	d301      	bcc.n	8000ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00f      	b.n	8000ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <SysTick_Config+0x40>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ece:	210f      	movs	r1, #15
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ed4:	f7ff ff8e 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <SysTick_Config+0x40>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <SysTick_Config+0x40>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	e000e010 	.word	0xe000e010

08000ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff29 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1c:	f7ff ff3e 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000f20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f7ff ff8e 	bl	8000e48 <NVIC_EncodePriority>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff5d 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff31 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ffa2 	bl	8000eb0 <SysTick_Config>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d101      	bne.n	8000f88 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e014      	b.n	8000fb2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	791b      	ldrb	r3, [r3, #4]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d105      	bne.n	8000f9e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f008 ff63 	bl	8009e64 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	795b      	ldrb	r3, [r3, #5]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d101      	bne.n	8000fda <HAL_DAC_Start_DMA+0x1e>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e0ab      	b.n	8001132 <HAL_DAC_Start_DMA+0x176>
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d12f      	bne.n	800104c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	4a52      	ldr	r2, [pc, #328]	; (800113c <HAL_DAC_Start_DMA+0x180>)
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	4a51      	ldr	r2, [pc, #324]	; (8001140 <HAL_DAC_Start_DMA+0x184>)
 8000ffa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	4a50      	ldr	r2, [pc, #320]	; (8001144 <HAL_DAC_Start_DMA+0x188>)
 8001002:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001012:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001014:	6a3b      	ldr	r3, [r7, #32]
 8001016:	2b08      	cmp	r3, #8
 8001018:	d013      	beq.n	8001042 <HAL_DAC_Start_DMA+0x86>
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	2b08      	cmp	r3, #8
 800101e:	d845      	bhi.n	80010ac <HAL_DAC_Start_DMA+0xf0>
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_DAC_Start_DMA+0x72>
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	2b04      	cmp	r3, #4
 800102a:	d005      	beq.n	8001038 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800102c:	e03e      	b.n	80010ac <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3308      	adds	r3, #8
 8001034:	613b      	str	r3, [r7, #16]
        break;
 8001036:	e03c      	b.n	80010b2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	330c      	adds	r3, #12
 800103e:	613b      	str	r3, [r7, #16]
        break;
 8001040:	e037      	b.n	80010b2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	3310      	adds	r3, #16
 8001048:	613b      	str	r3, [r7, #16]
        break;
 800104a:	e032      	b.n	80010b2 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	4a3d      	ldr	r2, [pc, #244]	; (8001148 <HAL_DAC_Start_DMA+0x18c>)
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	4a3c      	ldr	r2, [pc, #240]	; (800114c <HAL_DAC_Start_DMA+0x190>)
 800105a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	4a3b      	ldr	r2, [pc, #236]	; (8001150 <HAL_DAC_Start_DMA+0x194>)
 8001062:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001072:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001074:	6a3b      	ldr	r3, [r7, #32]
 8001076:	2b08      	cmp	r3, #8
 8001078:	d013      	beq.n	80010a2 <HAL_DAC_Start_DMA+0xe6>
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	2b08      	cmp	r3, #8
 800107e:	d817      	bhi.n	80010b0 <HAL_DAC_Start_DMA+0xf4>
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_DAC_Start_DMA+0xd2>
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	2b04      	cmp	r3, #4
 800108a:	d005      	beq.n	8001098 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800108c:	e010      	b.n	80010b0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3314      	adds	r3, #20
 8001094:	613b      	str	r3, [r7, #16]
        break;
 8001096:	e00c      	b.n	80010b2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3318      	adds	r3, #24
 800109e:	613b      	str	r3, [r7, #16]
        break;
 80010a0:	e007      	b.n	80010b2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	331c      	adds	r3, #28
 80010a8:	613b      	str	r3, [r7, #16]
        break;
 80010aa:	e002      	b.n	80010b2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80010ac:	bf00      	nop
 80010ae:	e000      	b.n	80010b2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80010b0:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d111      	bne.n	80010dc <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6898      	ldr	r0, [r3, #8]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	f000 faff 	bl	80016d4 <HAL_DMA_Start_IT>
 80010d6:	4603      	mov	r3, r0
 80010d8:	75fb      	strb	r3, [r7, #23]
 80010da:	e010      	b.n	80010fe <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80010ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	68d8      	ldr	r0, [r3, #12]
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	f000 faed 	bl	80016d4 <HAL_DMA_Start_IT>
 80010fa:	4603      	mov	r3, r0
 80010fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10c      	bne.n	8001124 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6819      	ldr	r1, [r3, #0]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	2201      	movs	r2, #1
 8001118:	409a      	lsls	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	430a      	orrs	r2, r1
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	e005      	b.n	8001130 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	f043 0204 	orr.w	r2, r3, #4
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001130:	7dfb      	ldrb	r3, [r7, #23]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	0800144f 	.word	0x0800144f
 8001140:	08001471 	.word	0x08001471
 8001144:	0800148d 	.word	0x0800148d
 8001148:	080014f7 	.word	0x080014f7
 800114c:	08001519 	.word	0x08001519
 8001150:	08001535 	.word	0x08001535

08001154 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6819      	ldr	r1, [r3, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	f003 0310 	and.w	r3, r3, #16
 800116a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	400a      	ands	r2, r1
 800117a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6819      	ldr	r1, [r3, #0]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f003 0310 	and.w	r3, r3, #16
 8001188:	2201      	movs	r2, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	400a      	ands	r2, r1
 8001196:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10d      	bne.n	80011ba <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 faf6 	bl	8001794 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e00c      	b.n	80011d4 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fae8 	bl	8001794 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80011d2:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b088      	sub	sp, #32
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	795b      	ldrb	r3, [r3, #5]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d101      	bne.n	8001236 <HAL_DAC_ConfigChannel+0x1c>
 8001232:	2302      	movs	r3, #2
 8001234:	e107      	b.n	8001446 <HAL_DAC_ConfigChannel+0x22c>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2201      	movs	r2, #1
 800123a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2202      	movs	r2, #2
 8001240:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b04      	cmp	r3, #4
 8001248:	d174      	bne.n	8001334 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800124a:	f7ff fd33 	bl	8000cb4 <HAL_GetTick>
 800124e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d134      	bne.n	80012c0 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001256:	e011      	b.n	800127c <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001258:	f7ff fd2c 	bl	8000cb4 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b01      	cmp	r3, #1
 8001264:	d90a      	bls.n	800127c <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	f043 0208 	orr.w	r2, r3, #8
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2203      	movs	r2, #3
 8001276:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e0e4      	b.n	8001446 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1e6      	bne.n	8001258 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800128a:	2001      	movs	r0, #1
 800128c:	f7ff fd1e 	bl	8000ccc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	6992      	ldr	r2, [r2, #24]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
 800129a:	e01e      	b.n	80012da <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800129c:	f7ff fd0a 	bl	8000cb4 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d90a      	bls.n	80012c0 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	f043 0208 	orr.w	r2, r3, #8
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2203      	movs	r2, #3
 80012ba:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e0c2      	b.n	8001446 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	dbe8      	blt.n	800129c <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80012ca:	2001      	movs	r0, #1
 80012cc:	f7ff fcfe 	bl	8000ccc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	6992      	ldr	r2, [r2, #24]
 80012d8:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	ea02 0103 	and.w	r1, r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	69da      	ldr	r2, [r3, #28]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	409a      	lsls	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	21ff      	movs	r1, #255	; 0xff
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	ea02 0103 	and.w	r1, r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	409a      	lsls	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d11d      	bne.n	8001378 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001342:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	221f      	movs	r2, #31
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	2207      	movs	r2, #7
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	431a      	orrs	r2, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6819      	ldr	r1, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f003 0310 	and.w	r3, r3, #16
 80013cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43da      	mvns	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	400a      	ands	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	f640 72fc 	movw	r2, #4092	; 0xffc
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6819      	ldr	r1, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	22c0      	movs	r2, #192	; 0xc0
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	400a      	ands	r2, r1
 8001436:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2201      	movs	r2, #1
 800143c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3720      	adds	r7, #32
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b084      	sub	sp, #16
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f7ff febe 	bl	80011de <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2201      	movs	r2, #1
 8001466:	711a      	strb	r2, [r3, #4]
}
 8001468:	bf00      	nop
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f7ff feb7 	bl	80011f2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	f043 0204 	orr.w	r2, r3, #4
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f7ff fead 	bl	8001206 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2201      	movs	r2, #1
 80014b0:	711a      	strb	r2, [r3, #4]
}
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f7ff ffd8 	bl	80014ba <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2201      	movs	r2, #1
 800150e:	711a      	strb	r2, [r3, #4]
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001524:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f7ff ffd1 	bl	80014ce <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	f043 0204 	orr.w	r2, r3, #4
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f7ff ffc7 	bl	80014e2 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2201      	movs	r2, #1
 8001558:	711a      	strb	r2, [r3, #4]
}
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e098      	b.n	80016a8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	4b4d      	ldr	r3, [pc, #308]	; (80016b4 <HAL_DMA_Init+0x150>)
 800157e:	429a      	cmp	r2, r3
 8001580:	d80f      	bhi.n	80015a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	4b4b      	ldr	r3, [pc, #300]	; (80016b8 <HAL_DMA_Init+0x154>)
 800158a:	4413      	add	r3, r2
 800158c:	4a4b      	ldr	r2, [pc, #300]	; (80016bc <HAL_DMA_Init+0x158>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	009a      	lsls	r2, r3, #2
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a48      	ldr	r2, [pc, #288]	; (80016c0 <HAL_DMA_Init+0x15c>)
 800159e:	641a      	str	r2, [r3, #64]	; 0x40
 80015a0:	e00e      	b.n	80015c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b46      	ldr	r3, [pc, #280]	; (80016c4 <HAL_DMA_Init+0x160>)
 80015aa:	4413      	add	r3, r2
 80015ac:	4a43      	ldr	r2, [pc, #268]	; (80016bc <HAL_DMA_Init+0x158>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	091b      	lsrs	r3, r3, #4
 80015b4:	009a      	lsls	r2, r3, #2
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a42      	ldr	r2, [pc, #264]	; (80016c8 <HAL_DMA_Init+0x164>)
 80015be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2202      	movs	r2, #2
 80015c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800161a:	d039      	beq.n	8001690 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	4a27      	ldr	r2, [pc, #156]	; (80016c0 <HAL_DMA_Init+0x15c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d11a      	bne.n	800165c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001626:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_DMA_Init+0x168>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f003 031c 	and.w	r3, r3, #28
 8001632:	210f      	movs	r1, #15
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	4924      	ldr	r1, [pc, #144]	; (80016cc <HAL_DMA_Init+0x168>)
 800163c:	4013      	ands	r3, r2
 800163e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <HAL_DMA_Init+0x168>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164c:	f003 031c 	and.w	r3, r3, #28
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	491d      	ldr	r1, [pc, #116]	; (80016cc <HAL_DMA_Init+0x168>)
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]
 800165a:	e019      	b.n	8001690 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <HAL_DMA_Init+0x16c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001664:	f003 031c 	and.w	r3, r3, #28
 8001668:	210f      	movs	r1, #15
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	4917      	ldr	r1, [pc, #92]	; (80016d0 <HAL_DMA_Init+0x16c>)
 8001672:	4013      	ands	r3, r2
 8001674:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_DMA_Init+0x16c>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6859      	ldr	r1, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f003 031c 	and.w	r3, r3, #28
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	4911      	ldr	r1, [pc, #68]	; (80016d0 <HAL_DMA_Init+0x16c>)
 800168c:	4313      	orrs	r3, r2
 800168e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40020407 	.word	0x40020407
 80016b8:	bffdfff8 	.word	0xbffdfff8
 80016bc:	cccccccd 	.word	0xcccccccd
 80016c0:	40020000 	.word	0x40020000
 80016c4:	bffdfbf8 	.word	0xbffdfbf8
 80016c8:	40020400 	.word	0x40020400
 80016cc:	400200a8 	.word	0x400200a8
 80016d0:	400204a8 	.word	0x400204a8

080016d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_DMA_Start_IT+0x20>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e04b      	b.n	800178c <HAL_DMA_Start_IT+0xb8>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b01      	cmp	r3, #1
 8001706:	d13a      	bne.n	800177e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2202      	movs	r2, #2
 800170c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0201 	bic.w	r2, r2, #1
 8001724:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 f91e 	bl	800196e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	2b00      	cmp	r3, #0
 8001738:	d008      	beq.n	800174c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 020e 	orr.w	r2, r2, #14
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e00f      	b.n	800176c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0204 	bic.w	r2, r2, #4
 800175a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 020a 	orr.w	r2, r2, #10
 800176a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	e005      	b.n	800178a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001786:	2302      	movs	r3, #2
 8001788:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800178a:	7dfb      	ldrb	r3, [r7, #23]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d008      	beq.n	80017be <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2204      	movs	r2, #4
 80017b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e022      	b.n	8001804 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 020e 	bic.w	r2, r2, #14
 80017cc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0201 	bic.w	r2, r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f003 021c 	and.w	r2, r3, #28
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	2101      	movs	r1, #1
 80017ec:	fa01 f202 	lsl.w	r2, r1, r2
 80017f0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182c:	f003 031c 	and.w	r3, r3, #28
 8001830:	2204      	movs	r2, #4
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d026      	beq.n	800188a <HAL_DMA_IRQHandler+0x7a>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b00      	cmp	r3, #0
 8001844:	d021      	beq.n	800188a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0320 	and.w	r3, r3, #32
 8001850:	2b00      	cmp	r3, #0
 8001852:	d107      	bne.n	8001864 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0204 	bic.w	r2, r2, #4
 8001862:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	f003 021c 	and.w	r2, r3, #28
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	2104      	movs	r1, #4
 8001872:	fa01 f202 	lsl.w	r2, r1, r2
 8001876:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	2b00      	cmp	r3, #0
 800187e:	d071      	beq.n	8001964 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001888:	e06c      	b.n	8001964 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f003 031c 	and.w	r3, r3, #28
 8001892:	2202      	movs	r2, #2
 8001894:	409a      	lsls	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4013      	ands	r3, r2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d02e      	beq.n	80018fc <HAL_DMA_IRQHandler+0xec>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d029      	beq.n	80018fc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0320 	and.w	r3, r3, #32
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10b      	bne.n	80018ce <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 020a 	bic.w	r2, r2, #10
 80018c4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	f003 021c 	and.w	r2, r3, #28
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	2102      	movs	r1, #2
 80018dc:	fa01 f202 	lsl.w	r2, r1, r2
 80018e0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d038      	beq.n	8001964 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018fa:	e033      	b.n	8001964 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	f003 031c 	and.w	r3, r3, #28
 8001904:	2208      	movs	r2, #8
 8001906:	409a      	lsls	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d02a      	beq.n	8001966 <HAL_DMA_IRQHandler+0x156>
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d025      	beq.n	8001966 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 020e 	bic.w	r2, r2, #14
 8001928:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f003 021c 	and.w	r2, r3, #28
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f202 	lsl.w	r2, r1, r2
 800193c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001958:	2b00      	cmp	r3, #0
 800195a:	d004      	beq.n	8001966 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001964:	bf00      	nop
 8001966:	bf00      	nop
}
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800196e:	b480      	push	{r7}
 8001970:	b085      	sub	sp, #20
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001980:	f003 021c 	and.w	r2, r3, #28
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	2101      	movs	r1, #1
 800198a:	fa01 f202 	lsl.w	r2, r1, r2
 800198e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b10      	cmp	r3, #16
 800199e:	d108      	bne.n	80019b2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019b0:	e007      	b.n	80019c2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	60da      	str	r2, [r3, #12]
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019de:	e17f      	b.n	8001ce0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2101      	movs	r1, #1
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 8171 	beq.w	8001cda <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d00b      	beq.n	8001a18 <HAL_GPIO_Init+0x48>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d007      	beq.n	8001a18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a0c:	2b11      	cmp	r3, #17
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b12      	cmp	r3, #18
 8001a16:	d130      	bne.n	8001a7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a4e:	2201      	movs	r2, #1
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	f003 0201 	and.w	r2, r3, #1
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d118      	bne.n	8001ab8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	08db      	lsrs	r3, r3, #3
 8001aa2:	f003 0201 	and.w	r2, r3, #1
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x128>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b12      	cmp	r3, #18
 8001af6:	d123      	bne.n	8001b40 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	08da      	lsrs	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3208      	adds	r2, #8
 8001b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	220f      	movs	r2, #15
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	08da      	lsrs	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3208      	adds	r2, #8
 8001b3a:	6939      	ldr	r1, [r7, #16]
 8001b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0203 	and.w	r2, r3, #3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 80ac 	beq.w	8001cda <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	4b5f      	ldr	r3, [pc, #380]	; (8001d00 <HAL_GPIO_Init+0x330>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b86:	4a5e      	ldr	r2, [pc, #376]	; (8001d00 <HAL_GPIO_Init+0x330>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b8e:	4b5c      	ldr	r3, [pc, #368]	; (8001d00 <HAL_GPIO_Init+0x330>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b9a:	4a5a      	ldr	r2, [pc, #360]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bc4:	d025      	beq.n	8001c12 <HAL_GPIO_Init+0x242>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4f      	ldr	r2, [pc, #316]	; (8001d08 <HAL_GPIO_Init+0x338>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d01f      	beq.n	8001c0e <HAL_GPIO_Init+0x23e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4e      	ldr	r2, [pc, #312]	; (8001d0c <HAL_GPIO_Init+0x33c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d019      	beq.n	8001c0a <HAL_GPIO_Init+0x23a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4d      	ldr	r2, [pc, #308]	; (8001d10 <HAL_GPIO_Init+0x340>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d013      	beq.n	8001c06 <HAL_GPIO_Init+0x236>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4c      	ldr	r2, [pc, #304]	; (8001d14 <HAL_GPIO_Init+0x344>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d00d      	beq.n	8001c02 <HAL_GPIO_Init+0x232>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4b      	ldr	r2, [pc, #300]	; (8001d18 <HAL_GPIO_Init+0x348>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d007      	beq.n	8001bfe <HAL_GPIO_Init+0x22e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4a      	ldr	r2, [pc, #296]	; (8001d1c <HAL_GPIO_Init+0x34c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d101      	bne.n	8001bfa <HAL_GPIO_Init+0x22a>
 8001bf6:	2306      	movs	r3, #6
 8001bf8:	e00c      	b.n	8001c14 <HAL_GPIO_Init+0x244>
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	e00a      	b.n	8001c14 <HAL_GPIO_Init+0x244>
 8001bfe:	2305      	movs	r3, #5
 8001c00:	e008      	b.n	8001c14 <HAL_GPIO_Init+0x244>
 8001c02:	2304      	movs	r3, #4
 8001c04:	e006      	b.n	8001c14 <HAL_GPIO_Init+0x244>
 8001c06:	2303      	movs	r3, #3
 8001c08:	e004      	b.n	8001c14 <HAL_GPIO_Init+0x244>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e002      	b.n	8001c14 <HAL_GPIO_Init+0x244>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <HAL_GPIO_Init+0x244>
 8001c12:	2300      	movs	r3, #0
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	f002 0203 	and.w	r2, r2, #3
 8001c1a:	0092      	lsls	r2, r2, #2
 8001c1c:	4093      	lsls	r3, r2
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c24:	4937      	ldr	r1, [pc, #220]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c32:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <HAL_GPIO_Init+0x350>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c56:	4a32      	ldr	r2, [pc, #200]	; (8001d20 <HAL_GPIO_Init+0x350>)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c5c:	4b30      	ldr	r3, [pc, #192]	; (8001d20 <HAL_GPIO_Init+0x350>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c80:	4a27      	ldr	r2, [pc, #156]	; (8001d20 <HAL_GPIO_Init+0x350>)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <HAL_GPIO_Init+0x350>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001caa:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <HAL_GPIO_Init+0x350>)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_GPIO_Init+0x350>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cd4:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <HAL_GPIO_Init+0x350>)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f47f ae78 	bne.w	80019e0 <HAL_GPIO_Init+0x10>
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	371c      	adds	r7, #28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010000 	.word	0x40010000
 8001d08:	48000400 	.word	0x48000400
 8001d0c:	48000800 	.word	0x48000800
 8001d10:	48000c00 	.word	0x48000c00
 8001d14:	48001000 	.word	0x48001000
 8001d18:	48001400 	.word	0x48001400
 8001d1c:	48001800 	.word	0x48001800
 8001d20:	40010400 	.word	0x40010400

08001d24 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001d32:	e0cd      	b.n	8001ed0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001d34:	2201      	movs	r2, #1
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80c0 	beq.w	8001eca <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001d4a:	4a68      	ldr	r2, [pc, #416]	; (8001eec <HAL_GPIO_DeInit+0x1c8>)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d56:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d72:	d025      	beq.n	8001dc0 <HAL_GPIO_DeInit+0x9c>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a5e      	ldr	r2, [pc, #376]	; (8001ef0 <HAL_GPIO_DeInit+0x1cc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d01f      	beq.n	8001dbc <HAL_GPIO_DeInit+0x98>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a5d      	ldr	r2, [pc, #372]	; (8001ef4 <HAL_GPIO_DeInit+0x1d0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d019      	beq.n	8001db8 <HAL_GPIO_DeInit+0x94>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a5c      	ldr	r2, [pc, #368]	; (8001ef8 <HAL_GPIO_DeInit+0x1d4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d013      	beq.n	8001db4 <HAL_GPIO_DeInit+0x90>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a5b      	ldr	r2, [pc, #364]	; (8001efc <HAL_GPIO_DeInit+0x1d8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00d      	beq.n	8001db0 <HAL_GPIO_DeInit+0x8c>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a5a      	ldr	r2, [pc, #360]	; (8001f00 <HAL_GPIO_DeInit+0x1dc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d007      	beq.n	8001dac <HAL_GPIO_DeInit+0x88>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a59      	ldr	r2, [pc, #356]	; (8001f04 <HAL_GPIO_DeInit+0x1e0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_GPIO_DeInit+0x84>
 8001da4:	2306      	movs	r3, #6
 8001da6:	e00c      	b.n	8001dc2 <HAL_GPIO_DeInit+0x9e>
 8001da8:	2307      	movs	r3, #7
 8001daa:	e00a      	b.n	8001dc2 <HAL_GPIO_DeInit+0x9e>
 8001dac:	2305      	movs	r3, #5
 8001dae:	e008      	b.n	8001dc2 <HAL_GPIO_DeInit+0x9e>
 8001db0:	2304      	movs	r3, #4
 8001db2:	e006      	b.n	8001dc2 <HAL_GPIO_DeInit+0x9e>
 8001db4:	2303      	movs	r3, #3
 8001db6:	e004      	b.n	8001dc2 <HAL_GPIO_DeInit+0x9e>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e002      	b.n	8001dc2 <HAL_GPIO_DeInit+0x9e>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <HAL_GPIO_DeInit+0x9e>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	f002 0203 	and.w	r2, r2, #3
 8001dc8:	0092      	lsls	r2, r2, #2
 8001dca:	4093      	lsls	r3, r2
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d132      	bne.n	8001e38 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001dd2:	4b4d      	ldr	r3, [pc, #308]	; (8001f08 <HAL_GPIO_DeInit+0x1e4>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	494b      	ldr	r1, [pc, #300]	; (8001f08 <HAL_GPIO_DeInit+0x1e4>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001de0:	4b49      	ldr	r3, [pc, #292]	; (8001f08 <HAL_GPIO_DeInit+0x1e4>)
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	4947      	ldr	r1, [pc, #284]	; (8001f08 <HAL_GPIO_DeInit+0x1e4>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001dee:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <HAL_GPIO_DeInit+0x1e4>)
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4944      	ldr	r1, [pc, #272]	; (8001f08 <HAL_GPIO_DeInit+0x1e4>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001dfc:	4b42      	ldr	r3, [pc, #264]	; (8001f08 <HAL_GPIO_DeInit+0x1e4>)
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	4940      	ldr	r1, [pc, #256]	; (8001f08 <HAL_GPIO_DeInit+0x1e4>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	220f      	movs	r2, #15
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001e1a:	4a34      	ldr	r2, [pc, #208]	; (8001eec <HAL_GPIO_DeInit+0x1c8>)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	3302      	adds	r3, #2
 8001e22:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	43da      	mvns	r2, r3
 8001e2a:	4830      	ldr	r0, [pc, #192]	; (8001eec <HAL_GPIO_DeInit+0x1c8>)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	400a      	ands	r2, r1
 8001e32:	3302      	adds	r3, #2
 8001e34:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	2103      	movs	r1, #3
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	08da      	lsrs	r2, r3, #3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3208      	adds	r2, #8
 8001e54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	220f      	movs	r2, #15
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	08d2      	lsrs	r2, r2, #3
 8001e6c:	4019      	ands	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3208      	adds	r2, #8
 8001e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2103      	movs	r1, #3
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	2101      	movs	r1, #1
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2103      	movs	r1, #3
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eba:	2101      	movs	r1, #1
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f47f af2b 	bne.w	8001d34 <HAL_GPIO_DeInit+0x10>
  }
}
 8001ede:	bf00      	nop
 8001ee0:	bf00      	nop
 8001ee2:	371c      	adds	r7, #28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	40010000 	.word	0x40010000
 8001ef0:	48000400 	.word	0x48000400
 8001ef4:	48000800 	.word	0x48000800
 8001ef8:	48000c00 	.word	0x48000c00
 8001efc:	48001000 	.word	0x48001000
 8001f00:	48001400 	.word	0x48001400
 8001f04:	48001800 	.word	0x48001800
 8001f08:	40010400 	.word	0x40010400

08001f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	807b      	strh	r3, [r7, #2]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f1c:	787b      	ldrb	r3, [r7, #1]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f28:	e002      	b.n	8001f30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d006      	beq.n	8001f60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f007 fd58 	bl	8009a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40010400 	.word	0x40010400

08001f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e081      	b.n	8002082 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f007 ffd2 	bl	8009f3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2224      	movs	r2, #36	; 0x24
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d107      	bne.n	8001fe6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	e006      	b.n	8001ff4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ff2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d104      	bne.n	8002006 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002004:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002018:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002028:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691a      	ldr	r2, [r3, #16]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	ea42 0103 	orr.w	r1, r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	021a      	lsls	r2, r3, #8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69d9      	ldr	r1, [r3, #28]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1a      	ldr	r2, [r3, #32]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e021      	b.n	80020e0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2224      	movs	r2, #36	; 0x24
 80020a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0201 	bic.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f007 ff9f 	bl	8009ff8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	4608      	mov	r0, r1
 80020f2:	4611      	mov	r1, r2
 80020f4:	461a      	mov	r2, r3
 80020f6:	4603      	mov	r3, r0
 80020f8:	817b      	strh	r3, [r7, #10]
 80020fa:	460b      	mov	r3, r1
 80020fc:	813b      	strh	r3, [r7, #8]
 80020fe:	4613      	mov	r3, r2
 8002100:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b20      	cmp	r3, #32
 800210c:	f040 80f9 	bne.w	8002302 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <HAL_I2C_Mem_Write+0x34>
 8002116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002118:	2b00      	cmp	r3, #0
 800211a:	d105      	bne.n	8002128 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002122:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0ed      	b.n	8002304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_I2C_Mem_Write+0x4e>
 8002132:	2302      	movs	r3, #2
 8002134:	e0e6      	b.n	8002304 <HAL_I2C_Mem_Write+0x21c>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800213e:	f7fe fdb9 	bl	8000cb4 <HAL_GetTick>
 8002142:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	2319      	movs	r3, #25
 800214a:	2201      	movs	r2, #1
 800214c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fac3 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0d1      	b.n	8002304 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2221      	movs	r2, #33	; 0x21
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2240      	movs	r2, #64	; 0x40
 800216c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a3a      	ldr	r2, [r7, #32]
 800217a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002180:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002188:	88f8      	ldrh	r0, [r7, #6]
 800218a:	893a      	ldrh	r2, [r7, #8]
 800218c:	8979      	ldrh	r1, [r7, #10]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	4603      	mov	r3, r0
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 f9d3 	bl	8002544 <I2C_RequestMemoryWrite>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0a9      	b.n	8002304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2bff      	cmp	r3, #255	; 0xff
 80021b8:	d90e      	bls.n	80021d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	22ff      	movs	r2, #255	; 0xff
 80021be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	8979      	ldrh	r1, [r7, #10]
 80021c8:	2300      	movs	r3, #0
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 fba5 	bl	8002920 <I2C_TransferConfig>
 80021d6:	e00f      	b.n	80021f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	8979      	ldrh	r1, [r7, #10]
 80021ea:	2300      	movs	r3, #0
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 fb94 	bl	8002920 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f000 faad 	bl	800275c <I2C_WaitOnTXISFlagUntilTimeout>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e07b      	b.n	8002304 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002240:	b29b      	uxth	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d034      	beq.n	80022b0 <HAL_I2C_Mem_Write+0x1c8>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224a:	2b00      	cmp	r3, #0
 800224c:	d130      	bne.n	80022b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002254:	2200      	movs	r2, #0
 8002256:	2180      	movs	r1, #128	; 0x80
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 fa3f 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e04d      	b.n	8002304 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226c:	b29b      	uxth	r3, r3
 800226e:	2bff      	cmp	r3, #255	; 0xff
 8002270:	d90e      	bls.n	8002290 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	22ff      	movs	r2, #255	; 0xff
 8002276:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227c:	b2da      	uxtb	r2, r3
 800227e:	8979      	ldrh	r1, [r7, #10]
 8002280:	2300      	movs	r3, #0
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 fb49 	bl	8002920 <I2C_TransferConfig>
 800228e:	e00f      	b.n	80022b0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	8979      	ldrh	r1, [r7, #10]
 80022a2:	2300      	movs	r3, #0
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 fb38 	bl	8002920 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d19e      	bne.n	80021f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 fa8c 	bl	80027dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e01a      	b.n	8002304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2220      	movs	r2, #32
 80022d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_I2C_Mem_Write+0x224>)
 80022e2:	400b      	ands	r3, r1
 80022e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2220      	movs	r2, #32
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002302:	2302      	movs	r3, #2
  }
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	fe00e800 	.word	0xfe00e800

08002310 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	4608      	mov	r0, r1
 800231a:	4611      	mov	r1, r2
 800231c:	461a      	mov	r2, r3
 800231e:	4603      	mov	r3, r0
 8002320:	817b      	strh	r3, [r7, #10]
 8002322:	460b      	mov	r3, r1
 8002324:	813b      	strh	r3, [r7, #8]
 8002326:	4613      	mov	r3, r2
 8002328:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b20      	cmp	r3, #32
 8002334:	f040 80fd 	bne.w	8002532 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_I2C_Mem_Read+0x34>
 800233e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002340:	2b00      	cmp	r3, #0
 8002342:	d105      	bne.n	8002350 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800234a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0f1      	b.n	8002534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_I2C_Mem_Read+0x4e>
 800235a:	2302      	movs	r3, #2
 800235c:	e0ea      	b.n	8002534 <HAL_I2C_Mem_Read+0x224>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002366:	f7fe fca5 	bl	8000cb4 <HAL_GetTick>
 800236a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2319      	movs	r3, #25
 8002372:	2201      	movs	r2, #1
 8002374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 f9af 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0d5      	b.n	8002534 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2222      	movs	r2, #34	; 0x22
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2240      	movs	r2, #64	; 0x40
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a3a      	ldr	r2, [r7, #32]
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023b0:	88f8      	ldrh	r0, [r7, #6]
 80023b2:	893a      	ldrh	r2, [r7, #8]
 80023b4:	8979      	ldrh	r1, [r7, #10]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	4603      	mov	r3, r0
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f913 	bl	80025ec <I2C_RequestMemoryRead>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0ad      	b.n	8002534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2bff      	cmp	r3, #255	; 0xff
 80023e0:	d90e      	bls.n	8002400 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	22ff      	movs	r2, #255	; 0xff
 80023e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	8979      	ldrh	r1, [r7, #10]
 80023f0:	4b52      	ldr	r3, [pc, #328]	; (800253c <HAL_I2C_Mem_Read+0x22c>)
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fa91 	bl	8002920 <I2C_TransferConfig>
 80023fe:	e00f      	b.n	8002420 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240e:	b2da      	uxtb	r2, r3
 8002410:	8979      	ldrh	r1, [r7, #10]
 8002412:	4b4a      	ldr	r3, [pc, #296]	; (800253c <HAL_I2C_Mem_Read+0x22c>)
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fa80 	bl	8002920 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	2200      	movs	r2, #0
 8002428:	2104      	movs	r1, #4
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f956 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e07c      	b.n	8002534 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d034      	beq.n	80024e0 <HAL_I2C_Mem_Read+0x1d0>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247a:	2b00      	cmp	r3, #0
 800247c:	d130      	bne.n	80024e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002484:	2200      	movs	r2, #0
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f927 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e04d      	b.n	8002534 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249c:	b29b      	uxth	r3, r3
 800249e:	2bff      	cmp	r3, #255	; 0xff
 80024a0:	d90e      	bls.n	80024c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	22ff      	movs	r2, #255	; 0xff
 80024a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	8979      	ldrh	r1, [r7, #10]
 80024b0:	2300      	movs	r3, #0
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 fa31 	bl	8002920 <I2C_TransferConfig>
 80024be:	e00f      	b.n	80024e0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	8979      	ldrh	r1, [r7, #10]
 80024d2:	2300      	movs	r3, #0
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fa20 	bl	8002920 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d19a      	bne.n	8002420 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f974 	bl	80027dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e01a      	b.n	8002534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2220      	movs	r2, #32
 8002504:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_I2C_Mem_Read+0x230>)
 8002512:	400b      	ands	r3, r1
 8002514:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	e000      	b.n	8002534 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002532:	2302      	movs	r3, #2
  }
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	80002400 	.word	0x80002400
 8002540:	fe00e800 	.word	0xfe00e800

08002544 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af02      	add	r7, sp, #8
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	4608      	mov	r0, r1
 800254e:	4611      	mov	r1, r2
 8002550:	461a      	mov	r2, r3
 8002552:	4603      	mov	r3, r0
 8002554:	817b      	strh	r3, [r7, #10]
 8002556:	460b      	mov	r3, r1
 8002558:	813b      	strh	r3, [r7, #8]
 800255a:	4613      	mov	r3, r2
 800255c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	8979      	ldrh	r1, [r7, #10]
 8002564:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <I2C_RequestMemoryWrite+0xa4>)
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f9d7 	bl	8002920 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	69b9      	ldr	r1, [r7, #24]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f8f0 	bl	800275c <I2C_WaitOnTXISFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e02c      	b.n	80025e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d105      	bne.n	8002598 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800258c:	893b      	ldrh	r3, [r7, #8]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	629a      	str	r2, [r3, #40]	; 0x28
 8002596:	e015      	b.n	80025c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002598:	893b      	ldrh	r3, [r7, #8]
 800259a:	0a1b      	lsrs	r3, r3, #8
 800259c:	b29b      	uxth	r3, r3
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	69b9      	ldr	r1, [r7, #24]
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 f8d6 	bl	800275c <I2C_WaitOnTXISFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e012      	b.n	80025e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025ba:	893b      	ldrh	r3, [r7, #8]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2200      	movs	r2, #0
 80025cc:	2180      	movs	r1, #128	; 0x80
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f884 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	80002000 	.word	0x80002000

080025ec <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	4608      	mov	r0, r1
 80025f6:	4611      	mov	r1, r2
 80025f8:	461a      	mov	r2, r3
 80025fa:	4603      	mov	r3, r0
 80025fc:	817b      	strh	r3, [r7, #10]
 80025fe:	460b      	mov	r3, r1
 8002600:	813b      	strh	r3, [r7, #8]
 8002602:	4613      	mov	r3, r2
 8002604:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	8979      	ldrh	r1, [r7, #10]
 800260c:	4b20      	ldr	r3, [pc, #128]	; (8002690 <I2C_RequestMemoryRead+0xa4>)
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2300      	movs	r3, #0
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f984 	bl	8002920 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	69b9      	ldr	r1, [r7, #24]
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f89d 	bl	800275c <I2C_WaitOnTXISFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e02c      	b.n	8002686 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d105      	bne.n	800263e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002632:	893b      	ldrh	r3, [r7, #8]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
 800263c:	e015      	b.n	800266a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800263e:	893b      	ldrh	r3, [r7, #8]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	b29b      	uxth	r3, r3
 8002644:	b2da      	uxtb	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	69b9      	ldr	r1, [r7, #24]
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f883 	bl	800275c <I2C_WaitOnTXISFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e012      	b.n	8002686 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002660:	893b      	ldrh	r3, [r7, #8]
 8002662:	b2da      	uxtb	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2200      	movs	r2, #0
 8002672:	2140      	movs	r1, #64	; 0x40
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f831 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	80002000 	.word	0x80002000

08002694 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d103      	bne.n	80026b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2200      	movs	r2, #0
 80026b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d007      	beq.n	80026d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	619a      	str	r2, [r3, #24]
  }
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ec:	e022      	b.n	8002734 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026f4:	d01e      	beq.n	8002734 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7fe fadd 	bl	8000cb4 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d302      	bcc.n	800270c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d113      	bne.n	8002734 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002710:	f043 0220 	orr.w	r2, r3, #32
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e00f      	b.n	8002754 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	4013      	ands	r3, r2
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	429a      	cmp	r2, r3
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	429a      	cmp	r2, r3
 8002750:	d0cd      	beq.n	80026ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002768:	e02c      	b.n	80027c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f870 	bl	8002854 <I2C_IsAcknowledgeFailed>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e02a      	b.n	80027d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002784:	d01e      	beq.n	80027c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002786:	f7fe fa95 	bl	8000cb4 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	429a      	cmp	r2, r3
 8002794:	d302      	bcc.n	800279c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d113      	bne.n	80027c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	f043 0220 	orr.w	r2, r3, #32
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e007      	b.n	80027d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d1cb      	bne.n	800276a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027e8:	e028      	b.n	800283c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f830 	bl	8002854 <I2C_IsAcknowledgeFailed>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e026      	b.n	800284c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fe:	f7fe fa59 	bl	8000cb4 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	429a      	cmp	r2, r3
 800280c:	d302      	bcc.n	8002814 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d113      	bne.n	800283c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	f043 0220 	orr.w	r2, r3, #32
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e007      	b.n	800284c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b20      	cmp	r3, #32
 8002848:	d1cf      	bne.n	80027ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b10      	cmp	r3, #16
 800286c:	d151      	bne.n	8002912 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800286e:	e022      	b.n	80028b6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002876:	d01e      	beq.n	80028b6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002878:	f7fe fa1c 	bl	8000cb4 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	429a      	cmp	r2, r3
 8002886:	d302      	bcc.n	800288e <I2C_IsAcknowledgeFailed+0x3a>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d113      	bne.n	80028b6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f043 0220 	orr.w	r2, r3, #32
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e02e      	b.n	8002914 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d1d5      	bne.n	8002870 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2210      	movs	r2, #16
 80028ca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2220      	movs	r2, #32
 80028d2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f7ff fedd 	bl	8002694 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b0d      	ldr	r3, [pc, #52]	; (800291c <I2C_IsAcknowledgeFailed+0xc8>)
 80028e6:	400b      	ands	r3, r1
 80028e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f043 0204 	orr.w	r2, r3, #4
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	fe00e800 	.word	0xfe00e800

08002920 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	460b      	mov	r3, r1
 800292c:	817b      	strh	r3, [r7, #10]
 800292e:	4613      	mov	r3, r2
 8002930:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	0d5b      	lsrs	r3, r3, #21
 800293c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002940:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <I2C_TransferConfig+0x58>)
 8002942:	430b      	orrs	r3, r1
 8002944:	43db      	mvns	r3, r3
 8002946:	ea02 0103 	and.w	r1, r2, r3
 800294a:	897b      	ldrh	r3, [r7, #10]
 800294c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002950:	7a7b      	ldrb	r3, [r7, #9]
 8002952:	041b      	lsls	r3, r3, #16
 8002954:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	431a      	orrs	r2, r3
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	431a      	orrs	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	03ff63ff 	.word	0x03ff63ff

0800297c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b20      	cmp	r3, #32
 8002990:	d138      	bne.n	8002a04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800299c:	2302      	movs	r3, #2
 800299e:	e032      	b.n	8002a06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2224      	movs	r2, #36	; 0x24
 80029ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6819      	ldr	r1, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	e000      	b.n	8002a06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a04:	2302      	movs	r3, #2
  }
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d139      	bne.n	8002a9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e033      	b.n	8002a9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2224      	movs	r2, #36	; 0x24
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e000      	b.n	8002a9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a9c:	2302      	movs	r3, #2
  }
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aac:	b08f      	sub	sp, #60	; 0x3c
 8002aae:	af0a      	add	r7, sp, #40	; 0x28
 8002ab0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e116      	b.n	8002cea <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f007 fc32 	bl	800a340 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2203      	movs	r2, #3
 8002ae0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f003 fe77 	bl	80067ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	687e      	ldr	r6, [r7, #4]
 8002b08:	466d      	mov	r5, sp
 8002b0a:	f106 0410 	add.w	r4, r6, #16
 8002b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b1e:	1d33      	adds	r3, r6, #4
 8002b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b22:	6838      	ldr	r0, [r7, #0]
 8002b24:	f003 fd89 	bl	800663a <USB_CoreInit>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e0d7      	b.n	8002cea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f003 fe65 	bl	8006810 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]
 8002b4a:	e04a      	b.n	8002be2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b4c:	7bfa      	ldrb	r2, [r7, #15]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	333d      	adds	r3, #61	; 0x3d
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b60:	7bfa      	ldrb	r2, [r7, #15]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	333c      	adds	r3, #60	; 0x3c
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	b298      	uxth	r0, r3
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	3342      	adds	r3, #66	; 0x42
 8002b88:	4602      	mov	r2, r0
 8002b8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	333f      	adds	r3, #63	; 0x3f
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	3344      	adds	r3, #68	; 0x44
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3348      	adds	r3, #72	; 0x48
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bc8:	7bfa      	ldrb	r2, [r7, #15]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3350      	adds	r3, #80	; 0x50
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	3301      	adds	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d3af      	bcc.n	8002b4c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	e044      	b.n	8002c7c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c60:	7bfa      	ldrb	r2, [r7, #15]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	73fb      	strb	r3, [r7, #15]
 8002c7c:	7bfa      	ldrb	r2, [r7, #15]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d3b5      	bcc.n	8002bf2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	687e      	ldr	r6, [r7, #4]
 8002c8e:	466d      	mov	r5, sp
 8002c90:	f106 0410 	add.w	r4, r6, #16
 8002c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ca0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ca4:	1d33      	adds	r3, r6, #4
 8002ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ca8:	6838      	ldr	r0, [r7, #0]
 8002caa:	f003 fddb 	bl	8006864 <USB_DevInit>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e014      	b.n	8002cea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d102      	bne.n	8002cde <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 ff49 	bl	8003b70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f004 fd5d 	bl	80077a2 <USB_DevDisconnect>

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cf2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_PCD_Start+0x1c>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e01c      	b.n	8002d48 <HAL_PCD_Start+0x56>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d105      	bne.n	8002d2a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f003 fd4c 	bl	80067cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f004 fd11 	bl	8007760 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b08d      	sub	sp, #52	; 0x34
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f004 fdcf 	bl	800790a <USB_GetMode>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 838f 	bne.w	8003492 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f004 fd33 	bl	80077e4 <USB_ReadInterrupts>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 8385 	beq.w	8003490 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f004 fd2a 	bl	80077e4 <USB_ReadInterrupts>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d107      	bne.n	8002daa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f002 0202 	and.w	r2, r2, #2
 8002da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f004 fd18 	bl	80077e4 <USB_ReadInterrupts>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	2b10      	cmp	r3, #16
 8002dbc:	d161      	bne.n	8002e82 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699a      	ldr	r2, [r3, #24]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0210 	bic.w	r2, r2, #16
 8002dcc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	f003 020f 	and.w	r2, r3, #15
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	3304      	adds	r3, #4
 8002dec:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	0c5b      	lsrs	r3, r3, #17
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d124      	bne.n	8002e44 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d035      	beq.n	8002e72 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	6a38      	ldr	r0, [r7, #32]
 8002e1a:	f004 fb7e 	bl	800751a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e2a:	441a      	add	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	699a      	ldr	r2, [r3, #24]
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e3c:	441a      	add	r2, r3
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	619a      	str	r2, [r3, #24]
 8002e42:	e016      	b.n	8002e72 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	0c5b      	lsrs	r3, r3, #17
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	2b06      	cmp	r3, #6
 8002e4e:	d110      	bne.n	8002e72 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e56:	2208      	movs	r2, #8
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6a38      	ldr	r0, [r7, #32]
 8002e5c:	f004 fb5d 	bl	800751a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	699a      	ldr	r2, [r3, #24]
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e6c:	441a      	add	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0210 	orr.w	r2, r2, #16
 8002e80:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f004 fcac 	bl	80077e4 <USB_ReadInterrupts>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e96:	d16e      	bne.n	8002f76 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f004 fcb2 	bl	800780a <USB_ReadDevAllOutEpInterrupt>
 8002ea6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002ea8:	e062      	b.n	8002f70 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d057      	beq.n	8002f64 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f004 fcd7 	bl	8007872 <USB_ReadDevOutEPInterrupt>
 8002ec4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00c      	beq.n	8002eea <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002edc:	461a      	mov	r2, r3
 8002ede:	2301      	movs	r3, #1
 8002ee0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ee2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fd69 	bl	80039bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00c      	beq.n	8002f0e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f00:	461a      	mov	r2, r3
 8002f02:	2308      	movs	r3, #8
 8002f04:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fda5 	bl	8003a58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f24:	461a      	mov	r2, r3
 8002f26:	2310      	movs	r3, #16
 8002f28:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f40:	461a      	mov	r2, r3
 8002f42:	2320      	movs	r3, #32
 8002f44:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d009      	beq.n	8002f64 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f62:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	3301      	adds	r3, #1
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6c:	085b      	lsrs	r3, r3, #1
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d199      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f004 fc32 	bl	80077e4 <USB_ReadInterrupts>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f8a:	f040 8087 	bne.w	800309c <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f004 fc53 	bl	800783e <USB_ReadDevAllInEpInterrupt>
 8002f98:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f9e:	e07a      	b.n	8003096 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d06f      	beq.n	800308a <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f004 fc7a 	bl	80078ae <USB_ReadDevInEPInterrupt>
 8002fba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d020      	beq.n	8003008 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	2201      	movs	r2, #1
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69f9      	ldr	r1, [r7, #28]
 8002fe2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f007 fa5b 	bl	800a4be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301e:	461a      	mov	r2, r3
 8003020:	2308      	movs	r3, #8
 8003022:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800303a:	461a      	mov	r2, r3
 800303c:	2310      	movs	r3, #16
 800303e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003056:	461a      	mov	r2, r3
 8003058:	2340      	movs	r3, #64	; 0x40
 800305a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	4413      	add	r3, r2
 800306e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003072:	461a      	mov	r2, r3
 8003074:	2302      	movs	r3, #2
 8003076:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003082:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fc11 	bl	80038ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	3301      	adds	r3, #1
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003098:	2b00      	cmp	r3, #0
 800309a:	d181      	bne.n	8002fa0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f004 fb9f 	bl	80077e4 <USB_ReadInterrupts>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030b0:	d122      	bne.n	80030f8 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030c0:	f023 0301 	bic.w	r3, r3, #1
 80030c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d108      	bne.n	80030e2 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030d8:	2100      	movs	r1, #0
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f007 fcf4 	bl	800aac8 <HAL_PCDEx_LPM_Callback>
 80030e0:	e002      	b.n	80030e8 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f007 fa58 	bl	800a598 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f004 fb71 	bl	80077e4 <USB_ReadInterrupts>
 8003102:	4603      	mov	r3, r0
 8003104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310c:	d112      	bne.n	8003134 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d102      	bne.n	8003124 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f007 fa14 	bl	800a54c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003132:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f004 fb53 	bl	80077e4 <USB_ReadInterrupts>
 800313e:	4603      	mov	r3, r0
 8003140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003148:	d121      	bne.n	800318e <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003158:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d111      	bne.n	8003188 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	f003 020f 	and.w	r2, r3, #15
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800317e:	2101      	movs	r1, #1
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f007 fca1 	bl	800aac8 <HAL_PCDEx_LPM_Callback>
 8003186:	e002      	b.n	800318e <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f007 f9df 	bl	800a54c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f004 fb26 	bl	80077e4 <USB_ReadInterrupts>
 8003198:	4603      	mov	r3, r0
 800319a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a2:	f040 80c5 	bne.w	8003330 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2110      	movs	r1, #16
 80031c0:	4618      	mov	r0, r3
 80031c2:	f003 fc9b 	bl	8006afc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ca:	e056      	b.n	800327a <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d8:	461a      	mov	r2, r3
 80031da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f0:	0151      	lsls	r1, r2, #5
 80031f2:	69fa      	ldr	r2, [r7, #28]
 80031f4:	440a      	add	r2, r1
 80031f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031fe:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003210:	0151      	lsls	r1, r2, #5
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	440a      	add	r2, r1
 8003216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800321a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800321e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322c:	461a      	mov	r2, r3
 800322e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003232:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	4413      	add	r3, r2
 800323c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003244:	0151      	lsls	r1, r2, #5
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	440a      	add	r2, r1
 800324a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800324e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003252:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003264:	0151      	lsls	r1, r2, #5
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	440a      	add	r2, r1
 800326a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800326e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003272:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003276:	3301      	adds	r3, #1
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003280:	429a      	cmp	r2, r3
 8003282:	d3a3      	bcc.n	80031cc <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003292:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003296:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	2b00      	cmp	r3, #0
 800329e:	d016      	beq.n	80032ce <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032b0:	f043 030b 	orr.w	r3, r3, #11
 80032b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032c6:	f043 030b 	orr.w	r3, r3, #11
 80032ca:	6453      	str	r3, [r2, #68]	; 0x44
 80032cc:	e015      	b.n	80032fa <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80032e4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032f4:	f043 030b 	orr.w	r3, r3, #11
 80032f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003308:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800330c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003318:	4619      	mov	r1, r3
 800331a:	4610      	mov	r0, r2
 800331c:	f004 fb26 	bl	800796c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800332e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f004 fa55 	bl	80077e4 <USB_ReadInterrupts>
 800333a:	4603      	mov	r3, r0
 800333c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003344:	d124      	bne.n	8003390 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f004 faeb 	bl	8007926 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f003 fc32 	bl	8006bbe <USB_GetDevSpeed>
 800335a:	4603      	mov	r3, r0
 800335c:	461a      	mov	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681c      	ldr	r4, [r3, #0]
 8003366:	f001 fa6b 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 800336a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003370:	b2db      	uxtb	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	4620      	mov	r0, r4
 8003376:	f003 f98d 	bl	8006694 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f007 f8c7 	bl	800a50e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800338e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f004 fa25 	bl	80077e4 <USB_ReadInterrupts>
 800339a:	4603      	mov	r3, r0
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d10a      	bne.n	80033ba <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f007 f8a4 	bl	800a4f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f002 0208 	and.w	r2, r2, #8
 80033b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f004 fa10 	bl	80077e4 <USB_ReadInterrupts>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ce:	d10f      	bne.n	80033f0 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	4619      	mov	r1, r3
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f007 f916 	bl	800a60c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80033ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f004 f9f5 	bl	80077e4 <USB_ReadInterrupts>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003400:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003404:	d10f      	bne.n	8003426 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	b2db      	uxtb	r3, r3
 800340e:	4619      	mov	r1, r3
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f007 f8e9 	bl	800a5e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003424:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f004 f9da 	bl	80077e4 <USB_ReadInterrupts>
 8003430:	4603      	mov	r3, r0
 8003432:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343a:	d10a      	bne.n	8003452 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f007 f8f7 	bl	800a630 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003450:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f004 f9c4 	bl	80077e4 <USB_ReadInterrupts>
 800345c:	4603      	mov	r3, r0
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b04      	cmp	r3, #4
 8003464:	d115      	bne.n	8003492 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f007 f8e7 	bl	800a64c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	e000      	b.n	8003492 <HAL_PCD_IRQHandler+0x742>
      return;
 8003490:	bf00      	nop
    }
  }
}
 8003492:	3734      	adds	r7, #52	; 0x34
 8003494:	46bd      	mov	sp, r7
 8003496:	bd90      	pop	{r4, r7, pc}

08003498 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_PCD_SetAddress+0x1a>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e013      	b.n	80034da <HAL_PCD_SetAddress+0x42>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f004 f922 	bl	8007714 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	4608      	mov	r0, r1
 80034ec:	4611      	mov	r1, r2
 80034ee:	461a      	mov	r2, r3
 80034f0:	4603      	mov	r3, r0
 80034f2:	70fb      	strb	r3, [r7, #3]
 80034f4:	460b      	mov	r3, r1
 80034f6:	803b      	strh	r3, [r7, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003504:	2b00      	cmp	r3, #0
 8003506:	da0f      	bge.n	8003528 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	f003 020f 	and.w	r2, r3, #15
 800350e:	4613      	mov	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	3338      	adds	r3, #56	; 0x38
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4413      	add	r3, r2
 800351c:	3304      	adds	r3, #4
 800351e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	705a      	strb	r2, [r3, #1]
 8003526:	e00f      	b.n	8003548 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	f003 020f 	and.w	r2, r3, #15
 800352e:	4613      	mov	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	3304      	adds	r3, #4
 8003540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	b2da      	uxtb	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003554:	883a      	ldrh	r2, [r7, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	78ba      	ldrb	r2, [r7, #2]
 800355e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	785b      	ldrb	r3, [r3, #1]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d004      	beq.n	8003572 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003572:	78bb      	ldrb	r3, [r7, #2]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d102      	bne.n	800357e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_PCD_EP_Open+0xaa>
 8003588:	2302      	movs	r3, #2
 800358a:	e00e      	b.n	80035aa <HAL_PCD_EP_Open+0xc8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68f9      	ldr	r1, [r7, #12]
 800359a:	4618      	mov	r0, r3
 800359c:	f003 fb2e 	bl	8006bfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80035a8:	7afb      	ldrb	r3, [r7, #11]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	da0f      	bge.n	80035e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c6:	78fb      	ldrb	r3, [r7, #3]
 80035c8:	f003 020f 	and.w	r2, r3, #15
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	3338      	adds	r3, #56	; 0x38
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	3304      	adds	r3, #4
 80035dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	705a      	strb	r2, [r3, #1]
 80035e4:	e00f      	b.n	8003606 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	f003 020f 	and.w	r2, r3, #15
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4413      	add	r3, r2
 80035fc:	3304      	adds	r3, #4
 80035fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	b2da      	uxtb	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_PCD_EP_Close+0x6e>
 800361c:	2302      	movs	r3, #2
 800361e:	e00e      	b.n	800363e <HAL_PCD_EP_Close+0x8c>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68f9      	ldr	r1, [r7, #12]
 800362e:	4618      	mov	r0, r3
 8003630:	f003 fb6c 	bl	8006d0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	460b      	mov	r3, r1
 8003654:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003656:	7afb      	ldrb	r3, [r7, #11]
 8003658:	f003 020f 	and.w	r2, r3, #15
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	3304      	adds	r3, #4
 800366e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2200      	movs	r2, #0
 8003680:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2200      	movs	r2, #0
 8003686:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003688:	7afb      	ldrb	r3, [r7, #11]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	b2da      	uxtb	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003694:	7afb      	ldrb	r3, [r7, #11]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6979      	ldr	r1, [r7, #20]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f003 fde9 	bl	800727c <USB_EP0StartXfer>
 80036aa:	e005      	b.n	80036b8 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6979      	ldr	r1, [r7, #20]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f003 fc06 	bl	8006ec4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b086      	sub	sp, #24
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	460b      	mov	r3, r1
 80036d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036d2:	7afb      	ldrb	r3, [r7, #11]
 80036d4:	f003 020f 	and.w	r2, r3, #15
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	3338      	adds	r3, #56	; 0x38
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4413      	add	r3, r2
 80036e6:	3304      	adds	r3, #4
 80036e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2200      	movs	r2, #0
 80036fa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2201      	movs	r2, #1
 8003700:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003702:	7afb      	ldrb	r3, [r7, #11]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	b2da      	uxtb	r2, r3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800370e:	7afb      	ldrb	r3, [r7, #11]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	2b00      	cmp	r3, #0
 8003716:	d106      	bne.n	8003726 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6979      	ldr	r1, [r7, #20]
 800371e:	4618      	mov	r0, r3
 8003720:	f003 fdac 	bl	800727c <USB_EP0StartXfer>
 8003724:	e005      	b.n	8003732 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6979      	ldr	r1, [r7, #20]
 800372c:	4618      	mov	r0, r3
 800372e:	f003 fbc9 	bl	8006ec4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	f003 020f 	and.w	r2, r3, #15
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	429a      	cmp	r2, r3
 8003754:	d901      	bls.n	800375a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e04e      	b.n	80037f8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800375a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800375e:	2b00      	cmp	r3, #0
 8003760:	da0f      	bge.n	8003782 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	f003 020f 	and.w	r2, r3, #15
 8003768:	4613      	mov	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	3338      	adds	r3, #56	; 0x38
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	4413      	add	r3, r2
 8003776:	3304      	adds	r3, #4
 8003778:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	705a      	strb	r2, [r3, #1]
 8003780:	e00d      	b.n	800379e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	4413      	add	r3, r2
 8003794:	3304      	adds	r3, #4
 8003796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_PCD_EP_SetStall+0x82>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e01c      	b.n	80037f8 <HAL_PCD_EP_SetStall+0xbc>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68f9      	ldr	r1, [r7, #12]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f003 fecd 	bl	800756c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d108      	bne.n	80037ee <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037e6:	4619      	mov	r1, r3
 80037e8:	4610      	mov	r0, r2
 80037ea:	f004 f8bf 	bl	800796c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	f003 020f 	and.w	r2, r3, #15
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	429a      	cmp	r2, r3
 8003818:	d901      	bls.n	800381e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e042      	b.n	80038a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800381e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003822:	2b00      	cmp	r3, #0
 8003824:	da0f      	bge.n	8003846 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003826:	78fb      	ldrb	r3, [r7, #3]
 8003828:	f003 020f 	and.w	r2, r3, #15
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	3338      	adds	r3, #56	; 0x38
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4413      	add	r3, r2
 800383a:	3304      	adds	r3, #4
 800383c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	705a      	strb	r2, [r3, #1]
 8003844:	e00f      	b.n	8003866 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	f003 020f 	and.w	r2, r3, #15
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	4413      	add	r3, r2
 800385c:	3304      	adds	r3, #4
 800385e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	b2da      	uxtb	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_PCD_EP_ClrStall+0x86>
 8003882:	2302      	movs	r3, #2
 8003884:	e00e      	b.n	80038a4 <HAL_PCD_EP_ClrStall+0xa4>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68f9      	ldr	r1, [r7, #12]
 8003894:	4618      	mov	r0, r3
 8003896:	f003 fed7 	bl	8007648 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	3338      	adds	r3, #56	; 0x38
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	4413      	add	r3, r2
 80038d0:	3304      	adds	r3, #4
 80038d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	699a      	ldr	r2, [r3, #24]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d901      	bls.n	80038e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e067      	b.n	80039b4 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d902      	bls.n	8003900 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	3303      	adds	r3, #3
 8003904:	089b      	lsrs	r3, r3, #2
 8003906:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003908:	e026      	b.n	8003958 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	69fa      	ldr	r2, [r7, #28]
 800391c:	429a      	cmp	r2, r3
 800391e:	d902      	bls.n	8003926 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	3303      	adds	r3, #3
 800392a:	089b      	lsrs	r3, r3, #2
 800392c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	68d9      	ldr	r1, [r3, #12]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	b29b      	uxth	r3, r3
 800393a:	6978      	ldr	r0, [r7, #20]
 800393c:	f003 fdbc 	bl	80074b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	441a      	add	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	699a      	ldr	r2, [r3, #24]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	441a      	add	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	b29b      	uxth	r3, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	429a      	cmp	r2, r3
 800396c:	d809      	bhi.n	8003982 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003976:	429a      	cmp	r2, r3
 8003978:	d203      	bcs.n	8003982 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1c3      	bne.n	800390a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	429a      	cmp	r2, r3
 800398c:	d811      	bhi.n	80039b2 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	2201      	movs	r2, #1
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	6939      	ldr	r1, [r7, #16]
 80039aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039ae:	4013      	ands	r3, r2
 80039b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	333c      	adds	r3, #60	; 0x3c
 80039d4:	3304      	adds	r3, #4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <PCD_EP_OutXfrComplete_int+0x98>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d124      	bne.n	8003a3c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a0e:	6093      	str	r3, [r2, #8]
 8003a10:	e01a      	b.n	8003a48 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a28:	461a      	mov	r2, r3
 8003a2a:	2320      	movs	r3, #32
 8003a2c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	4619      	mov	r1, r3
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f006 fd27 	bl	800a488 <HAL_PCD_DataOutStageCallback>
 8003a3a:	e005      	b.n	8003a48 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	4619      	mov	r1, r3
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f006 fd20 	bl	800a488 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	4f54310a 	.word	0x4f54310a

08003a58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	333c      	adds	r3, #60	; 0x3c
 8003a70:	3304      	adds	r3, #4
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4a0c      	ldr	r2, [pc, #48]	; (8003abc <PCD_EP_OutSetupPacket_int+0x64>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d90e      	bls.n	8003aac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d009      	beq.n	8003aac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aaa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f006 fcd9 	bl	800a464 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	4f54300a 	.word	0x4f54300a

08003ac0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	70fb      	strb	r3, [r7, #3]
 8003acc:	4613      	mov	r3, r2
 8003ace:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d107      	bne.n	8003aee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ade:	883b      	ldrh	r3, [r7, #0]
 8003ae0:	0419      	lsls	r1, r3, #16
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	629a      	str	r2, [r3, #40]	; 0x28
 8003aec:	e028      	b.n	8003b40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	0c1b      	lsrs	r3, r3, #16
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	4413      	add	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003afc:	2300      	movs	r3, #0
 8003afe:	73fb      	strb	r3, [r7, #15]
 8003b00:	e00d      	b.n	8003b1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	3340      	adds	r3, #64	; 0x40
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	0c1b      	lsrs	r3, r3, #16
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	4413      	add	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
 8003b1e:	7bfa      	ldrb	r2, [r7, #15]
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d3ec      	bcc.n	8003b02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b28:	883b      	ldrh	r3, [r7, #0]
 8003b2a:	0418      	lsls	r0, r3, #16
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6819      	ldr	r1, [r3, #0]
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	4302      	orrs	r2, r0
 8003b38:	3340      	adds	r3, #64	; 0x40
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	460b      	mov	r3, r1
 8003b58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	887a      	ldrh	r2, [r7, #2]
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	f043 0303 	orr.w	r3, r3, #3
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10c      	bne.n	8003be4 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003bca:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd6:	d10e      	bne.n	8003bf6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003bd8:	f000 f8a6 	bl	8003d28 <HAL_PWREx_DisableLowPowerRunMode>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8003be2:	e016      	b.n	8003c12 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8003be4:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf0:	d001      	beq.n	8003bf6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8003bf2:	f000 f889 	bl	8003d08 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003bf6:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <HAL_PWR_EnterSLEEPMode+0x64>)
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <HAL_PWR_EnterSLEEPMode+0x64>)
 8003bfc:	f023 0304 	bic.w	r3, r3, #4
 8003c00:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003c08:	bf30      	wfi
 8003c0a:	e002      	b.n	8003c12 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003c0c:	bf40      	sev
    __WFE();
 8003c0e:	bf20      	wfe
    __WFE();
 8003c10:	bf20      	wfe
  }

}
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40007000 	.word	0x40007000
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c24:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40007000 	.word	0x40007000

08003c3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c4a:	d130      	bne.n	8003cae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c4c:	4b23      	ldr	r3, [pc, #140]	; (8003cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c58:	d038      	beq.n	8003ccc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c5a:	4b20      	ldr	r3, [pc, #128]	; (8003cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c62:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2232      	movs	r2, #50	; 0x32
 8003c70:	fb02 f303 	mul.w	r3, r2, r3
 8003c74:	4a1b      	ldr	r2, [pc, #108]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	0c9b      	lsrs	r3, r3, #18
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c80:	e002      	b.n	8003c88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3b01      	subs	r3, #1
 8003c86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c88:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c94:	d102      	bne.n	8003c9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1f2      	bne.n	8003c82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca8:	d110      	bne.n	8003ccc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e00f      	b.n	8003cce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cae:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cba:	d007      	beq.n	8003ccc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cc4:	4a05      	ldr	r2, [pc, #20]	; (8003cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	20000144 	.word	0x20000144
 8003ce4:	431bde83 	.word	0x431bde83

08003ce8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cf6:	6053      	str	r3, [r2, #4]
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40007000 	.word	0x40007000

08003d08 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d16:	6013      	str	r3, [r2, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40007000 	.word	0x40007000

08003d28 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003d2e:	4b17      	ldr	r3, [pc, #92]	; (8003d8c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a16      	ldr	r2, [pc, #88]	; (8003d8c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003d34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d38:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2232      	movs	r2, #50	; 0x32
 8003d40:	fb02 f303 	mul.w	r3, r2, r3
 8003d44:	4a13      	ldr	r2, [pc, #76]	; (8003d94 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	0c9b      	lsrs	r3, r3, #18
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003d50:	e002      	b.n	8003d58 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d64:	d102      	bne.n	8003d6c <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f2      	bne.n	8003d52 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003d6c:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d78:	d101      	bne.n	8003d7e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e000      	b.n	8003d80 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	40007000 	.word	0x40007000
 8003d90:	20000144 	.word	0x20000144
 8003d94:	431bde83 	.word	0x431bde83

08003d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e3d4      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003daa:	4ba1      	ldr	r3, [pc, #644]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003db4:	4b9e      	ldr	r3, [pc, #632]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 80e4 	beq.w	8003f94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <HAL_RCC_OscConfig+0x4a>
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	2b0c      	cmp	r3, #12
 8003dd6:	f040 808b 	bne.w	8003ef0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	f040 8087 	bne.w	8003ef0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003de2:	4b93      	ldr	r3, [pc, #588]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d005      	beq.n	8003dfa <HAL_RCC_OscConfig+0x62>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e3ac      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1a      	ldr	r2, [r3, #32]
 8003dfe:	4b8c      	ldr	r3, [pc, #560]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d004      	beq.n	8003e14 <HAL_RCC_OscConfig+0x7c>
 8003e0a:	4b89      	ldr	r3, [pc, #548]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e12:	e005      	b.n	8003e20 <HAL_RCC_OscConfig+0x88>
 8003e14:	4b86      	ldr	r3, [pc, #536]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1a:	091b      	lsrs	r3, r3, #4
 8003e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d223      	bcs.n	8003e6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fd41 	bl	80048b0 <RCC_SetFlashLatencyFromMSIRange>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e38d      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e38:	4b7d      	ldr	r3, [pc, #500]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a7c      	ldr	r2, [pc, #496]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003e3e:	f043 0308 	orr.w	r3, r3, #8
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	4b7a      	ldr	r3, [pc, #488]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	4977      	ldr	r1, [pc, #476]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e56:	4b76      	ldr	r3, [pc, #472]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	4972      	ldr	r1, [pc, #456]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	604b      	str	r3, [r1, #4]
 8003e6a:	e025      	b.n	8003eb8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e6c:	4b70      	ldr	r3, [pc, #448]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a6f      	ldr	r2, [pc, #444]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003e72:	f043 0308 	orr.w	r3, r3, #8
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b6d      	ldr	r3, [pc, #436]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	496a      	ldr	r1, [pc, #424]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e8a:	4b69      	ldr	r3, [pc, #420]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	4965      	ldr	r1, [pc, #404]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d109      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fd01 	bl	80048b0 <RCC_SetFlashLatencyFromMSIRange>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e34d      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eb8:	f000 fc36 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b5c      	ldr	r3, [pc, #368]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	091b      	lsrs	r3, r3, #4
 8003ec4:	f003 030f 	and.w	r3, r3, #15
 8003ec8:	495a      	ldr	r1, [pc, #360]	; (8004034 <HAL_RCC_OscConfig+0x29c>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed4:	4a58      	ldr	r2, [pc, #352]	; (8004038 <HAL_RCC_OscConfig+0x2a0>)
 8003ed6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ed8:	4b58      	ldr	r3, [pc, #352]	; (800403c <HAL_RCC_OscConfig+0x2a4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fc fe99 	bl	8000c14 <HAL_InitTick>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d052      	beq.n	8003f92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	e331      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d032      	beq.n	8003f5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ef8:	4b4d      	ldr	r3, [pc, #308]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a4c      	ldr	r2, [pc, #304]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f04:	f7fc fed6 	bl	8000cb4 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f0c:	f7fc fed2 	bl	8000cb4 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e31a      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f1e:	4b44      	ldr	r3, [pc, #272]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f2a:	4b41      	ldr	r3, [pc, #260]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a40      	ldr	r2, [pc, #256]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003f30:	f043 0308 	orr.w	r3, r3, #8
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	4b3e      	ldr	r3, [pc, #248]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	493b      	ldr	r1, [pc, #236]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f48:	4b39      	ldr	r3, [pc, #228]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	4936      	ldr	r1, [pc, #216]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	604b      	str	r3, [r1, #4]
 8003f5c:	e01a      	b.n	8003f94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f5e:	4b34      	ldr	r3, [pc, #208]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a33      	ldr	r2, [pc, #204]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f6a:	f7fc fea3 	bl	8000cb4 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f72:	f7fc fe9f 	bl	8000cb4 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e2e7      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f84:	4b2a      	ldr	r3, [pc, #168]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f0      	bne.n	8003f72 <HAL_RCC_OscConfig+0x1da>
 8003f90:	e000      	b.n	8003f94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d074      	beq.n	800408a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d005      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x21a>
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b0c      	cmp	r3, #12
 8003faa:	d10e      	bne.n	8003fca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d10b      	bne.n	8003fca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb2:	4b1f      	ldr	r3, [pc, #124]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d064      	beq.n	8004088 <HAL_RCC_OscConfig+0x2f0>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d160      	bne.n	8004088 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e2c4      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd2:	d106      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x24a>
 8003fd4:	4b16      	ldr	r3, [pc, #88]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a15      	ldr	r2, [pc, #84]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	e01d      	b.n	800401e <HAL_RCC_OscConfig+0x286>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fea:	d10c      	bne.n	8004006 <HAL_RCC_OscConfig+0x26e>
 8003fec:	4b10      	ldr	r3, [pc, #64]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0f      	ldr	r2, [pc, #60]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003ff2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a0c      	ldr	r2, [pc, #48]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8003ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	e00b      	b.n	800401e <HAL_RCC_OscConfig+0x286>
 8004006:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a09      	ldr	r2, [pc, #36]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 800400c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	4b07      	ldr	r3, [pc, #28]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a06      	ldr	r2, [pc, #24]	; (8004030 <HAL_RCC_OscConfig+0x298>)
 8004018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d01c      	beq.n	8004060 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004026:	f7fc fe45 	bl	8000cb4 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800402c:	e011      	b.n	8004052 <HAL_RCC_OscConfig+0x2ba>
 800402e:	bf00      	nop
 8004030:	40021000 	.word	0x40021000
 8004034:	0800b7f0 	.word	0x0800b7f0
 8004038:	20000144 	.word	0x20000144
 800403c:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004040:	f7fc fe38 	bl	8000cb4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	; 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e280      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004052:	4baf      	ldr	r3, [pc, #700]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0x2a8>
 800405e:	e014      	b.n	800408a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7fc fe28 	bl	8000cb4 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004068:	f7fc fe24 	bl	8000cb4 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	; 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e26c      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800407a:	4ba5      	ldr	r3, [pc, #660]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x2d0>
 8004086:	e000      	b.n	800408a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d060      	beq.n	8004158 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b04      	cmp	r3, #4
 800409a:	d005      	beq.n	80040a8 <HAL_RCC_OscConfig+0x310>
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	2b0c      	cmp	r3, #12
 80040a0:	d119      	bne.n	80040d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d116      	bne.n	80040d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040a8:	4b99      	ldr	r3, [pc, #612]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_OscConfig+0x328>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e249      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c0:	4b93      	ldr	r3, [pc, #588]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	061b      	lsls	r3, r3, #24
 80040ce:	4990      	ldr	r1, [pc, #576]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d4:	e040      	b.n	8004158 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d023      	beq.n	8004126 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040de:	4b8c      	ldr	r3, [pc, #560]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a8b      	ldr	r2, [pc, #556]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 80040e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7fc fde3 	bl	8000cb4 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f2:	f7fc fddf 	bl	8000cb4 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e227      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004104:	4b82      	ldr	r3, [pc, #520]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004110:	4b7f      	ldr	r3, [pc, #508]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	061b      	lsls	r3, r3, #24
 800411e:	497c      	ldr	r1, [pc, #496]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 8004120:	4313      	orrs	r3, r2
 8004122:	604b      	str	r3, [r1, #4]
 8004124:	e018      	b.n	8004158 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004126:	4b7a      	ldr	r3, [pc, #488]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a79      	ldr	r2, [pc, #484]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 800412c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fc fdbf 	bl	8000cb4 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413a:	f7fc fdbb 	bl	8000cb4 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e203      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800414c:	4b70      	ldr	r3, [pc, #448]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	2b00      	cmp	r3, #0
 8004162:	d03c      	beq.n	80041de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01c      	beq.n	80041a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416c:	4b68      	ldr	r3, [pc, #416]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 800416e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004172:	4a67      	ldr	r2, [pc, #412]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fc fd9a 	bl	8000cb4 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004184:	f7fc fd96 	bl	8000cb4 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e1de      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004196:	4b5e      	ldr	r3, [pc, #376]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 8004198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0ef      	beq.n	8004184 <HAL_RCC_OscConfig+0x3ec>
 80041a4:	e01b      	b.n	80041de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a6:	4b5a      	ldr	r3, [pc, #360]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 80041a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ac:	4a58      	ldr	r2, [pc, #352]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b6:	f7fc fd7d 	bl	8000cb4 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041be:	f7fc fd79 	bl	8000cb4 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e1c1      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041d0:	4b4f      	ldr	r3, [pc, #316]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 80041d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1ef      	bne.n	80041be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 80a6 	beq.w	8004338 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ec:	2300      	movs	r3, #0
 80041ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041f0:	4b47      	ldr	r3, [pc, #284]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10d      	bne.n	8004218 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041fc:	4b44      	ldr	r3, [pc, #272]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 80041fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004200:	4a43      	ldr	r2, [pc, #268]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 8004202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004206:	6593      	str	r3, [r2, #88]	; 0x58
 8004208:	4b41      	ldr	r3, [pc, #260]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 800420a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004214:	2301      	movs	r3, #1
 8004216:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004218:	4b3e      	ldr	r3, [pc, #248]	; (8004314 <HAL_RCC_OscConfig+0x57c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d118      	bne.n	8004256 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004224:	4b3b      	ldr	r3, [pc, #236]	; (8004314 <HAL_RCC_OscConfig+0x57c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a3a      	ldr	r2, [pc, #232]	; (8004314 <HAL_RCC_OscConfig+0x57c>)
 800422a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004230:	f7fc fd40 	bl	8000cb4 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004238:	f7fc fd3c 	bl	8000cb4 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e184      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424a:	4b32      	ldr	r3, [pc, #200]	; (8004314 <HAL_RCC_OscConfig+0x57c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d108      	bne.n	8004270 <HAL_RCC_OscConfig+0x4d8>
 800425e:	4b2c      	ldr	r3, [pc, #176]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004264:	4a2a      	ldr	r2, [pc, #168]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800426e:	e024      	b.n	80042ba <HAL_RCC_OscConfig+0x522>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b05      	cmp	r3, #5
 8004276:	d110      	bne.n	800429a <HAL_RCC_OscConfig+0x502>
 8004278:	4b25      	ldr	r3, [pc, #148]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427e:	4a24      	ldr	r2, [pc, #144]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 8004280:	f043 0304 	orr.w	r3, r3, #4
 8004284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004288:	4b21      	ldr	r3, [pc, #132]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428e:	4a20      	ldr	r2, [pc, #128]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004298:	e00f      	b.n	80042ba <HAL_RCC_OscConfig+0x522>
 800429a:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a0:	4a1b      	ldr	r2, [pc, #108]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042aa:	4b19      	ldr	r3, [pc, #100]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	4a17      	ldr	r2, [pc, #92]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 80042b2:	f023 0304 	bic.w	r3, r3, #4
 80042b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d016      	beq.n	80042f0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c2:	f7fc fcf7 	bl	8000cb4 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c8:	e00a      	b.n	80042e0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ca:	f7fc fcf3 	bl	8000cb4 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d8:	4293      	cmp	r3, r2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e139      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e0:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <HAL_RCC_OscConfig+0x578>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0ed      	beq.n	80042ca <HAL_RCC_OscConfig+0x532>
 80042ee:	e01a      	b.n	8004326 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f0:	f7fc fce0 	bl	8000cb4 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042f6:	e00f      	b.n	8004318 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f8:	f7fc fcdc 	bl	8000cb4 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	f241 3288 	movw	r2, #5000	; 0x1388
 8004306:	4293      	cmp	r3, r2
 8004308:	d906      	bls.n	8004318 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e122      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
 800430e:	bf00      	nop
 8004310:	40021000 	.word	0x40021000
 8004314:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004318:	4b90      	ldr	r3, [pc, #576]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e8      	bne.n	80042f8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004326:	7ffb      	ldrb	r3, [r7, #31]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d105      	bne.n	8004338 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800432c:	4b8b      	ldr	r3, [pc, #556]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 800432e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004330:	4a8a      	ldr	r2, [pc, #552]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 8004332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004336:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 8108 	beq.w	8004552 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	2b02      	cmp	r3, #2
 8004348:	f040 80d0 	bne.w	80044ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800434c:	4b83      	ldr	r3, [pc, #524]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f003 0203 	and.w	r2, r3, #3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	429a      	cmp	r2, r3
 800435e:	d130      	bne.n	80043c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	3b01      	subs	r3, #1
 800436c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800436e:	429a      	cmp	r2, r3
 8004370:	d127      	bne.n	80043c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800437e:	429a      	cmp	r2, r3
 8004380:	d11f      	bne.n	80043c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800438c:	2a07      	cmp	r2, #7
 800438e:	bf14      	ite	ne
 8004390:	2201      	movne	r2, #1
 8004392:	2200      	moveq	r2, #0
 8004394:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004396:	4293      	cmp	r3, r2
 8004398:	d113      	bne.n	80043c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a4:	085b      	lsrs	r3, r3, #1
 80043a6:	3b01      	subs	r3, #1
 80043a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d109      	bne.n	80043c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	085b      	lsrs	r3, r3, #1
 80043ba:	3b01      	subs	r3, #1
 80043bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043be:	429a      	cmp	r2, r3
 80043c0:	d06e      	beq.n	80044a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b0c      	cmp	r3, #12
 80043c6:	d069      	beq.n	800449c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043c8:	4b64      	ldr	r3, [pc, #400]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d105      	bne.n	80043e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80043d4:	4b61      	ldr	r3, [pc, #388]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0b7      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043e4:	4b5d      	ldr	r3, [pc, #372]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a5c      	ldr	r2, [pc, #368]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 80043ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043f0:	f7fc fc60 	bl	8000cb4 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f8:	f7fc fc5c 	bl	8000cb4 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e0a4      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800440a:	4b54      	ldr	r3, [pc, #336]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004416:	4b51      	ldr	r3, [pc, #324]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	4b51      	ldr	r3, [pc, #324]	; (8004560 <HAL_RCC_OscConfig+0x7c8>)
 800441c:	4013      	ands	r3, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004426:	3a01      	subs	r2, #1
 8004428:	0112      	lsls	r2, r2, #4
 800442a:	4311      	orrs	r1, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004430:	0212      	lsls	r2, r2, #8
 8004432:	4311      	orrs	r1, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004438:	0852      	lsrs	r2, r2, #1
 800443a:	3a01      	subs	r2, #1
 800443c:	0552      	lsls	r2, r2, #21
 800443e:	4311      	orrs	r1, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004444:	0852      	lsrs	r2, r2, #1
 8004446:	3a01      	subs	r2, #1
 8004448:	0652      	lsls	r2, r2, #25
 800444a:	4311      	orrs	r1, r2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004450:	0912      	lsrs	r2, r2, #4
 8004452:	0452      	lsls	r2, r2, #17
 8004454:	430a      	orrs	r2, r1
 8004456:	4941      	ldr	r1, [pc, #260]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 8004458:	4313      	orrs	r3, r2
 800445a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800445c:	4b3f      	ldr	r3, [pc, #252]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a3e      	ldr	r2, [pc, #248]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 8004462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004466:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004468:	4b3c      	ldr	r3, [pc, #240]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4a3b      	ldr	r2, [pc, #236]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 800446e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004472:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004474:	f7fc fc1e 	bl	8000cb4 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800447c:	f7fc fc1a 	bl	8000cb4 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e062      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800448e:	4b33      	ldr	r3, [pc, #204]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0f0      	beq.n	800447c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800449a:	e05a      	b.n	8004552 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e059      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a0:	4b2e      	ldr	r3, [pc, #184]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d152      	bne.n	8004552 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044ac:	4b2b      	ldr	r3, [pc, #172]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a2a      	ldr	r2, [pc, #168]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 80044b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044b8:	4b28      	ldr	r3, [pc, #160]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	4a27      	ldr	r2, [pc, #156]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 80044be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044c4:	f7fc fbf6 	bl	8000cb4 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044cc:	f7fc fbf2 	bl	8000cb4 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e03a      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044de:	4b1f      	ldr	r3, [pc, #124]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0x734>
 80044ea:	e032      	b.n	8004552 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b0c      	cmp	r3, #12
 80044f0:	d02d      	beq.n	800454e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f2:	4b1a      	ldr	r3, [pc, #104]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a19      	ldr	r2, [pc, #100]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 80044f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044fc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80044fe:	4b17      	ldr	r3, [pc, #92]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d105      	bne.n	8004516 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800450a:	4b14      	ldr	r3, [pc, #80]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	4a13      	ldr	r2, [pc, #76]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 8004510:	f023 0303 	bic.w	r3, r3, #3
 8004514:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004516:	4b11      	ldr	r3, [pc, #68]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	4a10      	ldr	r2, [pc, #64]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 800451c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004524:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004526:	f7fc fbc5 	bl	8000cb4 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800452e:	f7fc fbc1 	bl	8000cb4 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e009      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_RCC_OscConfig+0x7c4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f0      	bne.n	800452e <HAL_RCC_OscConfig+0x796>
 800454c:	e001      	b.n	8004552 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3720      	adds	r7, #32
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40021000 	.word	0x40021000
 8004560:	f99d808c 	.word	0xf99d808c

08004564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0c8      	b.n	800470a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004578:	4b66      	ldr	r3, [pc, #408]	; (8004714 <HAL_RCC_ClockConfig+0x1b0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d910      	bls.n	80045a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004586:	4b63      	ldr	r3, [pc, #396]	; (8004714 <HAL_RCC_ClockConfig+0x1b0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 0207 	bic.w	r2, r3, #7
 800458e:	4961      	ldr	r1, [pc, #388]	; (8004714 <HAL_RCC_ClockConfig+0x1b0>)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	4313      	orrs	r3, r2
 8004594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004596:	4b5f      	ldr	r3, [pc, #380]	; (8004714 <HAL_RCC_ClockConfig+0x1b0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0b0      	b.n	800470a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d04c      	beq.n	800464e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d107      	bne.n	80045cc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045bc:	4b56      	ldr	r3, [pc, #344]	; (8004718 <HAL_RCC_ClockConfig+0x1b4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d121      	bne.n	800460c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e09e      	b.n	800470a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d107      	bne.n	80045e4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d4:	4b50      	ldr	r3, [pc, #320]	; (8004718 <HAL_RCC_ClockConfig+0x1b4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d115      	bne.n	800460c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e092      	b.n	800470a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d107      	bne.n	80045fc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045ec:	4b4a      	ldr	r3, [pc, #296]	; (8004718 <HAL_RCC_ClockConfig+0x1b4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e086      	b.n	800470a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045fc:	4b46      	ldr	r3, [pc, #280]	; (8004718 <HAL_RCC_ClockConfig+0x1b4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e07e      	b.n	800470a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800460c:	4b42      	ldr	r3, [pc, #264]	; (8004718 <HAL_RCC_ClockConfig+0x1b4>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f023 0203 	bic.w	r2, r3, #3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	493f      	ldr	r1, [pc, #252]	; (8004718 <HAL_RCC_ClockConfig+0x1b4>)
 800461a:	4313      	orrs	r3, r2
 800461c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800461e:	f7fc fb49 	bl	8000cb4 <HAL_GetTick>
 8004622:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004624:	e00a      	b.n	800463c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004626:	f7fc fb45 	bl	8000cb4 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	f241 3288 	movw	r2, #5000	; 0x1388
 8004634:	4293      	cmp	r3, r2
 8004636:	d901      	bls.n	800463c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e066      	b.n	800470a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463c:	4b36      	ldr	r3, [pc, #216]	; (8004718 <HAL_RCC_ClockConfig+0x1b4>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 020c 	and.w	r2, r3, #12
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	429a      	cmp	r2, r3
 800464c:	d1eb      	bne.n	8004626 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d008      	beq.n	800466c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800465a:	4b2f      	ldr	r3, [pc, #188]	; (8004718 <HAL_RCC_ClockConfig+0x1b4>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	492c      	ldr	r1, [pc, #176]	; (8004718 <HAL_RCC_ClockConfig+0x1b4>)
 8004668:	4313      	orrs	r3, r2
 800466a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800466c:	4b29      	ldr	r3, [pc, #164]	; (8004714 <HAL_RCC_ClockConfig+0x1b0>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d210      	bcs.n	800469c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467a:	4b26      	ldr	r3, [pc, #152]	; (8004714 <HAL_RCC_ClockConfig+0x1b0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f023 0207 	bic.w	r2, r3, #7
 8004682:	4924      	ldr	r1, [pc, #144]	; (8004714 <HAL_RCC_ClockConfig+0x1b0>)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	4313      	orrs	r3, r2
 8004688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468a:	4b22      	ldr	r3, [pc, #136]	; (8004714 <HAL_RCC_ClockConfig+0x1b0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d001      	beq.n	800469c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e036      	b.n	800470a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046a8:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <HAL_RCC_ClockConfig+0x1b4>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	4918      	ldr	r1, [pc, #96]	; (8004718 <HAL_RCC_ClockConfig+0x1b4>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d009      	beq.n	80046da <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046c6:	4b14      	ldr	r3, [pc, #80]	; (8004718 <HAL_RCC_ClockConfig+0x1b4>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4910      	ldr	r1, [pc, #64]	; (8004718 <HAL_RCC_ClockConfig+0x1b4>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046da:	f000 f825 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 80046de:	4602      	mov	r2, r0
 80046e0:	4b0d      	ldr	r3, [pc, #52]	; (8004718 <HAL_RCC_ClockConfig+0x1b4>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	091b      	lsrs	r3, r3, #4
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	490c      	ldr	r1, [pc, #48]	; (800471c <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	5ccb      	ldrb	r3, [r1, r3]
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	fa22 f303 	lsr.w	r3, r2, r3
 80046f6:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046fa:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <HAL_RCC_ClockConfig+0x1c0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fc fa88 	bl	8000c14 <HAL_InitTick>
 8004704:	4603      	mov	r3, r0
 8004706:	72fb      	strb	r3, [r7, #11]

  return status;
 8004708:	7afb      	ldrb	r3, [r7, #11]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40022000 	.word	0x40022000
 8004718:	40021000 	.word	0x40021000
 800471c:	0800b7f0 	.word	0x0800b7f0
 8004720:	20000144 	.word	0x20000144
 8004724:	20000000 	.word	0x20000000

08004728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004728:	b480      	push	{r7}
 800472a:	b089      	sub	sp, #36	; 0x24
 800472c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	2300      	movs	r3, #0
 8004734:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004736:	4b3e      	ldr	r3, [pc, #248]	; (8004830 <HAL_RCC_GetSysClockFreq+0x108>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004740:	4b3b      	ldr	r3, [pc, #236]	; (8004830 <HAL_RCC_GetSysClockFreq+0x108>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_RCC_GetSysClockFreq+0x34>
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	2b0c      	cmp	r3, #12
 8004754:	d121      	bne.n	800479a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d11e      	bne.n	800479a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800475c:	4b34      	ldr	r3, [pc, #208]	; (8004830 <HAL_RCC_GetSysClockFreq+0x108>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d107      	bne.n	8004778 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004768:	4b31      	ldr	r3, [pc, #196]	; (8004830 <HAL_RCC_GetSysClockFreq+0x108>)
 800476a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800476e:	0a1b      	lsrs	r3, r3, #8
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	e005      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004778:	4b2d      	ldr	r3, [pc, #180]	; (8004830 <HAL_RCC_GetSysClockFreq+0x108>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004784:	4a2b      	ldr	r2, [pc, #172]	; (8004834 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10d      	bne.n	80047b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004798:	e00a      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	2b04      	cmp	r3, #4
 800479e:	d102      	bne.n	80047a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047a0:	4b25      	ldr	r3, [pc, #148]	; (8004838 <HAL_RCC_GetSysClockFreq+0x110>)
 80047a2:	61bb      	str	r3, [r7, #24]
 80047a4:	e004      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d101      	bne.n	80047b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047ac:	4b23      	ldr	r3, [pc, #140]	; (800483c <HAL_RCC_GetSysClockFreq+0x114>)
 80047ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	2b0c      	cmp	r3, #12
 80047b4:	d134      	bne.n	8004820 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047b6:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <HAL_RCC_GetSysClockFreq+0x108>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d003      	beq.n	80047ce <HAL_RCC_GetSysClockFreq+0xa6>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d003      	beq.n	80047d4 <HAL_RCC_GetSysClockFreq+0xac>
 80047cc:	e005      	b.n	80047da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047ce:	4b1a      	ldr	r3, [pc, #104]	; (8004838 <HAL_RCC_GetSysClockFreq+0x110>)
 80047d0:	617b      	str	r3, [r7, #20]
      break;
 80047d2:	e005      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047d4:	4b19      	ldr	r3, [pc, #100]	; (800483c <HAL_RCC_GetSysClockFreq+0x114>)
 80047d6:	617b      	str	r3, [r7, #20]
      break;
 80047d8:	e002      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	617b      	str	r3, [r7, #20]
      break;
 80047de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047e0:	4b13      	ldr	r3, [pc, #76]	; (8004830 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	3301      	adds	r3, #1
 80047ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047ee:	4b10      	ldr	r3, [pc, #64]	; (8004830 <HAL_RCC_GetSysClockFreq+0x108>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	fb02 f203 	mul.w	r2, r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	fbb2 f3f3 	udiv	r3, r2, r3
 8004804:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004806:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <HAL_RCC_GetSysClockFreq+0x108>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	0e5b      	lsrs	r3, r3, #25
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	3301      	adds	r3, #1
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	fbb2 f3f3 	udiv	r3, r2, r3
 800481e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004820:	69bb      	ldr	r3, [r7, #24]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3724      	adds	r7, #36	; 0x24
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000
 8004834:	0800b808 	.word	0x0800b808
 8004838:	00f42400 	.word	0x00f42400
 800483c:	007a1200 	.word	0x007a1200

08004840 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004844:	4b03      	ldr	r3, [pc, #12]	; (8004854 <HAL_RCC_GetHCLKFreq+0x14>)
 8004846:	681b      	ldr	r3, [r3, #0]
}
 8004848:	4618      	mov	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	20000144 	.word	0x20000144

08004858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800485c:	f7ff fff0 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 8004860:	4602      	mov	r2, r0
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	0a1b      	lsrs	r3, r3, #8
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	4904      	ldr	r1, [pc, #16]	; (8004880 <HAL_RCC_GetPCLK1Freq+0x28>)
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004878:	4618      	mov	r0, r3
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40021000 	.word	0x40021000
 8004880:	0800b800 	.word	0x0800b800

08004884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004888:	f7ff ffda 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	0adb      	lsrs	r3, r3, #11
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	4904      	ldr	r1, [pc, #16]	; (80048ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800489a:	5ccb      	ldrb	r3, [r1, r3]
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40021000 	.word	0x40021000
 80048ac:	0800b800 	.word	0x0800b800

080048b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048b8:	2300      	movs	r3, #0
 80048ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048bc:	4b2a      	ldr	r3, [pc, #168]	; (8004968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048c8:	f7ff f9aa 	bl	8003c20 <HAL_PWREx_GetVoltageRange>
 80048cc:	6178      	str	r0, [r7, #20]
 80048ce:	e014      	b.n	80048fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048d0:	4b25      	ldr	r3, [pc, #148]	; (8004968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d4:	4a24      	ldr	r2, [pc, #144]	; (8004968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048da:	6593      	str	r3, [r2, #88]	; 0x58
 80048dc:	4b22      	ldr	r3, [pc, #136]	; (8004968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048e8:	f7ff f99a 	bl	8003c20 <HAL_PWREx_GetVoltageRange>
 80048ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048ee:	4b1e      	ldr	r3, [pc, #120]	; (8004968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f2:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004900:	d10b      	bne.n	800491a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b80      	cmp	r3, #128	; 0x80
 8004906:	d919      	bls.n	800493c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2ba0      	cmp	r3, #160	; 0xa0
 800490c:	d902      	bls.n	8004914 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800490e:	2302      	movs	r3, #2
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	e013      	b.n	800493c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004914:	2301      	movs	r3, #1
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	e010      	b.n	800493c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b80      	cmp	r3, #128	; 0x80
 800491e:	d902      	bls.n	8004926 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004920:	2303      	movs	r3, #3
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	e00a      	b.n	800493c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b80      	cmp	r3, #128	; 0x80
 800492a:	d102      	bne.n	8004932 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800492c:	2302      	movs	r3, #2
 800492e:	613b      	str	r3, [r7, #16]
 8004930:	e004      	b.n	800493c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b70      	cmp	r3, #112	; 0x70
 8004936:	d101      	bne.n	800493c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004938:	2301      	movs	r3, #1
 800493a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f023 0207 	bic.w	r2, r3, #7
 8004944:	4909      	ldr	r1, [pc, #36]	; (800496c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800494c:	4b07      	ldr	r3, [pc, #28]	; (800496c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	429a      	cmp	r2, r3
 8004958:	d001      	beq.n	800495e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40021000 	.word	0x40021000
 800496c:	40022000 	.word	0x40022000

08004970 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004978:	2300      	movs	r3, #0
 800497a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800497c:	2300      	movs	r3, #0
 800497e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004988:	2b00      	cmp	r3, #0
 800498a:	d041      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004990:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004994:	d02a      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004996:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800499a:	d824      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800499c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049a0:	d008      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049a6:	d81e      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049b0:	d010      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049b2:	e018      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049b4:	4b86      	ldr	r3, [pc, #536]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4a85      	ldr	r2, [pc, #532]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049c0:	e015      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3304      	adds	r3, #4
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fabb 	bl	8004f44 <RCCEx_PLLSAI1_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049d2:	e00c      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3320      	adds	r3, #32
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fba6 	bl	800512c <RCCEx_PLLSAI2_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049e4:	e003      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	74fb      	strb	r3, [r7, #19]
      break;
 80049ea:	e000      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ee:	7cfb      	ldrb	r3, [r7, #19]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049f4:	4b76      	ldr	r3, [pc, #472]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a02:	4973      	ldr	r1, [pc, #460]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a0a:	e001      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0c:	7cfb      	ldrb	r3, [r7, #19]
 8004a0e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d041      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a24:	d02a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a2a:	d824      	bhi.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a30:	d008      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a36:	d81e      	bhi.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a40:	d010      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a42:	e018      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a44:	4b62      	ldr	r3, [pc, #392]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4a61      	ldr	r2, [pc, #388]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a50:	e015      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3304      	adds	r3, #4
 8004a56:	2100      	movs	r1, #0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fa73 	bl	8004f44 <RCCEx_PLLSAI1_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a62:	e00c      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3320      	adds	r3, #32
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fb5e 	bl	800512c <RCCEx_PLLSAI2_Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a74:	e003      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	74fb      	strb	r3, [r7, #19]
      break;
 8004a7a:	e000      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a7e:	7cfb      	ldrb	r3, [r7, #19]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10b      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a84:	4b52      	ldr	r3, [pc, #328]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a92:	494f      	ldr	r1, [pc, #316]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a9a:	e001      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9c:	7cfb      	ldrb	r3, [r7, #19]
 8004a9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 80a0 	beq.w	8004bee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ab2:	4b47      	ldr	r3, [pc, #284]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00d      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ac8:	4b41      	ldr	r3, [pc, #260]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004acc:	4a40      	ldr	r2, [pc, #256]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ad4:	4b3e      	ldr	r3, [pc, #248]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ae4:	4b3b      	ldr	r3, [pc, #236]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a3a      	ldr	r2, [pc, #232]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004af0:	f7fc f8e0 	bl	8000cb4 <HAL_GetTick>
 8004af4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004af6:	e009      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af8:	f7fc f8dc 	bl	8000cb4 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d902      	bls.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	74fb      	strb	r3, [r7, #19]
        break;
 8004b0a:	e005      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b0c:	4b31      	ldr	r3, [pc, #196]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0ef      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b18:	7cfb      	ldrb	r3, [r7, #19]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d15c      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b1e:	4b2c      	ldr	r3, [pc, #176]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01f      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d019      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b3c:	4b24      	ldr	r3, [pc, #144]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b48:	4b21      	ldr	r3, [pc, #132]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4e:	4a20      	ldr	r2, [pc, #128]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b58:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	4a1c      	ldr	r2, [pc, #112]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b68:	4a19      	ldr	r2, [pc, #100]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d016      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7a:	f7fc f89b 	bl	8000cb4 <HAL_GetTick>
 8004b7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b80:	e00b      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b82:	f7fc f897 	bl	8000cb4 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d902      	bls.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	74fb      	strb	r3, [r7, #19]
            break;
 8004b98:	e006      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0ec      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10c      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bae:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bbe:	4904      	ldr	r1, [pc, #16]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bc6:	e009      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bc8:	7cfb      	ldrb	r3, [r7, #19]
 8004bca:	74bb      	strb	r3, [r7, #18]
 8004bcc:	e006      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd8:	7cfb      	ldrb	r3, [r7, #19]
 8004bda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bdc:	7c7b      	ldrb	r3, [r7, #17]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d105      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004be2:	4b9e      	ldr	r3, [pc, #632]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be6:	4a9d      	ldr	r2, [pc, #628]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bfa:	4b98      	ldr	r3, [pc, #608]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c00:	f023 0203 	bic.w	r2, r3, #3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	4994      	ldr	r1, [pc, #592]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c1c:	4b8f      	ldr	r3, [pc, #572]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c22:	f023 020c 	bic.w	r2, r3, #12
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2a:	498c      	ldr	r1, [pc, #560]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c3e:	4b87      	ldr	r3, [pc, #540]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	4983      	ldr	r1, [pc, #524]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c60:	4b7e      	ldr	r3, [pc, #504]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6e:	497b      	ldr	r1, [pc, #492]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c82:	4b76      	ldr	r3, [pc, #472]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c90:	4972      	ldr	r1, [pc, #456]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0320 	and.w	r3, r3, #32
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ca4:	4b6d      	ldr	r3, [pc, #436]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004caa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb2:	496a      	ldr	r1, [pc, #424]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cc6:	4b65      	ldr	r3, [pc, #404]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ccc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd4:	4961      	ldr	r1, [pc, #388]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ce8:	4b5c      	ldr	r3, [pc, #368]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf6:	4959      	ldr	r1, [pc, #356]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d0a:	4b54      	ldr	r3, [pc, #336]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d18:	4950      	ldr	r1, [pc, #320]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d2c:	4b4b      	ldr	r3, [pc, #300]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3a:	4948      	ldr	r1, [pc, #288]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d4e:	4b43      	ldr	r3, [pc, #268]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5c:	493f      	ldr	r1, [pc, #252]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d028      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d70:	4b3a      	ldr	r3, [pc, #232]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d7e:	4937      	ldr	r1, [pc, #220]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d8e:	d106      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d90:	4b32      	ldr	r3, [pc, #200]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4a31      	ldr	r2, [pc, #196]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d9a:	60d3      	str	r3, [r2, #12]
 8004d9c:	e011      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004da6:	d10c      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3304      	adds	r3, #4
 8004dac:	2101      	movs	r1, #1
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 f8c8 	bl	8004f44 <RCCEx_PLLSAI1_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004db8:	7cfb      	ldrb	r3, [r7, #19]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004dbe:	7cfb      	ldrb	r3, [r7, #19]
 8004dc0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d028      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dce:	4b23      	ldr	r3, [pc, #140]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ddc:	491f      	ldr	r1, [pc, #124]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dec:	d106      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dee:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	4a1a      	ldr	r2, [pc, #104]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004df8:	60d3      	str	r3, [r2, #12]
 8004dfa:	e011      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e04:	d10c      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 f899 	bl	8004f44 <RCCEx_PLLSAI1_Config>
 8004e12:	4603      	mov	r3, r0
 8004e14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e16:	7cfb      	ldrb	r3, [r7, #19]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e1c:	7cfb      	ldrb	r3, [r7, #19]
 8004e1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d02b      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e2c:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3a:	4908      	ldr	r1, [pc, #32]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e4a:	d109      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e4c:	4b03      	ldr	r3, [pc, #12]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	4a02      	ldr	r2, [pc, #8]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e56:	60d3      	str	r3, [r2, #12]
 8004e58:	e014      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e5a:	bf00      	nop
 8004e5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e68:	d10c      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	2101      	movs	r1, #1
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 f867 	bl	8004f44 <RCCEx_PLLSAI1_Config>
 8004e76:	4603      	mov	r3, r0
 8004e78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e7a:	7cfb      	ldrb	r3, [r7, #19]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e80:	7cfb      	ldrb	r3, [r7, #19]
 8004e82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d02f      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e90:	4b2b      	ldr	r3, [pc, #172]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e9e:	4928      	ldr	r1, [pc, #160]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eae:	d10d      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	2102      	movs	r1, #2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 f844 	bl	8004f44 <RCCEx_PLLSAI1_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ec0:	7cfb      	ldrb	r3, [r7, #19]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d014      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ec6:	7cfb      	ldrb	r3, [r7, #19]
 8004ec8:	74bb      	strb	r3, [r7, #18]
 8004eca:	e011      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3320      	adds	r3, #32
 8004eda:	2102      	movs	r1, #2
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 f925 	bl	800512c <RCCEx_PLLSAI2_Config>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ee6:	7cfb      	ldrb	r3, [r7, #19]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004eec:	7cfb      	ldrb	r3, [r7, #19]
 8004eee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004efc:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f0a:	490d      	ldr	r1, [pc, #52]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f1e:	4b08      	ldr	r3, [pc, #32]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f2e:	4904      	ldr	r1, [pc, #16]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f36:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40021000 	.word	0x40021000

08004f44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f52:	4b75      	ldr	r3, [pc, #468]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d018      	beq.n	8004f90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f5e:	4b72      	ldr	r3, [pc, #456]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f003 0203 	and.w	r2, r3, #3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d10d      	bne.n	8004f8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
       ||
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f76:	4b6c      	ldr	r3, [pc, #432]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	091b      	lsrs	r3, r3, #4
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
       ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d047      	beq.n	800501a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	73fb      	strb	r3, [r7, #15]
 8004f8e:	e044      	b.n	800501a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b03      	cmp	r3, #3
 8004f96:	d018      	beq.n	8004fca <RCCEx_PLLSAI1_Config+0x86>
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d825      	bhi.n	8004fe8 <RCCEx_PLLSAI1_Config+0xa4>
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d002      	beq.n	8004fa6 <RCCEx_PLLSAI1_Config+0x62>
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d009      	beq.n	8004fb8 <RCCEx_PLLSAI1_Config+0x74>
 8004fa4:	e020      	b.n	8004fe8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fa6:	4b60      	ldr	r3, [pc, #384]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d11d      	bne.n	8004fee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fb6:	e01a      	b.n	8004fee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fb8:	4b5b      	ldr	r3, [pc, #364]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d116      	bne.n	8004ff2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fc8:	e013      	b.n	8004ff2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fca:	4b57      	ldr	r3, [pc, #348]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10f      	bne.n	8004ff6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fd6:	4b54      	ldr	r3, [pc, #336]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fe6:	e006      	b.n	8004ff6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
      break;
 8004fec:	e004      	b.n	8004ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fee:	bf00      	nop
 8004ff0:	e002      	b.n	8004ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ff2:	bf00      	nop
 8004ff4:	e000      	b.n	8004ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ff6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10d      	bne.n	800501a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ffe:	4b4a      	ldr	r3, [pc, #296]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6819      	ldr	r1, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	3b01      	subs	r3, #1
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	430b      	orrs	r3, r1
 8005014:	4944      	ldr	r1, [pc, #272]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005016:	4313      	orrs	r3, r2
 8005018:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800501a:	7bfb      	ldrb	r3, [r7, #15]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d17d      	bne.n	800511c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005020:	4b41      	ldr	r3, [pc, #260]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a40      	ldr	r2, [pc, #256]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005026:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800502a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800502c:	f7fb fe42 	bl	8000cb4 <HAL_GetTick>
 8005030:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005032:	e009      	b.n	8005048 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005034:	f7fb fe3e 	bl	8000cb4 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d902      	bls.n	8005048 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	73fb      	strb	r3, [r7, #15]
        break;
 8005046:	e005      	b.n	8005054 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005048:	4b37      	ldr	r3, [pc, #220]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1ef      	bne.n	8005034 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d160      	bne.n	800511c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d111      	bne.n	8005084 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005060:	4b31      	ldr	r3, [pc, #196]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6892      	ldr	r2, [r2, #8]
 8005070:	0211      	lsls	r1, r2, #8
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	68d2      	ldr	r2, [r2, #12]
 8005076:	0912      	lsrs	r2, r2, #4
 8005078:	0452      	lsls	r2, r2, #17
 800507a:	430a      	orrs	r2, r1
 800507c:	492a      	ldr	r1, [pc, #168]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800507e:	4313      	orrs	r3, r2
 8005080:	610b      	str	r3, [r1, #16]
 8005082:	e027      	b.n	80050d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d112      	bne.n	80050b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800508a:	4b27      	ldr	r3, [pc, #156]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005092:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6892      	ldr	r2, [r2, #8]
 800509a:	0211      	lsls	r1, r2, #8
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6912      	ldr	r2, [r2, #16]
 80050a0:	0852      	lsrs	r2, r2, #1
 80050a2:	3a01      	subs	r2, #1
 80050a4:	0552      	lsls	r2, r2, #21
 80050a6:	430a      	orrs	r2, r1
 80050a8:	491f      	ldr	r1, [pc, #124]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	610b      	str	r3, [r1, #16]
 80050ae:	e011      	b.n	80050d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050b0:	4b1d      	ldr	r3, [pc, #116]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6892      	ldr	r2, [r2, #8]
 80050c0:	0211      	lsls	r1, r2, #8
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6952      	ldr	r2, [r2, #20]
 80050c6:	0852      	lsrs	r2, r2, #1
 80050c8:	3a01      	subs	r2, #1
 80050ca:	0652      	lsls	r2, r2, #25
 80050cc:	430a      	orrs	r2, r1
 80050ce:	4916      	ldr	r1, [pc, #88]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050d4:	4b14      	ldr	r3, [pc, #80]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a13      	ldr	r2, [pc, #76]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e0:	f7fb fde8 	bl	8000cb4 <HAL_GetTick>
 80050e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050e6:	e009      	b.n	80050fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050e8:	f7fb fde4 	bl	8000cb4 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d902      	bls.n	80050fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	73fb      	strb	r3, [r7, #15]
          break;
 80050fa:	e005      	b.n	8005108 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0ef      	beq.n	80050e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005110:	691a      	ldr	r2, [r3, #16]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	4904      	ldr	r1, [pc, #16]	; (8005128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005118:	4313      	orrs	r3, r2
 800511a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800511c:	7bfb      	ldrb	r3, [r7, #15]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40021000 	.word	0x40021000

0800512c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800513a:	4b6a      	ldr	r3, [pc, #424]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d018      	beq.n	8005178 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005146:	4b67      	ldr	r3, [pc, #412]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f003 0203 	and.w	r2, r3, #3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d10d      	bne.n	8005172 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
       ||
 800515a:	2b00      	cmp	r3, #0
 800515c:	d009      	beq.n	8005172 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800515e:	4b61      	ldr	r3, [pc, #388]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	091b      	lsrs	r3, r3, #4
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
       ||
 800516e:	429a      	cmp	r2, r3
 8005170:	d047      	beq.n	8005202 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	73fb      	strb	r3, [r7, #15]
 8005176:	e044      	b.n	8005202 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b03      	cmp	r3, #3
 800517e:	d018      	beq.n	80051b2 <RCCEx_PLLSAI2_Config+0x86>
 8005180:	2b03      	cmp	r3, #3
 8005182:	d825      	bhi.n	80051d0 <RCCEx_PLLSAI2_Config+0xa4>
 8005184:	2b01      	cmp	r3, #1
 8005186:	d002      	beq.n	800518e <RCCEx_PLLSAI2_Config+0x62>
 8005188:	2b02      	cmp	r3, #2
 800518a:	d009      	beq.n	80051a0 <RCCEx_PLLSAI2_Config+0x74>
 800518c:	e020      	b.n	80051d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800518e:	4b55      	ldr	r3, [pc, #340]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d11d      	bne.n	80051d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800519e:	e01a      	b.n	80051d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051a0:	4b50      	ldr	r3, [pc, #320]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d116      	bne.n	80051da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b0:	e013      	b.n	80051da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051b2:	4b4c      	ldr	r3, [pc, #304]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10f      	bne.n	80051de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051be:	4b49      	ldr	r3, [pc, #292]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d109      	bne.n	80051de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051ce:	e006      	b.n	80051de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
      break;
 80051d4:	e004      	b.n	80051e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051d6:	bf00      	nop
 80051d8:	e002      	b.n	80051e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051da:	bf00      	nop
 80051dc:	e000      	b.n	80051e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051de:	bf00      	nop
    }

    if(status == HAL_OK)
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10d      	bne.n	8005202 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051e6:	4b3f      	ldr	r3, [pc, #252]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6819      	ldr	r1, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	430b      	orrs	r3, r1
 80051fc:	4939      	ldr	r1, [pc, #228]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005202:	7bfb      	ldrb	r3, [r7, #15]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d167      	bne.n	80052d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005208:	4b36      	ldr	r3, [pc, #216]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a35      	ldr	r2, [pc, #212]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800520e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005214:	f7fb fd4e 	bl	8000cb4 <HAL_GetTick>
 8005218:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800521a:	e009      	b.n	8005230 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800521c:	f7fb fd4a 	bl	8000cb4 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d902      	bls.n	8005230 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	73fb      	strb	r3, [r7, #15]
        break;
 800522e:	e005      	b.n	800523c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005230:	4b2c      	ldr	r3, [pc, #176]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1ef      	bne.n	800521c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d14a      	bne.n	80052d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d111      	bne.n	800526c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005248:	4b26      	ldr	r3, [pc, #152]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6892      	ldr	r2, [r2, #8]
 8005258:	0211      	lsls	r1, r2, #8
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	68d2      	ldr	r2, [r2, #12]
 800525e:	0912      	lsrs	r2, r2, #4
 8005260:	0452      	lsls	r2, r2, #17
 8005262:	430a      	orrs	r2, r1
 8005264:	491f      	ldr	r1, [pc, #124]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005266:	4313      	orrs	r3, r2
 8005268:	614b      	str	r3, [r1, #20]
 800526a:	e011      	b.n	8005290 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800526c:	4b1d      	ldr	r3, [pc, #116]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005274:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6892      	ldr	r2, [r2, #8]
 800527c:	0211      	lsls	r1, r2, #8
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6912      	ldr	r2, [r2, #16]
 8005282:	0852      	lsrs	r2, r2, #1
 8005284:	3a01      	subs	r2, #1
 8005286:	0652      	lsls	r2, r2, #25
 8005288:	430a      	orrs	r2, r1
 800528a:	4916      	ldr	r1, [pc, #88]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800528c:	4313      	orrs	r3, r2
 800528e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005290:	4b14      	ldr	r3, [pc, #80]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a13      	ldr	r2, [pc, #76]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529c:	f7fb fd0a 	bl	8000cb4 <HAL_GetTick>
 80052a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052a2:	e009      	b.n	80052b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052a4:	f7fb fd06 	bl	8000cb4 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d902      	bls.n	80052b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	73fb      	strb	r3, [r7, #15]
          break;
 80052b6:	e005      	b.n	80052c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052b8:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0ef      	beq.n	80052a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052ca:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052cc:	695a      	ldr	r2, [r3, #20]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	4904      	ldr	r1, [pc, #16]	; (80052e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40021000 	.word	0x40021000

080052e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e049      	b.n	800538e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f004 fe96 	bl	800a040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3304      	adds	r3, #4
 8005324:	4619      	mov	r1, r3
 8005326:	4610      	mov	r0, r2
 8005328:	f000 fada 	bl	80058e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6a1a      	ldr	r2, [r3, #32]
 80053a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80053a8:	4013      	ands	r3, r2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10f      	bne.n	80053ce <HAL_TIM_Base_Stop+0x38>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6a1a      	ldr	r2, [r3, #32]
 80053b4:	f240 4344 	movw	r3, #1092	; 0x444
 80053b8:	4013      	ands	r3, r2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d107      	bne.n	80053ce <HAL_TIM_Base_Stop+0x38>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0201 	bic.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d001      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e04f      	b.n	800549c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a23      	ldr	r2, [pc, #140]	; (80054a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d01d      	beq.n	800545a <HAL_TIM_Base_Start_IT+0x76>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005426:	d018      	beq.n	800545a <HAL_TIM_Base_Start_IT+0x76>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1f      	ldr	r2, [pc, #124]	; (80054ac <HAL_TIM_Base_Start_IT+0xc8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d013      	beq.n	800545a <HAL_TIM_Base_Start_IT+0x76>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1e      	ldr	r2, [pc, #120]	; (80054b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00e      	beq.n	800545a <HAL_TIM_Base_Start_IT+0x76>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1c      	ldr	r2, [pc, #112]	; (80054b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d009      	beq.n	800545a <HAL_TIM_Base_Start_IT+0x76>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1b      	ldr	r2, [pc, #108]	; (80054b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d004      	beq.n	800545a <HAL_TIM_Base_Start_IT+0x76>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a19      	ldr	r2, [pc, #100]	; (80054bc <HAL_TIM_Base_Start_IT+0xd8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d115      	bne.n	8005486 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	4b17      	ldr	r3, [pc, #92]	; (80054c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005462:	4013      	ands	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b06      	cmp	r3, #6
 800546a:	d015      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0xb4>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005472:	d011      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005484:	e008      	b.n	8005498 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0201 	orr.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	e000      	b.n	800549a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005498:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	40012c00 	.word	0x40012c00
 80054ac:	40000400 	.word	0x40000400
 80054b0:	40000800 	.word	0x40000800
 80054b4:	40000c00 	.word	0x40000c00
 80054b8:	40013400 	.word	0x40013400
 80054bc:	40014000 	.word	0x40014000
 80054c0:	00010007 	.word	0x00010007

080054c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d122      	bne.n	8005520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d11b      	bne.n	8005520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0202 	mvn.w	r2, #2
 80054f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f9cb 	bl	80058a2 <HAL_TIM_IC_CaptureCallback>
 800550c:	e005      	b.n	800551a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f9bd 	bl	800588e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f9ce 	bl	80058b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b04      	cmp	r3, #4
 800552c:	d122      	bne.n	8005574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b04      	cmp	r3, #4
 800553a:	d11b      	bne.n	8005574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0204 	mvn.w	r2, #4
 8005544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2202      	movs	r2, #2
 800554a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f9a1 	bl	80058a2 <HAL_TIM_IC_CaptureCallback>
 8005560:	e005      	b.n	800556e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f993 	bl	800588e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f9a4 	bl	80058b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b08      	cmp	r3, #8
 8005580:	d122      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b08      	cmp	r3, #8
 800558e:	d11b      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0208 	mvn.w	r2, #8
 8005598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2204      	movs	r2, #4
 800559e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f977 	bl	80058a2 <HAL_TIM_IC_CaptureCallback>
 80055b4:	e005      	b.n	80055c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f969 	bl	800588e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f97a 	bl	80058b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0310 	and.w	r3, r3, #16
 80055d2:	2b10      	cmp	r3, #16
 80055d4:	d122      	bne.n	800561c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	2b10      	cmp	r3, #16
 80055e2:	d11b      	bne.n	800561c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0210 	mvn.w	r2, #16
 80055ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2208      	movs	r2, #8
 80055f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f94d 	bl	80058a2 <HAL_TIM_IC_CaptureCallback>
 8005608:	e005      	b.n	8005616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f93f 	bl	800588e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f950 	bl	80058b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b01      	cmp	r3, #1
 8005628:	d10e      	bne.n	8005648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b01      	cmp	r3, #1
 8005636:	d107      	bne.n	8005648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0201 	mvn.w	r2, #1
 8005640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f004 fa08 	bl	8009a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005652:	2b80      	cmp	r3, #128	; 0x80
 8005654:	d10e      	bne.n	8005674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005660:	2b80      	cmp	r3, #128	; 0x80
 8005662:	d107      	bne.n	8005674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800566c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fafc 	bl	8005c6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005682:	d10e      	bne.n	80056a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568e:	2b80      	cmp	r3, #128	; 0x80
 8005690:	d107      	bne.n	80056a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800569a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 faef 	bl	8005c80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	d10e      	bne.n	80056ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	d107      	bne.n	80056ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f8fe 	bl	80058ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d10e      	bne.n	80056fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d107      	bne.n	80056fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f06f 0220 	mvn.w	r2, #32
 80056f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 faaf 	bl	8005c58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056fa:	bf00      	nop
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_TIM_ConfigClockSource+0x18>
 8005716:	2302      	movs	r3, #2
 8005718:	e0b5      	b.n	8005886 <HAL_TIM_ConfigClockSource+0x184>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005738:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800573c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005744:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005756:	d03e      	beq.n	80057d6 <HAL_TIM_ConfigClockSource+0xd4>
 8005758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800575c:	f200 8087 	bhi.w	800586e <HAL_TIM_ConfigClockSource+0x16c>
 8005760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005764:	f000 8085 	beq.w	8005872 <HAL_TIM_ConfigClockSource+0x170>
 8005768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576c:	d87f      	bhi.n	800586e <HAL_TIM_ConfigClockSource+0x16c>
 800576e:	2b70      	cmp	r3, #112	; 0x70
 8005770:	d01a      	beq.n	80057a8 <HAL_TIM_ConfigClockSource+0xa6>
 8005772:	2b70      	cmp	r3, #112	; 0x70
 8005774:	d87b      	bhi.n	800586e <HAL_TIM_ConfigClockSource+0x16c>
 8005776:	2b60      	cmp	r3, #96	; 0x60
 8005778:	d050      	beq.n	800581c <HAL_TIM_ConfigClockSource+0x11a>
 800577a:	2b60      	cmp	r3, #96	; 0x60
 800577c:	d877      	bhi.n	800586e <HAL_TIM_ConfigClockSource+0x16c>
 800577e:	2b50      	cmp	r3, #80	; 0x50
 8005780:	d03c      	beq.n	80057fc <HAL_TIM_ConfigClockSource+0xfa>
 8005782:	2b50      	cmp	r3, #80	; 0x50
 8005784:	d873      	bhi.n	800586e <HAL_TIM_ConfigClockSource+0x16c>
 8005786:	2b40      	cmp	r3, #64	; 0x40
 8005788:	d058      	beq.n	800583c <HAL_TIM_ConfigClockSource+0x13a>
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d86f      	bhi.n	800586e <HAL_TIM_ConfigClockSource+0x16c>
 800578e:	2b30      	cmp	r3, #48	; 0x30
 8005790:	d064      	beq.n	800585c <HAL_TIM_ConfigClockSource+0x15a>
 8005792:	2b30      	cmp	r3, #48	; 0x30
 8005794:	d86b      	bhi.n	800586e <HAL_TIM_ConfigClockSource+0x16c>
 8005796:	2b20      	cmp	r3, #32
 8005798:	d060      	beq.n	800585c <HAL_TIM_ConfigClockSource+0x15a>
 800579a:	2b20      	cmp	r3, #32
 800579c:	d867      	bhi.n	800586e <HAL_TIM_ConfigClockSource+0x16c>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d05c      	beq.n	800585c <HAL_TIM_ConfigClockSource+0x15a>
 80057a2:	2b10      	cmp	r3, #16
 80057a4:	d05a      	beq.n	800585c <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80057a6:	e062      	b.n	800586e <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6818      	ldr	r0, [r3, #0]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	6899      	ldr	r1, [r3, #8]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f000 f9a6 	bl	8005b08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	609a      	str	r2, [r3, #8]
      break;
 80057d4:	e04e      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	6899      	ldr	r1, [r3, #8]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f000 f98f 	bl	8005b08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057f8:	609a      	str	r2, [r3, #8]
      break;
 80057fa:	e03b      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	6859      	ldr	r1, [r3, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	461a      	mov	r2, r3
 800580a:	f000 f903 	bl	8005a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2150      	movs	r1, #80	; 0x50
 8005814:	4618      	mov	r0, r3
 8005816:	f000 f95c 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 800581a:	e02b      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6818      	ldr	r0, [r3, #0]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	6859      	ldr	r1, [r3, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	461a      	mov	r2, r3
 800582a:	f000 f922 	bl	8005a72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2160      	movs	r1, #96	; 0x60
 8005834:	4618      	mov	r0, r3
 8005836:	f000 f94c 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 800583a:	e01b      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	6859      	ldr	r1, [r3, #4]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	461a      	mov	r2, r3
 800584a:	f000 f8e3 	bl	8005a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2140      	movs	r1, #64	; 0x40
 8005854:	4618      	mov	r0, r3
 8005856:	f000 f93c 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 800585a:	e00b      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f000 f933 	bl	8005ad2 <TIM_ITRx_SetConfig>
        break;
 800586c:	e002      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800586e:	bf00      	nop
 8005870:	e000      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
	...

080058e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a40      	ldr	r2, [pc, #256]	; (80059f4 <TIM_Base_SetConfig+0x114>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d013      	beq.n	8005920 <TIM_Base_SetConfig+0x40>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fe:	d00f      	beq.n	8005920 <TIM_Base_SetConfig+0x40>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a3d      	ldr	r2, [pc, #244]	; (80059f8 <TIM_Base_SetConfig+0x118>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00b      	beq.n	8005920 <TIM_Base_SetConfig+0x40>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a3c      	ldr	r2, [pc, #240]	; (80059fc <TIM_Base_SetConfig+0x11c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d007      	beq.n	8005920 <TIM_Base_SetConfig+0x40>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a3b      	ldr	r2, [pc, #236]	; (8005a00 <TIM_Base_SetConfig+0x120>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_Base_SetConfig+0x40>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a3a      	ldr	r2, [pc, #232]	; (8005a04 <TIM_Base_SetConfig+0x124>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d108      	bne.n	8005932 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a2f      	ldr	r2, [pc, #188]	; (80059f4 <TIM_Base_SetConfig+0x114>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d01f      	beq.n	800597a <TIM_Base_SetConfig+0x9a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005940:	d01b      	beq.n	800597a <TIM_Base_SetConfig+0x9a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2c      	ldr	r2, [pc, #176]	; (80059f8 <TIM_Base_SetConfig+0x118>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d017      	beq.n	800597a <TIM_Base_SetConfig+0x9a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a2b      	ldr	r2, [pc, #172]	; (80059fc <TIM_Base_SetConfig+0x11c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d013      	beq.n	800597a <TIM_Base_SetConfig+0x9a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a2a      	ldr	r2, [pc, #168]	; (8005a00 <TIM_Base_SetConfig+0x120>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d00f      	beq.n	800597a <TIM_Base_SetConfig+0x9a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a29      	ldr	r2, [pc, #164]	; (8005a04 <TIM_Base_SetConfig+0x124>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00b      	beq.n	800597a <TIM_Base_SetConfig+0x9a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a28      	ldr	r2, [pc, #160]	; (8005a08 <TIM_Base_SetConfig+0x128>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d007      	beq.n	800597a <TIM_Base_SetConfig+0x9a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a27      	ldr	r2, [pc, #156]	; (8005a0c <TIM_Base_SetConfig+0x12c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d003      	beq.n	800597a <TIM_Base_SetConfig+0x9a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a26      	ldr	r2, [pc, #152]	; (8005a10 <TIM_Base_SetConfig+0x130>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d108      	bne.n	800598c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a10      	ldr	r2, [pc, #64]	; (80059f4 <TIM_Base_SetConfig+0x114>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00f      	beq.n	80059d8 <TIM_Base_SetConfig+0xf8>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a12      	ldr	r2, [pc, #72]	; (8005a04 <TIM_Base_SetConfig+0x124>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00b      	beq.n	80059d8 <TIM_Base_SetConfig+0xf8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a11      	ldr	r2, [pc, #68]	; (8005a08 <TIM_Base_SetConfig+0x128>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d007      	beq.n	80059d8 <TIM_Base_SetConfig+0xf8>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a10      	ldr	r2, [pc, #64]	; (8005a0c <TIM_Base_SetConfig+0x12c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_Base_SetConfig+0xf8>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a0f      	ldr	r2, [pc, #60]	; (8005a10 <TIM_Base_SetConfig+0x130>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d103      	bne.n	80059e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	615a      	str	r2, [r3, #20]
}
 80059e6:	bf00      	nop
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40012c00 	.word	0x40012c00
 80059f8:	40000400 	.word	0x40000400
 80059fc:	40000800 	.word	0x40000800
 8005a00:	40000c00 	.word	0x40000c00
 8005a04:	40013400 	.word	0x40013400
 8005a08:	40014000 	.word	0x40014000
 8005a0c:	40014400 	.word	0x40014400
 8005a10:	40014800 	.word	0x40014800

08005a14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	f023 0201 	bic.w	r2, r3, #1
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f023 030a 	bic.w	r3, r3, #10
 8005a50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b087      	sub	sp, #28
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	f023 0210 	bic.w	r2, r3, #16
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	031b      	lsls	r3, r3, #12
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005aae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	621a      	str	r2, [r3, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f043 0307 	orr.w	r3, r3, #7
 8005af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	609a      	str	r2, [r3, #8]
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	021a      	lsls	r2, r3, #8
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	609a      	str	r2, [r3, #8]
}
 8005b3c:	bf00      	nop
 8005b3e:	371c      	adds	r7, #28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e068      	b.n	8005c32 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a2e      	ldr	r2, [pc, #184]	; (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a2d      	ldr	r2, [pc, #180]	; (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d108      	bne.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1e      	ldr	r2, [pc, #120]	; (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d01d      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd2:	d018      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a1b      	ldr	r2, [pc, #108]	; (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d013      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a1a      	ldr	r2, [pc, #104]	; (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00e      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a18      	ldr	r2, [pc, #96]	; (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d009      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a13      	ldr	r2, [pc, #76]	; (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d004      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a14      	ldr	r2, [pc, #80]	; (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d10c      	bne.n	8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	40012c00 	.word	0x40012c00
 8005c44:	40013400 	.word	0x40013400
 8005c48:	40000400 	.word	0x40000400
 8005c4c:	40000800 	.word	0x40000800
 8005c50:	40000c00 	.word	0x40000c00
 8005c54:	40014000 	.word	0x40014000

08005c58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e040      	b.n	8005d28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d106      	bne.n	8005cbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f004 f9fa 	bl	800a0b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2224      	movs	r2, #36	; 0x24
 8005cc0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0201 	bic.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f8c0 	bl	8005e58 <UART_SetConfig>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e022      	b.n	8005d28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fb3e 	bl	800636c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fbc5 	bl	80064b0 <UART_CheckIdleState>
 8005d26:	4603      	mov	r3, r0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08a      	sub	sp, #40	; 0x28
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	f040 8082 	bne.w	8005e4e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <HAL_UART_Transmit+0x26>
 8005d50:	88fb      	ldrh	r3, [r7, #6]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e07a      	b.n	8005e50 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_UART_Transmit+0x38>
 8005d64:	2302      	movs	r3, #2
 8005d66:	e073      	b.n	8005e50 <HAL_UART_Transmit+0x120>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2221      	movs	r2, #33	; 0x21
 8005d7c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d7e:	f7fa ff99 	bl	8000cb4 <HAL_GetTick>
 8005d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	88fa      	ldrh	r2, [r7, #6]
 8005d88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	88fa      	ldrh	r2, [r7, #6]
 8005d90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9c:	d108      	bne.n	8005db0 <HAL_UART_Transmit+0x80>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d104      	bne.n	8005db0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	e003      	b.n	8005db8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005dc0:	e02d      	b.n	8005e1e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2180      	movs	r1, #128	; 0x80
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 fbb8 	bl	8006542 <UART_WaitOnFlagUntilTimeout>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e039      	b.n	8005e50 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10b      	bne.n	8005dfa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	881a      	ldrh	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dee:	b292      	uxth	r2, r2
 8005df0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	3302      	adds	r3, #2
 8005df6:	61bb      	str	r3, [r7, #24]
 8005df8:	e008      	b.n	8005e0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	781a      	ldrb	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	b292      	uxth	r2, r2
 8005e04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1cb      	bne.n	8005dc2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2200      	movs	r2, #0
 8005e32:	2140      	movs	r1, #64	; 0x40
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 fb84 	bl	8006542 <UART_WaitOnFlagUntilTimeout>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e005      	b.n	8005e50 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e000      	b.n	8005e50 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005e4e:	2302      	movs	r3, #2
  }
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3720      	adds	r7, #32
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e58:	b5b0      	push	{r4, r5, r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4bad      	ldr	r3, [pc, #692]	; (8006138 <UART_SetConfig+0x2e0>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	69f9      	ldr	r1, [r7, #28]
 8005e8c:	430b      	orrs	r3, r1
 8005e8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4aa2      	ldr	r2, [pc, #648]	; (800613c <UART_SetConfig+0x2e4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d004      	beq.n	8005ec0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69fa      	ldr	r2, [r7, #28]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a99      	ldr	r2, [pc, #612]	; (8006140 <UART_SetConfig+0x2e8>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d121      	bne.n	8005f22 <UART_SetConfig+0xca>
 8005ede:	4b99      	ldr	r3, [pc, #612]	; (8006144 <UART_SetConfig+0x2ec>)
 8005ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee4:	f003 0303 	and.w	r3, r3, #3
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d817      	bhi.n	8005f1c <UART_SetConfig+0xc4>
 8005eec:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <UART_SetConfig+0x9c>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f05 	.word	0x08005f05
 8005ef8:	08005f11 	.word	0x08005f11
 8005efc:	08005f0b 	.word	0x08005f0b
 8005f00:	08005f17 	.word	0x08005f17
 8005f04:	2301      	movs	r3, #1
 8005f06:	76fb      	strb	r3, [r7, #27]
 8005f08:	e0e7      	b.n	80060da <UART_SetConfig+0x282>
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	76fb      	strb	r3, [r7, #27]
 8005f0e:	e0e4      	b.n	80060da <UART_SetConfig+0x282>
 8005f10:	2304      	movs	r3, #4
 8005f12:	76fb      	strb	r3, [r7, #27]
 8005f14:	e0e1      	b.n	80060da <UART_SetConfig+0x282>
 8005f16:	2308      	movs	r3, #8
 8005f18:	76fb      	strb	r3, [r7, #27]
 8005f1a:	e0de      	b.n	80060da <UART_SetConfig+0x282>
 8005f1c:	2310      	movs	r3, #16
 8005f1e:	76fb      	strb	r3, [r7, #27]
 8005f20:	e0db      	b.n	80060da <UART_SetConfig+0x282>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a88      	ldr	r2, [pc, #544]	; (8006148 <UART_SetConfig+0x2f0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d132      	bne.n	8005f92 <UART_SetConfig+0x13a>
 8005f2c:	4b85      	ldr	r3, [pc, #532]	; (8006144 <UART_SetConfig+0x2ec>)
 8005f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f32:	f003 030c 	and.w	r3, r3, #12
 8005f36:	2b0c      	cmp	r3, #12
 8005f38:	d828      	bhi.n	8005f8c <UART_SetConfig+0x134>
 8005f3a:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <UART_SetConfig+0xe8>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f75 	.word	0x08005f75
 8005f44:	08005f8d 	.word	0x08005f8d
 8005f48:	08005f8d 	.word	0x08005f8d
 8005f4c:	08005f8d 	.word	0x08005f8d
 8005f50:	08005f81 	.word	0x08005f81
 8005f54:	08005f8d 	.word	0x08005f8d
 8005f58:	08005f8d 	.word	0x08005f8d
 8005f5c:	08005f8d 	.word	0x08005f8d
 8005f60:	08005f7b 	.word	0x08005f7b
 8005f64:	08005f8d 	.word	0x08005f8d
 8005f68:	08005f8d 	.word	0x08005f8d
 8005f6c:	08005f8d 	.word	0x08005f8d
 8005f70:	08005f87 	.word	0x08005f87
 8005f74:	2300      	movs	r3, #0
 8005f76:	76fb      	strb	r3, [r7, #27]
 8005f78:	e0af      	b.n	80060da <UART_SetConfig+0x282>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	76fb      	strb	r3, [r7, #27]
 8005f7e:	e0ac      	b.n	80060da <UART_SetConfig+0x282>
 8005f80:	2304      	movs	r3, #4
 8005f82:	76fb      	strb	r3, [r7, #27]
 8005f84:	e0a9      	b.n	80060da <UART_SetConfig+0x282>
 8005f86:	2308      	movs	r3, #8
 8005f88:	76fb      	strb	r3, [r7, #27]
 8005f8a:	e0a6      	b.n	80060da <UART_SetConfig+0x282>
 8005f8c:	2310      	movs	r3, #16
 8005f8e:	76fb      	strb	r3, [r7, #27]
 8005f90:	e0a3      	b.n	80060da <UART_SetConfig+0x282>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a6d      	ldr	r2, [pc, #436]	; (800614c <UART_SetConfig+0x2f4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d120      	bne.n	8005fde <UART_SetConfig+0x186>
 8005f9c:	4b69      	ldr	r3, [pc, #420]	; (8006144 <UART_SetConfig+0x2ec>)
 8005f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fa6:	2b30      	cmp	r3, #48	; 0x30
 8005fa8:	d013      	beq.n	8005fd2 <UART_SetConfig+0x17a>
 8005faa:	2b30      	cmp	r3, #48	; 0x30
 8005fac:	d814      	bhi.n	8005fd8 <UART_SetConfig+0x180>
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d009      	beq.n	8005fc6 <UART_SetConfig+0x16e>
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d810      	bhi.n	8005fd8 <UART_SetConfig+0x180>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <UART_SetConfig+0x168>
 8005fba:	2b10      	cmp	r3, #16
 8005fbc:	d006      	beq.n	8005fcc <UART_SetConfig+0x174>
 8005fbe:	e00b      	b.n	8005fd8 <UART_SetConfig+0x180>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	76fb      	strb	r3, [r7, #27]
 8005fc4:	e089      	b.n	80060da <UART_SetConfig+0x282>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	76fb      	strb	r3, [r7, #27]
 8005fca:	e086      	b.n	80060da <UART_SetConfig+0x282>
 8005fcc:	2304      	movs	r3, #4
 8005fce:	76fb      	strb	r3, [r7, #27]
 8005fd0:	e083      	b.n	80060da <UART_SetConfig+0x282>
 8005fd2:	2308      	movs	r3, #8
 8005fd4:	76fb      	strb	r3, [r7, #27]
 8005fd6:	e080      	b.n	80060da <UART_SetConfig+0x282>
 8005fd8:	2310      	movs	r3, #16
 8005fda:	76fb      	strb	r3, [r7, #27]
 8005fdc:	e07d      	b.n	80060da <UART_SetConfig+0x282>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a5b      	ldr	r2, [pc, #364]	; (8006150 <UART_SetConfig+0x2f8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d120      	bne.n	800602a <UART_SetConfig+0x1d2>
 8005fe8:	4b56      	ldr	r3, [pc, #344]	; (8006144 <UART_SetConfig+0x2ec>)
 8005fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ff2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ff4:	d013      	beq.n	800601e <UART_SetConfig+0x1c6>
 8005ff6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ff8:	d814      	bhi.n	8006024 <UART_SetConfig+0x1cc>
 8005ffa:	2b80      	cmp	r3, #128	; 0x80
 8005ffc:	d009      	beq.n	8006012 <UART_SetConfig+0x1ba>
 8005ffe:	2b80      	cmp	r3, #128	; 0x80
 8006000:	d810      	bhi.n	8006024 <UART_SetConfig+0x1cc>
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <UART_SetConfig+0x1b4>
 8006006:	2b40      	cmp	r3, #64	; 0x40
 8006008:	d006      	beq.n	8006018 <UART_SetConfig+0x1c0>
 800600a:	e00b      	b.n	8006024 <UART_SetConfig+0x1cc>
 800600c:	2300      	movs	r3, #0
 800600e:	76fb      	strb	r3, [r7, #27]
 8006010:	e063      	b.n	80060da <UART_SetConfig+0x282>
 8006012:	2302      	movs	r3, #2
 8006014:	76fb      	strb	r3, [r7, #27]
 8006016:	e060      	b.n	80060da <UART_SetConfig+0x282>
 8006018:	2304      	movs	r3, #4
 800601a:	76fb      	strb	r3, [r7, #27]
 800601c:	e05d      	b.n	80060da <UART_SetConfig+0x282>
 800601e:	2308      	movs	r3, #8
 8006020:	76fb      	strb	r3, [r7, #27]
 8006022:	e05a      	b.n	80060da <UART_SetConfig+0x282>
 8006024:	2310      	movs	r3, #16
 8006026:	76fb      	strb	r3, [r7, #27]
 8006028:	e057      	b.n	80060da <UART_SetConfig+0x282>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a49      	ldr	r2, [pc, #292]	; (8006154 <UART_SetConfig+0x2fc>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d125      	bne.n	8006080 <UART_SetConfig+0x228>
 8006034:	4b43      	ldr	r3, [pc, #268]	; (8006144 <UART_SetConfig+0x2ec>)
 8006036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006042:	d017      	beq.n	8006074 <UART_SetConfig+0x21c>
 8006044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006048:	d817      	bhi.n	800607a <UART_SetConfig+0x222>
 800604a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800604e:	d00b      	beq.n	8006068 <UART_SetConfig+0x210>
 8006050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006054:	d811      	bhi.n	800607a <UART_SetConfig+0x222>
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <UART_SetConfig+0x20a>
 800605a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800605e:	d006      	beq.n	800606e <UART_SetConfig+0x216>
 8006060:	e00b      	b.n	800607a <UART_SetConfig+0x222>
 8006062:	2300      	movs	r3, #0
 8006064:	76fb      	strb	r3, [r7, #27]
 8006066:	e038      	b.n	80060da <UART_SetConfig+0x282>
 8006068:	2302      	movs	r3, #2
 800606a:	76fb      	strb	r3, [r7, #27]
 800606c:	e035      	b.n	80060da <UART_SetConfig+0x282>
 800606e:	2304      	movs	r3, #4
 8006070:	76fb      	strb	r3, [r7, #27]
 8006072:	e032      	b.n	80060da <UART_SetConfig+0x282>
 8006074:	2308      	movs	r3, #8
 8006076:	76fb      	strb	r3, [r7, #27]
 8006078:	e02f      	b.n	80060da <UART_SetConfig+0x282>
 800607a:	2310      	movs	r3, #16
 800607c:	76fb      	strb	r3, [r7, #27]
 800607e:	e02c      	b.n	80060da <UART_SetConfig+0x282>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a2d      	ldr	r2, [pc, #180]	; (800613c <UART_SetConfig+0x2e4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d125      	bne.n	80060d6 <UART_SetConfig+0x27e>
 800608a:	4b2e      	ldr	r3, [pc, #184]	; (8006144 <UART_SetConfig+0x2ec>)
 800608c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006090:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006094:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006098:	d017      	beq.n	80060ca <UART_SetConfig+0x272>
 800609a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800609e:	d817      	bhi.n	80060d0 <UART_SetConfig+0x278>
 80060a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a4:	d00b      	beq.n	80060be <UART_SetConfig+0x266>
 80060a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060aa:	d811      	bhi.n	80060d0 <UART_SetConfig+0x278>
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <UART_SetConfig+0x260>
 80060b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b4:	d006      	beq.n	80060c4 <UART_SetConfig+0x26c>
 80060b6:	e00b      	b.n	80060d0 <UART_SetConfig+0x278>
 80060b8:	2300      	movs	r3, #0
 80060ba:	76fb      	strb	r3, [r7, #27]
 80060bc:	e00d      	b.n	80060da <UART_SetConfig+0x282>
 80060be:	2302      	movs	r3, #2
 80060c0:	76fb      	strb	r3, [r7, #27]
 80060c2:	e00a      	b.n	80060da <UART_SetConfig+0x282>
 80060c4:	2304      	movs	r3, #4
 80060c6:	76fb      	strb	r3, [r7, #27]
 80060c8:	e007      	b.n	80060da <UART_SetConfig+0x282>
 80060ca:	2308      	movs	r3, #8
 80060cc:	76fb      	strb	r3, [r7, #27]
 80060ce:	e004      	b.n	80060da <UART_SetConfig+0x282>
 80060d0:	2310      	movs	r3, #16
 80060d2:	76fb      	strb	r3, [r7, #27]
 80060d4:	e001      	b.n	80060da <UART_SetConfig+0x282>
 80060d6:	2310      	movs	r3, #16
 80060d8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a17      	ldr	r2, [pc, #92]	; (800613c <UART_SetConfig+0x2e4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	f040 8087 	bne.w	80061f4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060e6:	7efb      	ldrb	r3, [r7, #27]
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d837      	bhi.n	800615c <UART_SetConfig+0x304>
 80060ec:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <UART_SetConfig+0x29c>)
 80060ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f2:	bf00      	nop
 80060f4:	08006119 	.word	0x08006119
 80060f8:	0800615d 	.word	0x0800615d
 80060fc:	08006121 	.word	0x08006121
 8006100:	0800615d 	.word	0x0800615d
 8006104:	08006127 	.word	0x08006127
 8006108:	0800615d 	.word	0x0800615d
 800610c:	0800615d 	.word	0x0800615d
 8006110:	0800615d 	.word	0x0800615d
 8006114:	0800612f 	.word	0x0800612f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006118:	f7fe fb9e 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 800611c:	6178      	str	r0, [r7, #20]
        break;
 800611e:	e022      	b.n	8006166 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006120:	4b0d      	ldr	r3, [pc, #52]	; (8006158 <UART_SetConfig+0x300>)
 8006122:	617b      	str	r3, [r7, #20]
        break;
 8006124:	e01f      	b.n	8006166 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006126:	f7fe faff 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 800612a:	6178      	str	r0, [r7, #20]
        break;
 800612c:	e01b      	b.n	8006166 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800612e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006132:	617b      	str	r3, [r7, #20]
        break;
 8006134:	e017      	b.n	8006166 <UART_SetConfig+0x30e>
 8006136:	bf00      	nop
 8006138:	efff69f3 	.word	0xefff69f3
 800613c:	40008000 	.word	0x40008000
 8006140:	40013800 	.word	0x40013800
 8006144:	40021000 	.word	0x40021000
 8006148:	40004400 	.word	0x40004400
 800614c:	40004800 	.word	0x40004800
 8006150:	40004c00 	.word	0x40004c00
 8006154:	40005000 	.word	0x40005000
 8006158:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	76bb      	strb	r3, [r7, #26]
        break;
 8006164:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 80f1 	beq.w	8006350 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	4613      	mov	r3, r2
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	4413      	add	r3, r2
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	429a      	cmp	r2, r3
 800617c:	d305      	bcc.n	800618a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	429a      	cmp	r2, r3
 8006188:	d902      	bls.n	8006190 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	76bb      	strb	r3, [r7, #26]
 800618e:	e0df      	b.n	8006350 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	4618      	mov	r0, r3
 8006194:	f04f 0100 	mov.w	r1, #0
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	020b      	lsls	r3, r1, #8
 80061a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80061a6:	0202      	lsls	r2, r0, #8
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	6849      	ldr	r1, [r1, #4]
 80061ac:	0849      	lsrs	r1, r1, #1
 80061ae:	4608      	mov	r0, r1
 80061b0:	f04f 0100 	mov.w	r1, #0
 80061b4:	1814      	adds	r4, r2, r0
 80061b6:	eb43 0501 	adc.w	r5, r3, r1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	461a      	mov	r2, r3
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	4620      	mov	r0, r4
 80061c6:	4629      	mov	r1, r5
 80061c8:	f7fa fb90 	bl	80008ec <__aeabi_uldivmod>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4613      	mov	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061da:	d308      	bcc.n	80061ee <UART_SetConfig+0x396>
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061e2:	d204      	bcs.n	80061ee <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	60da      	str	r2, [r3, #12]
 80061ec:	e0b0      	b.n	8006350 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	76bb      	strb	r3, [r7, #26]
 80061f2:	e0ad      	b.n	8006350 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061fc:	d15c      	bne.n	80062b8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80061fe:	7efb      	ldrb	r3, [r7, #27]
 8006200:	2b08      	cmp	r3, #8
 8006202:	d828      	bhi.n	8006256 <UART_SetConfig+0x3fe>
 8006204:	a201      	add	r2, pc, #4	; (adr r2, 800620c <UART_SetConfig+0x3b4>)
 8006206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620a:	bf00      	nop
 800620c:	08006231 	.word	0x08006231
 8006210:	08006239 	.word	0x08006239
 8006214:	08006241 	.word	0x08006241
 8006218:	08006257 	.word	0x08006257
 800621c:	08006247 	.word	0x08006247
 8006220:	08006257 	.word	0x08006257
 8006224:	08006257 	.word	0x08006257
 8006228:	08006257 	.word	0x08006257
 800622c:	0800624f 	.word	0x0800624f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006230:	f7fe fb12 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 8006234:	6178      	str	r0, [r7, #20]
        break;
 8006236:	e013      	b.n	8006260 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006238:	f7fe fb24 	bl	8004884 <HAL_RCC_GetPCLK2Freq>
 800623c:	6178      	str	r0, [r7, #20]
        break;
 800623e:	e00f      	b.n	8006260 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006240:	4b49      	ldr	r3, [pc, #292]	; (8006368 <UART_SetConfig+0x510>)
 8006242:	617b      	str	r3, [r7, #20]
        break;
 8006244:	e00c      	b.n	8006260 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006246:	f7fe fa6f 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 800624a:	6178      	str	r0, [r7, #20]
        break;
 800624c:	e008      	b.n	8006260 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800624e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006252:	617b      	str	r3, [r7, #20]
        break;
 8006254:	e004      	b.n	8006260 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	76bb      	strb	r3, [r7, #26]
        break;
 800625e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d074      	beq.n	8006350 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	005a      	lsls	r2, r3, #1
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	085b      	lsrs	r3, r3, #1
 8006270:	441a      	add	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	fbb2 f3f3 	udiv	r3, r2, r3
 800627a:	b29b      	uxth	r3, r3
 800627c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	2b0f      	cmp	r3, #15
 8006282:	d916      	bls.n	80062b2 <UART_SetConfig+0x45a>
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800628a:	d212      	bcs.n	80062b2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	b29b      	uxth	r3, r3
 8006290:	f023 030f 	bic.w	r3, r3, #15
 8006294:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	085b      	lsrs	r3, r3, #1
 800629a:	b29b      	uxth	r3, r3
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	89fb      	ldrh	r3, [r7, #14]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	89fa      	ldrh	r2, [r7, #14]
 80062ae:	60da      	str	r2, [r3, #12]
 80062b0:	e04e      	b.n	8006350 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	76bb      	strb	r3, [r7, #26]
 80062b6:	e04b      	b.n	8006350 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062b8:	7efb      	ldrb	r3, [r7, #27]
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d827      	bhi.n	800630e <UART_SetConfig+0x4b6>
 80062be:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <UART_SetConfig+0x46c>)
 80062c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c4:	080062e9 	.word	0x080062e9
 80062c8:	080062f1 	.word	0x080062f1
 80062cc:	080062f9 	.word	0x080062f9
 80062d0:	0800630f 	.word	0x0800630f
 80062d4:	080062ff 	.word	0x080062ff
 80062d8:	0800630f 	.word	0x0800630f
 80062dc:	0800630f 	.word	0x0800630f
 80062e0:	0800630f 	.word	0x0800630f
 80062e4:	08006307 	.word	0x08006307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062e8:	f7fe fab6 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 80062ec:	6178      	str	r0, [r7, #20]
        break;
 80062ee:	e013      	b.n	8006318 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062f0:	f7fe fac8 	bl	8004884 <HAL_RCC_GetPCLK2Freq>
 80062f4:	6178      	str	r0, [r7, #20]
        break;
 80062f6:	e00f      	b.n	8006318 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062f8:	4b1b      	ldr	r3, [pc, #108]	; (8006368 <UART_SetConfig+0x510>)
 80062fa:	617b      	str	r3, [r7, #20]
        break;
 80062fc:	e00c      	b.n	8006318 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062fe:	f7fe fa13 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 8006302:	6178      	str	r0, [r7, #20]
        break;
 8006304:	e008      	b.n	8006318 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800630a:	617b      	str	r3, [r7, #20]
        break;
 800630c:	e004      	b.n	8006318 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	76bb      	strb	r3, [r7, #26]
        break;
 8006316:	bf00      	nop
    }

    if (pclk != 0U)
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d018      	beq.n	8006350 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	085a      	lsrs	r2, r3, #1
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	441a      	add	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	b29b      	uxth	r3, r3
 8006332:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	2b0f      	cmp	r3, #15
 8006338:	d908      	bls.n	800634c <UART_SetConfig+0x4f4>
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006340:	d204      	bcs.n	800634c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	60da      	str	r2, [r3, #12]
 800634a:	e001      	b.n	8006350 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800635c:	7ebb      	ldrb	r3, [r7, #26]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3720      	adds	r7, #32
 8006362:	46bd      	mov	sp, r7
 8006364:	bdb0      	pop	{r4, r5, r7, pc}
 8006366:	bf00      	nop
 8006368:	00f42400 	.word	0x00f42400

0800636c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	f003 0310 	and.w	r3, r3, #16
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01a      	beq.n	8006482 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800646a:	d10a      	bne.n	8006482 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	605a      	str	r2, [r3, #4]
  }
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064c0:	f7fa fbf8 	bl	8000cb4 <HAL_GetTick>
 80064c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d10e      	bne.n	80064f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f82d 	bl	8006542 <UART_WaitOnFlagUntilTimeout>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e023      	b.n	800653a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d10e      	bne.n	800651e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006500:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f817 	bl	8006542 <UART_WaitOnFlagUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e00d      	b.n	800653a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2220      	movs	r2, #32
 8006522:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	603b      	str	r3, [r7, #0]
 800654e:	4613      	mov	r3, r2
 8006550:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006552:	e05e      	b.n	8006612 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800655a:	d05a      	beq.n	8006612 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655c:	f7fa fbaa 	bl	8000cb4 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	429a      	cmp	r2, r3
 800656a:	d302      	bcc.n	8006572 <UART_WaitOnFlagUntilTimeout+0x30>
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d11b      	bne.n	80065aa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006580:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0201 	bic.w	r2, r2, #1
 8006590:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2220      	movs	r2, #32
 8006596:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2220      	movs	r2, #32
 800659c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e043      	b.n	8006632 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d02c      	beq.n	8006612 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c6:	d124      	bne.n	8006612 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065d0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0201 	bic.w	r2, r2, #1
 80065f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2220      	movs	r2, #32
 80065fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2220      	movs	r2, #32
 8006602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e00f      	b.n	8006632 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69da      	ldr	r2, [r3, #28]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	4013      	ands	r3, r2
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	429a      	cmp	r2, r3
 8006620:	bf0c      	ite	eq
 8006622:	2301      	moveq	r3, #1
 8006624:	2300      	movne	r3, #0
 8006626:	b2db      	uxtb	r3, r3
 8006628:	461a      	mov	r2, r3
 800662a:	79fb      	ldrb	r3, [r7, #7]
 800662c:	429a      	cmp	r2, r3
 800662e:	d091      	beq.n	8006554 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800663a:	b084      	sub	sp, #16
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	f107 001c 	add.w	r0, r7, #28
 8006648:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 f9cf 	bl	80079fc <USB_CoreReset>
 800665e:	4603      	mov	r3, r0
 8006660:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d106      	bne.n	8006676 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	639a      	str	r2, [r3, #56]	; 0x38
 8006674:	e005      	b.n	8006682 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006682:	7bfb      	ldrb	r3, [r7, #15]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800668e:	b004      	add	sp, #16
 8006690:	4770      	bx	lr
	...

08006694 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	4613      	mov	r3, r2
 80066a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d165      	bne.n	8006774 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	4a3e      	ldr	r2, [pc, #248]	; (80067a4 <USB_SetTurnaroundTime+0x110>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d906      	bls.n	80066be <USB_SetTurnaroundTime+0x2a>
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4a3d      	ldr	r2, [pc, #244]	; (80067a8 <USB_SetTurnaroundTime+0x114>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d202      	bcs.n	80066be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80066b8:	230f      	movs	r3, #15
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	e05c      	b.n	8006778 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4a39      	ldr	r2, [pc, #228]	; (80067a8 <USB_SetTurnaroundTime+0x114>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d306      	bcc.n	80066d4 <USB_SetTurnaroundTime+0x40>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	4a38      	ldr	r2, [pc, #224]	; (80067ac <USB_SetTurnaroundTime+0x118>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d202      	bcs.n	80066d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80066ce:	230e      	movs	r3, #14
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	e051      	b.n	8006778 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4a35      	ldr	r2, [pc, #212]	; (80067ac <USB_SetTurnaroundTime+0x118>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d306      	bcc.n	80066ea <USB_SetTurnaroundTime+0x56>
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4a34      	ldr	r2, [pc, #208]	; (80067b0 <USB_SetTurnaroundTime+0x11c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d202      	bcs.n	80066ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80066e4:	230d      	movs	r3, #13
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	e046      	b.n	8006778 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	4a30      	ldr	r2, [pc, #192]	; (80067b0 <USB_SetTurnaroundTime+0x11c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d306      	bcc.n	8006700 <USB_SetTurnaroundTime+0x6c>
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	4a2f      	ldr	r2, [pc, #188]	; (80067b4 <USB_SetTurnaroundTime+0x120>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d802      	bhi.n	8006700 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80066fa:	230c      	movs	r3, #12
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	e03b      	b.n	8006778 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4a2c      	ldr	r2, [pc, #176]	; (80067b4 <USB_SetTurnaroundTime+0x120>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d906      	bls.n	8006716 <USB_SetTurnaroundTime+0x82>
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4a2b      	ldr	r2, [pc, #172]	; (80067b8 <USB_SetTurnaroundTime+0x124>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d802      	bhi.n	8006716 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006710:	230b      	movs	r3, #11
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	e030      	b.n	8006778 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	4a27      	ldr	r2, [pc, #156]	; (80067b8 <USB_SetTurnaroundTime+0x124>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d906      	bls.n	800672c <USB_SetTurnaroundTime+0x98>
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	4a26      	ldr	r2, [pc, #152]	; (80067bc <USB_SetTurnaroundTime+0x128>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d802      	bhi.n	800672c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006726:	230a      	movs	r3, #10
 8006728:	617b      	str	r3, [r7, #20]
 800672a:	e025      	b.n	8006778 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	4a23      	ldr	r2, [pc, #140]	; (80067bc <USB_SetTurnaroundTime+0x128>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d906      	bls.n	8006742 <USB_SetTurnaroundTime+0xae>
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4a22      	ldr	r2, [pc, #136]	; (80067c0 <USB_SetTurnaroundTime+0x12c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d202      	bcs.n	8006742 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800673c:	2309      	movs	r3, #9
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	e01a      	b.n	8006778 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	4a1e      	ldr	r2, [pc, #120]	; (80067c0 <USB_SetTurnaroundTime+0x12c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d306      	bcc.n	8006758 <USB_SetTurnaroundTime+0xc4>
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	4a1d      	ldr	r2, [pc, #116]	; (80067c4 <USB_SetTurnaroundTime+0x130>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d802      	bhi.n	8006758 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006752:	2308      	movs	r3, #8
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	e00f      	b.n	8006778 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	4a1a      	ldr	r2, [pc, #104]	; (80067c4 <USB_SetTurnaroundTime+0x130>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d906      	bls.n	800676e <USB_SetTurnaroundTime+0xda>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	4a19      	ldr	r2, [pc, #100]	; (80067c8 <USB_SetTurnaroundTime+0x134>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d202      	bcs.n	800676e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006768:	2307      	movs	r3, #7
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	e004      	b.n	8006778 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800676e:	2306      	movs	r3, #6
 8006770:	617b      	str	r3, [r7, #20]
 8006772:	e001      	b.n	8006778 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006774:	2309      	movs	r3, #9
 8006776:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	029b      	lsls	r3, r3, #10
 800678c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006790:	431a      	orrs	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	00d8acbf 	.word	0x00d8acbf
 80067a8:	00e4e1c0 	.word	0x00e4e1c0
 80067ac:	00f42400 	.word	0x00f42400
 80067b0:	01067380 	.word	0x01067380
 80067b4:	011a499f 	.word	0x011a499f
 80067b8:	01312cff 	.word	0x01312cff
 80067bc:	014ca43f 	.word	0x014ca43f
 80067c0:	016e3600 	.word	0x016e3600
 80067c4:	01a6ab1f 	.word	0x01a6ab1f
 80067c8:	01e84800 	.word	0x01e84800

080067cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f043 0201 	orr.w	r2, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f023 0201 	bic.w	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006828:	78fb      	ldrb	r3, [r7, #3]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d106      	bne.n	800683c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	60da      	str	r2, [r3, #12]
 800683a:	e00b      	b.n	8006854 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d106      	bne.n	8006850 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	60da      	str	r2, [r3, #12]
 800684e:	e001      	b.n	8006854 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e003      	b.n	800685c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006854:	2032      	movs	r0, #50	; 0x32
 8006856:	f7fa fa39 	bl	8000ccc <HAL_Delay>

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006864:	b084      	sub	sp, #16
 8006866:	b580      	push	{r7, lr}
 8006868:	b086      	sub	sp, #24
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800687e:	2300      	movs	r3, #0
 8006880:	613b      	str	r3, [r7, #16]
 8006882:	e009      	b.n	8006898 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	3340      	adds	r3, #64	; 0x40
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	2200      	movs	r2, #0
 8006890:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	3301      	adds	r3, #1
 8006896:	613b      	str	r3, [r7, #16]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	2b0e      	cmp	r3, #14
 800689c:	d9f2      	bls.n	8006884 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800689e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d11c      	bne.n	80068de <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068b2:	f043 0302 	orr.w	r3, r3, #2
 80068b6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068bc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	e005      	b.n	80068ea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068f0:	461a      	mov	r2, r3
 80068f2:	2300      	movs	r3, #0
 80068f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fc:	4619      	mov	r1, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006904:	461a      	mov	r2, r3
 8006906:	680b      	ldr	r3, [r1, #0]
 8006908:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800690a:	2103      	movs	r1, #3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f93d 	bl	8006b8c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006912:	2110      	movs	r1, #16
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f8f1 	bl	8006afc <USB_FlushTxFifo>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f90f 	bl	8006b48 <USB_FlushRxFifo>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800693a:	461a      	mov	r2, r3
 800693c:	2300      	movs	r3, #0
 800693e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006946:	461a      	mov	r2, r3
 8006948:	2300      	movs	r3, #0
 800694a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006952:	461a      	mov	r2, r3
 8006954:	2300      	movs	r3, #0
 8006956:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006958:	2300      	movs	r3, #0
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	e043      	b.n	80069e6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006974:	d118      	bne.n	80069a8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10a      	bne.n	8006992 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006988:	461a      	mov	r2, r3
 800698a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	e013      	b.n	80069ba <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699e:	461a      	mov	r2, r3
 80069a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	e008      	b.n	80069ba <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b4:	461a      	mov	r2, r3
 80069b6:	2300      	movs	r3, #0
 80069b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c6:	461a      	mov	r2, r3
 80069c8:	2300      	movs	r3, #0
 80069ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d8:	461a      	mov	r2, r3
 80069da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	3301      	adds	r3, #1
 80069e4:	613b      	str	r3, [r7, #16]
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d3b7      	bcc.n	800695e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069ee:	2300      	movs	r3, #0
 80069f0:	613b      	str	r3, [r7, #16]
 80069f2:	e043      	b.n	8006a7c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a0a:	d118      	bne.n	8006a3e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10a      	bne.n	8006a28 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	e013      	b.n	8006a50 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a34:	461a      	mov	r2, r3
 8006a36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	e008      	b.n	8006a50 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	2300      	movs	r3, #0
 8006a60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	613b      	str	r3, [r7, #16]
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d3b7      	bcc.n	80069f4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006aa4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	f043 0210 	orr.w	r2, r3, #16
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	699a      	ldr	r2, [r3, #24]
 8006ab6:	4b10      	ldr	r3, [pc, #64]	; (8006af8 <USB_DevInit+0x294>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d005      	beq.n	8006ad0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	f043 0208 	orr.w	r2, r3, #8
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d107      	bne.n	8006ae6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ade:	f043 0304 	orr.w	r3, r3, #4
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3718      	adds	r7, #24
 8006aec:	46bd      	mov	sp, r7
 8006aee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006af2:	b004      	add	sp, #16
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	803c3800 	.word	0x803c3800

08006afc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	019b      	lsls	r3, r3, #6
 8006b0e:	f043 0220 	orr.w	r2, r3, #32
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4a09      	ldr	r2, [pc, #36]	; (8006b44 <USB_FlushTxFifo+0x48>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d901      	bls.n	8006b28 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e006      	b.n	8006b36 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	f003 0320 	and.w	r3, r3, #32
 8006b30:	2b20      	cmp	r3, #32
 8006b32:	d0f0      	beq.n	8006b16 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	00030d40 	.word	0x00030d40

08006b48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006b50:	2300      	movs	r3, #0
 8006b52:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2210      	movs	r2, #16
 8006b58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	60fb      	str	r3, [r7, #12]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4a09      	ldr	r2, [pc, #36]	; (8006b88 <USB_FlushRxFifo+0x40>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d901      	bls.n	8006b6c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e006      	b.n	8006b7a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	f003 0310 	and.w	r3, r3, #16
 8006b74:	2b10      	cmp	r3, #16
 8006b76:	d0f0      	beq.n	8006b5a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	00030d40 	.word	0x00030d40

08006b8c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	68f9      	ldr	r1, [r7, #12]
 8006ba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bac:	4313      	orrs	r3, r2
 8006bae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b087      	sub	sp, #28
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f003 0306 	and.w	r3, r3, #6
 8006bd6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d002      	beq.n	8006be4 <USB_GetDevSpeed+0x26>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b06      	cmp	r3, #6
 8006be2:	d102      	bne.n	8006bea <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006be4:	2302      	movs	r3, #2
 8006be6:	75fb      	strb	r3, [r7, #23]
 8006be8:	e001      	b.n	8006bee <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006bea:	230f      	movs	r3, #15
 8006bec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	371c      	adds	r7, #28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	785b      	ldrb	r3, [r3, #1]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d13a      	bne.n	8006c8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1e:	69da      	ldr	r2, [r3, #28]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	f003 030f 	and.w	r3, r3, #15
 8006c28:	2101      	movs	r1, #1
 8006c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	68f9      	ldr	r1, [r7, #12]
 8006c32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c36:	4313      	orrs	r3, r2
 8006c38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d155      	bne.n	8006cfc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	78db      	ldrb	r3, [r3, #3]
 8006c6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	059b      	lsls	r3, r3, #22
 8006c72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c74:	4313      	orrs	r3, r2
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	0151      	lsls	r1, r2, #5
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	440a      	add	r2, r1
 8006c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	e036      	b.n	8006cfc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c94:	69da      	ldr	r2, [r3, #28]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca4:	041b      	lsls	r3, r3, #16
 8006ca6:	68f9      	ldr	r1, [r7, #12]
 8006ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cac:	4313      	orrs	r3, r2
 8006cae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d11a      	bne.n	8006cfc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	78db      	ldrb	r3, [r3, #3]
 8006ce0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ce2:	430b      	orrs	r3, r1
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cfa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
	...

08006d0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	785b      	ldrb	r3, [r3, #1]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d161      	bne.n	8006dec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d3e:	d11f      	bne.n	8006d80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	0151      	lsls	r1, r2, #5
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	440a      	add	r2, r1
 8006d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	0151      	lsls	r1, r2, #5
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	440a      	add	r2, r1
 8006d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	2101      	movs	r1, #1
 8006d92:	fa01 f303 	lsl.w	r3, r1, r3
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	43db      	mvns	r3, r3
 8006d9a:	68f9      	ldr	r1, [r7, #12]
 8006d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006da0:	4013      	ands	r3, r2
 8006da2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006daa:	69da      	ldr	r2, [r3, #28]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	2101      	movs	r1, #1
 8006db6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	43db      	mvns	r3, r3
 8006dbe:	68f9      	ldr	r1, [r7, #12]
 8006dc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	0159      	lsls	r1, r3, #5
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	440b      	add	r3, r1
 8006dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de2:	4619      	mov	r1, r3
 8006de4:	4b35      	ldr	r3, [pc, #212]	; (8006ebc <USB_DeactivateEndpoint+0x1b0>)
 8006de6:	4013      	ands	r3, r2
 8006de8:	600b      	str	r3, [r1, #0]
 8006dea:	e060      	b.n	8006eae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e02:	d11f      	bne.n	8006e44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	0151      	lsls	r1, r2, #5
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	440a      	add	r2, r1
 8006e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	0151      	lsls	r1, r2, #5
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	440a      	add	r2, r1
 8006e3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	f003 030f 	and.w	r3, r3, #15
 8006e54:	2101      	movs	r1, #1
 8006e56:	fa01 f303 	lsl.w	r3, r1, r3
 8006e5a:	041b      	lsls	r3, r3, #16
 8006e5c:	43db      	mvns	r3, r3
 8006e5e:	68f9      	ldr	r1, [r7, #12]
 8006e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e64:	4013      	ands	r3, r2
 8006e66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e6e:	69da      	ldr	r2, [r3, #28]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	f003 030f 	and.w	r3, r3, #15
 8006e78:	2101      	movs	r1, #1
 8006e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e7e:	041b      	lsls	r3, r3, #16
 8006e80:	43db      	mvns	r3, r3
 8006e82:	68f9      	ldr	r1, [r7, #12]
 8006e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e88:	4013      	ands	r3, r2
 8006e8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	0159      	lsls	r1, r3, #5
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	440b      	add	r3, r1
 8006ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <USB_DeactivateEndpoint+0x1b4>)
 8006eaa:	4013      	ands	r3, r2
 8006eac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	ec337800 	.word	0xec337800
 8006ec0:	eff37800 	.word	0xeff37800

08006ec4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	785b      	ldrb	r3, [r3, #1]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	f040 810a 	bne.w	80070f6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d132      	bne.n	8006f50 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	0151      	lsls	r1, r2, #5
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	440a      	add	r2, r1
 8006f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	0151      	lsls	r1, r2, #5
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	440a      	add	r2, r1
 8006f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	0151      	lsls	r1, r2, #5
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	440a      	add	r2, r1
 8006f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f48:	0cdb      	lsrs	r3, r3, #19
 8006f4a:	04db      	lsls	r3, r3, #19
 8006f4c:	6113      	str	r3, [r2, #16]
 8006f4e:	e074      	b.n	800703a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	0151      	lsls	r1, r2, #5
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	440a      	add	r2, r1
 8006f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f6a:	0cdb      	lsrs	r3, r3, #19
 8006f6c:	04db      	lsls	r3, r3, #19
 8006f6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	0151      	lsls	r1, r2, #5
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	440a      	add	r2, r1
 8006f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	015a      	lsls	r2, r3, #5
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa0:	691a      	ldr	r2, [r3, #16]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6959      	ldr	r1, [r3, #20]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	440b      	add	r3, r1
 8006fac:	1e59      	subs	r1, r3, #1
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fb6:	04d9      	lsls	r1, r3, #19
 8006fb8:	4baf      	ldr	r3, [pc, #700]	; (8007278 <USB_EPStartXfer+0x3b4>)
 8006fba:	400b      	ands	r3, r1
 8006fbc:	6939      	ldr	r1, [r7, #16]
 8006fbe:	0148      	lsls	r0, r1, #5
 8006fc0:	6979      	ldr	r1, [r7, #20]
 8006fc2:	4401      	add	r1, r0
 8006fc4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd8:	691a      	ldr	r2, [r3, #16]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fe2:	6939      	ldr	r1, [r7, #16]
 8006fe4:	0148      	lsls	r0, r1, #5
 8006fe6:	6979      	ldr	r1, [r7, #20]
 8006fe8:	4401      	add	r1, r0
 8006fea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	78db      	ldrb	r3, [r3, #3]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d11f      	bne.n	800703a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	0151      	lsls	r1, r2, #5
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	440a      	add	r2, r1
 8007010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007014:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007018:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	4413      	add	r3, r2
 8007022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	0151      	lsls	r1, r2, #5
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	440a      	add	r2, r1
 8007030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007034:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007038:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	0151      	lsls	r1, r2, #5
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	440a      	add	r2, r1
 8007050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007054:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007058:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	78db      	ldrb	r3, [r3, #3]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d015      	beq.n	800708e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 8100 	beq.w	800726c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	f003 030f 	and.w	r3, r3, #15
 800707c:	2101      	movs	r1, #1
 800707e:	fa01 f303 	lsl.w	r3, r1, r3
 8007082:	6979      	ldr	r1, [r7, #20]
 8007084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007088:	4313      	orrs	r3, r2
 800708a:	634b      	str	r3, [r1, #52]	; 0x34
 800708c:	e0ee      	b.n	800726c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709a:	2b00      	cmp	r3, #0
 800709c:	d110      	bne.n	80070c0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	0151      	lsls	r1, r2, #5
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	440a      	add	r2, r1
 80070b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070bc:	6013      	str	r3, [r2, #0]
 80070be:	e00f      	b.n	80070e0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	0151      	lsls	r1, r2, #5
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	440a      	add	r2, r1
 80070d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070de:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	68d9      	ldr	r1, [r3, #12]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781a      	ldrb	r2, [r3, #0]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f9e2 	bl	80074b8 <USB_WritePacket>
 80070f4:	e0ba      	b.n	800726c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	0151      	lsls	r1, r2, #5
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	440a      	add	r2, r1
 800710c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007110:	0cdb      	lsrs	r3, r3, #19
 8007112:	04db      	lsls	r3, r3, #19
 8007114:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	0151      	lsls	r1, r2, #5
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	440a      	add	r2, r1
 800712c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007130:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007134:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007138:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d123      	bne.n	800718a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800714e:	691a      	ldr	r2, [r3, #16]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007158:	6939      	ldr	r1, [r7, #16]
 800715a:	0148      	lsls	r0, r1, #5
 800715c:	6979      	ldr	r1, [r7, #20]
 800715e:	4401      	add	r1, r0
 8007160:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007164:	4313      	orrs	r3, r2
 8007166:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	0151      	lsls	r1, r2, #5
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	440a      	add	r2, r1
 800717e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007182:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007186:	6113      	str	r3, [r2, #16]
 8007188:	e033      	b.n	80071f2 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	695a      	ldr	r2, [r3, #20]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	4413      	add	r3, r2
 8007194:	1e5a      	subs	r2, r3, #1
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	fbb2 f3f3 	udiv	r3, r2, r3
 800719e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ac:	691a      	ldr	r2, [r3, #16]
 80071ae:	89fb      	ldrh	r3, [r7, #14]
 80071b0:	04d9      	lsls	r1, r3, #19
 80071b2:	4b31      	ldr	r3, [pc, #196]	; (8007278 <USB_EPStartXfer+0x3b4>)
 80071b4:	400b      	ands	r3, r1
 80071b6:	6939      	ldr	r1, [r7, #16]
 80071b8:	0148      	lsls	r0, r1, #5
 80071ba:	6979      	ldr	r1, [r7, #20]
 80071bc:	4401      	add	r1, r0
 80071be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071c2:	4313      	orrs	r3, r2
 80071c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	89f9      	ldrh	r1, [r7, #14]
 80071da:	fb01 f303 	mul.w	r3, r1, r3
 80071de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071e2:	6939      	ldr	r1, [r7, #16]
 80071e4:	0148      	lsls	r0, r1, #5
 80071e6:	6979      	ldr	r1, [r7, #20]
 80071e8:	4401      	add	r1, r0
 80071ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071ee:	4313      	orrs	r3, r2
 80071f0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	78db      	ldrb	r3, [r3, #3]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d128      	bne.n	800724c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007206:	2b00      	cmp	r3, #0
 8007208:	d110      	bne.n	800722c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	015a      	lsls	r2, r3, #5
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	4413      	add	r3, r2
 8007212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	0151      	lsls	r1, r2, #5
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	440a      	add	r2, r1
 8007220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007224:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	e00f      	b.n	800724c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	4413      	add	r3, r2
 8007234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	0151      	lsls	r1, r2, #5
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	440a      	add	r2, r1
 8007242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800724a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	4413      	add	r3, r2
 8007254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	0151      	lsls	r1, r2, #5
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	440a      	add	r2, r1
 8007262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007266:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800726a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	1ff80000 	.word	0x1ff80000

0800727c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	785b      	ldrb	r3, [r3, #1]
 8007294:	2b01      	cmp	r3, #1
 8007296:	f040 80ab 	bne.w	80073f0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d132      	bne.n	8007308 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	0151      	lsls	r1, r2, #5
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	440a      	add	r2, r1
 80072b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	0151      	lsls	r1, r2, #5
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	440a      	add	r2, r1
 80072dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	0151      	lsls	r1, r2, #5
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	440a      	add	r2, r1
 80072fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007300:	0cdb      	lsrs	r3, r3, #19
 8007302:	04db      	lsls	r3, r3, #19
 8007304:	6113      	str	r3, [r2, #16]
 8007306:	e04e      	b.n	80073a6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	0151      	lsls	r1, r2, #5
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	440a      	add	r2, r1
 800731e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007322:	0cdb      	lsrs	r3, r3, #19
 8007324:	04db      	lsls	r3, r3, #19
 8007326:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	0151      	lsls	r1, r2, #5
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	440a      	add	r2, r1
 800733e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007342:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007346:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800734a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	695a      	ldr	r2, [r3, #20]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	429a      	cmp	r2, r3
 8007356:	d903      	bls.n	8007360 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	689a      	ldr	r2, [r3, #8]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4413      	add	r3, r2
 8007368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	0151      	lsls	r1, r2, #5
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	440a      	add	r2, r1
 8007376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800737a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800737e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738c:	691a      	ldr	r2, [r3, #16]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	0148      	lsls	r0, r1, #5
 800739a:	68f9      	ldr	r1, [r7, #12]
 800739c:	4401      	add	r1, r0
 800739e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073a2:	4313      	orrs	r3, r2
 80073a4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	0151      	lsls	r1, r2, #5
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	440a      	add	r2, r1
 80073bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073c4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d06d      	beq.n	80074aa <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	f003 030f 	and.w	r3, r3, #15
 80073de:	2101      	movs	r1, #1
 80073e0:	fa01 f303 	lsl.w	r3, r1, r3
 80073e4:	68f9      	ldr	r1, [r7, #12]
 80073e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073ea:	4313      	orrs	r3, r2
 80073ec:	634b      	str	r3, [r1, #52]	; 0x34
 80073ee:	e05c      	b.n	80074aa <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	440a      	add	r2, r1
 8007406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800740a:	0cdb      	lsrs	r3, r3, #19
 800740c:	04db      	lsls	r3, r3, #19
 800740e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	440a      	add	r2, r1
 8007426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800742a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800742e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007432:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d003      	beq.n	8007444 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	0151      	lsls	r1, r2, #5
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	440a      	add	r2, r1
 800745a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800745e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007462:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007470:	691a      	ldr	r2, [r3, #16]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800747a:	68b9      	ldr	r1, [r7, #8]
 800747c:	0148      	lsls	r0, r1, #5
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	4401      	add	r1, r0
 8007482:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007486:	4313      	orrs	r3, r2
 8007488:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4413      	add	r3, r2
 8007492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	0151      	lsls	r1, r2, #5
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	440a      	add	r2, r1
 80074a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b089      	sub	sp, #36	; 0x24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	4611      	mov	r1, r2
 80074c4:	461a      	mov	r2, r3
 80074c6:	460b      	mov	r3, r1
 80074c8:	71fb      	strb	r3, [r7, #7]
 80074ca:	4613      	mov	r3, r2
 80074cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80074d6:	88bb      	ldrh	r3, [r7, #4]
 80074d8:	3303      	adds	r3, #3
 80074da:	089b      	lsrs	r3, r3, #2
 80074dc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80074de:	2300      	movs	r3, #0
 80074e0:	61bb      	str	r3, [r7, #24]
 80074e2:	e00f      	b.n	8007504 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074e4:	79fb      	ldrb	r3, [r7, #7]
 80074e6:	031a      	lsls	r2, r3, #12
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074f0:	461a      	mov	r2, r3
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	3304      	adds	r3, #4
 80074fc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	3301      	adds	r3, #1
 8007502:	61bb      	str	r3, [r7, #24]
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	429a      	cmp	r2, r3
 800750a:	d3eb      	bcc.n	80074e4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3724      	adds	r7, #36	; 0x24
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800751a:	b480      	push	{r7}
 800751c:	b089      	sub	sp, #36	; 0x24
 800751e:	af00      	add	r7, sp, #0
 8007520:	60f8      	str	r0, [r7, #12]
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	4613      	mov	r3, r2
 8007526:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007530:	88fb      	ldrh	r3, [r7, #6]
 8007532:	3303      	adds	r3, #3
 8007534:	089b      	lsrs	r3, r3, #2
 8007536:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007538:	2300      	movs	r3, #0
 800753a:	61bb      	str	r3, [r7, #24]
 800753c:	e00b      	b.n	8007556 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	601a      	str	r2, [r3, #0]
    pDest++;
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	3304      	adds	r3, #4
 800754e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	3301      	adds	r3, #1
 8007554:	61bb      	str	r3, [r7, #24]
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	429a      	cmp	r2, r3
 800755c:	d3ef      	bcc.n	800753e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800755e:	69fb      	ldr	r3, [r7, #28]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3724      	adds	r7, #36	; 0x24
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	785b      	ldrb	r3, [r3, #1]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d12c      	bne.n	80075e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	db12      	blt.n	80075c0 <USB_EPSetStall+0x54>
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00f      	beq.n	80075c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	0151      	lsls	r1, r2, #5
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	440a      	add	r2, r1
 80075b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	0151      	lsls	r1, r2, #5
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	440a      	add	r2, r1
 80075d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	e02b      	b.n	800763a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	db12      	blt.n	800761a <USB_EPSetStall+0xae>
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00f      	beq.n	800761a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	4413      	add	r3, r2
 8007602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	0151      	lsls	r1, r2, #5
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	440a      	add	r2, r1
 8007610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007614:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007618:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	0151      	lsls	r1, r2, #5
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	440a      	add	r2, r1
 8007630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007638:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	785b      	ldrb	r3, [r3, #1]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d128      	bne.n	80076b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	0151      	lsls	r1, r2, #5
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	440a      	add	r2, r1
 800767a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800767e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007682:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	78db      	ldrb	r3, [r3, #3]
 8007688:	2b03      	cmp	r3, #3
 800768a:	d003      	beq.n	8007694 <USB_EPClearStall+0x4c>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	78db      	ldrb	r3, [r3, #3]
 8007690:	2b02      	cmp	r3, #2
 8007692:	d138      	bne.n	8007706 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	0151      	lsls	r1, r2, #5
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	440a      	add	r2, r1
 80076aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	e027      	b.n	8007706 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	0151      	lsls	r1, r2, #5
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	440a      	add	r2, r1
 80076cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	78db      	ldrb	r3, [r3, #3]
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d003      	beq.n	80076e6 <USB_EPClearStall+0x9e>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	78db      	ldrb	r3, [r3, #3]
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d10f      	bne.n	8007706 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	0151      	lsls	r1, r2, #5
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	440a      	add	r2, r1
 80076fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007704:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007732:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007736:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	78fb      	ldrb	r3, [r7, #3]
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007748:	68f9      	ldr	r1, [r7, #12]
 800774a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800774e:	4313      	orrs	r3, r2
 8007750:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800777a:	f023 0303 	bic.w	r3, r3, #3
 800777e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800778e:	f023 0302 	bic.w	r3, r3, #2
 8007792:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b085      	sub	sp, #20
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077bc:	f023 0303 	bic.w	r3, r3, #3
 80077c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077d0:	f043 0302 	orr.w	r3, r3, #2
 80077d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4013      	ands	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80077fc:	68fb      	ldr	r3, [r7, #12]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800780a:	b480      	push	{r7}
 800780c:	b085      	sub	sp, #20
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	4013      	ands	r3, r2
 800782c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	0c1b      	lsrs	r3, r3, #16
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800783e:	b480      	push	{r7}
 8007840:	b085      	sub	sp, #20
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785a:	69db      	ldr	r3, [r3, #28]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	4013      	ands	r3, r2
 8007860:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	b29b      	uxth	r3, r3
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007872:	b480      	push	{r7}
 8007874:	b085      	sub	sp, #20
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	460b      	mov	r3, r1
 800787c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007882:	78fb      	ldrb	r3, [r7, #3]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	4413      	add	r3, r2
 800788a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	4013      	ands	r3, r2
 800789e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078a0:	68bb      	ldr	r3, [r7, #8]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b087      	sub	sp, #28
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	460b      	mov	r3, r1
 80078b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80078d2:	78fb      	ldrb	r3, [r7, #3]
 80078d4:	f003 030f 	and.w	r3, r3, #15
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	fa22 f303 	lsr.w	r3, r2, r3
 80078de:	01db      	lsls	r3, r3, #7
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80078e8:	78fb      	ldrb	r3, [r7, #3]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	4013      	ands	r3, r2
 80078fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078fc:	68bb      	ldr	r3, [r7, #8]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	371c      	adds	r7, #28
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800790a:	b480      	push	{r7}
 800790c:	b083      	sub	sp, #12
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	f003 0301 	and.w	r3, r3, #1
}
 800791a:	4618      	mov	r0, r3
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007926:	b480      	push	{r7}
 8007928:	b085      	sub	sp, #20
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007940:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007944:	f023 0307 	bic.w	r3, r3, #7
 8007948:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800795c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	333c      	adds	r3, #60	; 0x3c
 800797e:	3304      	adds	r3, #4
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	4a1c      	ldr	r2, [pc, #112]	; (80079f8 <USB_EP0_OutStart+0x8c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d90a      	bls.n	80079a2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800799c:	d101      	bne.n	80079a2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	e024      	b.n	80079ec <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a8:	461a      	mov	r2, r3
 80079aa:	2300      	movs	r3, #0
 80079ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079d0:	f043 0318 	orr.w	r3, r3, #24
 80079d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80079e8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3714      	adds	r7, #20
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	4f54300a 	.word	0x4f54300a

080079fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	60fb      	str	r3, [r7, #12]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4a13      	ldr	r2, [pc, #76]	; (8007a60 <USB_CoreReset+0x64>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d901      	bls.n	8007a1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e01b      	b.n	8007a52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	daf2      	bge.n	8007a08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	f043 0201 	orr.w	r2, r3, #1
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3301      	adds	r3, #1
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4a09      	ldr	r2, [pc, #36]	; (8007a60 <USB_CoreReset+0x64>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d901      	bls.n	8007a44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e006      	b.n	8007a52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d0f0      	beq.n	8007a32 <USB_CoreReset+0x36>

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	00030d40 	.word	0x00030d40

08007a64 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007a70:	2010      	movs	r0, #16
 8007a72:	f003 f877 	bl	800ab64 <USBD_static_malloc>
 8007a76:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d105      	bne.n	8007a8a <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007a86:	2302      	movs	r3, #2
 8007a88:	e01b      	b.n	8007ac2 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	7c1b      	ldrb	r3, [r3, #16]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d103      	bne.n	8007aa2 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2207      	movs	r2, #7
 8007a9e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007aa0:	e002      	b.n	8007aa8 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	220a      	movs	r2, #10
 8007aa6:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007aa8:	2304      	movs	r3, #4
 8007aaa:	2203      	movs	r2, #3
 8007aac:	2181      	movs	r1, #129	; 0x81
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f002 fe58 	bl	800a764 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b082      	sub	sp, #8
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007ad6:	2181      	movs	r1, #129	; 0x81
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f002 fe81 	bl	800a7e0 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d009      	beq.n	8007b08 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007afa:	4618      	mov	r0, r3
 8007afc:	f003 f840 	bl	800ab80 <USBD_static_free>
    pdev->pClassData = NULL;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b24:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e0e8      	b.n	8007d0a <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d046      	beq.n	8007bd2 <USBD_HID_Setup+0xbe>
 8007b44:	2b20      	cmp	r3, #32
 8007b46:	f040 80d8 	bne.w	8007cfa <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	785b      	ldrb	r3, [r3, #1]
 8007b4e:	3b02      	subs	r3, #2
 8007b50:	2b09      	cmp	r3, #9
 8007b52:	d836      	bhi.n	8007bc2 <USBD_HID_Setup+0xae>
 8007b54:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <USBD_HID_Setup+0x48>)
 8007b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5a:	bf00      	nop
 8007b5c:	08007bb3 	.word	0x08007bb3
 8007b60:	08007b93 	.word	0x08007b93
 8007b64:	08007bc3 	.word	0x08007bc3
 8007b68:	08007bc3 	.word	0x08007bc3
 8007b6c:	08007bc3 	.word	0x08007bc3
 8007b70:	08007bc3 	.word	0x08007bc3
 8007b74:	08007bc3 	.word	0x08007bc3
 8007b78:	08007bc3 	.word	0x08007bc3
 8007b7c:	08007ba1 	.word	0x08007ba1
 8007b80:	08007b85 	.word	0x08007b85
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	885b      	ldrh	r3, [r3, #2]
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	601a      	str	r2, [r3, #0]
          break;
 8007b90:	e01e      	b.n	8007bd0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2201      	movs	r2, #1
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f001 fa4c 	bl	8009036 <USBD_CtlSendData>
          break;
 8007b9e:	e017      	b.n	8007bd0 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	885b      	ldrh	r3, [r3, #2]
 8007ba4:	0a1b      	lsrs	r3, r3, #8
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	461a      	mov	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	605a      	str	r2, [r3, #4]
          break;
 8007bb0:	e00e      	b.n	8007bd0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f001 fa3b 	bl	8009036 <USBD_CtlSendData>
          break;
 8007bc0:	e006      	b.n	8007bd0 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 f9c5 	bl	8008f54 <USBD_CtlError>
          ret = USBD_FAIL;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	75fb      	strb	r3, [r7, #23]
          break;
 8007bce:	bf00      	nop
      }
      break;
 8007bd0:	e09a      	b.n	8007d08 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	785b      	ldrb	r3, [r3, #1]
 8007bd6:	2b0b      	cmp	r3, #11
 8007bd8:	f200 8086 	bhi.w	8007ce8 <USBD_HID_Setup+0x1d4>
 8007bdc:	a201      	add	r2, pc, #4	; (adr r2, 8007be4 <USBD_HID_Setup+0xd0>)
 8007bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be2:	bf00      	nop
 8007be4:	08007c15 	.word	0x08007c15
 8007be8:	08007cf7 	.word	0x08007cf7
 8007bec:	08007ce9 	.word	0x08007ce9
 8007bf0:	08007ce9 	.word	0x08007ce9
 8007bf4:	08007ce9 	.word	0x08007ce9
 8007bf8:	08007ce9 	.word	0x08007ce9
 8007bfc:	08007c3f 	.word	0x08007c3f
 8007c00:	08007ce9 	.word	0x08007ce9
 8007c04:	08007ce9 	.word	0x08007ce9
 8007c08:	08007ce9 	.word	0x08007ce9
 8007c0c:	08007c97 	.word	0x08007c97
 8007c10:	08007cc1 	.word	0x08007cc1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d107      	bne.n	8007c30 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c20:	f107 030a 	add.w	r3, r7, #10
 8007c24:	2202      	movs	r2, #2
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f001 fa04 	bl	8009036 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c2e:	e063      	b.n	8007cf8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 f98e 	bl	8008f54 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	75fb      	strb	r3, [r7, #23]
          break;
 8007c3c:	e05c      	b.n	8007cf8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	885b      	ldrh	r3, [r3, #2]
 8007c42:	0a1b      	lsrs	r3, r3, #8
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	2b22      	cmp	r3, #34	; 0x22
 8007c48:	d108      	bne.n	8007c5c <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	88db      	ldrh	r3, [r3, #6]
 8007c4e:	2b4a      	cmp	r3, #74	; 0x4a
 8007c50:	bf28      	it	cs
 8007c52:	234a      	movcs	r3, #74	; 0x4a
 8007c54:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007c56:	4b2f      	ldr	r3, [pc, #188]	; (8007d14 <USBD_HID_Setup+0x200>)
 8007c58:	613b      	str	r3, [r7, #16]
 8007c5a:	e015      	b.n	8007c88 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	885b      	ldrh	r3, [r3, #2]
 8007c60:	0a1b      	lsrs	r3, r3, #8
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	2b21      	cmp	r3, #33	; 0x21
 8007c66:	d108      	bne.n	8007c7a <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8007c68:	4b2b      	ldr	r3, [pc, #172]	; (8007d18 <USBD_HID_Setup+0x204>)
 8007c6a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	88db      	ldrh	r3, [r3, #6]
 8007c70:	2b09      	cmp	r3, #9
 8007c72:	bf28      	it	cs
 8007c74:	2309      	movcs	r3, #9
 8007c76:	82bb      	strh	r3, [r7, #20]
 8007c78:	e006      	b.n	8007c88 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f001 f969 	bl	8008f54 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c82:	2303      	movs	r3, #3
 8007c84:	75fb      	strb	r3, [r7, #23]
            break;
 8007c86:	e037      	b.n	8007cf8 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c88:	8abb      	ldrh	r3, [r7, #20]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	6939      	ldr	r1, [r7, #16]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f001 f9d1 	bl	8009036 <USBD_CtlSendData>
          break;
 8007c94:	e030      	b.n	8007cf8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d107      	bne.n	8007cb2 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f001 f9c3 	bl	8009036 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cb0:	e022      	b.n	8007cf8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f001 f94d 	bl	8008f54 <USBD_CtlError>
            ret = USBD_FAIL;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	75fb      	strb	r3, [r7, #23]
          break;
 8007cbe:	e01b      	b.n	8007cf8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d106      	bne.n	8007cda <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	885b      	ldrh	r3, [r3, #2]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cd8:	e00e      	b.n	8007cf8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f001 f939 	bl	8008f54 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ce6:	e007      	b.n	8007cf8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f001 f932 	bl	8008f54 <USBD_CtlError>
          ret = USBD_FAIL;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	75fb      	strb	r3, [r7, #23]
          break;
 8007cf4:	e000      	b.n	8007cf8 <USBD_HID_Setup+0x1e4>
          break;
 8007cf6:	bf00      	nop
      }
      break;
 8007cf8:	e006      	b.n	8007d08 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 f929 	bl	8008f54 <USBD_CtlError>
      ret = USBD_FAIL;
 8007d02:	2303      	movs	r3, #3
 8007d04:	75fb      	strb	r3, [r7, #23]
      break;
 8007d06:	bf00      	nop
  }

  return (uint8_t)ret;
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3718      	adds	r7, #24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	200000c4 	.word	0x200000c4
 8007d18:	200000ac 	.word	0x200000ac

08007d1c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	4613      	mov	r3, r2
 8007d28:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d30:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e013      	b.n	8007d64 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d10c      	bne.n	8007d62 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	7b1b      	ldrb	r3, [r3, #12]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d108      	bne.n	8007d62 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	2201      	movs	r2, #1
 8007d54:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8007d56:	88fb      	ldrh	r3, [r7, #6]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	2181      	movs	r1, #129	; 0x81
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f002 fe43 	bl	800a9e8 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2222      	movs	r2, #34	; 0x22
 8007d78:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8007d7a:	4b03      	ldr	r3, [pc, #12]	; (8007d88 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	20000040 	.word	0x20000040

08007d8c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2222      	movs	r2, #34	; 0x22
 8007d98:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8007d9a:	4b03      	ldr	r3, [pc, #12]	; (8007da8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr
 8007da8:	20000064 	.word	0x20000064

08007dac <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2222      	movs	r2, #34	; 0x22
 8007db8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8007dba:	4b03      	ldr	r3, [pc, #12]	; (8007dc8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	20000088 	.word	0x20000088

08007dcc <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dde:	2200      	movs	r2, #0
 8007de0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	220a      	movs	r2, #10
 8007dfc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007dfe:	4b03      	ldr	r3, [pc, #12]	; (8007e0c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	200000b8 	.word	0x200000b8

08007e10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e01f      	b.n	8007e68 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d003      	beq.n	8007e4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	79fa      	ldrb	r2, [r7, #7]
 8007e5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f002 fc03 	bl	800a668 <USBD_LL_Init>
 8007e62:	4603      	mov	r3, r0
 8007e64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007e84:	2303      	movs	r3, #3
 8007e86:	e016      	b.n	8007eb6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00b      	beq.n	8007eb4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea4:	f107 020e 	add.w	r2, r7, #14
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	4798      	blx	r3
 8007eac:	4602      	mov	r2, r0
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f002 fc1a 	bl	800a700 <USBD_LL_Start>
 8007ecc:	4603      	mov	r3, r0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d009      	beq.n	8007f1a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	78fa      	ldrb	r2, [r7, #3]
 8007f10:	4611      	mov	r1, r2
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	4798      	blx	r3
 8007f16:	4603      	mov	r3, r0
 8007f18:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d007      	beq.n	8007f4a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	78fa      	ldrb	r2, [r7, #3]
 8007f44:	4611      	mov	r1, r2
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	4798      	blx	r3
  }

  return USBD_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 ffba 	bl	8008ee0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f88:	f003 031f 	and.w	r3, r3, #31
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d01a      	beq.n	8007fc6 <USBD_LL_SetupStage+0x72>
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d822      	bhi.n	8007fda <USBD_LL_SetupStage+0x86>
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <USBD_LL_SetupStage+0x4a>
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d00a      	beq.n	8007fb2 <USBD_LL_SetupStage+0x5e>
 8007f9c:	e01d      	b.n	8007fda <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fa62 	bl	8008470 <USBD_StdDevReq>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb0:	e020      	b.n	8007ff4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fac6 	bl	800854c <USBD_StdItfReq>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fc4:	e016      	b.n	8007ff4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fb05 	bl	80085de <USBD_StdEPReq>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007fd8:	e00c      	b.n	8007ff4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fe0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f002 fc2f 	bl	800a84c <USBD_LL_StallEP>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff2:	bf00      	nop
  }

  return ret;
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b086      	sub	sp, #24
 8008002:	af00      	add	r7, sp, #0
 8008004:	60f8      	str	r0, [r7, #12]
 8008006:	460b      	mov	r3, r1
 8008008:	607a      	str	r2, [r7, #4]
 800800a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800800c:	7afb      	ldrb	r3, [r7, #11]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d138      	bne.n	8008084 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008018:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008020:	2b03      	cmp	r3, #3
 8008022:	d14a      	bne.n	80080ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	429a      	cmp	r2, r3
 800802e:	d913      	bls.n	8008058 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	1ad2      	subs	r2, r2, r3
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	4293      	cmp	r3, r2
 8008048:	bf28      	it	cs
 800804a:	4613      	movcs	r3, r2
 800804c:	461a      	mov	r2, r3
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f001 f81c 	bl	800908e <USBD_CtlContinueRx>
 8008056:	e030      	b.n	80080ba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b03      	cmp	r3, #3
 8008062:	d10b      	bne.n	800807c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d005      	beq.n	800807c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f001 f817 	bl	80090b0 <USBD_CtlSendStatus>
 8008082:	e01a      	b.n	80080ba <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b03      	cmp	r3, #3
 800808e:	d114      	bne.n	80080ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00e      	beq.n	80080ba <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	7afa      	ldrb	r2, [r7, #11]
 80080a6:	4611      	mov	r1, r2
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	4798      	blx	r3
 80080ac:	4603      	mov	r3, r0
 80080ae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
 80080b8:	e000      	b.n	80080bc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3718      	adds	r7, #24
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	460b      	mov	r3, r1
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080d2:	7afb      	ldrb	r3, [r7, #11]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d16b      	bne.n	80081b0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	3314      	adds	r3, #20
 80080dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d156      	bne.n	8008196 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d914      	bls.n	800811e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	1ad2      	subs	r2, r2, r3
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	461a      	mov	r2, r3
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 ffae 	bl	800906c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008110:	2300      	movs	r3, #0
 8008112:	2200      	movs	r2, #0
 8008114:	2100      	movs	r1, #0
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f002 fc9e 	bl	800aa58 <USBD_LL_PrepareReceive>
 800811c:	e03b      	b.n	8008196 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	68da      	ldr	r2, [r3, #12]
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	429a      	cmp	r2, r3
 8008128:	d11c      	bne.n	8008164 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008132:	429a      	cmp	r2, r3
 8008134:	d316      	bcc.n	8008164 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	685a      	ldr	r2, [r3, #4]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008140:	429a      	cmp	r2, r3
 8008142:	d20f      	bcs.n	8008164 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008144:	2200      	movs	r2, #0
 8008146:	2100      	movs	r1, #0
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f000 ff8f 	bl	800906c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008156:	2300      	movs	r3, #0
 8008158:	2200      	movs	r2, #0
 800815a:	2100      	movs	r1, #0
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f002 fc7b 	bl	800aa58 <USBD_LL_PrepareReceive>
 8008162:	e018      	b.n	8008196 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b03      	cmp	r3, #3
 800816e:	d10b      	bne.n	8008188 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d005      	beq.n	8008188 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008188:	2180      	movs	r1, #128	; 0x80
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f002 fb5e 	bl	800a84c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 ffa0 	bl	80090d6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800819c:	2b01      	cmp	r3, #1
 800819e:	d122      	bne.n	80081e6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f7ff fe98 	bl	8007ed6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80081ae:	e01a      	b.n	80081e6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d114      	bne.n	80081e6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00e      	beq.n	80081e6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	7afa      	ldrb	r2, [r7, #11]
 80081d2:	4611      	mov	r1, r2
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	4798      	blx	r3
 80081d8:	4603      	mov	r3, r0
 80081da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
 80081e4:	e000      	b.n	80081e8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008220:	2303      	movs	r3, #3
 8008222:	e02f      	b.n	8008284 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00f      	beq.n	800824e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d009      	beq.n	800824e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	6852      	ldr	r2, [r2, #4]
 8008246:	b2d2      	uxtb	r2, r2
 8008248:	4611      	mov	r1, r2
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800824e:	2340      	movs	r3, #64	; 0x40
 8008250:	2200      	movs	r2, #0
 8008252:	2100      	movs	r1, #0
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f002 fa85 	bl	800a764 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2240      	movs	r2, #64	; 0x40
 8008266:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800826a:	2340      	movs	r3, #64	; 0x40
 800826c:	2200      	movs	r2, #0
 800826e:	2180      	movs	r1, #128	; 0x80
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f002 fa77 	bl	800a764 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2240      	movs	r2, #64	; 0x40
 8008280:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	78fa      	ldrb	r2, [r7, #3]
 800829c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2204      	movs	r2, #4
 80082c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b04      	cmp	r3, #4
 80082ea:	d106      	bne.n	80082fa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800831a:	2303      	movs	r3, #3
 800831c:	e012      	b.n	8008344 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b03      	cmp	r3, #3
 8008328:	d10b      	bne.n	8008342 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d005      	beq.n	8008342 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833c:	69db      	ldr	r3, [r3, #28]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008362:	2303      	movs	r3, #3
 8008364:	e014      	b.n	8008390 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b03      	cmp	r3, #3
 8008370:	d10d      	bne.n	800838e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d007      	beq.n	800838e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	78fa      	ldrb	r2, [r7, #3]
 8008388:	4611      	mov	r1, r2
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	460b      	mov	r3, r1
 80083a2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e014      	b.n	80083dc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	d10d      	bne.n	80083da <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d007      	beq.n	80083da <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	78fa      	ldrb	r2, [r7, #3]
 80083d4:	4611      	mov	r1, r2
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b082      	sub	sp, #8
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008410:	2b00      	cmp	r3, #0
 8008412:	d009      	beq.n	8008428 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	6852      	ldr	r2, [r2, #4]
 8008420:	b2d2      	uxtb	r2, r2
 8008422:	4611      	mov	r1, r2
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	4798      	blx	r3
  }

  return USBD_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008432:	b480      	push	{r7}
 8008434:	b087      	sub	sp, #28
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	3301      	adds	r3, #1
 8008448:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008450:	8a3b      	ldrh	r3, [r7, #16]
 8008452:	021b      	lsls	r3, r3, #8
 8008454:	b21a      	sxth	r2, r3
 8008456:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800845a:	4313      	orrs	r3, r2
 800845c:	b21b      	sxth	r3, r3
 800845e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008460:	89fb      	ldrh	r3, [r7, #14]
}
 8008462:	4618      	mov	r0, r3
 8008464:	371c      	adds	r7, #28
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
	...

08008470 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008486:	2b40      	cmp	r3, #64	; 0x40
 8008488:	d005      	beq.n	8008496 <USBD_StdDevReq+0x26>
 800848a:	2b40      	cmp	r3, #64	; 0x40
 800848c:	d853      	bhi.n	8008536 <USBD_StdDevReq+0xc6>
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00b      	beq.n	80084aa <USBD_StdDevReq+0x3a>
 8008492:	2b20      	cmp	r3, #32
 8008494:	d14f      	bne.n	8008536 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	4798      	blx	r3
 80084a4:	4603      	mov	r3, r0
 80084a6:	73fb      	strb	r3, [r7, #15]
      break;
 80084a8:	e04a      	b.n	8008540 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	785b      	ldrb	r3, [r3, #1]
 80084ae:	2b09      	cmp	r3, #9
 80084b0:	d83b      	bhi.n	800852a <USBD_StdDevReq+0xba>
 80084b2:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <USBD_StdDevReq+0x48>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	0800850d 	.word	0x0800850d
 80084bc:	08008521 	.word	0x08008521
 80084c0:	0800852b 	.word	0x0800852b
 80084c4:	08008517 	.word	0x08008517
 80084c8:	0800852b 	.word	0x0800852b
 80084cc:	080084eb 	.word	0x080084eb
 80084d0:	080084e1 	.word	0x080084e1
 80084d4:	0800852b 	.word	0x0800852b
 80084d8:	08008503 	.word	0x08008503
 80084dc:	080084f5 	.word	0x080084f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f9de 	bl	80088a4 <USBD_GetDescriptor>
          break;
 80084e8:	e024      	b.n	8008534 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fb6d 	bl	8008bcc <USBD_SetAddress>
          break;
 80084f2:	e01f      	b.n	8008534 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fbac 	bl	8008c54 <USBD_SetConfig>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]
          break;
 8008500:	e018      	b.n	8008534 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fc4b 	bl	8008da0 <USBD_GetConfig>
          break;
 800850a:	e013      	b.n	8008534 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fc7c 	bl	8008e0c <USBD_GetStatus>
          break;
 8008514:	e00e      	b.n	8008534 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fcab 	bl	8008e74 <USBD_SetFeature>
          break;
 800851e:	e009      	b.n	8008534 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fcba 	bl	8008e9c <USBD_ClrFeature>
          break;
 8008528:	e004      	b.n	8008534 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fd11 	bl	8008f54 <USBD_CtlError>
          break;
 8008532:	bf00      	nop
      }
      break;
 8008534:	e004      	b.n	8008540 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fd0b 	bl	8008f54 <USBD_CtlError>
      break;
 800853e:	bf00      	nop
  }

  return ret;
 8008540:	7bfb      	ldrb	r3, [r7, #15]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop

0800854c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008562:	2b40      	cmp	r3, #64	; 0x40
 8008564:	d005      	beq.n	8008572 <USBD_StdItfReq+0x26>
 8008566:	2b40      	cmp	r3, #64	; 0x40
 8008568:	d82f      	bhi.n	80085ca <USBD_StdItfReq+0x7e>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <USBD_StdItfReq+0x26>
 800856e:	2b20      	cmp	r3, #32
 8008570:	d12b      	bne.n	80085ca <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008578:	b2db      	uxtb	r3, r3
 800857a:	3b01      	subs	r3, #1
 800857c:	2b02      	cmp	r3, #2
 800857e:	d81d      	bhi.n	80085bc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	889b      	ldrh	r3, [r3, #4]
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b01      	cmp	r3, #1
 8008588:	d813      	bhi.n	80085b2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	4798      	blx	r3
 8008598:	4603      	mov	r3, r0
 800859a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	88db      	ldrh	r3, [r3, #6]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d110      	bne.n	80085c6 <USBD_StdItfReq+0x7a>
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10d      	bne.n	80085c6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fd80 	bl	80090b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085b0:	e009      	b.n	80085c6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fccd 	bl	8008f54 <USBD_CtlError>
          break;
 80085ba:	e004      	b.n	80085c6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fcc8 	bl	8008f54 <USBD_CtlError>
          break;
 80085c4:	e000      	b.n	80085c8 <USBD_StdItfReq+0x7c>
          break;
 80085c6:	bf00      	nop
      }
      break;
 80085c8:	e004      	b.n	80085d4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fcc1 	bl	8008f54 <USBD_CtlError>
      break;
 80085d2:	bf00      	nop
  }

  return ret;
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	889b      	ldrh	r3, [r3, #4]
 80085f0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085fa:	2b40      	cmp	r3, #64	; 0x40
 80085fc:	d007      	beq.n	800860e <USBD_StdEPReq+0x30>
 80085fe:	2b40      	cmp	r3, #64	; 0x40
 8008600:	f200 8145 	bhi.w	800888e <USBD_StdEPReq+0x2b0>
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00c      	beq.n	8008622 <USBD_StdEPReq+0x44>
 8008608:	2b20      	cmp	r3, #32
 800860a:	f040 8140 	bne.w	800888e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	4798      	blx	r3
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]
      break;
 8008620:	e13a      	b.n	8008898 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	785b      	ldrb	r3, [r3, #1]
 8008626:	2b03      	cmp	r3, #3
 8008628:	d007      	beq.n	800863a <USBD_StdEPReq+0x5c>
 800862a:	2b03      	cmp	r3, #3
 800862c:	f300 8129 	bgt.w	8008882 <USBD_StdEPReq+0x2a4>
 8008630:	2b00      	cmp	r3, #0
 8008632:	d07f      	beq.n	8008734 <USBD_StdEPReq+0x156>
 8008634:	2b01      	cmp	r3, #1
 8008636:	d03c      	beq.n	80086b2 <USBD_StdEPReq+0xd4>
 8008638:	e123      	b.n	8008882 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b02      	cmp	r3, #2
 8008644:	d002      	beq.n	800864c <USBD_StdEPReq+0x6e>
 8008646:	2b03      	cmp	r3, #3
 8008648:	d016      	beq.n	8008678 <USBD_StdEPReq+0x9a>
 800864a:	e02c      	b.n	80086a6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800864c:	7bbb      	ldrb	r3, [r7, #14]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00d      	beq.n	800866e <USBD_StdEPReq+0x90>
 8008652:	7bbb      	ldrb	r3, [r7, #14]
 8008654:	2b80      	cmp	r3, #128	; 0x80
 8008656:	d00a      	beq.n	800866e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f002 f8f5 	bl	800a84c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008662:	2180      	movs	r1, #128	; 0x80
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f002 f8f1 	bl	800a84c <USBD_LL_StallEP>
 800866a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800866c:	e020      	b.n	80086b0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fc6f 	bl	8008f54 <USBD_CtlError>
              break;
 8008676:	e01b      	b.n	80086b0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	885b      	ldrh	r3, [r3, #2]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10e      	bne.n	800869e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008680:	7bbb      	ldrb	r3, [r7, #14]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00b      	beq.n	800869e <USBD_StdEPReq+0xc0>
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	2b80      	cmp	r3, #128	; 0x80
 800868a:	d008      	beq.n	800869e <USBD_StdEPReq+0xc0>
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	88db      	ldrh	r3, [r3, #6]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d104      	bne.n	800869e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f002 f8d7 	bl	800a84c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fd06 	bl	80090b0 <USBD_CtlSendStatus>

              break;
 80086a4:	e004      	b.n	80086b0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80086a6:	6839      	ldr	r1, [r7, #0]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fc53 	bl	8008f54 <USBD_CtlError>
              break;
 80086ae:	bf00      	nop
          }
          break;
 80086b0:	e0ec      	b.n	800888c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d002      	beq.n	80086c4 <USBD_StdEPReq+0xe6>
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d016      	beq.n	80086f0 <USBD_StdEPReq+0x112>
 80086c2:	e030      	b.n	8008726 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00d      	beq.n	80086e6 <USBD_StdEPReq+0x108>
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	2b80      	cmp	r3, #128	; 0x80
 80086ce:	d00a      	beq.n	80086e6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086d0:	7bbb      	ldrb	r3, [r7, #14]
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f002 f8b9 	bl	800a84c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80086da:	2180      	movs	r1, #128	; 0x80
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f002 f8b5 	bl	800a84c <USBD_LL_StallEP>
 80086e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086e4:	e025      	b.n	8008732 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fc33 	bl	8008f54 <USBD_CtlError>
              break;
 80086ee:	e020      	b.n	8008732 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	885b      	ldrh	r3, [r3, #2]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d11b      	bne.n	8008730 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
 80086fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d004      	beq.n	800870c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f002 f8d6 	bl	800a8b8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fccf 	bl	80090b0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	4798      	blx	r3
 8008720:	4603      	mov	r3, r0
 8008722:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008724:	e004      	b.n	8008730 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fc13 	bl	8008f54 <USBD_CtlError>
              break;
 800872e:	e000      	b.n	8008732 <USBD_StdEPReq+0x154>
              break;
 8008730:	bf00      	nop
          }
          break;
 8008732:	e0ab      	b.n	800888c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b02      	cmp	r3, #2
 800873e:	d002      	beq.n	8008746 <USBD_StdEPReq+0x168>
 8008740:	2b03      	cmp	r3, #3
 8008742:	d032      	beq.n	80087aa <USBD_StdEPReq+0x1cc>
 8008744:	e097      	b.n	8008876 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008746:	7bbb      	ldrb	r3, [r7, #14]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d007      	beq.n	800875c <USBD_StdEPReq+0x17e>
 800874c:	7bbb      	ldrb	r3, [r7, #14]
 800874e:	2b80      	cmp	r3, #128	; 0x80
 8008750:	d004      	beq.n	800875c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fbfd 	bl	8008f54 <USBD_CtlError>
                break;
 800875a:	e091      	b.n	8008880 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800875c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008760:	2b00      	cmp	r3, #0
 8008762:	da0b      	bge.n	800877c <USBD_StdEPReq+0x19e>
 8008764:	7bbb      	ldrb	r3, [r7, #14]
 8008766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	3310      	adds	r3, #16
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	4413      	add	r3, r2
 8008778:	3304      	adds	r3, #4
 800877a:	e00b      	b.n	8008794 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800877c:	7bbb      	ldrb	r3, [r7, #14]
 800877e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	4413      	add	r3, r2
 8008792:	3304      	adds	r3, #4
 8008794:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2200      	movs	r2, #0
 800879a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	2202      	movs	r2, #2
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fc47 	bl	8009036 <USBD_CtlSendData>
              break;
 80087a8:	e06a      	b.n	8008880 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80087aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	da11      	bge.n	80087d6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087b2:	7bbb      	ldrb	r3, [r7, #14]
 80087b4:	f003 020f 	and.w	r2, r3, #15
 80087b8:	6879      	ldr	r1, [r7, #4]
 80087ba:	4613      	mov	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	440b      	add	r3, r1
 80087c4:	3324      	adds	r3, #36	; 0x24
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d117      	bne.n	80087fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fbc0 	bl	8008f54 <USBD_CtlError>
                  break;
 80087d4:	e054      	b.n	8008880 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	f003 020f 	and.w	r2, r3, #15
 80087dc:	6879      	ldr	r1, [r7, #4]
 80087de:	4613      	mov	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	440b      	add	r3, r1
 80087e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087ec:	881b      	ldrh	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d104      	bne.n	80087fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fbad 	bl	8008f54 <USBD_CtlError>
                  break;
 80087fa:	e041      	b.n	8008880 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008800:	2b00      	cmp	r3, #0
 8008802:	da0b      	bge.n	800881c <USBD_StdEPReq+0x23e>
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800880a:	4613      	mov	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	3310      	adds	r3, #16
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	4413      	add	r3, r2
 8008818:	3304      	adds	r3, #4
 800881a:	e00b      	b.n	8008834 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008822:	4613      	mov	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	4413      	add	r3, r2
 8008832:	3304      	adds	r3, #4
 8008834:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008836:	7bbb      	ldrb	r3, [r7, #14]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d002      	beq.n	8008842 <USBD_StdEPReq+0x264>
 800883c:	7bbb      	ldrb	r3, [r7, #14]
 800883e:	2b80      	cmp	r3, #128	; 0x80
 8008840:	d103      	bne.n	800884a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	e00e      	b.n	8008868 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800884a:	7bbb      	ldrb	r3, [r7, #14]
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f002 f868 	bl	800a924 <USBD_LL_IsStallEP>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d003      	beq.n	8008862 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2201      	movs	r2, #1
 800885e:	601a      	str	r2, [r3, #0]
 8008860:	e002      	b.n	8008868 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2200      	movs	r2, #0
 8008866:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	2202      	movs	r2, #2
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fbe1 	bl	8009036 <USBD_CtlSendData>
              break;
 8008874:	e004      	b.n	8008880 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fb6b 	bl	8008f54 <USBD_CtlError>
              break;
 800887e:	bf00      	nop
          }
          break;
 8008880:	e004      	b.n	800888c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fb65 	bl	8008f54 <USBD_CtlError>
          break;
 800888a:	bf00      	nop
      }
      break;
 800888c:	e004      	b.n	8008898 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800888e:	6839      	ldr	r1, [r7, #0]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fb5f 	bl	8008f54 <USBD_CtlError>
      break;
 8008896:	bf00      	nop
  }

  return ret;
 8008898:	7bfb      	ldrb	r3, [r7, #15]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088b2:	2300      	movs	r3, #0
 80088b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088b6:	2300      	movs	r3, #0
 80088b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	885b      	ldrh	r3, [r3, #2]
 80088be:	0a1b      	lsrs	r3, r3, #8
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	3b01      	subs	r3, #1
 80088c4:	2b0e      	cmp	r3, #14
 80088c6:	f200 8152 	bhi.w	8008b6e <USBD_GetDescriptor+0x2ca>
 80088ca:	a201      	add	r2, pc, #4	; (adr r2, 80088d0 <USBD_GetDescriptor+0x2c>)
 80088cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d0:	08008941 	.word	0x08008941
 80088d4:	08008959 	.word	0x08008959
 80088d8:	08008999 	.word	0x08008999
 80088dc:	08008b6f 	.word	0x08008b6f
 80088e0:	08008b6f 	.word	0x08008b6f
 80088e4:	08008b0f 	.word	0x08008b0f
 80088e8:	08008b3b 	.word	0x08008b3b
 80088ec:	08008b6f 	.word	0x08008b6f
 80088f0:	08008b6f 	.word	0x08008b6f
 80088f4:	08008b6f 	.word	0x08008b6f
 80088f8:	08008b6f 	.word	0x08008b6f
 80088fc:	08008b6f 	.word	0x08008b6f
 8008900:	08008b6f 	.word	0x08008b6f
 8008904:	08008b6f 	.word	0x08008b6f
 8008908:	0800890d 	.word	0x0800890d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008912:	69db      	ldr	r3, [r3, #28]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00b      	beq.n	8008930 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891e:	69db      	ldr	r3, [r3, #28]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	7c12      	ldrb	r2, [r2, #16]
 8008924:	f107 0108 	add.w	r1, r7, #8
 8008928:	4610      	mov	r0, r2
 800892a:	4798      	blx	r3
 800892c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800892e:	e126      	b.n	8008b7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fb0e 	bl	8008f54 <USBD_CtlError>
        err++;
 8008938:	7afb      	ldrb	r3, [r7, #11]
 800893a:	3301      	adds	r3, #1
 800893c:	72fb      	strb	r3, [r7, #11]
      break;
 800893e:	e11e      	b.n	8008b7e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	7c12      	ldrb	r2, [r2, #16]
 800894c:	f107 0108 	add.w	r1, r7, #8
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
 8008954:	60f8      	str	r0, [r7, #12]
      break;
 8008956:	e112      	b.n	8008b7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	7c1b      	ldrb	r3, [r3, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10d      	bne.n	800897c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008968:	f107 0208 	add.w	r2, r7, #8
 800896c:	4610      	mov	r0, r2
 800896e:	4798      	blx	r3
 8008970:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3301      	adds	r3, #1
 8008976:	2202      	movs	r2, #2
 8008978:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800897a:	e100      	b.n	8008b7e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008984:	f107 0208 	add.w	r2, r7, #8
 8008988:	4610      	mov	r0, r2
 800898a:	4798      	blx	r3
 800898c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3301      	adds	r3, #1
 8008992:	2202      	movs	r2, #2
 8008994:	701a      	strb	r2, [r3, #0]
      break;
 8008996:	e0f2      	b.n	8008b7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	885b      	ldrh	r3, [r3, #2]
 800899c:	b2db      	uxtb	r3, r3
 800899e:	2b05      	cmp	r3, #5
 80089a0:	f200 80ac 	bhi.w	8008afc <USBD_GetDescriptor+0x258>
 80089a4:	a201      	add	r2, pc, #4	; (adr r2, 80089ac <USBD_GetDescriptor+0x108>)
 80089a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089aa:	bf00      	nop
 80089ac:	080089c5 	.word	0x080089c5
 80089b0:	080089f9 	.word	0x080089f9
 80089b4:	08008a2d 	.word	0x08008a2d
 80089b8:	08008a61 	.word	0x08008a61
 80089bc:	08008a95 	.word	0x08008a95
 80089c0:	08008ac9 	.word	0x08008ac9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00b      	beq.n	80089e8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	7c12      	ldrb	r2, [r2, #16]
 80089dc:	f107 0108 	add.w	r1, r7, #8
 80089e0:	4610      	mov	r0, r2
 80089e2:	4798      	blx	r3
 80089e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089e6:	e091      	b.n	8008b0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fab2 	bl	8008f54 <USBD_CtlError>
            err++;
 80089f0:	7afb      	ldrb	r3, [r7, #11]
 80089f2:	3301      	adds	r3, #1
 80089f4:	72fb      	strb	r3, [r7, #11]
          break;
 80089f6:	e089      	b.n	8008b0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	7c12      	ldrb	r2, [r2, #16]
 8008a10:	f107 0108 	add.w	r1, r7, #8
 8008a14:	4610      	mov	r0, r2
 8008a16:	4798      	blx	r3
 8008a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a1a:	e077      	b.n	8008b0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fa98 	bl	8008f54 <USBD_CtlError>
            err++;
 8008a24:	7afb      	ldrb	r3, [r7, #11]
 8008a26:	3301      	adds	r3, #1
 8008a28:	72fb      	strb	r3, [r7, #11]
          break;
 8008a2a:	e06f      	b.n	8008b0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00b      	beq.n	8008a50 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	7c12      	ldrb	r2, [r2, #16]
 8008a44:	f107 0108 	add.w	r1, r7, #8
 8008a48:	4610      	mov	r0, r2
 8008a4a:	4798      	blx	r3
 8008a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a4e:	e05d      	b.n	8008b0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fa7e 	bl	8008f54 <USBD_CtlError>
            err++;
 8008a58:	7afb      	ldrb	r3, [r7, #11]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a5e:	e055      	b.n	8008b0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00b      	beq.n	8008a84 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	7c12      	ldrb	r2, [r2, #16]
 8008a78:	f107 0108 	add.w	r1, r7, #8
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4798      	blx	r3
 8008a80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a82:	e043      	b.n	8008b0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fa64 	bl	8008f54 <USBD_CtlError>
            err++;
 8008a8c:	7afb      	ldrb	r3, [r7, #11]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	72fb      	strb	r3, [r7, #11]
          break;
 8008a92:	e03b      	b.n	8008b0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a9a:	695b      	ldr	r3, [r3, #20]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00b      	beq.n	8008ab8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	7c12      	ldrb	r2, [r2, #16]
 8008aac:	f107 0108 	add.w	r1, r7, #8
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	4798      	blx	r3
 8008ab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ab6:	e029      	b.n	8008b0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fa4a 	bl	8008f54 <USBD_CtlError>
            err++;
 8008ac0:	7afb      	ldrb	r3, [r7, #11]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ac6:	e021      	b.n	8008b0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00b      	beq.n	8008aec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	7c12      	ldrb	r2, [r2, #16]
 8008ae0:	f107 0108 	add.w	r1, r7, #8
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4798      	blx	r3
 8008ae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aea:	e00f      	b.n	8008b0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fa30 	bl	8008f54 <USBD_CtlError>
            err++;
 8008af4:	7afb      	ldrb	r3, [r7, #11]
 8008af6:	3301      	adds	r3, #1
 8008af8:	72fb      	strb	r3, [r7, #11]
          break;
 8008afa:	e007      	b.n	8008b0c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fa28 	bl	8008f54 <USBD_CtlError>
          err++;
 8008b04:	7afb      	ldrb	r3, [r7, #11]
 8008b06:	3301      	adds	r3, #1
 8008b08:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008b0a:	bf00      	nop
      }
      break;
 8008b0c:	e037      	b.n	8008b7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	7c1b      	ldrb	r3, [r3, #16]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d109      	bne.n	8008b2a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b1e:	f107 0208 	add.w	r2, r7, #8
 8008b22:	4610      	mov	r0, r2
 8008b24:	4798      	blx	r3
 8008b26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b28:	e029      	b.n	8008b7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fa11 	bl	8008f54 <USBD_CtlError>
        err++;
 8008b32:	7afb      	ldrb	r3, [r7, #11]
 8008b34:	3301      	adds	r3, #1
 8008b36:	72fb      	strb	r3, [r7, #11]
      break;
 8008b38:	e021      	b.n	8008b7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	7c1b      	ldrb	r3, [r3, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10d      	bne.n	8008b5e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4a:	f107 0208 	add.w	r2, r7, #8
 8008b4e:	4610      	mov	r0, r2
 8008b50:	4798      	blx	r3
 8008b52:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	3301      	adds	r3, #1
 8008b58:	2207      	movs	r2, #7
 8008b5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b5c:	e00f      	b.n	8008b7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f9f7 	bl	8008f54 <USBD_CtlError>
        err++;
 8008b66:	7afb      	ldrb	r3, [r7, #11]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b6c:	e007      	b.n	8008b7e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f9ef 	bl	8008f54 <USBD_CtlError>
      err++;
 8008b76:	7afb      	ldrb	r3, [r7, #11]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b7c:	bf00      	nop
  }

  if (err != 0U)
 8008b7e:	7afb      	ldrb	r3, [r7, #11]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d11e      	bne.n	8008bc2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	88db      	ldrh	r3, [r3, #6]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d016      	beq.n	8008bba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008b8c:	893b      	ldrh	r3, [r7, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00e      	beq.n	8008bb0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	88da      	ldrh	r2, [r3, #6]
 8008b96:	893b      	ldrh	r3, [r7, #8]
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	bf28      	it	cs
 8008b9c:	4613      	movcs	r3, r2
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ba2:	893b      	ldrh	r3, [r7, #8]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	68f9      	ldr	r1, [r7, #12]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fa44 	bl	8009036 <USBD_CtlSendData>
 8008bae:	e009      	b.n	8008bc4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f9ce 	bl	8008f54 <USBD_CtlError>
 8008bb8:	e004      	b.n	8008bc4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fa78 	bl	80090b0 <USBD_CtlSendStatus>
 8008bc0:	e000      	b.n	8008bc4 <USBD_GetDescriptor+0x320>
    return;
 8008bc2:	bf00      	nop
  }
}
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop

08008bcc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	889b      	ldrh	r3, [r3, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d131      	bne.n	8008c42 <USBD_SetAddress+0x76>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	88db      	ldrh	r3, [r3, #6]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d12d      	bne.n	8008c42 <USBD_SetAddress+0x76>
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	885b      	ldrh	r3, [r3, #2]
 8008bea:	2b7f      	cmp	r3, #127	; 0x7f
 8008bec:	d829      	bhi.n	8008c42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	885b      	ldrh	r3, [r3, #2]
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d104      	bne.n	8008c10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f9a3 	bl	8008f54 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c0e:	e01d      	b.n	8008c4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	7bfa      	ldrb	r2, [r7, #15]
 8008c14:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 fead 	bl	800a97c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fa44 	bl	80090b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d004      	beq.n	8008c38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2202      	movs	r2, #2
 8008c32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c36:	e009      	b.n	8008c4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c40:	e004      	b.n	8008c4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c42:	6839      	ldr	r1, [r7, #0]
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f985 	bl	8008f54 <USBD_CtlError>
  }
}
 8008c4a:	bf00      	nop
 8008c4c:	bf00      	nop
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	885b      	ldrh	r3, [r3, #2]
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	4b4c      	ldr	r3, [pc, #304]	; (8008d9c <USBD_SetConfig+0x148>)
 8008c6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c6c:	4b4b      	ldr	r3, [pc, #300]	; (8008d9c <USBD_SetConfig+0x148>)
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d905      	bls.n	8008c80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f96c 	bl	8008f54 <USBD_CtlError>
    return USBD_FAIL;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	e088      	b.n	8008d92 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d002      	beq.n	8008c92 <USBD_SetConfig+0x3e>
 8008c8c:	2b03      	cmp	r3, #3
 8008c8e:	d025      	beq.n	8008cdc <USBD_SetConfig+0x88>
 8008c90:	e071      	b.n	8008d76 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c92:	4b42      	ldr	r3, [pc, #264]	; (8008d9c <USBD_SetConfig+0x148>)
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d01c      	beq.n	8008cd4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008c9a:	4b40      	ldr	r3, [pc, #256]	; (8008d9c <USBD_SetConfig+0x148>)
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ca4:	4b3d      	ldr	r3, [pc, #244]	; (8008d9c <USBD_SetConfig+0x148>)
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7ff f91e 	bl	8007eec <USBD_SetClassConfig>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d004      	beq.n	8008cc4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f949 	bl	8008f54 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008cc2:	e065      	b.n	8008d90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f9f3 	bl	80090b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2203      	movs	r2, #3
 8008cce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008cd2:	e05d      	b.n	8008d90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f9eb 	bl	80090b0 <USBD_CtlSendStatus>
      break;
 8008cda:	e059      	b.n	8008d90 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008cdc:	4b2f      	ldr	r3, [pc, #188]	; (8008d9c <USBD_SetConfig+0x148>)
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d112      	bne.n	8008d0a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008cec:	4b2b      	ldr	r3, [pc, #172]	; (8008d9c <USBD_SetConfig+0x148>)
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cf6:	4b29      	ldr	r3, [pc, #164]	; (8008d9c <USBD_SetConfig+0x148>)
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7ff f911 	bl	8007f24 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f9d4 	bl	80090b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d08:	e042      	b.n	8008d90 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008d0a:	4b24      	ldr	r3, [pc, #144]	; (8008d9c <USBD_SetConfig+0x148>)
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d02a      	beq.n	8008d6e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff f8ff 	bl	8007f24 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008d26:	4b1d      	ldr	r3, [pc, #116]	; (8008d9c <USBD_SetConfig+0x148>)
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d30:	4b1a      	ldr	r3, [pc, #104]	; (8008d9c <USBD_SetConfig+0x148>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7ff f8d8 	bl	8007eec <USBD_SetClassConfig>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00f      	beq.n	8008d66 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f903 	bl	8008f54 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff f8e4 	bl	8007f24 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2202      	movs	r2, #2
 8008d60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d64:	e014      	b.n	8008d90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f9a2 	bl	80090b0 <USBD_CtlSendStatus>
      break;
 8008d6c:	e010      	b.n	8008d90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f99e 	bl	80090b0 <USBD_CtlSendStatus>
      break;
 8008d74:	e00c      	b.n	8008d90 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f8eb 	bl	8008f54 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d7e:	4b07      	ldr	r3, [pc, #28]	; (8008d9c <USBD_SetConfig+0x148>)
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7ff f8cd 	bl	8007f24 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d8e:	bf00      	nop
  }

  return ret;
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000228 	.word	0x20000228

08008da0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	88db      	ldrh	r3, [r3, #6]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d004      	beq.n	8008dbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f8cd 	bl	8008f54 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008dba:	e023      	b.n	8008e04 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	dc02      	bgt.n	8008dce <USBD_GetConfig+0x2e>
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	dc03      	bgt.n	8008dd4 <USBD_GetConfig+0x34>
 8008dcc:	e015      	b.n	8008dfa <USBD_GetConfig+0x5a>
 8008dce:	2b03      	cmp	r3, #3
 8008dd0:	d00b      	beq.n	8008dea <USBD_GetConfig+0x4a>
 8008dd2:	e012      	b.n	8008dfa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	3308      	adds	r3, #8
 8008dde:	2201      	movs	r2, #1
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f927 	bl	8009036 <USBD_CtlSendData>
        break;
 8008de8:	e00c      	b.n	8008e04 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	3304      	adds	r3, #4
 8008dee:	2201      	movs	r2, #1
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f91f 	bl	8009036 <USBD_CtlSendData>
        break;
 8008df8:	e004      	b.n	8008e04 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f8a9 	bl	8008f54 <USBD_CtlError>
        break;
 8008e02:	bf00      	nop
}
 8008e04:	bf00      	nop
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d81e      	bhi.n	8008e62 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	88db      	ldrh	r3, [r3, #6]
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d004      	beq.n	8008e36 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f890 	bl	8008f54 <USBD_CtlError>
        break;
 8008e34:	e01a      	b.n	8008e6c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d005      	beq.n	8008e52 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	f043 0202 	orr.w	r2, r3, #2
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	330c      	adds	r3, #12
 8008e56:	2202      	movs	r2, #2
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f8eb 	bl	8009036 <USBD_CtlSendData>
      break;
 8008e60:	e004      	b.n	8008e6c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f875 	bl	8008f54 <USBD_CtlError>
      break;
 8008e6a:	bf00      	nop
  }
}
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	885b      	ldrh	r3, [r3, #2]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d106      	bne.n	8008e94 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f90e 	bl	80090b0 <USBD_CtlSendStatus>
  }
}
 8008e94:	bf00      	nop
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d80b      	bhi.n	8008ecc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	885b      	ldrh	r3, [r3, #2]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d10c      	bne.n	8008ed6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f8f3 	bl	80090b0 <USBD_CtlSendStatus>
      }
      break;
 8008eca:	e004      	b.n	8008ed6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f840 	bl	8008f54 <USBD_CtlError>
      break;
 8008ed4:	e000      	b.n	8008ed8 <USBD_ClrFeature+0x3c>
      break;
 8008ed6:	bf00      	nop
  }
}
 8008ed8:	bf00      	nop
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	781a      	ldrb	r2, [r3, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	781a      	ldrb	r2, [r3, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	3301      	adds	r3, #1
 8008f08:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f7ff fa91 	bl	8008432 <SWAPBYTE>
 8008f10:	4603      	mov	r3, r0
 8008f12:	461a      	mov	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	3301      	adds	r3, #1
 8008f22:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f7ff fa84 	bl	8008432 <SWAPBYTE>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3301      	adds	r3, #1
 8008f36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f7ff fa77 	bl	8008432 <SWAPBYTE>
 8008f44:	4603      	mov	r3, r0
 8008f46:	461a      	mov	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	80da      	strh	r2, [r3, #6]
}
 8008f4c:	bf00      	nop
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f5e:	2180      	movs	r1, #128	; 0x80
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f001 fc73 	bl	800a84c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f66:	2100      	movs	r1, #0
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f001 fc6f 	bl	800a84c <USBD_LL_StallEP>
}
 8008f6e:	bf00      	nop
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b086      	sub	sp, #24
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	60f8      	str	r0, [r7, #12]
 8008f7e:	60b9      	str	r1, [r7, #8]
 8008f80:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f82:	2300      	movs	r3, #0
 8008f84:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d036      	beq.n	8008ffa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f90:	6938      	ldr	r0, [r7, #16]
 8008f92:	f000 f836 	bl	8009002 <USBD_GetLen>
 8008f96:	4603      	mov	r3, r0
 8008f98:	3301      	adds	r3, #1
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	005b      	lsls	r3, r3, #1
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008fa4:	7dfb      	ldrb	r3, [r7, #23]
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	4413      	add	r3, r2
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	7812      	ldrb	r2, [r2, #0]
 8008fae:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fb0:	7dfb      	ldrb	r3, [r7, #23]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008fb6:	7dfb      	ldrb	r3, [r7, #23]
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	4413      	add	r3, r2
 8008fbc:	2203      	movs	r2, #3
 8008fbe:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fc0:	7dfb      	ldrb	r3, [r7, #23]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008fc6:	e013      	b.n	8008ff0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	4413      	add	r3, r2
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	7812      	ldrb	r2, [r2, #0]
 8008fd2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	613b      	str	r3, [r7, #16]
    idx++;
 8008fda:	7dfb      	ldrb	r3, [r7, #23]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008fe0:	7dfb      	ldrb	r3, [r7, #23]
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	701a      	strb	r2, [r3, #0]
    idx++;
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
 8008fec:	3301      	adds	r3, #1
 8008fee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1e7      	bne.n	8008fc8 <USBD_GetString+0x52>
 8008ff8:	e000      	b.n	8008ffc <USBD_GetString+0x86>
    return;
 8008ffa:	bf00      	nop
  }
}
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009002:	b480      	push	{r7}
 8009004:	b085      	sub	sp, #20
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800900a:	2300      	movs	r3, #0
 800900c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009012:	e005      	b.n	8009020 <USBD_GetLen+0x1e>
  {
    len++;
 8009014:	7bfb      	ldrb	r3, [r7, #15]
 8009016:	3301      	adds	r3, #1
 8009018:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	3301      	adds	r3, #1
 800901e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1f5      	bne.n	8009014 <USBD_GetLen+0x12>
  }

  return len;
 8009028:	7bfb      	ldrb	r3, [r7, #15]
}
 800902a:	4618      	mov	r0, r3
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2202      	movs	r2, #2
 8009046:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	2100      	movs	r1, #0
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f001 fcc3 	bl	800a9e8 <USBD_LL_Transmit>

  return USBD_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	2100      	movs	r1, #0
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f001 fcb2 	bl	800a9e8 <USBD_LL_Transmit>

  return USBD_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b084      	sub	sp, #16
 8009092:	af00      	add	r7, sp, #0
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	60b9      	str	r1, [r7, #8]
 8009098:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	2100      	movs	r1, #0
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f001 fcd9 	bl	800aa58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2204      	movs	r2, #4
 80090bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090c0:	2300      	movs	r3, #0
 80090c2:	2200      	movs	r2, #0
 80090c4:	2100      	movs	r1, #0
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f001 fc8e 	bl	800a9e8 <USBD_LL_Transmit>

  return USBD_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b082      	sub	sp, #8
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2205      	movs	r2, #5
 80090e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090e6:	2300      	movs	r3, #0
 80090e8:	2200      	movs	r2, #0
 80090ea:	2100      	movs	r1, #0
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f001 fcb3 	bl	800aa58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	4603      	mov	r3, r0
 8009104:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800910a:	2110      	movs	r1, #16
 800910c:	20d4      	movs	r0, #212	; 0xd4
 800910e:	f000 fdf3 	bl	8009cf8 <SENSOR_IO_Read>
 8009112:	4603      	mov	r3, r0
 8009114:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8009116:	88fb      	ldrh	r3, [r7, #6]
 8009118:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800911a:	7bbb      	ldrb	r3, [r7, #14]
 800911c:	f003 0303 	and.w	r3, r3, #3
 8009120:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8009122:	7bba      	ldrb	r2, [r7, #14]
 8009124:	7bfb      	ldrb	r3, [r7, #15]
 8009126:	4313      	orrs	r3, r2
 8009128:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800912a:	7bbb      	ldrb	r3, [r7, #14]
 800912c:	461a      	mov	r2, r3
 800912e:	2110      	movs	r1, #16
 8009130:	20d4      	movs	r0, #212	; 0xd4
 8009132:	f000 fdc7 	bl	8009cc4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8009136:	2112      	movs	r1, #18
 8009138:	20d4      	movs	r0, #212	; 0xd4
 800913a:	f000 fddd 	bl	8009cf8 <SENSOR_IO_Read>
 800913e:	4603      	mov	r3, r0
 8009140:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8009142:	88fb      	ldrh	r3, [r7, #6]
 8009144:	0a1b      	lsrs	r3, r3, #8
 8009146:	b29b      	uxth	r3, r3
 8009148:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8009150:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8009152:	7bba      	ldrb	r2, [r7, #14]
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	4313      	orrs	r3, r2
 8009158:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	461a      	mov	r2, r3
 800915e:	2112      	movs	r1, #18
 8009160:	20d4      	movs	r0, #212	; 0xd4
 8009162:	f000 fdaf 	bl	8009cc4 <SENSOR_IO_Write>
}
 8009166:	bf00      	nop
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b082      	sub	sp, #8
 8009172:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8009174:	2300      	movs	r3, #0
 8009176:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009178:	2110      	movs	r1, #16
 800917a:	20d4      	movs	r0, #212	; 0xd4
 800917c:	f000 fdbc 	bl	8009cf8 <SENSOR_IO_Read>
 8009180:	4603      	mov	r3, r0
 8009182:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8009184:	79fb      	ldrb	r3, [r7, #7]
 8009186:	f003 030f 	and.w	r3, r3, #15
 800918a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800918c:	79fb      	ldrb	r3, [r7, #7]
 800918e:	461a      	mov	r2, r3
 8009190:	2110      	movs	r1, #16
 8009192:	20d4      	movs	r0, #212	; 0xd4
 8009194:	f000 fd96 	bl	8009cc4 <SENSOR_IO_Write>
}
 8009198:	bf00      	nop
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80091a0:	b580      	push	{r7, lr}
 80091a2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80091a4:	f000 fd84 	bl	8009cb0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80091a8:	210f      	movs	r1, #15
 80091aa:	20d4      	movs	r0, #212	; 0xd4
 80091ac:	f000 fda4 	bl	8009cf8 <SENSOR_IO_Read>
 80091b0:	4603      	mov	r3, r0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	4603      	mov	r3, r0
 80091be:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80091c0:	2300      	movs	r3, #0
 80091c2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80091c4:	2115      	movs	r1, #21
 80091c6:	20d4      	movs	r0, #212	; 0xd4
 80091c8:	f000 fd96 	bl	8009cf8 <SENSOR_IO_Read>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
 80091d2:	f023 0310 	bic.w	r3, r3, #16
 80091d6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80091d8:	88fb      	ldrh	r3, [r7, #6]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d003      	beq.n	80091e6 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80091de:	7bfb      	ldrb	r3, [r7, #15]
 80091e0:	f043 0310 	orr.w	r3, r3, #16
 80091e4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	461a      	mov	r2, r3
 80091ea:	2115      	movs	r1, #21
 80091ec:	20d4      	movs	r0, #212	; 0xd4
 80091ee:	f000 fd69 	bl	8009cc4 <SENSOR_IO_Write>
}
 80091f2:	bf00      	nop
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b088      	sub	sp, #32
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8009204:	2300      	movs	r3, #0
 8009206:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8009208:	2300      	movs	r3, #0
 800920a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800920c:	f04f 0300 	mov.w	r3, #0
 8009210:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009212:	2110      	movs	r1, #16
 8009214:	20d4      	movs	r0, #212	; 0xd4
 8009216:	f000 fd6f 	bl	8009cf8 <SENSOR_IO_Read>
 800921a:	4603      	mov	r3, r0
 800921c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800921e:	f107 0208 	add.w	r2, r7, #8
 8009222:	2306      	movs	r3, #6
 8009224:	2128      	movs	r1, #40	; 0x28
 8009226:	20d4      	movs	r0, #212	; 0xd4
 8009228:	f000 fd84 	bl	8009d34 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800922c:	2300      	movs	r3, #0
 800922e:	77fb      	strb	r3, [r7, #31]
 8009230:	e01f      	b.n	8009272 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8009232:	7ffb      	ldrb	r3, [r7, #31]
 8009234:	005b      	lsls	r3, r3, #1
 8009236:	3301      	adds	r3, #1
 8009238:	f107 0220 	add.w	r2, r7, #32
 800923c:	4413      	add	r3, r2
 800923e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009242:	b29b      	uxth	r3, r3
 8009244:	021b      	lsls	r3, r3, #8
 8009246:	b29a      	uxth	r2, r3
 8009248:	7ffb      	ldrb	r3, [r7, #31]
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	f107 0120 	add.w	r1, r7, #32
 8009250:	440b      	add	r3, r1
 8009252:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009256:	b29b      	uxth	r3, r3
 8009258:	4413      	add	r3, r2
 800925a:	b29a      	uxth	r2, r3
 800925c:	7ffb      	ldrb	r3, [r7, #31]
 800925e:	b212      	sxth	r2, r2
 8009260:	005b      	lsls	r3, r3, #1
 8009262:	f107 0120 	add.w	r1, r7, #32
 8009266:	440b      	add	r3, r1
 8009268:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800926c:	7ffb      	ldrb	r3, [r7, #31]
 800926e:	3301      	adds	r3, #1
 8009270:	77fb      	strb	r3, [r7, #31]
 8009272:	7ffb      	ldrb	r3, [r7, #31]
 8009274:	2b02      	cmp	r3, #2
 8009276:	d9dc      	bls.n	8009232 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8009278:	7dfb      	ldrb	r3, [r7, #23]
 800927a:	f003 030c 	and.w	r3, r3, #12
 800927e:	2b0c      	cmp	r3, #12
 8009280:	d828      	bhi.n	80092d4 <LSM6DSL_AccReadXYZ+0xd8>
 8009282:	a201      	add	r2, pc, #4	; (adr r2, 8009288 <LSM6DSL_AccReadXYZ+0x8c>)
 8009284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009288:	080092bd 	.word	0x080092bd
 800928c:	080092d5 	.word	0x080092d5
 8009290:	080092d5 	.word	0x080092d5
 8009294:	080092d5 	.word	0x080092d5
 8009298:	080092cf 	.word	0x080092cf
 800929c:	080092d5 	.word	0x080092d5
 80092a0:	080092d5 	.word	0x080092d5
 80092a4:	080092d5 	.word	0x080092d5
 80092a8:	080092c3 	.word	0x080092c3
 80092ac:	080092d5 	.word	0x080092d5
 80092b0:	080092d5 	.word	0x080092d5
 80092b4:	080092d5 	.word	0x080092d5
 80092b8:	080092c9 	.word	0x080092c9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80092bc:	4b19      	ldr	r3, [pc, #100]	; (8009324 <LSM6DSL_AccReadXYZ+0x128>)
 80092be:	61bb      	str	r3, [r7, #24]
    break;
 80092c0:	e008      	b.n	80092d4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80092c2:	4b19      	ldr	r3, [pc, #100]	; (8009328 <LSM6DSL_AccReadXYZ+0x12c>)
 80092c4:	61bb      	str	r3, [r7, #24]
    break;
 80092c6:	e005      	b.n	80092d4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80092c8:	4b18      	ldr	r3, [pc, #96]	; (800932c <LSM6DSL_AccReadXYZ+0x130>)
 80092ca:	61bb      	str	r3, [r7, #24]
    break;
 80092cc:	e002      	b.n	80092d4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80092ce:	4b18      	ldr	r3, [pc, #96]	; (8009330 <LSM6DSL_AccReadXYZ+0x134>)
 80092d0:	61bb      	str	r3, [r7, #24]
    break;    
 80092d2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80092d4:	2300      	movs	r3, #0
 80092d6:	77fb      	strb	r3, [r7, #31]
 80092d8:	e01b      	b.n	8009312 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80092da:	7ffb      	ldrb	r3, [r7, #31]
 80092dc:	005b      	lsls	r3, r3, #1
 80092de:	f107 0220 	add.w	r2, r7, #32
 80092e2:	4413      	add	r3, r2
 80092e4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80092e8:	ee07 3a90 	vmov	s15, r3
 80092ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80092f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092f8:	7ffb      	ldrb	r3, [r7, #31]
 80092fa:	005b      	lsls	r3, r3, #1
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	4413      	add	r3, r2
 8009300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009304:	ee17 2a90 	vmov	r2, s15
 8009308:	b212      	sxth	r2, r2
 800930a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800930c:	7ffb      	ldrb	r3, [r7, #31]
 800930e:	3301      	adds	r3, #1
 8009310:	77fb      	strb	r3, [r7, #31]
 8009312:	7ffb      	ldrb	r3, [r7, #31]
 8009314:	2b02      	cmp	r3, #2
 8009316:	d9e0      	bls.n	80092da <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8009318:	bf00      	nop
 800931a:	bf00      	nop
 800931c:	3720      	adds	r7, #32
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	3d79db23 	.word	0x3d79db23
 8009328:	3df9db23 	.word	0x3df9db23
 800932c:	3e79db23 	.word	0x3e79db23
 8009330:	3ef9db23 	.word	0x3ef9db23
 8009334:	00000000 	.word	0x00000000

08009338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//populate the sinePeriod array with values
	for (int i = 0; i < size; i++) {
 800933e:	2300      	movs	r3, #0
 8009340:	60fb      	str	r3, [r7, #12]
 8009342:	e02a      	b.n	800939a <main+0x62>
		// using 8 bit precision for DAC input, the range is from 0 - 255.
		// to use 2/3 of the range, range is 42.5 - 212.5

		sineValue[i] = 85 * arm_sin_f32(2*M_PI/20 * i) + 128; // uses 2/3 range
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f7f7 fa17 	bl	8000778 <__aeabi_i2d>
 800934a:	a37d      	add	r3, pc, #500	; (adr r3, 8009540 <main+0x208>)
 800934c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009350:	f7f6 ff96 	bl	8000280 <__aeabi_dmul>
 8009354:	4602      	mov	r2, r0
 8009356:	460b      	mov	r3, r1
 8009358:	4610      	mov	r0, r2
 800935a:	4619      	mov	r1, r3
 800935c:	f7f7 fa76 	bl	800084c <__aeabi_d2f>
 8009360:	4603      	mov	r3, r0
 8009362:	ee00 3a10 	vmov	s0, r3
 8009366:	f001 fd67 	bl	800ae38 <arm_sin_f32>
 800936a:	eef0 7a40 	vmov.f32	s15, s0
 800936e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8009500 <main+0x1c8>
 8009372:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009376:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8009504 <main+0x1cc>
 800937a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800937e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009382:	edc7 7a01 	vstr	s15, [r7, #4]
 8009386:	793b      	ldrb	r3, [r7, #4]
 8009388:	b2d9      	uxtb	r1, r3
 800938a:	4a5f      	ldr	r2, [pc, #380]	; (8009508 <main+0x1d0>)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4413      	add	r3, r2
 8009390:	460a      	mov	r2, r1
 8009392:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++) {
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	3301      	adds	r3, #1
 8009398:	60fb      	str	r3, [r7, #12]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f240 52db 	movw	r2, #1499	; 0x5db
 80093a0:	4293      	cmp	r3, r2
 80093a2:	ddcf      	ble.n	8009344 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80093a4:	f7f7 fc1e 	bl	8000be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80093a8:	f000 f8ce 	bl	8009548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80093ac:	f000 fa7a 	bl	80098a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80093b0:	f000 f94e 	bl	8009650 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80093b4:	f000 ff9e 	bl	800a2f4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80093b8:	f000 f98a 	bl	80096d0 <MX_TIM2_Init>
  MX_DMA_Init();
 80093bc:	f000 fa54 	bl	8009868 <MX_DMA_Init>
  MX_DAC1_Init();
 80093c0:	f000 f914 	bl	80095ec <MX_DAC1_Init>
  MX_USART1_UART_Init();
 80093c4:	f000 fa20 	bl	8009808 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80093c8:	f000 f9d0 	bl	800976c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 80093cc:	f000 fcd0 	bl	8009d70 <BSP_ACCELERO_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80093d0:	484e      	ldr	r0, [pc, #312]	; (800950c <main+0x1d4>)
 80093d2:	f7fc f807 	bl	80053e4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Init(&huart1);
 80093d6:	484e      	ldr	r0, [pc, #312]	; (8009510 <main+0x1d8>)
 80093d8:	f7fc fc5c 	bl	8005c94 <HAL_UART_Init>

  // Start timer 4 for speaker
  HAL_TIM_Base_Start_IT(&htim4);
 80093dc:	484d      	ldr	r0, [pc, #308]	; (8009514 <main+0x1dc>)
 80093de:	f7fc f801 	bl	80053e4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80093e2:	2201      	movs	r2, #1
 80093e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80093e8:	484b      	ldr	r0, [pc, #300]	; (8009518 <main+0x1e0>)
 80093ea:	f7f8 fd8f 	bl	8001f0c <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (sleepTimer >= 50) {
 80093ee:	4b4b      	ldr	r3, [pc, #300]	; (800951c <main+0x1e4>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b31      	cmp	r3, #49	; 0x31
 80093f4:	dd1c      	ble.n	8009430 <main+0xf8>
		  // Sleep
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80093f6:	2200      	movs	r2, #0
 80093f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80093fc:	4846      	ldr	r0, [pc, #280]	; (8009518 <main+0x1e0>)
 80093fe:	f7f8 fd85 	bl	8001f0c <HAL_GPIO_WritePin>
		  HAL_TIM_Base_Stop(&htim2);
 8009402:	4842      	ldr	r0, [pc, #264]	; (800950c <main+0x1d4>)
 8009404:	f7fb ffc7 	bl	8005396 <HAL_TIM_Base_Stop>
		  HAL_SuspendTick();
 8009408:	f7f7 fc84 	bl	8000d14 <HAL_SuspendTick>

		  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800940c:	2101      	movs	r1, #1
 800940e:	2000      	movs	r0, #0
 8009410:	f7fa fbd2 	bl	8003bb8 <HAL_PWR_EnterSLEEPMode>

		  // Wake up
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8009414:	2201      	movs	r2, #1
 8009416:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800941a:	483f      	ldr	r0, [pc, #252]	; (8009518 <main+0x1e0>)
 800941c:	f7f8 fd76 	bl	8001f0c <HAL_GPIO_WritePin>
		  HAL_ResumeTick();
 8009420:	f7f7 fc88 	bl	8000d34 <HAL_ResumeTick>
		  HAL_TIM_Base_Start_IT(&htim2);
 8009424:	4839      	ldr	r0, [pc, #228]	; (800950c <main+0x1d4>)
 8009426:	f7fb ffdd 	bl	80053e4 <HAL_TIM_Base_Start_IT>
		  sleepTimer = 0;
 800942a:	4b3c      	ldr	r3, [pc, #240]	; (800951c <main+0x1e4>)
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]
	  }

	  BSP_ACCELERO_AccGetXYZ(acceleroResults);
 8009430:	483b      	ldr	r0, [pc, #236]	; (8009520 <main+0x1e8>)
 8009432:	f000 fcdb 	bl	8009dec <BSP_ACCELERO_AccGetXYZ>
	  x = acceleroResults[0];
 8009436:	4b3a      	ldr	r3, [pc, #232]	; (8009520 <main+0x1e8>)
 8009438:	f9b3 2000 	ldrsh.w	r2, [r3]
 800943c:	4b39      	ldr	r3, [pc, #228]	; (8009524 <main+0x1ec>)
 800943e:	801a      	strh	r2, [r3, #0]
	  y = acceleroResults[1];
 8009440:	4b37      	ldr	r3, [pc, #220]	; (8009520 <main+0x1e8>)
 8009442:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009446:	4b38      	ldr	r3, [pc, #224]	; (8009528 <main+0x1f0>)
 8009448:	801a      	strh	r2, [r3, #0]
//		  mousehid.mouse_y = -y/12;
//	  }
//	  else {
//		  mousehid.mouse_y = 0;
//	  }
	  if (abs(x) > 200 || abs(y) > 200){
 800944a:	4b36      	ldr	r3, [pc, #216]	; (8009524 <main+0x1ec>)
 800944c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009450:	2b00      	cmp	r3, #0
 8009452:	bfb8      	it	lt
 8009454:	425b      	neglt	r3, r3
 8009456:	b29b      	uxth	r3, r3
 8009458:	2bc8      	cmp	r3, #200	; 0xc8
 800945a:	d808      	bhi.n	800946e <main+0x136>
 800945c:	4b32      	ldr	r3, [pc, #200]	; (8009528 <main+0x1f0>)
 800945e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009462:	2b00      	cmp	r3, #0
 8009464:	bfb8      	it	lt
 8009466:	425b      	neglt	r3, r3
 8009468:	b29b      	uxth	r3, r3
 800946a:	2bc8      	cmp	r3, #200	; 0xc8
 800946c:	d91d      	bls.n	80094aa <main+0x172>
		  mousehid.mouse_x = x/17;
 800946e:	4b2d      	ldr	r3, [pc, #180]	; (8009524 <main+0x1ec>)
 8009470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009474:	4a2d      	ldr	r2, [pc, #180]	; (800952c <main+0x1f4>)
 8009476:	fb82 1203 	smull	r1, r2, r2, r3
 800947a:	10d2      	asrs	r2, r2, #3
 800947c:	17db      	asrs	r3, r3, #31
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	b21b      	sxth	r3, r3
 8009482:	b25a      	sxtb	r2, r3
 8009484:	4b2a      	ldr	r3, [pc, #168]	; (8009530 <main+0x1f8>)
 8009486:	705a      	strb	r2, [r3, #1]
		  mousehid.mouse_y = -y/14;
 8009488:	4b27      	ldr	r3, [pc, #156]	; (8009528 <main+0x1f0>)
 800948a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800948e:	4a29      	ldr	r2, [pc, #164]	; (8009534 <main+0x1fc>)
 8009490:	fb82 1203 	smull	r1, r2, r2, r3
 8009494:	441a      	add	r2, r3
 8009496:	10d2      	asrs	r2, r2, #3
 8009498:	17db      	asrs	r3, r3, #31
 800949a:	1a9b      	subs	r3, r3, r2
 800949c:	b25a      	sxtb	r2, r3
 800949e:	4b24      	ldr	r3, [pc, #144]	; (8009530 <main+0x1f8>)
 80094a0:	709a      	strb	r2, [r3, #2]
		  sleepTimer = 0;
 80094a2:	4b1e      	ldr	r3, [pc, #120]	; (800951c <main+0x1e4>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	e005      	b.n	80094b6 <main+0x17e>
	  }
	  else {
		  mousehid.mouse_x = 0;
 80094aa:	4b21      	ldr	r3, [pc, #132]	; (8009530 <main+0x1f8>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	705a      	strb	r2, [r3, #1]
		  mousehid.mouse_y = 0;
 80094b0:	4b1f      	ldr	r3, [pc, #124]	; (8009530 <main+0x1f8>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	709a      	strb	r2, [r3, #2]
	  }


	  if (button_flag==1)
 80094b6:	4b20      	ldr	r3, [pc, #128]	; (8009538 <main+0x200>)
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d116      	bne.n	80094ec <main+0x1b4>
	  {
	   mousehid.button = 1;
 80094be:	4b1c      	ldr	r3, [pc, #112]	; (8009530 <main+0x1f8>)
 80094c0:	2201      	movs	r2, #1
 80094c2:	701a      	strb	r2, [r3, #0]
	   USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 80094c4:	2204      	movs	r2, #4
 80094c6:	491a      	ldr	r1, [pc, #104]	; (8009530 <main+0x1f8>)
 80094c8:	481c      	ldr	r0, [pc, #112]	; (800953c <main+0x204>)
 80094ca:	f7fe fc27 	bl	8007d1c <USBD_HID_SendReport>
	   HAL_Delay (10);
 80094ce:	200a      	movs	r0, #10
 80094d0:	f7f7 fbfc 	bl	8000ccc <HAL_Delay>
	   mousehid.button = 0;
 80094d4:	4b16      	ldr	r3, [pc, #88]	; (8009530 <main+0x1f8>)
 80094d6:	2200      	movs	r2, #0
 80094d8:	701a      	strb	r2, [r3, #0]

	   USBD_HID_SendReport(&hUsbDeviceFS,&mousehid, sizeof (mousehid));
 80094da:	2204      	movs	r2, #4
 80094dc:	4914      	ldr	r1, [pc, #80]	; (8009530 <main+0x1f8>)
 80094de:	4817      	ldr	r0, [pc, #92]	; (800953c <main+0x204>)
 80094e0:	f7fe fc1c 	bl	8007d1c <USBD_HID_SendReport>
	   button_flag =0;
 80094e4:	4b14      	ldr	r3, [pc, #80]	; (8009538 <main+0x200>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	701a      	strb	r2, [r3, #0]
 80094ea:	e004      	b.n	80094f6 <main+0x1be>
	  } else {
		  USBD_HID_SendReport(&hUsbDeviceFS,&mousehid, sizeof (mousehid));
 80094ec:	2204      	movs	r2, #4
 80094ee:	4910      	ldr	r1, [pc, #64]	; (8009530 <main+0x1f8>)
 80094f0:	4812      	ldr	r0, [pc, #72]	; (800953c <main+0x204>)
 80094f2:	f7fe fc13 	bl	8007d1c <USBD_HID_SendReport>
	  }


	  HAL_Delay(10);
 80094f6:	200a      	movs	r0, #10
 80094f8:	f7f7 fbe8 	bl	8000ccc <HAL_Delay>
	  if (sleepTimer >= 50) {
 80094fc:	e777      	b.n	80093ee <main+0xb6>
 80094fe:	bf00      	nop
 8009500:	42aa0000 	.word	0x42aa0000
 8009504:	43000000 	.word	0x43000000
 8009508:	20000498 	.word	0x20000498
 800950c:	2000044c 	.word	0x2000044c
 8009510:	20000360 	.word	0x20000360
 8009514:	20000268 	.word	0x20000268
 8009518:	48000400 	.word	0x48000400
 800951c:	20000230 	.word	0x20000230
 8009520:	20000260 	.word	0x20000260
 8009524:	20000266 	.word	0x20000266
 8009528:	20000448 	.word	0x20000448
 800952c:	78787879 	.word	0x78787879
 8009530:	2000022c 	.word	0x2000022c
 8009534:	92492493 	.word	0x92492493
 8009538:	20000234 	.word	0x20000234
 800953c:	20000b44 	.word	0x20000b44
 8009540:	769cf0e0 	.word	0x769cf0e0
 8009544:	3fd41b2f 	.word	0x3fd41b2f

08009548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b096      	sub	sp, #88	; 0x58
 800954c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800954e:	f107 0314 	add.w	r3, r7, #20
 8009552:	2244      	movs	r2, #68	; 0x44
 8009554:	2100      	movs	r1, #0
 8009556:	4618      	mov	r0, r3
 8009558:	f001 fcde 	bl	800af18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800955c:	463b      	mov	r3, r7
 800955e:	2200      	movs	r2, #0
 8009560:	601a      	str	r2, [r3, #0]
 8009562:	605a      	str	r2, [r3, #4]
 8009564:	609a      	str	r2, [r3, #8]
 8009566:	60da      	str	r2, [r3, #12]
 8009568:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800956a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800956e:	f7fa fb65 	bl	8003c3c <HAL_PWREx_ControlVoltageScaling>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8009578:	f000 fa9c 	bl	8009ab4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800957c:	2310      	movs	r3, #16
 800957e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8009580:	2301      	movs	r3, #1
 8009582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8009584:	2300      	movs	r3, #0
 8009586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8009588:	2360      	movs	r3, #96	; 0x60
 800958a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800958c:	2302      	movs	r3, #2
 800958e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8009590:	2301      	movs	r3, #1
 8009592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8009594:	2301      	movs	r3, #1
 8009596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8009598:	2328      	movs	r3, #40	; 0x28
 800959a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800959c:	2307      	movs	r3, #7
 800959e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80095a0:	2302      	movs	r3, #2
 80095a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80095a4:	2302      	movs	r3, #2
 80095a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80095a8:	f107 0314 	add.w	r3, r7, #20
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fa fbf3 	bl	8003d98 <HAL_RCC_OscConfig>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80095b8:	f000 fa7c 	bl	8009ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80095bc:	230f      	movs	r3, #15
 80095be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80095c0:	2303      	movs	r3, #3
 80095c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80095c4:	2300      	movs	r3, #0
 80095c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80095c8:	2300      	movs	r3, #0
 80095ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80095cc:	2300      	movs	r3, #0
 80095ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80095d0:	463b      	mov	r3, r7
 80095d2:	2104      	movs	r1, #4
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fa ffc5 	bl	8004564 <HAL_RCC_ClockConfig>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d001      	beq.n	80095e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80095e0:	f000 fa68 	bl	8009ab4 <Error_Handler>
  }
}
 80095e4:	bf00      	nop
 80095e6:	3758      	adds	r7, #88	; 0x58
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08a      	sub	sp, #40	; 0x28
 80095f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80095f2:	1d3b      	adds	r3, r7, #4
 80095f4:	2224      	movs	r2, #36	; 0x24
 80095f6:	2100      	movs	r1, #0
 80095f8:	4618      	mov	r0, r3
 80095fa:	f001 fc8d 	bl	800af18 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80095fe:	4b12      	ldr	r3, [pc, #72]	; (8009648 <MX_DAC1_Init+0x5c>)
 8009600:	4a12      	ldr	r2, [pc, #72]	; (800964c <MX_DAC1_Init+0x60>)
 8009602:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8009604:	4810      	ldr	r0, [pc, #64]	; (8009648 <MX_DAC1_Init+0x5c>)
 8009606:	f7f7 fcb6 	bl	8000f76 <HAL_DAC_Init>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8009610:	f000 fa50 	bl	8009ab4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8009614:	2300      	movs	r3, #0
 8009616:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8009618:	232c      	movs	r3, #44	; 0x2c
 800961a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800961c:	2300      	movs	r3, #0
 800961e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8009620:	2300      	movs	r3, #0
 8009622:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8009624:	2300      	movs	r3, #0
 8009626:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8009628:	1d3b      	adds	r3, r7, #4
 800962a:	2200      	movs	r2, #0
 800962c:	4619      	mov	r1, r3
 800962e:	4806      	ldr	r0, [pc, #24]	; (8009648 <MX_DAC1_Init+0x5c>)
 8009630:	f7f7 fdf3 	bl	800121a <HAL_DAC_ConfigChannel>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800963a:	f000 fa3b 	bl	8009ab4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800963e:	bf00      	nop
 8009640:	3728      	adds	r7, #40	; 0x28
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	200002b4 	.word	0x200002b4
 800964c:	40007400 	.word	0x40007400

08009650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009654:	4b1b      	ldr	r3, [pc, #108]	; (80096c4 <MX_I2C1_Init+0x74>)
 8009656:	4a1c      	ldr	r2, [pc, #112]	; (80096c8 <MX_I2C1_Init+0x78>)
 8009658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800965a:	4b1a      	ldr	r3, [pc, #104]	; (80096c4 <MX_I2C1_Init+0x74>)
 800965c:	4a1b      	ldr	r2, [pc, #108]	; (80096cc <MX_I2C1_Init+0x7c>)
 800965e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009660:	4b18      	ldr	r3, [pc, #96]	; (80096c4 <MX_I2C1_Init+0x74>)
 8009662:	2200      	movs	r2, #0
 8009664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009666:	4b17      	ldr	r3, [pc, #92]	; (80096c4 <MX_I2C1_Init+0x74>)
 8009668:	2201      	movs	r2, #1
 800966a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800966c:	4b15      	ldr	r3, [pc, #84]	; (80096c4 <MX_I2C1_Init+0x74>)
 800966e:	2200      	movs	r2, #0
 8009670:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8009672:	4b14      	ldr	r3, [pc, #80]	; (80096c4 <MX_I2C1_Init+0x74>)
 8009674:	2200      	movs	r2, #0
 8009676:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009678:	4b12      	ldr	r3, [pc, #72]	; (80096c4 <MX_I2C1_Init+0x74>)
 800967a:	2200      	movs	r2, #0
 800967c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800967e:	4b11      	ldr	r3, [pc, #68]	; (80096c4 <MX_I2C1_Init+0x74>)
 8009680:	2200      	movs	r2, #0
 8009682:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009684:	4b0f      	ldr	r3, [pc, #60]	; (80096c4 <MX_I2C1_Init+0x74>)
 8009686:	2200      	movs	r2, #0
 8009688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800968a:	480e      	ldr	r0, [pc, #56]	; (80096c4 <MX_I2C1_Init+0x74>)
 800968c:	f7f8 fc6e 	bl	8001f6c <HAL_I2C_Init>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8009696:	f000 fa0d 	bl	8009ab4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800969a:	2100      	movs	r1, #0
 800969c:	4809      	ldr	r0, [pc, #36]	; (80096c4 <MX_I2C1_Init+0x74>)
 800969e:	f7f9 f96d 	bl	800297c <HAL_I2CEx_ConfigAnalogFilter>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80096a8:	f000 fa04 	bl	8009ab4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80096ac:	2100      	movs	r1, #0
 80096ae:	4805      	ldr	r0, [pc, #20]	; (80096c4 <MX_I2C1_Init+0x74>)
 80096b0:	f7f9 f9af 	bl	8002a12 <HAL_I2CEx_ConfigDigitalFilter>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d001      	beq.n	80096be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80096ba:	f000 f9fb 	bl	8009ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80096be:	bf00      	nop
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	200002c8 	.word	0x200002c8
 80096c8:	40005400 	.word	0x40005400
 80096cc:	10909cec 	.word	0x10909cec

080096d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80096d6:	f107 0310 	add.w	r3, r7, #16
 80096da:	2200      	movs	r2, #0
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	605a      	str	r2, [r3, #4]
 80096e0:	609a      	str	r2, [r3, #8]
 80096e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80096e4:	1d3b      	adds	r3, r7, #4
 80096e6:	2200      	movs	r2, #0
 80096e8:	601a      	str	r2, [r3, #0]
 80096ea:	605a      	str	r2, [r3, #4]
 80096ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80096ee:	4b1d      	ldr	r3, [pc, #116]	; (8009764 <MX_TIM2_Init+0x94>)
 80096f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80096f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80096f6:	4b1b      	ldr	r3, [pc, #108]	; (8009764 <MX_TIM2_Init+0x94>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096fc:	4b19      	ldr	r3, [pc, #100]	; (8009764 <MX_TIM2_Init+0x94>)
 80096fe:	2200      	movs	r2, #0
 8009700:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000000;
 8009702:	4b18      	ldr	r3, [pc, #96]	; (8009764 <MX_TIM2_Init+0x94>)
 8009704:	4a18      	ldr	r2, [pc, #96]	; (8009768 <MX_TIM2_Init+0x98>)
 8009706:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009708:	4b16      	ldr	r3, [pc, #88]	; (8009764 <MX_TIM2_Init+0x94>)
 800970a:	2200      	movs	r2, #0
 800970c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800970e:	4b15      	ldr	r3, [pc, #84]	; (8009764 <MX_TIM2_Init+0x94>)
 8009710:	2200      	movs	r2, #0
 8009712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009714:	4813      	ldr	r0, [pc, #76]	; (8009764 <MX_TIM2_Init+0x94>)
 8009716:	f7fb fde7 	bl	80052e8 <HAL_TIM_Base_Init>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8009720:	f000 f9c8 	bl	8009ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009728:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800972a:	f107 0310 	add.w	r3, r7, #16
 800972e:	4619      	mov	r1, r3
 8009730:	480c      	ldr	r0, [pc, #48]	; (8009764 <MX_TIM2_Init+0x94>)
 8009732:	f7fb ffe6 	bl	8005702 <HAL_TIM_ConfigClockSource>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800973c:	f000 f9ba 	bl	8009ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009740:	2320      	movs	r3, #32
 8009742:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009744:	2300      	movs	r3, #0
 8009746:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009748:	1d3b      	adds	r3, r7, #4
 800974a:	4619      	mov	r1, r3
 800974c:	4805      	ldr	r0, [pc, #20]	; (8009764 <MX_TIM2_Init+0x94>)
 800974e:	f7fc f9fb 	bl	8005b48 <HAL_TIMEx_MasterConfigSynchronization>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d001      	beq.n	800975c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8009758:	f000 f9ac 	bl	8009ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800975c:	bf00      	nop
 800975e:	3720      	adds	r7, #32
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	2000044c 	.word	0x2000044c
 8009768:	007a1200 	.word	0x007a1200

0800976c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009772:	f107 0310 	add.w	r3, r7, #16
 8009776:	2200      	movs	r2, #0
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	605a      	str	r2, [r3, #4]
 800977c:	609a      	str	r2, [r3, #8]
 800977e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009780:	1d3b      	adds	r3, r7, #4
 8009782:	2200      	movs	r2, #0
 8009784:	601a      	str	r2, [r3, #0]
 8009786:	605a      	str	r2, [r3, #4]
 8009788:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800978a:	4b1d      	ldr	r3, [pc, #116]	; (8009800 <MX_TIM4_Init+0x94>)
 800978c:	4a1d      	ldr	r2, [pc, #116]	; (8009804 <MX_TIM4_Init+0x98>)
 800978e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8009790:	4b1b      	ldr	r3, [pc, #108]	; (8009800 <MX_TIM4_Init+0x94>)
 8009792:	2200      	movs	r2, #0
 8009794:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009796:	4b1a      	ldr	r3, [pc, #104]	; (8009800 <MX_TIM4_Init+0x94>)
 8009798:	2200      	movs	r2, #0
 800979a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1814;
 800979c:	4b18      	ldr	r3, [pc, #96]	; (8009800 <MX_TIM4_Init+0x94>)
 800979e:	f240 7216 	movw	r2, #1814	; 0x716
 80097a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80097a4:	4b16      	ldr	r3, [pc, #88]	; (8009800 <MX_TIM4_Init+0x94>)
 80097a6:	2200      	movs	r2, #0
 80097a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80097aa:	4b15      	ldr	r3, [pc, #84]	; (8009800 <MX_TIM4_Init+0x94>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80097b0:	4813      	ldr	r0, [pc, #76]	; (8009800 <MX_TIM4_Init+0x94>)
 80097b2:	f7fb fd99 	bl	80052e8 <HAL_TIM_Base_Init>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80097bc:	f000 f97a 	bl	8009ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80097c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80097c6:	f107 0310 	add.w	r3, r7, #16
 80097ca:	4619      	mov	r1, r3
 80097cc:	480c      	ldr	r0, [pc, #48]	; (8009800 <MX_TIM4_Init+0x94>)
 80097ce:	f7fb ff98 	bl	8005702 <HAL_TIM_ConfigClockSource>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d001      	beq.n	80097dc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80097d8:	f000 f96c 	bl	8009ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80097dc:	2320      	movs	r3, #32
 80097de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80097e0:	2300      	movs	r3, #0
 80097e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80097e4:	1d3b      	adds	r3, r7, #4
 80097e6:	4619      	mov	r1, r3
 80097e8:	4805      	ldr	r0, [pc, #20]	; (8009800 <MX_TIM4_Init+0x94>)
 80097ea:	f7fc f9ad 	bl	8005b48 <HAL_TIMEx_MasterConfigSynchronization>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80097f4:	f000 f95e 	bl	8009ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80097f8:	bf00      	nop
 80097fa:	3720      	adds	r7, #32
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	20000268 	.word	0x20000268
 8009804:	40000800 	.word	0x40000800

08009808 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800980c:	4b14      	ldr	r3, [pc, #80]	; (8009860 <MX_USART1_UART_Init+0x58>)
 800980e:	4a15      	ldr	r2, [pc, #84]	; (8009864 <MX_USART1_UART_Init+0x5c>)
 8009810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009812:	4b13      	ldr	r3, [pc, #76]	; (8009860 <MX_USART1_UART_Init+0x58>)
 8009814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800981a:	4b11      	ldr	r3, [pc, #68]	; (8009860 <MX_USART1_UART_Init+0x58>)
 800981c:	2200      	movs	r2, #0
 800981e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009820:	4b0f      	ldr	r3, [pc, #60]	; (8009860 <MX_USART1_UART_Init+0x58>)
 8009822:	2200      	movs	r2, #0
 8009824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009826:	4b0e      	ldr	r3, [pc, #56]	; (8009860 <MX_USART1_UART_Init+0x58>)
 8009828:	2200      	movs	r2, #0
 800982a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800982c:	4b0c      	ldr	r3, [pc, #48]	; (8009860 <MX_USART1_UART_Init+0x58>)
 800982e:	220c      	movs	r2, #12
 8009830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009832:	4b0b      	ldr	r3, [pc, #44]	; (8009860 <MX_USART1_UART_Init+0x58>)
 8009834:	2200      	movs	r2, #0
 8009836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009838:	4b09      	ldr	r3, [pc, #36]	; (8009860 <MX_USART1_UART_Init+0x58>)
 800983a:	2200      	movs	r2, #0
 800983c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800983e:	4b08      	ldr	r3, [pc, #32]	; (8009860 <MX_USART1_UART_Init+0x58>)
 8009840:	2200      	movs	r2, #0
 8009842:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009844:	4b06      	ldr	r3, [pc, #24]	; (8009860 <MX_USART1_UART_Init+0x58>)
 8009846:	2200      	movs	r2, #0
 8009848:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800984a:	4805      	ldr	r0, [pc, #20]	; (8009860 <MX_USART1_UART_Init+0x58>)
 800984c:	f7fc fa22 	bl	8005c94 <HAL_UART_Init>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8009856:	f000 f92d 	bl	8009ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800985a:	bf00      	nop
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20000360 	.word	0x20000360
 8009864:	40013800 	.word	0x40013800

08009868 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800986e:	4b0c      	ldr	r3, [pc, #48]	; (80098a0 <MX_DMA_Init+0x38>)
 8009870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009872:	4a0b      	ldr	r2, [pc, #44]	; (80098a0 <MX_DMA_Init+0x38>)
 8009874:	f043 0301 	orr.w	r3, r3, #1
 8009878:	6493      	str	r3, [r2, #72]	; 0x48
 800987a:	4b09      	ldr	r3, [pc, #36]	; (80098a0 <MX_DMA_Init+0x38>)
 800987c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	607b      	str	r3, [r7, #4]
 8009884:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8009886:	2200      	movs	r2, #0
 8009888:	2100      	movs	r1, #0
 800988a:	200d      	movs	r0, #13
 800988c:	f7f7 fb3d 	bl	8000f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8009890:	200d      	movs	r0, #13
 8009892:	f7f7 fb56 	bl	8000f42 <HAL_NVIC_EnableIRQ>

}
 8009896:	bf00      	nop
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	40021000 	.word	0x40021000

080098a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b08a      	sub	sp, #40	; 0x28
 80098a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098aa:	f107 0314 	add.w	r3, r7, #20
 80098ae:	2200      	movs	r2, #0
 80098b0:	601a      	str	r2, [r3, #0]
 80098b2:	605a      	str	r2, [r3, #4]
 80098b4:	609a      	str	r2, [r3, #8]
 80098b6:	60da      	str	r2, [r3, #12]
 80098b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80098ba:	4b4f      	ldr	r3, [pc, #316]	; (80099f8 <MX_GPIO_Init+0x154>)
 80098bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098be:	4a4e      	ldr	r2, [pc, #312]	; (80099f8 <MX_GPIO_Init+0x154>)
 80098c0:	f043 0310 	orr.w	r3, r3, #16
 80098c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80098c6:	4b4c      	ldr	r3, [pc, #304]	; (80099f8 <MX_GPIO_Init+0x154>)
 80098c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ca:	f003 0310 	and.w	r3, r3, #16
 80098ce:	613b      	str	r3, [r7, #16]
 80098d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80098d2:	4b49      	ldr	r3, [pc, #292]	; (80099f8 <MX_GPIO_Init+0x154>)
 80098d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098d6:	4a48      	ldr	r2, [pc, #288]	; (80099f8 <MX_GPIO_Init+0x154>)
 80098d8:	f043 0304 	orr.w	r3, r3, #4
 80098dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80098de:	4b46      	ldr	r3, [pc, #280]	; (80099f8 <MX_GPIO_Init+0x154>)
 80098e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098e2:	f003 0304 	and.w	r3, r3, #4
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80098ea:	4b43      	ldr	r3, [pc, #268]	; (80099f8 <MX_GPIO_Init+0x154>)
 80098ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ee:	4a42      	ldr	r2, [pc, #264]	; (80099f8 <MX_GPIO_Init+0x154>)
 80098f0:	f043 0301 	orr.w	r3, r3, #1
 80098f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80098f6:	4b40      	ldr	r3, [pc, #256]	; (80099f8 <MX_GPIO_Init+0x154>)
 80098f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	60bb      	str	r3, [r7, #8]
 8009900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009902:	4b3d      	ldr	r3, [pc, #244]	; (80099f8 <MX_GPIO_Init+0x154>)
 8009904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009906:	4a3c      	ldr	r2, [pc, #240]	; (80099f8 <MX_GPIO_Init+0x154>)
 8009908:	f043 0302 	orr.w	r3, r3, #2
 800990c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800990e:	4b3a      	ldr	r3, [pc, #232]	; (80099f8 <MX_GPIO_Init+0x154>)
 8009910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009912:	f003 0302 	and.w	r3, r3, #2
 8009916:	607b      	str	r3, [r7, #4]
 8009918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800991a:	4b37      	ldr	r3, [pc, #220]	; (80099f8 <MX_GPIO_Init+0x154>)
 800991c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800991e:	4a36      	ldr	r2, [pc, #216]	; (80099f8 <MX_GPIO_Init+0x154>)
 8009920:	f043 0308 	orr.w	r3, r3, #8
 8009924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009926:	4b34      	ldr	r3, [pc, #208]	; (80099f8 <MX_GPIO_Init+0x154>)
 8009928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800992a:	f003 0308 	and.w	r3, r3, #8
 800992e:	603b      	str	r3, [r7, #0]
 8009930:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 8009932:	2201      	movs	r2, #1
 8009934:	2108      	movs	r1, #8
 8009936:	4831      	ldr	r0, [pc, #196]	; (80099fc <MX_GPIO_Init+0x158>)
 8009938:	f7f8 fae8 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800993c:	2200      	movs	r2, #0
 800993e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009942:	482f      	ldr	r0, [pc, #188]	; (8009a00 <MX_GPIO_Init+0x15c>)
 8009944:	f7f8 fae2 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_ERROR_Pin */
  GPIO_InitStruct.Pin = LED_ERROR_Pin;
 8009948:	2308      	movs	r3, #8
 800994a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800994c:	2301      	movs	r3, #1
 800994e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009950:	2300      	movs	r3, #0
 8009952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009954:	2300      	movs	r3, #0
 8009956:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_ERROR_GPIO_Port, &GPIO_InitStruct);
 8009958:	f107 0314 	add.w	r3, r7, #20
 800995c:	4619      	mov	r1, r3
 800995e:	4827      	ldr	r0, [pc, #156]	; (80099fc <MX_GPIO_Init+0x158>)
 8009960:	f7f8 f836 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSHBUTTON_Pin */
  GPIO_InitStruct.Pin = PUSHBUTTON_Pin;
 8009964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800996a:	4b26      	ldr	r3, [pc, #152]	; (8009a04 <MX_GPIO_Init+0x160>)
 800996c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800996e:	2300      	movs	r3, #0
 8009970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 8009972:	f107 0314 	add.w	r3, r7, #20
 8009976:	4619      	mov	r1, r3
 8009978:	4823      	ldr	r0, [pc, #140]	; (8009a08 <MX_GPIO_Init+0x164>)
 800997a:	f7f8 f829 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : test_push_Pin */
  GPIO_InitStruct.Pin = test_push_Pin;
 800997e:	2301      	movs	r3, #1
 8009980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009982:	4b20      	ldr	r3, [pc, #128]	; (8009a04 <MX_GPIO_Init+0x160>)
 8009984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009986:	2302      	movs	r3, #2
 8009988:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(test_push_GPIO_Port, &GPIO_InitStruct);
 800998a:	f107 0314 	add.w	r3, r7, #20
 800998e:	4619      	mov	r1, r3
 8009990:	481d      	ldr	r0, [pc, #116]	; (8009a08 <MX_GPIO_Init+0x164>)
 8009992:	f7f8 f81d 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8009996:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800999a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800999c:	2301      	movs	r3, #1
 800999e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099a4:	2300      	movs	r3, #0
 80099a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80099a8:	f107 0314 	add.w	r3, r7, #20
 80099ac:	4619      	mov	r1, r3
 80099ae:	4814      	ldr	r0, [pc, #80]	; (8009a00 <MX_GPIO_Init+0x15c>)
 80099b0:	f7f8 f80e 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80099b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80099b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80099ba:	4b12      	ldr	r3, [pc, #72]	; (8009a04 <MX_GPIO_Init+0x160>)
 80099bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099be:	2300      	movs	r3, #0
 80099c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80099c2:	f107 0314 	add.w	r3, r7, #20
 80099c6:	4619      	mov	r1, r3
 80099c8:	4810      	ldr	r0, [pc, #64]	; (8009a0c <MX_GPIO_Init+0x168>)
 80099ca:	f7f8 f801 	bl	80019d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80099ce:	2200      	movs	r2, #0
 80099d0:	2101      	movs	r1, #1
 80099d2:	2006      	movs	r0, #6
 80099d4:	f7f7 fa99 	bl	8000f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80099d8:	2006      	movs	r0, #6
 80099da:	f7f7 fab2 	bl	8000f42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80099de:	2200      	movs	r2, #0
 80099e0:	2105      	movs	r1, #5
 80099e2:	2028      	movs	r0, #40	; 0x28
 80099e4:	f7f7 fa91 	bl	8000f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80099e8:	2028      	movs	r0, #40	; 0x28
 80099ea:	f7f7 faaa 	bl	8000f42 <HAL_NVIC_EnableIRQ>

}
 80099ee:	bf00      	nop
 80099f0:	3728      	adds	r7, #40	; 0x28
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	40021000 	.word	0x40021000
 80099fc:	48001000 	.word	0x48001000
 8009a00:	48000400 	.word	0x48000400
 8009a04:	10110000 	.word	0x10110000
 8009a08:	48000800 	.word	0x48000800
 8009a0c:	48000c00 	.word	0x48000c00

08009a10 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
/**
 * @brief Push-button Handler
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af02      	add	r7, sp, #8
 8009a16:	4603      	mov	r3, r0
 8009a18:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PUSHBUTTON_Pin)
 8009a1a:	88fb      	ldrh	r3, [r7, #6]
 8009a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a20:	d10f      	bne.n	8009a42 <HAL_GPIO_EXTI_Callback+0x32>
	{
		button_flag = 1;
 8009a22:	4b0a      	ldr	r3, [pc, #40]	; (8009a4c <HAL_GPIO_EXTI_Callback+0x3c>)
 8009a24:	2201      	movs	r2, #1
 8009a26:	701a      	strb	r2, [r3, #0]
//		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		 HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8009a28:	2100      	movs	r1, #0
 8009a2a:	4809      	ldr	r0, [pc, #36]	; (8009a50 <HAL_GPIO_EXTI_Callback+0x40>)
 8009a2c:	f7f7 fb92 	bl	8001154 <HAL_DAC_Stop_DMA>
		 HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineValue, size, DAC_ALIGN_8B_R);
 8009a30:	2308      	movs	r3, #8
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009a38:	4a06      	ldr	r2, [pc, #24]	; (8009a54 <HAL_GPIO_EXTI_Callback+0x44>)
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	4804      	ldr	r0, [pc, #16]	; (8009a50 <HAL_GPIO_EXTI_Callback+0x40>)
 8009a3e:	f7f7 fabd 	bl	8000fbc <HAL_DAC_Start_DMA>
//		 HAL_Delay(10);
//		 mousehid.button = 0;
//		 USBD_HID_SendReport(&hUsbDeviceFS,&mousehid, sizeof (mousehid));
	}

}
 8009a42:	bf00      	nop
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20000234 	.word	0x20000234
 8009a50:	200002b4 	.word	0x200002b4
 8009a54:	20000498 	.word	0x20000498

08009a58 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief Interrupts Handler for TIM2
 *  At 80MHz system clock, prescaler = 0 and counter period = 8000000, this happens at 10Hz
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b096      	sub	sp, #88	; 0x58
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
	sleepTimer++;
 8009a60:	4b10      	ldr	r3, [pc, #64]	; (8009aa4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3301      	adds	r3, #1
 8009a66:	4a0f      	ldr	r2, [pc, #60]	; (8009aa4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8009a68:	6013      	str	r3, [r2, #0]
	// Read acclerometer values, store in acceleroResults array
//	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	BSP_ACCELERO_AccGetXYZ(acceleroResults);
 8009a6a:	480f      	ldr	r0, [pc, #60]	; (8009aa8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8009a6c:	f000 f9be 	bl	8009dec <BSP_ACCELERO_AccGetXYZ>
//	// Format: (X, Y, Z), if printf is to be reconfigured (Cumbersome!)
//	// printf("(%d, %d, %d)\n", acceleroResults[0], acceleroResults[1], acceleroResults[2]);
	char XYZ[80];
//	sprintf(XYZ, "%d, %d, %d, End\r", acceleroResults[0], acceleroResults[1], acceleroResults[2]);
	sprintf(XYZ, "%d, End\r", sleepTimer);
 8009a70:	4b0c      	ldr	r3, [pc, #48]	; (8009aa4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	f107 0308 	add.w	r3, r7, #8
 8009a78:	490c      	ldr	r1, [pc, #48]	; (8009aac <HAL_TIM_PeriodElapsedCallback+0x54>)
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f001 fa54 	bl	800af28 <siprintf>
	HAL_UART_Transmit(&huart1, XYZ, (uint16_t)strlen(XYZ), 10);
 8009a80:	f107 0308 	add.w	r3, r7, #8
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7f6 fba3 	bl	80001d0 <strlen>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	f107 0108 	add.w	r1, r7, #8
 8009a92:	230a      	movs	r3, #10
 8009a94:	4806      	ldr	r0, [pc, #24]	; (8009ab0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8009a96:	f7fc f94b 	bl	8005d30 <HAL_UART_Transmit>
}
 8009a9a:	bf00      	nop
 8009a9c:	3758      	adds	r7, #88	; 0x58
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20000230 	.word	0x20000230
 8009aa8:	20000260 	.word	0x20000260
 8009aac:	0800b79c 	.word	0x0800b79c
 8009ab0:	20000360 	.word	0x20000360

08009ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
 8009ab8:	2200      	movs	r2, #0
 8009aba:	2108      	movs	r1, #8
 8009abc:	4803      	ldr	r0, [pc, #12]	; (8009acc <Error_Handler+0x18>)
 8009abe:	f7f8 fa25 	bl	8001f0c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009ac2:	b672      	cpsid	i
}
 8009ac4:	bf00      	nop
  __disable_irq();
  __BKPT();
 8009ac6:	be00      	bkpt	0x0000
  while (1)
 8009ac8:	e7fe      	b.n	8009ac8 <Error_Handler+0x14>
 8009aca:	bf00      	nop
 8009acc:	48001000 	.word	0x48001000

08009ad0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08a      	sub	sp, #40	; 0x28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8009ad8:	4b27      	ldr	r3, [pc, #156]	; (8009b78 <I2Cx_MspInit+0xa8>)
 8009ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009adc:	4a26      	ldr	r2, [pc, #152]	; (8009b78 <I2Cx_MspInit+0xa8>)
 8009ade:	f043 0302 	orr.w	r3, r3, #2
 8009ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ae4:	4b24      	ldr	r3, [pc, #144]	; (8009b78 <I2Cx_MspInit+0xa8>)
 8009ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ae8:	f003 0302 	and.w	r3, r3, #2
 8009aec:	613b      	str	r3, [r7, #16]
 8009aee:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8009af0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009af4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8009af6:	2312      	movs	r3, #18
 8009af8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8009afa:	2301      	movs	r3, #1
 8009afc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009afe:	2303      	movs	r3, #3
 8009b00:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8009b02:	2304      	movs	r3, #4
 8009b04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009b06:	f107 0314 	add.w	r3, r7, #20
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	481b      	ldr	r0, [pc, #108]	; (8009b7c <I2Cx_MspInit+0xac>)
 8009b0e:	f7f7 ff5f 	bl	80019d0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009b12:	f107 0314 	add.w	r3, r7, #20
 8009b16:	4619      	mov	r1, r3
 8009b18:	4818      	ldr	r0, [pc, #96]	; (8009b7c <I2Cx_MspInit+0xac>)
 8009b1a:	f7f7 ff59 	bl	80019d0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8009b1e:	4b16      	ldr	r3, [pc, #88]	; (8009b78 <I2Cx_MspInit+0xa8>)
 8009b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b22:	4a15      	ldr	r2, [pc, #84]	; (8009b78 <I2Cx_MspInit+0xa8>)
 8009b24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b28:	6593      	str	r3, [r2, #88]	; 0x58
 8009b2a:	4b13      	ldr	r3, [pc, #76]	; (8009b78 <I2Cx_MspInit+0xa8>)
 8009b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b32:	60fb      	str	r3, [r7, #12]
 8009b34:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8009b36:	4b10      	ldr	r3, [pc, #64]	; (8009b78 <I2Cx_MspInit+0xa8>)
 8009b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3a:	4a0f      	ldr	r2, [pc, #60]	; (8009b78 <I2Cx_MspInit+0xa8>)
 8009b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b40:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8009b42:	4b0d      	ldr	r3, [pc, #52]	; (8009b78 <I2Cx_MspInit+0xa8>)
 8009b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b46:	4a0c      	ldr	r2, [pc, #48]	; (8009b78 <I2Cx_MspInit+0xa8>)
 8009b48:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009b4c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8009b4e:	2200      	movs	r2, #0
 8009b50:	210f      	movs	r1, #15
 8009b52:	2021      	movs	r0, #33	; 0x21
 8009b54:	f7f7 f9d9 	bl	8000f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8009b58:	2021      	movs	r0, #33	; 0x21
 8009b5a:	f7f7 f9f2 	bl	8000f42 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8009b5e:	2200      	movs	r2, #0
 8009b60:	210f      	movs	r1, #15
 8009b62:	2022      	movs	r0, #34	; 0x22
 8009b64:	f7f7 f9d1 	bl	8000f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8009b68:	2022      	movs	r0, #34	; 0x22
 8009b6a:	f7f7 f9ea 	bl	8000f42 <HAL_NVIC_EnableIRQ>
}
 8009b6e:	bf00      	nop
 8009b70:	3728      	adds	r7, #40	; 0x28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	40021000 	.word	0x40021000
 8009b7c:	48000400 	.word	0x48000400

08009b80 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a12      	ldr	r2, [pc, #72]	; (8009bd4 <I2Cx_Init+0x54>)
 8009b8c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4a11      	ldr	r2, [pc, #68]	; (8009bd8 <I2Cx_Init+0x58>)
 8009b92:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7ff ff89 	bl	8009ad0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7f8 f9d4 	bl	8001f6c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7f8 fed8 	bl	800297c <HAL_I2CEx_ConfigAnalogFilter>
}
 8009bcc:	bf00      	nop
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	40005800 	.word	0x40005800
 8009bd8:	00702681 	.word	0x00702681

08009bdc <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b08a      	sub	sp, #40	; 0x28
 8009be0:	af04      	add	r7, sp, #16
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	4608      	mov	r0, r1
 8009be6:	4611      	mov	r1, r2
 8009be8:	461a      	mov	r2, r3
 8009bea:	4603      	mov	r3, r0
 8009bec:	72fb      	strb	r3, [r7, #11]
 8009bee:	460b      	mov	r3, r1
 8009bf0:	813b      	strh	r3, [r7, #8]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009bfa:	7afb      	ldrb	r3, [r7, #11]
 8009bfc:	b299      	uxth	r1, r3
 8009bfe:	88f8      	ldrh	r0, [r7, #6]
 8009c00:	893a      	ldrh	r2, [r7, #8]
 8009c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009c06:	9302      	str	r3, [sp, #8]
 8009c08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	4603      	mov	r3, r0
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f7f8 fb7c 	bl	8002310 <HAL_I2C_Mem_Read>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d004      	beq.n	8009c2c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8009c22:	7afb      	ldrb	r3, [r7, #11]
 8009c24:	4619      	mov	r1, r3
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f000 f832 	bl	8009c90 <I2Cx_Error>
  }
  return status;
 8009c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3718      	adds	r7, #24
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b08a      	sub	sp, #40	; 0x28
 8009c3a:	af04      	add	r7, sp, #16
 8009c3c:	60f8      	str	r0, [r7, #12]
 8009c3e:	4608      	mov	r0, r1
 8009c40:	4611      	mov	r1, r2
 8009c42:	461a      	mov	r2, r3
 8009c44:	4603      	mov	r3, r0
 8009c46:	72fb      	strb	r3, [r7, #11]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	813b      	strh	r3, [r7, #8]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009c50:	2300      	movs	r3, #0
 8009c52:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009c54:	7afb      	ldrb	r3, [r7, #11]
 8009c56:	b299      	uxth	r1, r3
 8009c58:	88f8      	ldrh	r0, [r7, #6]
 8009c5a:	893a      	ldrh	r2, [r7, #8]
 8009c5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009c60:	9302      	str	r3, [sp, #8]
 8009c62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c64:	9301      	str	r3, [sp, #4]
 8009c66:	6a3b      	ldr	r3, [r7, #32]
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f7f8 fa3b 	bl	80020e8 <HAL_I2C_Mem_Write>
 8009c72:	4603      	mov	r3, r0
 8009c74:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d004      	beq.n	8009c86 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009c7c:	7afb      	ldrb	r3, [r7, #11]
 8009c7e:	4619      	mov	r1, r3
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 f805 	bl	8009c90 <I2Cx_Error>
  }
  return status;
 8009c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3718      	adds	r7, #24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7f8 f9f4 	bl	800208a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7ff ff6c 	bl	8009b80 <I2Cx_Init>
}
 8009ca8:	bf00      	nop
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8009cb4:	4802      	ldr	r0, [pc, #8]	; (8009cc0 <SENSOR_IO_Init+0x10>)
 8009cb6:	f7ff ff63 	bl	8009b80 <I2Cx_Init>
}
 8009cba:	bf00      	nop
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20000af8 	.word	0x20000af8

08009cc4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	4603      	mov	r3, r0
 8009ccc:	71fb      	strb	r3, [r7, #7]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	71bb      	strb	r3, [r7, #6]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8009cd6:	79bb      	ldrb	r3, [r7, #6]
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	79f9      	ldrb	r1, [r7, #7]
 8009cdc:	2301      	movs	r3, #1
 8009cde:	9301      	str	r3, [sp, #4]
 8009ce0:	1d7b      	adds	r3, r7, #5
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	4803      	ldr	r0, [pc, #12]	; (8009cf4 <SENSOR_IO_Write+0x30>)
 8009ce8:	f7ff ffa5 	bl	8009c36 <I2Cx_WriteMultiple>
}
 8009cec:	bf00      	nop
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	20000af8 	.word	0x20000af8

08009cf8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af02      	add	r7, sp, #8
 8009cfe:	4603      	mov	r3, r0
 8009d00:	460a      	mov	r2, r1
 8009d02:	71fb      	strb	r3, [r7, #7]
 8009d04:	4613      	mov	r3, r2
 8009d06:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8009d0c:	79bb      	ldrb	r3, [r7, #6]
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	79f9      	ldrb	r1, [r7, #7]
 8009d12:	2301      	movs	r3, #1
 8009d14:	9301      	str	r3, [sp, #4]
 8009d16:	f107 030f 	add.w	r3, r7, #15
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	4804      	ldr	r0, [pc, #16]	; (8009d30 <SENSOR_IO_Read+0x38>)
 8009d20:	f7ff ff5c 	bl	8009bdc <I2Cx_ReadMultiple>

  return read_value;
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	20000af8 	.word	0x20000af8

08009d34 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af02      	add	r7, sp, #8
 8009d3a:	603a      	str	r2, [r7, #0]
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	4603      	mov	r3, r0
 8009d40:	71fb      	strb	r3, [r7, #7]
 8009d42:	460b      	mov	r3, r1
 8009d44:	71bb      	strb	r3, [r7, #6]
 8009d46:	4613      	mov	r3, r2
 8009d48:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8009d4a:	79bb      	ldrb	r3, [r7, #6]
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	79f9      	ldrb	r1, [r7, #7]
 8009d50:	88bb      	ldrh	r3, [r7, #4]
 8009d52:	9301      	str	r3, [sp, #4]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	2301      	movs	r3, #1
 8009d5a:	4804      	ldr	r0, [pc, #16]	; (8009d6c <SENSOR_IO_ReadMultiple+0x38>)
 8009d5c:	f7ff ff3e 	bl	8009bdc <I2Cx_ReadMultiple>
 8009d60:	4603      	mov	r3, r0
 8009d62:	b29b      	uxth	r3, r3
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	20000af8 	.word	0x20000af8

08009d70 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8009d7e:	4b19      	ldr	r3, [pc, #100]	; (8009de4 <BSP_ACCELERO_Init+0x74>)
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	4798      	blx	r3
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b6a      	cmp	r3, #106	; 0x6a
 8009d88:	d002      	beq.n	8009d90 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	73fb      	strb	r3, [r7, #15]
 8009d8e:	e024      	b.n	8009dda <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8009d90:	4b15      	ldr	r3, [pc, #84]	; (8009de8 <BSP_ACCELERO_Init+0x78>)
 8009d92:	4a14      	ldr	r2, [pc, #80]	; (8009de4 <BSP_ACCELERO_Init+0x74>)
 8009d94:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8009d96:	2330      	movs	r3, #48	; 0x30
 8009d98:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8009da2:	2340      	movs	r3, #64	; 0x40
 8009da4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8009daa:	2300      	movs	r3, #0
 8009dac:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8009dae:	797a      	ldrb	r2, [r7, #5]
 8009db0:	7abb      	ldrb	r3, [r7, #10]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8009db8:	7a3b      	ldrb	r3, [r7, #8]
 8009dba:	f043 0304 	orr.w	r3, r3, #4
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	021b      	lsls	r3, r3, #8
 8009dc2:	b21a      	sxth	r2, r3
 8009dc4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	b21b      	sxth	r3, r3
 8009dcc:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8009dce:	4b06      	ldr	r3, [pc, #24]	; (8009de8 <BSP_ACCELERO_Init+0x78>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	89ba      	ldrh	r2, [r7, #12]
 8009dd6:	4610      	mov	r0, r2
 8009dd8:	4798      	blx	r3
  }  

  return ret;
 8009dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	20000110 	.word	0x20000110
 8009de8:	20000238 	.word	0x20000238

08009dec <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8009df4:	4b08      	ldr	r3, [pc, #32]	; (8009e18 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d009      	beq.n	8009e10 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8009dfc:	4b06      	ldr	r3, [pc, #24]	; (8009e18 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d004      	beq.n	8009e10 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8009e06:	4b04      	ldr	r3, [pc, #16]	; (8009e18 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	4798      	blx	r3
    }
  }
}
 8009e10:	bf00      	nop
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	20000238 	.word	0x20000238

08009e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e22:	4b0f      	ldr	r3, [pc, #60]	; (8009e60 <HAL_MspInit+0x44>)
 8009e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e26:	4a0e      	ldr	r2, [pc, #56]	; (8009e60 <HAL_MspInit+0x44>)
 8009e28:	f043 0301 	orr.w	r3, r3, #1
 8009e2c:	6613      	str	r3, [r2, #96]	; 0x60
 8009e2e:	4b0c      	ldr	r3, [pc, #48]	; (8009e60 <HAL_MspInit+0x44>)
 8009e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	607b      	str	r3, [r7, #4]
 8009e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009e3a:	4b09      	ldr	r3, [pc, #36]	; (8009e60 <HAL_MspInit+0x44>)
 8009e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e3e:	4a08      	ldr	r2, [pc, #32]	; (8009e60 <HAL_MspInit+0x44>)
 8009e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e44:	6593      	str	r3, [r2, #88]	; 0x58
 8009e46:	4b06      	ldr	r3, [pc, #24]	; (8009e60 <HAL_MspInit+0x44>)
 8009e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e4e:	603b      	str	r3, [r7, #0]
 8009e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009e52:	bf00      	nop
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	40021000 	.word	0x40021000

08009e64 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b08a      	sub	sp, #40	; 0x28
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e6c:	f107 0314 	add.w	r3, r7, #20
 8009e70:	2200      	movs	r2, #0
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	605a      	str	r2, [r3, #4]
 8009e76:	609a      	str	r2, [r3, #8]
 8009e78:	60da      	str	r2, [r3, #12]
 8009e7a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a2a      	ldr	r2, [pc, #168]	; (8009f2c <HAL_DAC_MspInit+0xc8>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d14e      	bne.n	8009f24 <HAL_DAC_MspInit+0xc0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8009e86:	4b2a      	ldr	r3, [pc, #168]	; (8009f30 <HAL_DAC_MspInit+0xcc>)
 8009e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e8a:	4a29      	ldr	r2, [pc, #164]	; (8009f30 <HAL_DAC_MspInit+0xcc>)
 8009e8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e90:	6593      	str	r3, [r2, #88]	; 0x58
 8009e92:	4b27      	ldr	r3, [pc, #156]	; (8009f30 <HAL_DAC_MspInit+0xcc>)
 8009e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e9a:	613b      	str	r3, [r7, #16]
 8009e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e9e:	4b24      	ldr	r3, [pc, #144]	; (8009f30 <HAL_DAC_MspInit+0xcc>)
 8009ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ea2:	4a23      	ldr	r2, [pc, #140]	; (8009f30 <HAL_DAC_MspInit+0xcc>)
 8009ea4:	f043 0301 	orr.w	r3, r3, #1
 8009ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009eaa:	4b21      	ldr	r3, [pc, #132]	; (8009f30 <HAL_DAC_MspInit+0xcc>)
 8009eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eae:	f003 0301 	and.w	r3, r3, #1
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009eb6:	2310      	movs	r3, #16
 8009eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ec2:	f107 0314 	add.w	r3, r7, #20
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ecc:	f7f7 fd80 	bl	80019d0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8009ed0:	4b18      	ldr	r3, [pc, #96]	; (8009f34 <HAL_DAC_MspInit+0xd0>)
 8009ed2:	4a19      	ldr	r2, [pc, #100]	; (8009f38 <HAL_DAC_MspInit+0xd4>)
 8009ed4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8009ed6:	4b17      	ldr	r3, [pc, #92]	; (8009f34 <HAL_DAC_MspInit+0xd0>)
 8009ed8:	2206      	movs	r2, #6
 8009eda:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009edc:	4b15      	ldr	r3, [pc, #84]	; (8009f34 <HAL_DAC_MspInit+0xd0>)
 8009ede:	2210      	movs	r2, #16
 8009ee0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009ee2:	4b14      	ldr	r3, [pc, #80]	; (8009f34 <HAL_DAC_MspInit+0xd0>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8009ee8:	4b12      	ldr	r3, [pc, #72]	; (8009f34 <HAL_DAC_MspInit+0xd0>)
 8009eea:	2280      	movs	r2, #128	; 0x80
 8009eec:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009eee:	4b11      	ldr	r3, [pc, #68]	; (8009f34 <HAL_DAC_MspInit+0xd0>)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009ef4:	4b0f      	ldr	r3, [pc, #60]	; (8009f34 <HAL_DAC_MspInit+0xd0>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8009efa:	4b0e      	ldr	r3, [pc, #56]	; (8009f34 <HAL_DAC_MspInit+0xd0>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009f00:	4b0c      	ldr	r3, [pc, #48]	; (8009f34 <HAL_DAC_MspInit+0xd0>)
 8009f02:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009f06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8009f08:	480a      	ldr	r0, [pc, #40]	; (8009f34 <HAL_DAC_MspInit+0xd0>)
 8009f0a:	f7f7 fb2b 	bl	8001564 <HAL_DMA_Init>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d001      	beq.n	8009f18 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8009f14:	f7ff fdce 	bl	8009ab4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a06      	ldr	r2, [pc, #24]	; (8009f34 <HAL_DAC_MspInit+0xd0>)
 8009f1c:	609a      	str	r2, [r3, #8]
 8009f1e:	4a05      	ldr	r2, [pc, #20]	; (8009f34 <HAL_DAC_MspInit+0xd0>)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8009f24:	bf00      	nop
 8009f26:	3728      	adds	r7, #40	; 0x28
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	40007400 	.word	0x40007400
 8009f30:	40021000 	.word	0x40021000
 8009f34:	20000318 	.word	0x20000318
 8009f38:	40020030 	.word	0x40020030

08009f3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b0ac      	sub	sp, #176	; 0xb0
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009f48:	2200      	movs	r2, #0
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	605a      	str	r2, [r3, #4]
 8009f4e:	609a      	str	r2, [r3, #8]
 8009f50:	60da      	str	r2, [r3, #12]
 8009f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009f54:	f107 0314 	add.w	r3, r7, #20
 8009f58:	2288      	movs	r2, #136	; 0x88
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 ffdb 	bl	800af18 <memset>
  if(hi2c->Instance==I2C1)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a21      	ldr	r2, [pc, #132]	; (8009fec <HAL_I2C_MspInit+0xb0>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d13b      	bne.n	8009fe4 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8009f6c:	2340      	movs	r3, #64	; 0x40
 8009f6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8009f70:	2300      	movs	r3, #0
 8009f72:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009f74:	f107 0314 	add.w	r3, r7, #20
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fa fcf9 	bl	8004970 <HAL_RCCEx_PeriphCLKConfig>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d001      	beq.n	8009f88 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8009f84:	f7ff fd96 	bl	8009ab4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f88:	4b19      	ldr	r3, [pc, #100]	; (8009ff0 <HAL_I2C_MspInit+0xb4>)
 8009f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f8c:	4a18      	ldr	r2, [pc, #96]	; (8009ff0 <HAL_I2C_MspInit+0xb4>)
 8009f8e:	f043 0302 	orr.w	r3, r3, #2
 8009f92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f94:	4b16      	ldr	r3, [pc, #88]	; (8009ff0 <HAL_I2C_MspInit+0xb4>)
 8009f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f98:	f003 0302 	and.w	r3, r3, #2
 8009f9c:	613b      	str	r3, [r7, #16]
 8009f9e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009fa0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009fa8:	2312      	movs	r3, #18
 8009faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009fba:	2304      	movs	r3, #4
 8009fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	480b      	ldr	r0, [pc, #44]	; (8009ff4 <HAL_I2C_MspInit+0xb8>)
 8009fc8:	f7f7 fd02 	bl	80019d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009fcc:	4b08      	ldr	r3, [pc, #32]	; (8009ff0 <HAL_I2C_MspInit+0xb4>)
 8009fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fd0:	4a07      	ldr	r2, [pc, #28]	; (8009ff0 <HAL_I2C_MspInit+0xb4>)
 8009fd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fd6:	6593      	str	r3, [r2, #88]	; 0x58
 8009fd8:	4b05      	ldr	r3, [pc, #20]	; (8009ff0 <HAL_I2C_MspInit+0xb4>)
 8009fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009fe0:	60fb      	str	r3, [r7, #12]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009fe4:	bf00      	nop
 8009fe6:	37b0      	adds	r7, #176	; 0xb0
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	40005400 	.word	0x40005400
 8009ff0:	40021000 	.word	0x40021000
 8009ff4:	48000400 	.word	0x48000400

08009ff8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a0b      	ldr	r2, [pc, #44]	; (800a034 <HAL_I2C_MspDeInit+0x3c>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d10f      	bne.n	800a02a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800a00a:	4b0b      	ldr	r3, [pc, #44]	; (800a038 <HAL_I2C_MspDeInit+0x40>)
 800a00c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a00e:	4a0a      	ldr	r2, [pc, #40]	; (800a038 <HAL_I2C_MspDeInit+0x40>)
 800a010:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a014:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800a016:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a01a:	4808      	ldr	r0, [pc, #32]	; (800a03c <HAL_I2C_MspDeInit+0x44>)
 800a01c:	f7f7 fe82 	bl	8001d24 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800a020:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a024:	4805      	ldr	r0, [pc, #20]	; (800a03c <HAL_I2C_MspDeInit+0x44>)
 800a026:	f7f7 fe7d 	bl	8001d24 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800a02a:	bf00      	nop
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	40005400 	.word	0x40005400
 800a038:	40021000 	.word	0x40021000
 800a03c:	48000400 	.word	0x48000400

0800a040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a050:	d114      	bne.n	800a07c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a052:	4b15      	ldr	r3, [pc, #84]	; (800a0a8 <HAL_TIM_Base_MspInit+0x68>)
 800a054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a056:	4a14      	ldr	r2, [pc, #80]	; (800a0a8 <HAL_TIM_Base_MspInit+0x68>)
 800a058:	f043 0301 	orr.w	r3, r3, #1
 800a05c:	6593      	str	r3, [r2, #88]	; 0x58
 800a05e:	4b12      	ldr	r3, [pc, #72]	; (800a0a8 <HAL_TIM_Base_MspInit+0x68>)
 800a060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a062:	f003 0301 	and.w	r3, r3, #1
 800a066:	60fb      	str	r3, [r7, #12]
 800a068:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800a06a:	2200      	movs	r2, #0
 800a06c:	2100      	movs	r1, #0
 800a06e:	201c      	movs	r0, #28
 800a070:	f7f6 ff4b 	bl	8000f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a074:	201c      	movs	r0, #28
 800a076:	f7f6 ff64 	bl	8000f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800a07a:	e010      	b.n	800a09e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a0a      	ldr	r2, [pc, #40]	; (800a0ac <HAL_TIM_Base_MspInit+0x6c>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d10b      	bne.n	800a09e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a086:	4b08      	ldr	r3, [pc, #32]	; (800a0a8 <HAL_TIM_Base_MspInit+0x68>)
 800a088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a08a:	4a07      	ldr	r2, [pc, #28]	; (800a0a8 <HAL_TIM_Base_MspInit+0x68>)
 800a08c:	f043 0304 	orr.w	r3, r3, #4
 800a090:	6593      	str	r3, [r2, #88]	; 0x58
 800a092:	4b05      	ldr	r3, [pc, #20]	; (800a0a8 <HAL_TIM_Base_MspInit+0x68>)
 800a094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a096:	f003 0304 	and.w	r3, r3, #4
 800a09a:	60bb      	str	r3, [r7, #8]
 800a09c:	68bb      	ldr	r3, [r7, #8]
}
 800a09e:	bf00      	nop
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	40021000 	.word	0x40021000
 800a0ac:	40000800 	.word	0x40000800

0800a0b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b0ac      	sub	sp, #176	; 0xb0
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a0bc:	2200      	movs	r2, #0
 800a0be:	601a      	str	r2, [r3, #0]
 800a0c0:	605a      	str	r2, [r3, #4]
 800a0c2:	609a      	str	r2, [r3, #8]
 800a0c4:	60da      	str	r2, [r3, #12]
 800a0c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a0c8:	f107 0314 	add.w	r3, r7, #20
 800a0cc:	2288      	movs	r2, #136	; 0x88
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 ff21 	bl	800af18 <memset>
  if(huart->Instance==USART1)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a21      	ldr	r2, [pc, #132]	; (800a160 <HAL_UART_MspInit+0xb0>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d13a      	bne.n	800a156 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a0e8:	f107 0314 	add.w	r3, r7, #20
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fa fc3f 	bl	8004970 <HAL_RCCEx_PeriphCLKConfig>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a0f8:	f7ff fcdc 	bl	8009ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a0fc:	4b19      	ldr	r3, [pc, #100]	; (800a164 <HAL_UART_MspInit+0xb4>)
 800a0fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a100:	4a18      	ldr	r2, [pc, #96]	; (800a164 <HAL_UART_MspInit+0xb4>)
 800a102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a106:	6613      	str	r3, [r2, #96]	; 0x60
 800a108:	4b16      	ldr	r3, [pc, #88]	; (800a164 <HAL_UART_MspInit+0xb4>)
 800a10a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a10c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a110:	613b      	str	r3, [r7, #16]
 800a112:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a114:	4b13      	ldr	r3, [pc, #76]	; (800a164 <HAL_UART_MspInit+0xb4>)
 800a116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a118:	4a12      	ldr	r2, [pc, #72]	; (800a164 <HAL_UART_MspInit+0xb4>)
 800a11a:	f043 0302 	orr.w	r3, r3, #2
 800a11e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a120:	4b10      	ldr	r3, [pc, #64]	; (800a164 <HAL_UART_MspInit+0xb4>)
 800a122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a124:	f003 0302 	and.w	r3, r3, #2
 800a128:	60fb      	str	r3, [r7, #12]
 800a12a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a12c:	23c0      	movs	r3, #192	; 0xc0
 800a12e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a132:	2302      	movs	r3, #2
 800a134:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a138:	2300      	movs	r3, #0
 800a13a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a13e:	2303      	movs	r3, #3
 800a140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a144:	2307      	movs	r3, #7
 800a146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a14a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a14e:	4619      	mov	r1, r3
 800a150:	4805      	ldr	r0, [pc, #20]	; (800a168 <HAL_UART_MspInit+0xb8>)
 800a152:	f7f7 fc3d 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a156:	bf00      	nop
 800a158:	37b0      	adds	r7, #176	; 0xb0
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	40013800 	.word	0x40013800
 800a164:	40021000 	.word	0x40021000
 800a168:	48000400 	.word	0x48000400

0800a16c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a16c:	b480      	push	{r7}
 800a16e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a170:	e7fe      	b.n	800a170 <NMI_Handler+0x4>

0800a172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a172:	b480      	push	{r7}
 800a174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a176:	e7fe      	b.n	800a176 <HardFault_Handler+0x4>

0800a178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a178:	b480      	push	{r7}
 800a17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a17c:	e7fe      	b.n	800a17c <MemManage_Handler+0x4>

0800a17e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a17e:	b480      	push	{r7}
 800a180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a182:	e7fe      	b.n	800a182 <BusFault_Handler+0x4>

0800a184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a184:	b480      	push	{r7}
 800a186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a188:	e7fe      	b.n	800a188 <UsageFault_Handler+0x4>

0800a18a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a18a:	b480      	push	{r7}
 800a18c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a18e:	bf00      	nop
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a198:	b480      	push	{r7}
 800a19a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a19c:	bf00      	nop
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr

0800a1a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a1aa:	bf00      	nop
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a1b8:	f7f6 fd68 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a1bc:	bf00      	nop
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800a1c4:	2001      	movs	r0, #1
 800a1c6:	f7f7 feb9 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800a1ca:	bf00      	nop
 800a1cc:	bd80      	pop	{r7, pc}
	...

0800a1d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800a1d4:	4802      	ldr	r0, [pc, #8]	; (800a1e0 <DMA1_Channel3_IRQHandler+0x10>)
 800a1d6:	f7f7 fb1b 	bl	8001810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800a1da:	bf00      	nop
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	20000318 	.word	0x20000318

0800a1e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a1e8:	4802      	ldr	r0, [pc, #8]	; (800a1f4 <TIM2_IRQHandler+0x10>)
 800a1ea:	f7fb f96b 	bl	80054c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a1ee:	bf00      	nop
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	2000044c 	.word	0x2000044c

0800a1f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800a1fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a200:	f7f7 fe9c 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800a204:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a208:	f7f7 fe98 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a20c:	bf00      	nop
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a214:	4802      	ldr	r0, [pc, #8]	; (800a220 <OTG_FS_IRQHandler+0x10>)
 800a216:	f7f8 fd9b 	bl	8002d50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a21a:	bf00      	nop
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20000e14 	.word	0x20000e14

0800a224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a22c:	4a14      	ldr	r2, [pc, #80]	; (800a280 <_sbrk+0x5c>)
 800a22e:	4b15      	ldr	r3, [pc, #84]	; (800a284 <_sbrk+0x60>)
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a238:	4b13      	ldr	r3, [pc, #76]	; (800a288 <_sbrk+0x64>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d102      	bne.n	800a246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a240:	4b11      	ldr	r3, [pc, #68]	; (800a288 <_sbrk+0x64>)
 800a242:	4a12      	ldr	r2, [pc, #72]	; (800a28c <_sbrk+0x68>)
 800a244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a246:	4b10      	ldr	r3, [pc, #64]	; (800a288 <_sbrk+0x64>)
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4413      	add	r3, r2
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	429a      	cmp	r2, r3
 800a252:	d207      	bcs.n	800a264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a254:	f000 fe36 	bl	800aec4 <__errno>
 800a258:	4603      	mov	r3, r0
 800a25a:	220c      	movs	r2, #12
 800a25c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a25e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a262:	e009      	b.n	800a278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a264:	4b08      	ldr	r3, [pc, #32]	; (800a288 <_sbrk+0x64>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a26a:	4b07      	ldr	r3, [pc, #28]	; (800a288 <_sbrk+0x64>)
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4413      	add	r3, r2
 800a272:	4a05      	ldr	r2, [pc, #20]	; (800a288 <_sbrk+0x64>)
 800a274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a276:	68fb      	ldr	r3, [r7, #12]
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3718      	adds	r7, #24
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	20018000 	.word	0x20018000
 800a284:	00000400 	.word	0x00000400
 800a288:	2000023c 	.word	0x2000023c
 800a28c:	20001430 	.word	0x20001430

0800a290 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800a290:	b480      	push	{r7}
 800a292:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800a294:	4b15      	ldr	r3, [pc, #84]	; (800a2ec <SystemInit+0x5c>)
 800a296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a29a:	4a14      	ldr	r2, [pc, #80]	; (800a2ec <SystemInit+0x5c>)
 800a29c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a2a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800a2a4:	4b12      	ldr	r3, [pc, #72]	; (800a2f0 <SystemInit+0x60>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a11      	ldr	r2, [pc, #68]	; (800a2f0 <SystemInit+0x60>)
 800a2aa:	f043 0301 	orr.w	r3, r3, #1
 800a2ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800a2b0:	4b0f      	ldr	r3, [pc, #60]	; (800a2f0 <SystemInit+0x60>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800a2b6:	4b0e      	ldr	r3, [pc, #56]	; (800a2f0 <SystemInit+0x60>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a0d      	ldr	r2, [pc, #52]	; (800a2f0 <SystemInit+0x60>)
 800a2bc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800a2c0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800a2c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800a2c6:	4b0a      	ldr	r3, [pc, #40]	; (800a2f0 <SystemInit+0x60>)
 800a2c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a2cc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a2ce:	4b08      	ldr	r3, [pc, #32]	; (800a2f0 <SystemInit+0x60>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a07      	ldr	r2, [pc, #28]	; (800a2f0 <SystemInit+0x60>)
 800a2d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800a2da:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <SystemInit+0x60>)
 800a2dc:	2200      	movs	r2, #0
 800a2de:	619a      	str	r2, [r3, #24]
}
 800a2e0:	bf00      	nop
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	e000ed00 	.word	0xe000ed00
 800a2f0:	40021000 	.word	0x40021000

0800a2f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	490e      	ldr	r1, [pc, #56]	; (800a334 <MX_USB_DEVICE_Init+0x40>)
 800a2fc:	480e      	ldr	r0, [pc, #56]	; (800a338 <MX_USB_DEVICE_Init+0x44>)
 800a2fe:	f7fd fd87 	bl	8007e10 <USBD_Init>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a308:	f7ff fbd4 	bl	8009ab4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a30c:	490b      	ldr	r1, [pc, #44]	; (800a33c <MX_USB_DEVICE_Init+0x48>)
 800a30e:	480a      	ldr	r0, [pc, #40]	; (800a338 <MX_USB_DEVICE_Init+0x44>)
 800a310:	f7fd fdae 	bl	8007e70 <USBD_RegisterClass>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a31a:	f7ff fbcb 	bl	8009ab4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a31e:	4806      	ldr	r0, [pc, #24]	; (800a338 <MX_USB_DEVICE_Init+0x44>)
 800a320:	f7fd fdcd 	bl	8007ebe <USBD_Start>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a32a:	f7ff fbc3 	bl	8009ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a32e:	bf00      	nop
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	20000148 	.word	0x20000148
 800a338:	20000b44 	.word	0x20000b44
 800a33c:	20000008 	.word	0x20000008

0800a340 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b0ac      	sub	sp, #176	; 0xb0
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a348:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a34c:	2200      	movs	r2, #0
 800a34e:	601a      	str	r2, [r3, #0]
 800a350:	605a      	str	r2, [r3, #4]
 800a352:	609a      	str	r2, [r3, #8]
 800a354:	60da      	str	r2, [r3, #12]
 800a356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a358:	f107 0314 	add.w	r3, r7, #20
 800a35c:	2288      	movs	r2, #136	; 0x88
 800a35e:	2100      	movs	r1, #0
 800a360:	4618      	mov	r0, r3
 800a362:	f000 fdd9 	bl	800af18 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a36e:	d173      	bne.n	800a458 <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a374:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a376:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a37a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800a37e:	2301      	movs	r3, #1
 800a380:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800a382:	2301      	movs	r3, #1
 800a384:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800a386:	2318      	movs	r3, #24
 800a388:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800a38a:	2307      	movs	r3, #7
 800a38c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800a38e:	2302      	movs	r3, #2
 800a390:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800a392:	2302      	movs	r3, #2
 800a394:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800a396:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a39a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a39c:	f107 0314 	add.w	r3, r7, #20
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7fa fae5 	bl	8004970 <HAL_RCCEx_PeriphCLKConfig>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d001      	beq.n	800a3b0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800a3ac:	f7ff fb82 	bl	8009ab4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3b0:	4b2b      	ldr	r3, [pc, #172]	; (800a460 <HAL_PCD_MspInit+0x120>)
 800a3b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b4:	4a2a      	ldr	r2, [pc, #168]	; (800a460 <HAL_PCD_MspInit+0x120>)
 800a3b6:	f043 0301 	orr.w	r3, r3, #1
 800a3ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a3bc:	4b28      	ldr	r3, [pc, #160]	; (800a460 <HAL_PCD_MspInit+0x120>)
 800a3be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3c0:	f003 0301 	and.w	r3, r3, #1
 800a3c4:	613b      	str	r3, [r7, #16]
 800a3c6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a3c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a3cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a3e2:	230a      	movs	r3, #10
 800a3e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a3f2:	f7f7 faed 	bl	80019d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a3f6:	4b1a      	ldr	r3, [pc, #104]	; (800a460 <HAL_PCD_MspInit+0x120>)
 800a3f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3fa:	4a19      	ldr	r2, [pc, #100]	; (800a460 <HAL_PCD_MspInit+0x120>)
 800a3fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a400:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a402:	4b17      	ldr	r3, [pc, #92]	; (800a460 <HAL_PCD_MspInit+0x120>)
 800a404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a40a:	60fb      	str	r3, [r7, #12]
 800a40c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a40e:	4b14      	ldr	r3, [pc, #80]	; (800a460 <HAL_PCD_MspInit+0x120>)
 800a410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a416:	2b00      	cmp	r3, #0
 800a418:	d114      	bne.n	800a444 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a41a:	4b11      	ldr	r3, [pc, #68]	; (800a460 <HAL_PCD_MspInit+0x120>)
 800a41c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a41e:	4a10      	ldr	r2, [pc, #64]	; (800a460 <HAL_PCD_MspInit+0x120>)
 800a420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a424:	6593      	str	r3, [r2, #88]	; 0x58
 800a426:	4b0e      	ldr	r3, [pc, #56]	; (800a460 <HAL_PCD_MspInit+0x120>)
 800a428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a42a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a42e:	60bb      	str	r3, [r7, #8]
 800a430:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800a432:	f7f9 fc59 	bl	8003ce8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a436:	4b0a      	ldr	r3, [pc, #40]	; (800a460 <HAL_PCD_MspInit+0x120>)
 800a438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a43a:	4a09      	ldr	r2, [pc, #36]	; (800a460 <HAL_PCD_MspInit+0x120>)
 800a43c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a440:	6593      	str	r3, [r2, #88]	; 0x58
 800a442:	e001      	b.n	800a448 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a444:	f7f9 fc50 	bl	8003ce8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a448:	2200      	movs	r2, #0
 800a44a:	2100      	movs	r1, #0
 800a44c:	2043      	movs	r0, #67	; 0x43
 800a44e:	f7f6 fd5c 	bl	8000f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a452:	2043      	movs	r0, #67	; 0x43
 800a454:	f7f6 fd75 	bl	8000f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a458:	bf00      	nop
 800a45a:	37b0      	adds	r7, #176	; 0xb0
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	40021000 	.word	0x40021000

0800a464 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a478:	4619      	mov	r1, r3
 800a47a:	4610      	mov	r0, r2
 800a47c:	f7fd fd6a 	bl	8007f54 <USBD_LL_SetupStage>
}
 800a480:	bf00      	nop
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	460b      	mov	r3, r1
 800a492:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a49a:	78fa      	ldrb	r2, [r7, #3]
 800a49c:	6879      	ldr	r1, [r7, #4]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	00db      	lsls	r3, r3, #3
 800a4a2:	1a9b      	subs	r3, r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	440b      	add	r3, r1
 800a4a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	78fb      	ldrb	r3, [r7, #3]
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	f7fd fda4 	bl	8007ffe <USBD_LL_DataOutStage>
}
 800a4b6:	bf00      	nop
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b082      	sub	sp, #8
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a4d0:	78fa      	ldrb	r2, [r7, #3]
 800a4d2:	6879      	ldr	r1, [r7, #4]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	00db      	lsls	r3, r3, #3
 800a4d8:	1a9b      	subs	r3, r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	440b      	add	r3, r1
 800a4de:	3348      	adds	r3, #72	; 0x48
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	78fb      	ldrb	r3, [r7, #3]
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	f7fd fded 	bl	80080c4 <USBD_LL_DataInStage>
}
 800a4ea:	bf00      	nop
 800a4ec:	3708      	adds	r7, #8
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b082      	sub	sp, #8
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a500:	4618      	mov	r0, r3
 800a502:	f7fd ff01 	bl	8008308 <USBD_LL_SOF>
}
 800a506:	bf00      	nop
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a516:	2301      	movs	r3, #1
 800a518:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d001      	beq.n	800a526 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a522:	f7ff fac7 	bl	8009ab4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a52c:	7bfa      	ldrb	r2, [r7, #15]
 800a52e:	4611      	mov	r1, r2
 800a530:	4618      	mov	r0, r3
 800a532:	f7fd feab 	bl	800828c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7fd fe57 	bl	80081f0 <USBD_LL_Reset>
}
 800a542:	bf00      	nop
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
	...

0800a54c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	6812      	ldr	r2, [r2, #0]
 800a562:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a566:	f043 0301 	orr.w	r3, r3, #1
 800a56a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a572:	4618      	mov	r0, r3
 800a574:	f7fd fe9a 	bl	80082ac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a1b      	ldr	r3, [r3, #32]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d005      	beq.n	800a58c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a580:	4b04      	ldr	r3, [pc, #16]	; (800a594 <HAL_PCD_SuspendCallback+0x48>)
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	4a03      	ldr	r2, [pc, #12]	; (800a594 <HAL_PCD_SuspendCallback+0x48>)
 800a586:	f043 0306 	orr.w	r3, r3, #6
 800a58a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a58c:	bf00      	nop
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	e000ed00 	.word	0xe000ed00

0800a598 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	6812      	ldr	r2, [r2, #0]
 800a5ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a5b2:	f023 0301 	bic.w	r3, r3, #1
 800a5b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a1b      	ldr	r3, [r3, #32]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d007      	beq.n	800a5d0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5c0:	4b08      	ldr	r3, [pc, #32]	; (800a5e4 <HAL_PCD_ResumeCallback+0x4c>)
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	4a07      	ldr	r2, [pc, #28]	; (800a5e4 <HAL_PCD_ResumeCallback+0x4c>)
 800a5c6:	f023 0306 	bic.w	r3, r3, #6
 800a5ca:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a5cc:	f000 fae2 	bl	800ab94 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fd fe7e 	bl	80082d8 <USBD_LL_Resume>
}
 800a5dc:	bf00      	nop
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	e000ed00 	.word	0xe000ed00

0800a5e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5fa:	78fa      	ldrb	r2, [r7, #3]
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fd feca 	bl	8008398 <USBD_LL_IsoOUTIncomplete>
}
 800a604:	bf00      	nop
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	460b      	mov	r3, r1
 800a616:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a61e:	78fa      	ldrb	r2, [r7, #3]
 800a620:	4611      	mov	r1, r2
 800a622:	4618      	mov	r0, r3
 800a624:	f7fd fe92 	bl	800834c <USBD_LL_IsoINIncomplete>
}
 800a628:	bf00      	nop
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fd fed0 	bl	80083e4 <USBD_LL_DevConnected>
}
 800a644:	bf00      	nop
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fd fecd 	bl	80083fa <USBD_LL_DevDisconnected>
}
 800a660:	bf00      	nop
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d13c      	bne.n	800a6f2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a678:	4a20      	ldr	r2, [pc, #128]	; (800a6fc <USBD_LL_Init+0x94>)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4a1e      	ldr	r2, [pc, #120]	; (800a6fc <USBD_LL_Init+0x94>)
 800a684:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a688:	4b1c      	ldr	r3, [pc, #112]	; (800a6fc <USBD_LL_Init+0x94>)
 800a68a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a68e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a690:	4b1a      	ldr	r3, [pc, #104]	; (800a6fc <USBD_LL_Init+0x94>)
 800a692:	2206      	movs	r2, #6
 800a694:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a696:	4b19      	ldr	r3, [pc, #100]	; (800a6fc <USBD_LL_Init+0x94>)
 800a698:	2202      	movs	r2, #2
 800a69a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a69c:	4b17      	ldr	r3, [pc, #92]	; (800a6fc <USBD_LL_Init+0x94>)
 800a69e:	2202      	movs	r2, #2
 800a6a0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a6a2:	4b16      	ldr	r3, [pc, #88]	; (800a6fc <USBD_LL_Init+0x94>)
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a6a8:	4b14      	ldr	r3, [pc, #80]	; (800a6fc <USBD_LL_Init+0x94>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a6ae:	4b13      	ldr	r3, [pc, #76]	; (800a6fc <USBD_LL_Init+0x94>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800a6b4:	4b11      	ldr	r3, [pc, #68]	; (800a6fc <USBD_LL_Init+0x94>)
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a6ba:	4b10      	ldr	r3, [pc, #64]	; (800a6fc <USBD_LL_Init+0x94>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a6c0:	4b0e      	ldr	r3, [pc, #56]	; (800a6fc <USBD_LL_Init+0x94>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a6c6:	480d      	ldr	r0, [pc, #52]	; (800a6fc <USBD_LL_Init+0x94>)
 800a6c8:	f7f8 f9ef 	bl	8002aaa <HAL_PCD_Init>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a6d2:	f7ff f9ef 	bl	8009ab4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a6d6:	2180      	movs	r1, #128	; 0x80
 800a6d8:	4808      	ldr	r0, [pc, #32]	; (800a6fc <USBD_LL_Init+0x94>)
 800a6da:	f7f9 fa38 	bl	8003b4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a6de:	2240      	movs	r2, #64	; 0x40
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	4806      	ldr	r0, [pc, #24]	; (800a6fc <USBD_LL_Init+0x94>)
 800a6e4:	f7f9 f9ec 	bl	8003ac0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a6e8:	2280      	movs	r2, #128	; 0x80
 800a6ea:	2101      	movs	r1, #1
 800a6ec:	4803      	ldr	r0, [pc, #12]	; (800a6fc <USBD_LL_Init+0x94>)
 800a6ee:	f7f9 f9e7 	bl	8003ac0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	20000e14 	.word	0x20000e14

0800a700 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a708:	2300      	movs	r3, #0
 800a70a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a716:	4618      	mov	r0, r3
 800a718:	f7f8 faeb 	bl	8002cf2 <HAL_PCD_Start>
 800a71c:	4603      	mov	r3, r0
 800a71e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a720:	7bbb      	ldrb	r3, [r7, #14]
 800a722:	2b03      	cmp	r3, #3
 800a724:	d816      	bhi.n	800a754 <USBD_LL_Start+0x54>
 800a726:	a201      	add	r2, pc, #4	; (adr r2, 800a72c <USBD_LL_Start+0x2c>)
 800a728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a72c:	0800a73d 	.word	0x0800a73d
 800a730:	0800a743 	.word	0x0800a743
 800a734:	0800a749 	.word	0x0800a749
 800a738:	0800a74f 	.word	0x0800a74f
    case HAL_OK :
      usb_status = USBD_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	73fb      	strb	r3, [r7, #15]
    break;
 800a740:	e00b      	b.n	800a75a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a742:	2303      	movs	r3, #3
 800a744:	73fb      	strb	r3, [r7, #15]
    break;
 800a746:	e008      	b.n	800a75a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a748:	2301      	movs	r3, #1
 800a74a:	73fb      	strb	r3, [r7, #15]
    break;
 800a74c:	e005      	b.n	800a75a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a74e:	2303      	movs	r3, #3
 800a750:	73fb      	strb	r3, [r7, #15]
    break;
 800a752:	e002      	b.n	800a75a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a754:	2303      	movs	r3, #3
 800a756:	73fb      	strb	r3, [r7, #15]
    break;
 800a758:	bf00      	nop
  }
  return usb_status;
 800a75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	4608      	mov	r0, r1
 800a76e:	4611      	mov	r1, r2
 800a770:	461a      	mov	r2, r3
 800a772:	4603      	mov	r3, r0
 800a774:	70fb      	strb	r3, [r7, #3]
 800a776:	460b      	mov	r3, r1
 800a778:	70bb      	strb	r3, [r7, #2]
 800a77a:	4613      	mov	r3, r2
 800a77c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a77e:	2300      	movs	r3, #0
 800a780:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a78c:	78bb      	ldrb	r3, [r7, #2]
 800a78e:	883a      	ldrh	r2, [r7, #0]
 800a790:	78f9      	ldrb	r1, [r7, #3]
 800a792:	f7f8 fea6 	bl	80034e2 <HAL_PCD_EP_Open>
 800a796:	4603      	mov	r3, r0
 800a798:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a79a:	7bbb      	ldrb	r3, [r7, #14]
 800a79c:	2b03      	cmp	r3, #3
 800a79e:	d817      	bhi.n	800a7d0 <USBD_LL_OpenEP+0x6c>
 800a7a0:	a201      	add	r2, pc, #4	; (adr r2, 800a7a8 <USBD_LL_OpenEP+0x44>)
 800a7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a6:	bf00      	nop
 800a7a8:	0800a7b9 	.word	0x0800a7b9
 800a7ac:	0800a7bf 	.word	0x0800a7bf
 800a7b0:	0800a7c5 	.word	0x0800a7c5
 800a7b4:	0800a7cb 	.word	0x0800a7cb
    case HAL_OK :
      usb_status = USBD_OK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a7bc:	e00b      	b.n	800a7d6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a7c2:	e008      	b.n	800a7d6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a7c8:	e005      	b.n	800a7d6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ce:	e002      	b.n	800a7d6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7d4:	bf00      	nop
  }
  return usb_status;
 800a7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7fa:	78fa      	ldrb	r2, [r7, #3]
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7f8 fed7 	bl	80035b2 <HAL_PCD_EP_Close>
 800a804:	4603      	mov	r3, r0
 800a806:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	2b03      	cmp	r3, #3
 800a80c:	d816      	bhi.n	800a83c <USBD_LL_CloseEP+0x5c>
 800a80e:	a201      	add	r2, pc, #4	; (adr r2, 800a814 <USBD_LL_CloseEP+0x34>)
 800a810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a814:	0800a825 	.word	0x0800a825
 800a818:	0800a82b 	.word	0x0800a82b
 800a81c:	0800a831 	.word	0x0800a831
 800a820:	0800a837 	.word	0x0800a837
    case HAL_OK :
      usb_status = USBD_OK;
 800a824:	2300      	movs	r3, #0
 800a826:	73fb      	strb	r3, [r7, #15]
    break;
 800a828:	e00b      	b.n	800a842 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a82a:	2303      	movs	r3, #3
 800a82c:	73fb      	strb	r3, [r7, #15]
    break;
 800a82e:	e008      	b.n	800a842 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a830:	2301      	movs	r3, #1
 800a832:	73fb      	strb	r3, [r7, #15]
    break;
 800a834:	e005      	b.n	800a842 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a836:	2303      	movs	r3, #3
 800a838:	73fb      	strb	r3, [r7, #15]
    break;
 800a83a:	e002      	b.n	800a842 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a83c:	2303      	movs	r3, #3
 800a83e:	73fb      	strb	r3, [r7, #15]
    break;
 800a840:	bf00      	nop
  }
  return usb_status;
 800a842:	7bfb      	ldrb	r3, [r7, #15]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	460b      	mov	r3, r1
 800a856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a858:	2300      	movs	r3, #0
 800a85a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a85c:	2300      	movs	r3, #0
 800a85e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a866:	78fa      	ldrb	r2, [r7, #3]
 800a868:	4611      	mov	r1, r2
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7f8 ff66 	bl	800373c <HAL_PCD_EP_SetStall>
 800a870:	4603      	mov	r3, r0
 800a872:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a874:	7bbb      	ldrb	r3, [r7, #14]
 800a876:	2b03      	cmp	r3, #3
 800a878:	d816      	bhi.n	800a8a8 <USBD_LL_StallEP+0x5c>
 800a87a:	a201      	add	r2, pc, #4	; (adr r2, 800a880 <USBD_LL_StallEP+0x34>)
 800a87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a880:	0800a891 	.word	0x0800a891
 800a884:	0800a897 	.word	0x0800a897
 800a888:	0800a89d 	.word	0x0800a89d
 800a88c:	0800a8a3 	.word	0x0800a8a3
    case HAL_OK :
      usb_status = USBD_OK;
 800a890:	2300      	movs	r3, #0
 800a892:	73fb      	strb	r3, [r7, #15]
    break;
 800a894:	e00b      	b.n	800a8ae <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a896:	2303      	movs	r3, #3
 800a898:	73fb      	strb	r3, [r7, #15]
    break;
 800a89a:	e008      	b.n	800a8ae <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a89c:	2301      	movs	r3, #1
 800a89e:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a0:	e005      	b.n	800a8ae <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a6:	e002      	b.n	800a8ae <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ac:	bf00      	nop
  }
  return usb_status;
 800a8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8d2:	78fa      	ldrb	r2, [r7, #3]
 800a8d4:	4611      	mov	r1, r2
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7f8 ff92 	bl	8003800 <HAL_PCD_EP_ClrStall>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a8e0:	7bbb      	ldrb	r3, [r7, #14]
 800a8e2:	2b03      	cmp	r3, #3
 800a8e4:	d816      	bhi.n	800a914 <USBD_LL_ClearStallEP+0x5c>
 800a8e6:	a201      	add	r2, pc, #4	; (adr r2, 800a8ec <USBD_LL_ClearStallEP+0x34>)
 800a8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ec:	0800a8fd 	.word	0x0800a8fd
 800a8f0:	0800a903 	.word	0x0800a903
 800a8f4:	0800a909 	.word	0x0800a909
 800a8f8:	0800a90f 	.word	0x0800a90f
    case HAL_OK :
      usb_status = USBD_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a900:	e00b      	b.n	800a91a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a902:	2303      	movs	r3, #3
 800a904:	73fb      	strb	r3, [r7, #15]
    break;
 800a906:	e008      	b.n	800a91a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a908:	2301      	movs	r3, #1
 800a90a:	73fb      	strb	r3, [r7, #15]
    break;
 800a90c:	e005      	b.n	800a91a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a90e:	2303      	movs	r3, #3
 800a910:	73fb      	strb	r3, [r7, #15]
    break;
 800a912:	e002      	b.n	800a91a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a914:	2303      	movs	r3, #3
 800a916:	73fb      	strb	r3, [r7, #15]
    break;
 800a918:	bf00      	nop
  }
  return usb_status;
 800a91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	460b      	mov	r3, r1
 800a92e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a936:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	da0b      	bge.n	800a958 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a940:	78fb      	ldrb	r3, [r7, #3]
 800a942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a946:	68f9      	ldr	r1, [r7, #12]
 800a948:	4613      	mov	r3, r2
 800a94a:	00db      	lsls	r3, r3, #3
 800a94c:	1a9b      	subs	r3, r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	440b      	add	r3, r1
 800a952:	333e      	adds	r3, #62	; 0x3e
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	e00b      	b.n	800a970 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a958:	78fb      	ldrb	r3, [r7, #3]
 800a95a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a95e:	68f9      	ldr	r1, [r7, #12]
 800a960:	4613      	mov	r3, r2
 800a962:	00db      	lsls	r3, r3, #3
 800a964:	1a9b      	subs	r3, r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	440b      	add	r3, r1
 800a96a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a96e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a970:	4618      	mov	r0, r3
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	460b      	mov	r3, r1
 800a986:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a988:	2300      	movs	r3, #0
 800a98a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a996:	78fa      	ldrb	r2, [r7, #3]
 800a998:	4611      	mov	r1, r2
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7f8 fd7c 	bl	8003498 <HAL_PCD_SetAddress>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
 800a9a6:	2b03      	cmp	r3, #3
 800a9a8:	d816      	bhi.n	800a9d8 <USBD_LL_SetUSBAddress+0x5c>
 800a9aa:	a201      	add	r2, pc, #4	; (adr r2, 800a9b0 <USBD_LL_SetUSBAddress+0x34>)
 800a9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b0:	0800a9c1 	.word	0x0800a9c1
 800a9b4:	0800a9c7 	.word	0x0800a9c7
 800a9b8:	0800a9cd 	.word	0x0800a9cd
 800a9bc:	0800a9d3 	.word	0x0800a9d3
    case HAL_OK :
      usb_status = USBD_OK;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c4:	e00b      	b.n	800a9de <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ca:	e008      	b.n	800a9de <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d0:	e005      	b.n	800a9de <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d6:	e002      	b.n	800a9de <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a9d8:	2303      	movs	r3, #3
 800a9da:	73fb      	strb	r3, [r7, #15]
    break;
 800a9dc:	bf00      	nop
  }
  return usb_status;
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	607a      	str	r2, [r7, #4]
 800a9f2:	603b      	str	r3, [r7, #0]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aa06:	7af9      	ldrb	r1, [r7, #11]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	f7f8 fe59 	bl	80036c2 <HAL_PCD_EP_Transmit>
 800aa10:	4603      	mov	r3, r0
 800aa12:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800aa14:	7dbb      	ldrb	r3, [r7, #22]
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d816      	bhi.n	800aa48 <USBD_LL_Transmit+0x60>
 800aa1a:	a201      	add	r2, pc, #4	; (adr r2, 800aa20 <USBD_LL_Transmit+0x38>)
 800aa1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa20:	0800aa31 	.word	0x0800aa31
 800aa24:	0800aa37 	.word	0x0800aa37
 800aa28:	0800aa3d 	.word	0x0800aa3d
 800aa2c:	0800aa43 	.word	0x0800aa43
    case HAL_OK :
      usb_status = USBD_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	75fb      	strb	r3, [r7, #23]
    break;
 800aa34:	e00b      	b.n	800aa4e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa36:	2303      	movs	r3, #3
 800aa38:	75fb      	strb	r3, [r7, #23]
    break;
 800aa3a:	e008      	b.n	800aa4e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	75fb      	strb	r3, [r7, #23]
    break;
 800aa40:	e005      	b.n	800aa4e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa42:	2303      	movs	r3, #3
 800aa44:	75fb      	strb	r3, [r7, #23]
    break;
 800aa46:	e002      	b.n	800aa4e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	75fb      	strb	r3, [r7, #23]
    break;
 800aa4c:	bf00      	nop
  }
  return usb_status;
 800aa4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3718      	adds	r7, #24
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	607a      	str	r2, [r7, #4]
 800aa62:	603b      	str	r3, [r7, #0]
 800aa64:	460b      	mov	r3, r1
 800aa66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aa76:	7af9      	ldrb	r1, [r7, #11]
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	f7f8 fde3 	bl	8003646 <HAL_PCD_EP_Receive>
 800aa80:	4603      	mov	r3, r0
 800aa82:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800aa84:	7dbb      	ldrb	r3, [r7, #22]
 800aa86:	2b03      	cmp	r3, #3
 800aa88:	d816      	bhi.n	800aab8 <USBD_LL_PrepareReceive+0x60>
 800aa8a:	a201      	add	r2, pc, #4	; (adr r2, 800aa90 <USBD_LL_PrepareReceive+0x38>)
 800aa8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa90:	0800aaa1 	.word	0x0800aaa1
 800aa94:	0800aaa7 	.word	0x0800aaa7
 800aa98:	0800aaad 	.word	0x0800aaad
 800aa9c:	0800aab3 	.word	0x0800aab3
    case HAL_OK :
      usb_status = USBD_OK;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	75fb      	strb	r3, [r7, #23]
    break;
 800aaa4:	e00b      	b.n	800aabe <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	75fb      	strb	r3, [r7, #23]
    break;
 800aaaa:	e008      	b.n	800aabe <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aaac:	2301      	movs	r3, #1
 800aaae:	75fb      	strb	r3, [r7, #23]
    break;
 800aab0:	e005      	b.n	800aabe <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aab2:	2303      	movs	r3, #3
 800aab4:	75fb      	strb	r3, [r7, #23]
    break;
 800aab6:	e002      	b.n	800aabe <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800aab8:	2303      	movs	r3, #3
 800aaba:	75fb      	strb	r3, [r7, #23]
    break;
 800aabc:	bf00      	nop
  }
  return usb_status;
 800aabe:	7dfb      	ldrb	r3, [r7, #23]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3718      	adds	r7, #24
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	460b      	mov	r3, r1
 800aad2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800aad4:	78fb      	ldrb	r3, [r7, #3]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d002      	beq.n	800aae0 <HAL_PCDEx_LPM_Callback+0x18>
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d01f      	beq.n	800ab1e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800aade:	e03b      	b.n	800ab58 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6a1b      	ldr	r3, [r3, #32]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d007      	beq.n	800aaf8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800aae8:	f000 f854 	bl	800ab94 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aaec:	4b1c      	ldr	r3, [pc, #112]	; (800ab60 <HAL_PCDEx_LPM_Callback+0x98>)
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	4a1b      	ldr	r2, [pc, #108]	; (800ab60 <HAL_PCDEx_LPM_Callback+0x98>)
 800aaf2:	f023 0306 	bic.w	r3, r3, #6
 800aaf6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	6812      	ldr	r2, [r2, #0]
 800ab06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab0a:	f023 0301 	bic.w	r3, r3, #1
 800ab0e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fd fbde 	bl	80082d8 <USBD_LL_Resume>
    break;
 800ab1c:	e01c      	b.n	800ab58 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	6812      	ldr	r2, [r2, #0]
 800ab2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab30:	f043 0301 	orr.w	r3, r3, #1
 800ab34:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fd fbb5 	bl	80082ac <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a1b      	ldr	r3, [r3, #32]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d005      	beq.n	800ab56 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab4a:	4b05      	ldr	r3, [pc, #20]	; (800ab60 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	4a04      	ldr	r2, [pc, #16]	; (800ab60 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab50:	f043 0306 	orr.w	r3, r3, #6
 800ab54:	6113      	str	r3, [r2, #16]
    break;
 800ab56:	bf00      	nop
}
 800ab58:	bf00      	nop
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	e000ed00 	.word	0xe000ed00

0800ab64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab6c:	4b03      	ldr	r3, [pc, #12]	; (800ab7c <USBD_static_malloc+0x18>)
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	370c      	adds	r7, #12
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	20000240 	.word	0x20000240

0800ab80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]

}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ab98:	f7fe fcd6 	bl	8009548 <SystemClock_Config>
}
 800ab9c:	bf00      	nop
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	4603      	mov	r3, r0
 800aba8:	6039      	str	r1, [r7, #0]
 800abaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	2212      	movs	r2, #18
 800abb0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800abb2:	4b03      	ldr	r3, [pc, #12]	; (800abc0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr
 800abc0:	20000168 	.word	0x20000168

0800abc4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	4603      	mov	r3, r0
 800abcc:	6039      	str	r1, [r7, #0]
 800abce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	2204      	movs	r2, #4
 800abd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800abd6:	4b03      	ldr	r3, [pc, #12]	; (800abe4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800abd8:	4618      	mov	r0, r3
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	20000188 	.word	0x20000188

0800abe8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	4603      	mov	r3, r0
 800abf0:	6039      	str	r1, [r7, #0]
 800abf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abf4:	79fb      	ldrb	r3, [r7, #7]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d105      	bne.n	800ac06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	4907      	ldr	r1, [pc, #28]	; (800ac1c <USBD_FS_ProductStrDescriptor+0x34>)
 800abfe:	4808      	ldr	r0, [pc, #32]	; (800ac20 <USBD_FS_ProductStrDescriptor+0x38>)
 800ac00:	f7fe f9b9 	bl	8008f76 <USBD_GetString>
 800ac04:	e004      	b.n	800ac10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ac06:	683a      	ldr	r2, [r7, #0]
 800ac08:	4904      	ldr	r1, [pc, #16]	; (800ac1c <USBD_FS_ProductStrDescriptor+0x34>)
 800ac0a:	4805      	ldr	r0, [pc, #20]	; (800ac20 <USBD_FS_ProductStrDescriptor+0x38>)
 800ac0c:	f7fe f9b3 	bl	8008f76 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac10:	4b02      	ldr	r3, [pc, #8]	; (800ac1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3708      	adds	r7, #8
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	2000121c 	.word	0x2000121c
 800ac20:	0800b7a8 	.word	0x0800b7a8

0800ac24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	6039      	str	r1, [r7, #0]
 800ac2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac30:	683a      	ldr	r2, [r7, #0]
 800ac32:	4904      	ldr	r1, [pc, #16]	; (800ac44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ac34:	4804      	ldr	r0, [pc, #16]	; (800ac48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ac36:	f7fe f99e 	bl	8008f76 <USBD_GetString>
  return USBD_StrDesc;
 800ac3a:	4b02      	ldr	r3, [pc, #8]	; (800ac44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3708      	adds	r7, #8
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	2000121c 	.word	0x2000121c
 800ac48:	0800b7c0 	.word	0x0800b7c0

0800ac4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	4603      	mov	r3, r0
 800ac54:	6039      	str	r1, [r7, #0]
 800ac56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	221a      	movs	r2, #26
 800ac5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac5e:	f000 f855 	bl	800ad0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ac62:	4b02      	ldr	r3, [pc, #8]	; (800ac6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	2000018c 	.word	0x2000018c

0800ac70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	4603      	mov	r3, r0
 800ac78:	6039      	str	r1, [r7, #0]
 800ac7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac7c:	79fb      	ldrb	r3, [r7, #7]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d105      	bne.n	800ac8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac82:	683a      	ldr	r2, [r7, #0]
 800ac84:	4907      	ldr	r1, [pc, #28]	; (800aca4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac86:	4808      	ldr	r0, [pc, #32]	; (800aca8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac88:	f7fe f975 	bl	8008f76 <USBD_GetString>
 800ac8c:	e004      	b.n	800ac98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	4904      	ldr	r1, [pc, #16]	; (800aca4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac92:	4805      	ldr	r0, [pc, #20]	; (800aca8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac94:	f7fe f96f 	bl	8008f76 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac98:	4b02      	ldr	r3, [pc, #8]	; (800aca4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	2000121c 	.word	0x2000121c
 800aca8:	0800b7d4 	.word	0x0800b7d4

0800acac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	4603      	mov	r3, r0
 800acb4:	6039      	str	r1, [r7, #0]
 800acb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800acb8:	79fb      	ldrb	r3, [r7, #7]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d105      	bne.n	800acca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	4907      	ldr	r1, [pc, #28]	; (800ace0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800acc2:	4808      	ldr	r0, [pc, #32]	; (800ace4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800acc4:	f7fe f957 	bl	8008f76 <USBD_GetString>
 800acc8:	e004      	b.n	800acd4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800acca:	683a      	ldr	r2, [r7, #0]
 800accc:	4904      	ldr	r1, [pc, #16]	; (800ace0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800acce:	4805      	ldr	r0, [pc, #20]	; (800ace4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800acd0:	f7fe f951 	bl	8008f76 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acd4:	4b02      	ldr	r3, [pc, #8]	; (800ace0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	2000121c 	.word	0x2000121c
 800ace4:	0800b7e0 	.word	0x0800b7e0

0800ace8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	4603      	mov	r3, r0
 800acf0:	6039      	str	r1, [r7, #0]
 800acf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	220c      	movs	r2, #12
 800acf8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800acfa:	4b03      	ldr	r3, [pc, #12]	; (800ad08 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr
 800ad08:	2000017c 	.word	0x2000017c

0800ad0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ad12:	4b0f      	ldr	r3, [pc, #60]	; (800ad50 <Get_SerialNum+0x44>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad18:	4b0e      	ldr	r3, [pc, #56]	; (800ad54 <Get_SerialNum+0x48>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad1e:	4b0e      	ldr	r3, [pc, #56]	; (800ad58 <Get_SerialNum+0x4c>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4413      	add	r3, r2
 800ad2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d009      	beq.n	800ad46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad32:	2208      	movs	r2, #8
 800ad34:	4909      	ldr	r1, [pc, #36]	; (800ad5c <Get_SerialNum+0x50>)
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f000 f814 	bl	800ad64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad3c:	2204      	movs	r2, #4
 800ad3e:	4908      	ldr	r1, [pc, #32]	; (800ad60 <Get_SerialNum+0x54>)
 800ad40:	68b8      	ldr	r0, [r7, #8]
 800ad42:	f000 f80f 	bl	800ad64 <IntToUnicode>
  }
}
 800ad46:	bf00      	nop
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	1fff7590 	.word	0x1fff7590
 800ad54:	1fff7594 	.word	0x1fff7594
 800ad58:	1fff7598 	.word	0x1fff7598
 800ad5c:	2000018e 	.word	0x2000018e
 800ad60:	2000019e 	.word	0x2000019e

0800ad64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b087      	sub	sp, #28
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad72:	2300      	movs	r3, #0
 800ad74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad76:	2300      	movs	r3, #0
 800ad78:	75fb      	strb	r3, [r7, #23]
 800ad7a:	e027      	b.n	800adcc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	0f1b      	lsrs	r3, r3, #28
 800ad80:	2b09      	cmp	r3, #9
 800ad82:	d80b      	bhi.n	800ad9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	0f1b      	lsrs	r3, r3, #28
 800ad88:	b2da      	uxtb	r2, r3
 800ad8a:	7dfb      	ldrb	r3, [r7, #23]
 800ad8c:	005b      	lsls	r3, r3, #1
 800ad8e:	4619      	mov	r1, r3
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	440b      	add	r3, r1
 800ad94:	3230      	adds	r2, #48	; 0x30
 800ad96:	b2d2      	uxtb	r2, r2
 800ad98:	701a      	strb	r2, [r3, #0]
 800ad9a:	e00a      	b.n	800adb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	0f1b      	lsrs	r3, r3, #28
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	7dfb      	ldrb	r3, [r7, #23]
 800ada4:	005b      	lsls	r3, r3, #1
 800ada6:	4619      	mov	r1, r3
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	440b      	add	r3, r1
 800adac:	3237      	adds	r2, #55	; 0x37
 800adae:	b2d2      	uxtb	r2, r2
 800adb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	011b      	lsls	r3, r3, #4
 800adb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800adb8:	7dfb      	ldrb	r3, [r7, #23]
 800adba:	005b      	lsls	r3, r3, #1
 800adbc:	3301      	adds	r3, #1
 800adbe:	68ba      	ldr	r2, [r7, #8]
 800adc0:	4413      	add	r3, r2
 800adc2:	2200      	movs	r2, #0
 800adc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800adc6:	7dfb      	ldrb	r3, [r7, #23]
 800adc8:	3301      	adds	r3, #1
 800adca:	75fb      	strb	r3, [r7, #23]
 800adcc:	7dfa      	ldrb	r2, [r7, #23]
 800adce:	79fb      	ldrb	r3, [r7, #7]
 800add0:	429a      	cmp	r2, r3
 800add2:	d3d3      	bcc.n	800ad7c <IntToUnicode+0x18>
  }
}
 800add4:	bf00      	nop
 800add6:	bf00      	nop
 800add8:	371c      	adds	r7, #28
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr
	...

0800ade4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800ade4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ae1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800ade8:	f7ff fa52 	bl	800a290 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800adec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800adee:	e003      	b.n	800adf8 <LoopCopyDataInit>

0800adf0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800adf0:	4b0b      	ldr	r3, [pc, #44]	; (800ae20 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800adf2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800adf4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800adf6:	3104      	adds	r1, #4

0800adf8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800adf8:	480a      	ldr	r0, [pc, #40]	; (800ae24 <LoopForever+0xa>)
	ldr	r3, =_edata
 800adfa:	4b0b      	ldr	r3, [pc, #44]	; (800ae28 <LoopForever+0xe>)
	adds	r2, r0, r1
 800adfc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800adfe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800ae00:	d3f6      	bcc.n	800adf0 <CopyDataInit>
	ldr	r2, =_sbss
 800ae02:	4a0a      	ldr	r2, [pc, #40]	; (800ae2c <LoopForever+0x12>)
	b	LoopFillZerobss
 800ae04:	e002      	b.n	800ae0c <LoopFillZerobss>

0800ae06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800ae06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800ae08:	f842 3b04 	str.w	r3, [r2], #4

0800ae0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800ae0c:	4b08      	ldr	r3, [pc, #32]	; (800ae30 <LoopForever+0x16>)
	cmp	r2, r3
 800ae0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800ae10:	d3f9      	bcc.n	800ae06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ae12:	f000 f85d 	bl	800aed0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ae16:	f7fe fa8f 	bl	8009338 <main>

0800ae1a <LoopForever>:

LoopForever:
    b LoopForever
 800ae1a:	e7fe      	b.n	800ae1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800ae1c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800ae20:	0800c080 	.word	0x0800c080
	ldr	r0, =_sdata
 800ae24:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800ae28:	2000020c 	.word	0x2000020c
	ldr	r2, =_sbss
 800ae2c:	2000020c 	.word	0x2000020c
	ldr	r3, = _ebss
 800ae30:	2000142c 	.word	0x2000142c

0800ae34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ae34:	e7fe      	b.n	800ae34 <ADC1_2_IRQHandler>
	...

0800ae38 <arm_sin_f32>:
 800ae38:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800aeb8 <arm_sin_f32+0x80>
 800ae3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ae40:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ae44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae48:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ae4c:	d504      	bpl.n	800ae58 <arm_sin_f32+0x20>
 800ae4e:	ee17 3a90 	vmov	r3, s15
 800ae52:	3b01      	subs	r3, #1
 800ae54:	ee07 3a90 	vmov	s15, r3
 800ae58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae5c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800aebc <arm_sin_f32+0x84>
 800ae60:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ae64:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ae68:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ae6c:	ee17 3a90 	vmov	r3, s15
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae76:	d21a      	bcs.n	800aeae <arm_sin_f32+0x76>
 800ae78:	ee07 3a90 	vmov	s15, r3
 800ae7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae80:	1c59      	adds	r1, r3, #1
 800ae82:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ae86:	4a0e      	ldr	r2, [pc, #56]	; (800aec0 <arm_sin_f32+0x88>)
 800ae88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ae8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae90:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ae94:	ed93 7a00 	vldr	s14, [r3]
 800ae98:	edd2 6a00 	vldr	s13, [r2]
 800ae9c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aea0:	ee20 0a26 	vmul.f32	s0, s0, s13
 800aea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aea8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800aeac:	4770      	bx	lr
 800aeae:	ee30 0a47 	vsub.f32	s0, s0, s14
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	e7e6      	b.n	800ae86 <arm_sin_f32+0x4e>
 800aeb8:	3e22f983 	.word	0x3e22f983
 800aebc:	44000000 	.word	0x44000000
 800aec0:	0800b838 	.word	0x0800b838

0800aec4 <__errno>:
 800aec4:	4b01      	ldr	r3, [pc, #4]	; (800aecc <__errno+0x8>)
 800aec6:	6818      	ldr	r0, [r3, #0]
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	200001a8 	.word	0x200001a8

0800aed0 <__libc_init_array>:
 800aed0:	b570      	push	{r4, r5, r6, lr}
 800aed2:	4d0d      	ldr	r5, [pc, #52]	; (800af08 <__libc_init_array+0x38>)
 800aed4:	4c0d      	ldr	r4, [pc, #52]	; (800af0c <__libc_init_array+0x3c>)
 800aed6:	1b64      	subs	r4, r4, r5
 800aed8:	10a4      	asrs	r4, r4, #2
 800aeda:	2600      	movs	r6, #0
 800aedc:	42a6      	cmp	r6, r4
 800aede:	d109      	bne.n	800aef4 <__libc_init_array+0x24>
 800aee0:	4d0b      	ldr	r5, [pc, #44]	; (800af10 <__libc_init_array+0x40>)
 800aee2:	4c0c      	ldr	r4, [pc, #48]	; (800af14 <__libc_init_array+0x44>)
 800aee4:	f000 fc4e 	bl	800b784 <_init>
 800aee8:	1b64      	subs	r4, r4, r5
 800aeea:	10a4      	asrs	r4, r4, #2
 800aeec:	2600      	movs	r6, #0
 800aeee:	42a6      	cmp	r6, r4
 800aef0:	d105      	bne.n	800aefe <__libc_init_array+0x2e>
 800aef2:	bd70      	pop	{r4, r5, r6, pc}
 800aef4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aef8:	4798      	blx	r3
 800aefa:	3601      	adds	r6, #1
 800aefc:	e7ee      	b.n	800aedc <__libc_init_array+0xc>
 800aefe:	f855 3b04 	ldr.w	r3, [r5], #4
 800af02:	4798      	blx	r3
 800af04:	3601      	adds	r6, #1
 800af06:	e7f2      	b.n	800aeee <__libc_init_array+0x1e>
 800af08:	0800c078 	.word	0x0800c078
 800af0c:	0800c078 	.word	0x0800c078
 800af10:	0800c078 	.word	0x0800c078
 800af14:	0800c07c 	.word	0x0800c07c

0800af18 <memset>:
 800af18:	4402      	add	r2, r0
 800af1a:	4603      	mov	r3, r0
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d100      	bne.n	800af22 <memset+0xa>
 800af20:	4770      	bx	lr
 800af22:	f803 1b01 	strb.w	r1, [r3], #1
 800af26:	e7f9      	b.n	800af1c <memset+0x4>

0800af28 <siprintf>:
 800af28:	b40e      	push	{r1, r2, r3}
 800af2a:	b500      	push	{lr}
 800af2c:	b09c      	sub	sp, #112	; 0x70
 800af2e:	ab1d      	add	r3, sp, #116	; 0x74
 800af30:	9002      	str	r0, [sp, #8]
 800af32:	9006      	str	r0, [sp, #24]
 800af34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af38:	4809      	ldr	r0, [pc, #36]	; (800af60 <siprintf+0x38>)
 800af3a:	9107      	str	r1, [sp, #28]
 800af3c:	9104      	str	r1, [sp, #16]
 800af3e:	4909      	ldr	r1, [pc, #36]	; (800af64 <siprintf+0x3c>)
 800af40:	f853 2b04 	ldr.w	r2, [r3], #4
 800af44:	9105      	str	r1, [sp, #20]
 800af46:	6800      	ldr	r0, [r0, #0]
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	a902      	add	r1, sp, #8
 800af4c:	f000 f868 	bl	800b020 <_svfiprintf_r>
 800af50:	9b02      	ldr	r3, [sp, #8]
 800af52:	2200      	movs	r2, #0
 800af54:	701a      	strb	r2, [r3, #0]
 800af56:	b01c      	add	sp, #112	; 0x70
 800af58:	f85d eb04 	ldr.w	lr, [sp], #4
 800af5c:	b003      	add	sp, #12
 800af5e:	4770      	bx	lr
 800af60:	200001a8 	.word	0x200001a8
 800af64:	ffff0208 	.word	0xffff0208

0800af68 <__ssputs_r>:
 800af68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af6c:	688e      	ldr	r6, [r1, #8]
 800af6e:	429e      	cmp	r6, r3
 800af70:	4682      	mov	sl, r0
 800af72:	460c      	mov	r4, r1
 800af74:	4690      	mov	r8, r2
 800af76:	461f      	mov	r7, r3
 800af78:	d838      	bhi.n	800afec <__ssputs_r+0x84>
 800af7a:	898a      	ldrh	r2, [r1, #12]
 800af7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af80:	d032      	beq.n	800afe8 <__ssputs_r+0x80>
 800af82:	6825      	ldr	r5, [r4, #0]
 800af84:	6909      	ldr	r1, [r1, #16]
 800af86:	eba5 0901 	sub.w	r9, r5, r1
 800af8a:	6965      	ldr	r5, [r4, #20]
 800af8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af94:	3301      	adds	r3, #1
 800af96:	444b      	add	r3, r9
 800af98:	106d      	asrs	r5, r5, #1
 800af9a:	429d      	cmp	r5, r3
 800af9c:	bf38      	it	cc
 800af9e:	461d      	movcc	r5, r3
 800afa0:	0553      	lsls	r3, r2, #21
 800afa2:	d531      	bpl.n	800b008 <__ssputs_r+0xa0>
 800afa4:	4629      	mov	r1, r5
 800afa6:	f000 fb47 	bl	800b638 <_malloc_r>
 800afaa:	4606      	mov	r6, r0
 800afac:	b950      	cbnz	r0, 800afc4 <__ssputs_r+0x5c>
 800afae:	230c      	movs	r3, #12
 800afb0:	f8ca 3000 	str.w	r3, [sl]
 800afb4:	89a3      	ldrh	r3, [r4, #12]
 800afb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afba:	81a3      	strh	r3, [r4, #12]
 800afbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc4:	6921      	ldr	r1, [r4, #16]
 800afc6:	464a      	mov	r2, r9
 800afc8:	f000 fabe 	bl	800b548 <memcpy>
 800afcc:	89a3      	ldrh	r3, [r4, #12]
 800afce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800afd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afd6:	81a3      	strh	r3, [r4, #12]
 800afd8:	6126      	str	r6, [r4, #16]
 800afda:	6165      	str	r5, [r4, #20]
 800afdc:	444e      	add	r6, r9
 800afde:	eba5 0509 	sub.w	r5, r5, r9
 800afe2:	6026      	str	r6, [r4, #0]
 800afe4:	60a5      	str	r5, [r4, #8]
 800afe6:	463e      	mov	r6, r7
 800afe8:	42be      	cmp	r6, r7
 800afea:	d900      	bls.n	800afee <__ssputs_r+0x86>
 800afec:	463e      	mov	r6, r7
 800afee:	4632      	mov	r2, r6
 800aff0:	6820      	ldr	r0, [r4, #0]
 800aff2:	4641      	mov	r1, r8
 800aff4:	f000 fab6 	bl	800b564 <memmove>
 800aff8:	68a3      	ldr	r3, [r4, #8]
 800affa:	6822      	ldr	r2, [r4, #0]
 800affc:	1b9b      	subs	r3, r3, r6
 800affe:	4432      	add	r2, r6
 800b000:	60a3      	str	r3, [r4, #8]
 800b002:	6022      	str	r2, [r4, #0]
 800b004:	2000      	movs	r0, #0
 800b006:	e7db      	b.n	800afc0 <__ssputs_r+0x58>
 800b008:	462a      	mov	r2, r5
 800b00a:	f000 fb6f 	bl	800b6ec <_realloc_r>
 800b00e:	4606      	mov	r6, r0
 800b010:	2800      	cmp	r0, #0
 800b012:	d1e1      	bne.n	800afd8 <__ssputs_r+0x70>
 800b014:	6921      	ldr	r1, [r4, #16]
 800b016:	4650      	mov	r0, sl
 800b018:	f000 fabe 	bl	800b598 <_free_r>
 800b01c:	e7c7      	b.n	800afae <__ssputs_r+0x46>
	...

0800b020 <_svfiprintf_r>:
 800b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	4698      	mov	r8, r3
 800b026:	898b      	ldrh	r3, [r1, #12]
 800b028:	061b      	lsls	r3, r3, #24
 800b02a:	b09d      	sub	sp, #116	; 0x74
 800b02c:	4607      	mov	r7, r0
 800b02e:	460d      	mov	r5, r1
 800b030:	4614      	mov	r4, r2
 800b032:	d50e      	bpl.n	800b052 <_svfiprintf_r+0x32>
 800b034:	690b      	ldr	r3, [r1, #16]
 800b036:	b963      	cbnz	r3, 800b052 <_svfiprintf_r+0x32>
 800b038:	2140      	movs	r1, #64	; 0x40
 800b03a:	f000 fafd 	bl	800b638 <_malloc_r>
 800b03e:	6028      	str	r0, [r5, #0]
 800b040:	6128      	str	r0, [r5, #16]
 800b042:	b920      	cbnz	r0, 800b04e <_svfiprintf_r+0x2e>
 800b044:	230c      	movs	r3, #12
 800b046:	603b      	str	r3, [r7, #0]
 800b048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b04c:	e0d1      	b.n	800b1f2 <_svfiprintf_r+0x1d2>
 800b04e:	2340      	movs	r3, #64	; 0x40
 800b050:	616b      	str	r3, [r5, #20]
 800b052:	2300      	movs	r3, #0
 800b054:	9309      	str	r3, [sp, #36]	; 0x24
 800b056:	2320      	movs	r3, #32
 800b058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b05c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b060:	2330      	movs	r3, #48	; 0x30
 800b062:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b20c <_svfiprintf_r+0x1ec>
 800b066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b06a:	f04f 0901 	mov.w	r9, #1
 800b06e:	4623      	mov	r3, r4
 800b070:	469a      	mov	sl, r3
 800b072:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b076:	b10a      	cbz	r2, 800b07c <_svfiprintf_r+0x5c>
 800b078:	2a25      	cmp	r2, #37	; 0x25
 800b07a:	d1f9      	bne.n	800b070 <_svfiprintf_r+0x50>
 800b07c:	ebba 0b04 	subs.w	fp, sl, r4
 800b080:	d00b      	beq.n	800b09a <_svfiprintf_r+0x7a>
 800b082:	465b      	mov	r3, fp
 800b084:	4622      	mov	r2, r4
 800b086:	4629      	mov	r1, r5
 800b088:	4638      	mov	r0, r7
 800b08a:	f7ff ff6d 	bl	800af68 <__ssputs_r>
 800b08e:	3001      	adds	r0, #1
 800b090:	f000 80aa 	beq.w	800b1e8 <_svfiprintf_r+0x1c8>
 800b094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b096:	445a      	add	r2, fp
 800b098:	9209      	str	r2, [sp, #36]	; 0x24
 800b09a:	f89a 3000 	ldrb.w	r3, [sl]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 80a2 	beq.w	800b1e8 <_svfiprintf_r+0x1c8>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0ae:	f10a 0a01 	add.w	sl, sl, #1
 800b0b2:	9304      	str	r3, [sp, #16]
 800b0b4:	9307      	str	r3, [sp, #28]
 800b0b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0ba:	931a      	str	r3, [sp, #104]	; 0x68
 800b0bc:	4654      	mov	r4, sl
 800b0be:	2205      	movs	r2, #5
 800b0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c4:	4851      	ldr	r0, [pc, #324]	; (800b20c <_svfiprintf_r+0x1ec>)
 800b0c6:	f7f5 f88b 	bl	80001e0 <memchr>
 800b0ca:	9a04      	ldr	r2, [sp, #16]
 800b0cc:	b9d8      	cbnz	r0, 800b106 <_svfiprintf_r+0xe6>
 800b0ce:	06d0      	lsls	r0, r2, #27
 800b0d0:	bf44      	itt	mi
 800b0d2:	2320      	movmi	r3, #32
 800b0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0d8:	0711      	lsls	r1, r2, #28
 800b0da:	bf44      	itt	mi
 800b0dc:	232b      	movmi	r3, #43	; 0x2b
 800b0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b0e8:	d015      	beq.n	800b116 <_svfiprintf_r+0xf6>
 800b0ea:	9a07      	ldr	r2, [sp, #28]
 800b0ec:	4654      	mov	r4, sl
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	f04f 0c0a 	mov.w	ip, #10
 800b0f4:	4621      	mov	r1, r4
 800b0f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0fa:	3b30      	subs	r3, #48	; 0x30
 800b0fc:	2b09      	cmp	r3, #9
 800b0fe:	d94e      	bls.n	800b19e <_svfiprintf_r+0x17e>
 800b100:	b1b0      	cbz	r0, 800b130 <_svfiprintf_r+0x110>
 800b102:	9207      	str	r2, [sp, #28]
 800b104:	e014      	b.n	800b130 <_svfiprintf_r+0x110>
 800b106:	eba0 0308 	sub.w	r3, r0, r8
 800b10a:	fa09 f303 	lsl.w	r3, r9, r3
 800b10e:	4313      	orrs	r3, r2
 800b110:	9304      	str	r3, [sp, #16]
 800b112:	46a2      	mov	sl, r4
 800b114:	e7d2      	b.n	800b0bc <_svfiprintf_r+0x9c>
 800b116:	9b03      	ldr	r3, [sp, #12]
 800b118:	1d19      	adds	r1, r3, #4
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	9103      	str	r1, [sp, #12]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	bfbb      	ittet	lt
 800b122:	425b      	neglt	r3, r3
 800b124:	f042 0202 	orrlt.w	r2, r2, #2
 800b128:	9307      	strge	r3, [sp, #28]
 800b12a:	9307      	strlt	r3, [sp, #28]
 800b12c:	bfb8      	it	lt
 800b12e:	9204      	strlt	r2, [sp, #16]
 800b130:	7823      	ldrb	r3, [r4, #0]
 800b132:	2b2e      	cmp	r3, #46	; 0x2e
 800b134:	d10c      	bne.n	800b150 <_svfiprintf_r+0x130>
 800b136:	7863      	ldrb	r3, [r4, #1]
 800b138:	2b2a      	cmp	r3, #42	; 0x2a
 800b13a:	d135      	bne.n	800b1a8 <_svfiprintf_r+0x188>
 800b13c:	9b03      	ldr	r3, [sp, #12]
 800b13e:	1d1a      	adds	r2, r3, #4
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	9203      	str	r2, [sp, #12]
 800b144:	2b00      	cmp	r3, #0
 800b146:	bfb8      	it	lt
 800b148:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b14c:	3402      	adds	r4, #2
 800b14e:	9305      	str	r3, [sp, #20]
 800b150:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b21c <_svfiprintf_r+0x1fc>
 800b154:	7821      	ldrb	r1, [r4, #0]
 800b156:	2203      	movs	r2, #3
 800b158:	4650      	mov	r0, sl
 800b15a:	f7f5 f841 	bl	80001e0 <memchr>
 800b15e:	b140      	cbz	r0, 800b172 <_svfiprintf_r+0x152>
 800b160:	2340      	movs	r3, #64	; 0x40
 800b162:	eba0 000a 	sub.w	r0, r0, sl
 800b166:	fa03 f000 	lsl.w	r0, r3, r0
 800b16a:	9b04      	ldr	r3, [sp, #16]
 800b16c:	4303      	orrs	r3, r0
 800b16e:	3401      	adds	r4, #1
 800b170:	9304      	str	r3, [sp, #16]
 800b172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b176:	4826      	ldr	r0, [pc, #152]	; (800b210 <_svfiprintf_r+0x1f0>)
 800b178:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b17c:	2206      	movs	r2, #6
 800b17e:	f7f5 f82f 	bl	80001e0 <memchr>
 800b182:	2800      	cmp	r0, #0
 800b184:	d038      	beq.n	800b1f8 <_svfiprintf_r+0x1d8>
 800b186:	4b23      	ldr	r3, [pc, #140]	; (800b214 <_svfiprintf_r+0x1f4>)
 800b188:	bb1b      	cbnz	r3, 800b1d2 <_svfiprintf_r+0x1b2>
 800b18a:	9b03      	ldr	r3, [sp, #12]
 800b18c:	3307      	adds	r3, #7
 800b18e:	f023 0307 	bic.w	r3, r3, #7
 800b192:	3308      	adds	r3, #8
 800b194:	9303      	str	r3, [sp, #12]
 800b196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b198:	4433      	add	r3, r6
 800b19a:	9309      	str	r3, [sp, #36]	; 0x24
 800b19c:	e767      	b.n	800b06e <_svfiprintf_r+0x4e>
 800b19e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1a2:	460c      	mov	r4, r1
 800b1a4:	2001      	movs	r0, #1
 800b1a6:	e7a5      	b.n	800b0f4 <_svfiprintf_r+0xd4>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	3401      	adds	r4, #1
 800b1ac:	9305      	str	r3, [sp, #20]
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	f04f 0c0a 	mov.w	ip, #10
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1ba:	3a30      	subs	r2, #48	; 0x30
 800b1bc:	2a09      	cmp	r2, #9
 800b1be:	d903      	bls.n	800b1c8 <_svfiprintf_r+0x1a8>
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d0c5      	beq.n	800b150 <_svfiprintf_r+0x130>
 800b1c4:	9105      	str	r1, [sp, #20]
 800b1c6:	e7c3      	b.n	800b150 <_svfiprintf_r+0x130>
 800b1c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e7f0      	b.n	800b1b4 <_svfiprintf_r+0x194>
 800b1d2:	ab03      	add	r3, sp, #12
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	462a      	mov	r2, r5
 800b1d8:	4b0f      	ldr	r3, [pc, #60]	; (800b218 <_svfiprintf_r+0x1f8>)
 800b1da:	a904      	add	r1, sp, #16
 800b1dc:	4638      	mov	r0, r7
 800b1de:	f3af 8000 	nop.w
 800b1e2:	1c42      	adds	r2, r0, #1
 800b1e4:	4606      	mov	r6, r0
 800b1e6:	d1d6      	bne.n	800b196 <_svfiprintf_r+0x176>
 800b1e8:	89ab      	ldrh	r3, [r5, #12]
 800b1ea:	065b      	lsls	r3, r3, #25
 800b1ec:	f53f af2c 	bmi.w	800b048 <_svfiprintf_r+0x28>
 800b1f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1f2:	b01d      	add	sp, #116	; 0x74
 800b1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f8:	ab03      	add	r3, sp, #12
 800b1fa:	9300      	str	r3, [sp, #0]
 800b1fc:	462a      	mov	r2, r5
 800b1fe:	4b06      	ldr	r3, [pc, #24]	; (800b218 <_svfiprintf_r+0x1f8>)
 800b200:	a904      	add	r1, sp, #16
 800b202:	4638      	mov	r0, r7
 800b204:	f000 f87a 	bl	800b2fc <_printf_i>
 800b208:	e7eb      	b.n	800b1e2 <_svfiprintf_r+0x1c2>
 800b20a:	bf00      	nop
 800b20c:	0800c03c 	.word	0x0800c03c
 800b210:	0800c046 	.word	0x0800c046
 800b214:	00000000 	.word	0x00000000
 800b218:	0800af69 	.word	0x0800af69
 800b21c:	0800c042 	.word	0x0800c042

0800b220 <_printf_common>:
 800b220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b224:	4616      	mov	r6, r2
 800b226:	4699      	mov	r9, r3
 800b228:	688a      	ldr	r2, [r1, #8]
 800b22a:	690b      	ldr	r3, [r1, #16]
 800b22c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b230:	4293      	cmp	r3, r2
 800b232:	bfb8      	it	lt
 800b234:	4613      	movlt	r3, r2
 800b236:	6033      	str	r3, [r6, #0]
 800b238:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b23c:	4607      	mov	r7, r0
 800b23e:	460c      	mov	r4, r1
 800b240:	b10a      	cbz	r2, 800b246 <_printf_common+0x26>
 800b242:	3301      	adds	r3, #1
 800b244:	6033      	str	r3, [r6, #0]
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	0699      	lsls	r1, r3, #26
 800b24a:	bf42      	ittt	mi
 800b24c:	6833      	ldrmi	r3, [r6, #0]
 800b24e:	3302      	addmi	r3, #2
 800b250:	6033      	strmi	r3, [r6, #0]
 800b252:	6825      	ldr	r5, [r4, #0]
 800b254:	f015 0506 	ands.w	r5, r5, #6
 800b258:	d106      	bne.n	800b268 <_printf_common+0x48>
 800b25a:	f104 0a19 	add.w	sl, r4, #25
 800b25e:	68e3      	ldr	r3, [r4, #12]
 800b260:	6832      	ldr	r2, [r6, #0]
 800b262:	1a9b      	subs	r3, r3, r2
 800b264:	42ab      	cmp	r3, r5
 800b266:	dc26      	bgt.n	800b2b6 <_printf_common+0x96>
 800b268:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b26c:	1e13      	subs	r3, r2, #0
 800b26e:	6822      	ldr	r2, [r4, #0]
 800b270:	bf18      	it	ne
 800b272:	2301      	movne	r3, #1
 800b274:	0692      	lsls	r2, r2, #26
 800b276:	d42b      	bmi.n	800b2d0 <_printf_common+0xb0>
 800b278:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b27c:	4649      	mov	r1, r9
 800b27e:	4638      	mov	r0, r7
 800b280:	47c0      	blx	r8
 800b282:	3001      	adds	r0, #1
 800b284:	d01e      	beq.n	800b2c4 <_printf_common+0xa4>
 800b286:	6823      	ldr	r3, [r4, #0]
 800b288:	68e5      	ldr	r5, [r4, #12]
 800b28a:	6832      	ldr	r2, [r6, #0]
 800b28c:	f003 0306 	and.w	r3, r3, #6
 800b290:	2b04      	cmp	r3, #4
 800b292:	bf08      	it	eq
 800b294:	1aad      	subeq	r5, r5, r2
 800b296:	68a3      	ldr	r3, [r4, #8]
 800b298:	6922      	ldr	r2, [r4, #16]
 800b29a:	bf0c      	ite	eq
 800b29c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2a0:	2500      	movne	r5, #0
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	bfc4      	itt	gt
 800b2a6:	1a9b      	subgt	r3, r3, r2
 800b2a8:	18ed      	addgt	r5, r5, r3
 800b2aa:	2600      	movs	r6, #0
 800b2ac:	341a      	adds	r4, #26
 800b2ae:	42b5      	cmp	r5, r6
 800b2b0:	d11a      	bne.n	800b2e8 <_printf_common+0xc8>
 800b2b2:	2000      	movs	r0, #0
 800b2b4:	e008      	b.n	800b2c8 <_printf_common+0xa8>
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	4652      	mov	r2, sl
 800b2ba:	4649      	mov	r1, r9
 800b2bc:	4638      	mov	r0, r7
 800b2be:	47c0      	blx	r8
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	d103      	bne.n	800b2cc <_printf_common+0xac>
 800b2c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2cc:	3501      	adds	r5, #1
 800b2ce:	e7c6      	b.n	800b25e <_printf_common+0x3e>
 800b2d0:	18e1      	adds	r1, r4, r3
 800b2d2:	1c5a      	adds	r2, r3, #1
 800b2d4:	2030      	movs	r0, #48	; 0x30
 800b2d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2da:	4422      	add	r2, r4
 800b2dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2e4:	3302      	adds	r3, #2
 800b2e6:	e7c7      	b.n	800b278 <_printf_common+0x58>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	4622      	mov	r2, r4
 800b2ec:	4649      	mov	r1, r9
 800b2ee:	4638      	mov	r0, r7
 800b2f0:	47c0      	blx	r8
 800b2f2:	3001      	adds	r0, #1
 800b2f4:	d0e6      	beq.n	800b2c4 <_printf_common+0xa4>
 800b2f6:	3601      	adds	r6, #1
 800b2f8:	e7d9      	b.n	800b2ae <_printf_common+0x8e>
	...

0800b2fc <_printf_i>:
 800b2fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b300:	460c      	mov	r4, r1
 800b302:	4691      	mov	r9, r2
 800b304:	7e27      	ldrb	r7, [r4, #24]
 800b306:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b308:	2f78      	cmp	r7, #120	; 0x78
 800b30a:	4680      	mov	r8, r0
 800b30c:	469a      	mov	sl, r3
 800b30e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b312:	d807      	bhi.n	800b324 <_printf_i+0x28>
 800b314:	2f62      	cmp	r7, #98	; 0x62
 800b316:	d80a      	bhi.n	800b32e <_printf_i+0x32>
 800b318:	2f00      	cmp	r7, #0
 800b31a:	f000 80d8 	beq.w	800b4ce <_printf_i+0x1d2>
 800b31e:	2f58      	cmp	r7, #88	; 0x58
 800b320:	f000 80a3 	beq.w	800b46a <_printf_i+0x16e>
 800b324:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b328:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b32c:	e03a      	b.n	800b3a4 <_printf_i+0xa8>
 800b32e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b332:	2b15      	cmp	r3, #21
 800b334:	d8f6      	bhi.n	800b324 <_printf_i+0x28>
 800b336:	a001      	add	r0, pc, #4	; (adr r0, 800b33c <_printf_i+0x40>)
 800b338:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b33c:	0800b395 	.word	0x0800b395
 800b340:	0800b3a9 	.word	0x0800b3a9
 800b344:	0800b325 	.word	0x0800b325
 800b348:	0800b325 	.word	0x0800b325
 800b34c:	0800b325 	.word	0x0800b325
 800b350:	0800b325 	.word	0x0800b325
 800b354:	0800b3a9 	.word	0x0800b3a9
 800b358:	0800b325 	.word	0x0800b325
 800b35c:	0800b325 	.word	0x0800b325
 800b360:	0800b325 	.word	0x0800b325
 800b364:	0800b325 	.word	0x0800b325
 800b368:	0800b4b5 	.word	0x0800b4b5
 800b36c:	0800b3d9 	.word	0x0800b3d9
 800b370:	0800b497 	.word	0x0800b497
 800b374:	0800b325 	.word	0x0800b325
 800b378:	0800b325 	.word	0x0800b325
 800b37c:	0800b4d7 	.word	0x0800b4d7
 800b380:	0800b325 	.word	0x0800b325
 800b384:	0800b3d9 	.word	0x0800b3d9
 800b388:	0800b325 	.word	0x0800b325
 800b38c:	0800b325 	.word	0x0800b325
 800b390:	0800b49f 	.word	0x0800b49f
 800b394:	680b      	ldr	r3, [r1, #0]
 800b396:	1d1a      	adds	r2, r3, #4
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	600a      	str	r2, [r1, #0]
 800b39c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b3a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e0a3      	b.n	800b4f0 <_printf_i+0x1f4>
 800b3a8:	6825      	ldr	r5, [r4, #0]
 800b3aa:	6808      	ldr	r0, [r1, #0]
 800b3ac:	062e      	lsls	r6, r5, #24
 800b3ae:	f100 0304 	add.w	r3, r0, #4
 800b3b2:	d50a      	bpl.n	800b3ca <_printf_i+0xce>
 800b3b4:	6805      	ldr	r5, [r0, #0]
 800b3b6:	600b      	str	r3, [r1, #0]
 800b3b8:	2d00      	cmp	r5, #0
 800b3ba:	da03      	bge.n	800b3c4 <_printf_i+0xc8>
 800b3bc:	232d      	movs	r3, #45	; 0x2d
 800b3be:	426d      	negs	r5, r5
 800b3c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3c4:	485e      	ldr	r0, [pc, #376]	; (800b540 <_printf_i+0x244>)
 800b3c6:	230a      	movs	r3, #10
 800b3c8:	e019      	b.n	800b3fe <_printf_i+0x102>
 800b3ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b3ce:	6805      	ldr	r5, [r0, #0]
 800b3d0:	600b      	str	r3, [r1, #0]
 800b3d2:	bf18      	it	ne
 800b3d4:	b22d      	sxthne	r5, r5
 800b3d6:	e7ef      	b.n	800b3b8 <_printf_i+0xbc>
 800b3d8:	680b      	ldr	r3, [r1, #0]
 800b3da:	6825      	ldr	r5, [r4, #0]
 800b3dc:	1d18      	adds	r0, r3, #4
 800b3de:	6008      	str	r0, [r1, #0]
 800b3e0:	0628      	lsls	r0, r5, #24
 800b3e2:	d501      	bpl.n	800b3e8 <_printf_i+0xec>
 800b3e4:	681d      	ldr	r5, [r3, #0]
 800b3e6:	e002      	b.n	800b3ee <_printf_i+0xf2>
 800b3e8:	0669      	lsls	r1, r5, #25
 800b3ea:	d5fb      	bpl.n	800b3e4 <_printf_i+0xe8>
 800b3ec:	881d      	ldrh	r5, [r3, #0]
 800b3ee:	4854      	ldr	r0, [pc, #336]	; (800b540 <_printf_i+0x244>)
 800b3f0:	2f6f      	cmp	r7, #111	; 0x6f
 800b3f2:	bf0c      	ite	eq
 800b3f4:	2308      	moveq	r3, #8
 800b3f6:	230a      	movne	r3, #10
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3fe:	6866      	ldr	r6, [r4, #4]
 800b400:	60a6      	str	r6, [r4, #8]
 800b402:	2e00      	cmp	r6, #0
 800b404:	bfa2      	ittt	ge
 800b406:	6821      	ldrge	r1, [r4, #0]
 800b408:	f021 0104 	bicge.w	r1, r1, #4
 800b40c:	6021      	strge	r1, [r4, #0]
 800b40e:	b90d      	cbnz	r5, 800b414 <_printf_i+0x118>
 800b410:	2e00      	cmp	r6, #0
 800b412:	d04d      	beq.n	800b4b0 <_printf_i+0x1b4>
 800b414:	4616      	mov	r6, r2
 800b416:	fbb5 f1f3 	udiv	r1, r5, r3
 800b41a:	fb03 5711 	mls	r7, r3, r1, r5
 800b41e:	5dc7      	ldrb	r7, [r0, r7]
 800b420:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b424:	462f      	mov	r7, r5
 800b426:	42bb      	cmp	r3, r7
 800b428:	460d      	mov	r5, r1
 800b42a:	d9f4      	bls.n	800b416 <_printf_i+0x11a>
 800b42c:	2b08      	cmp	r3, #8
 800b42e:	d10b      	bne.n	800b448 <_printf_i+0x14c>
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	07df      	lsls	r7, r3, #31
 800b434:	d508      	bpl.n	800b448 <_printf_i+0x14c>
 800b436:	6923      	ldr	r3, [r4, #16]
 800b438:	6861      	ldr	r1, [r4, #4]
 800b43a:	4299      	cmp	r1, r3
 800b43c:	bfde      	ittt	le
 800b43e:	2330      	movle	r3, #48	; 0x30
 800b440:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b444:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800b448:	1b92      	subs	r2, r2, r6
 800b44a:	6122      	str	r2, [r4, #16]
 800b44c:	f8cd a000 	str.w	sl, [sp]
 800b450:	464b      	mov	r3, r9
 800b452:	aa03      	add	r2, sp, #12
 800b454:	4621      	mov	r1, r4
 800b456:	4640      	mov	r0, r8
 800b458:	f7ff fee2 	bl	800b220 <_printf_common>
 800b45c:	3001      	adds	r0, #1
 800b45e:	d14c      	bne.n	800b4fa <_printf_i+0x1fe>
 800b460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b464:	b004      	add	sp, #16
 800b466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b46a:	4835      	ldr	r0, [pc, #212]	; (800b540 <_printf_i+0x244>)
 800b46c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	680e      	ldr	r6, [r1, #0]
 800b474:	061f      	lsls	r7, r3, #24
 800b476:	f856 5b04 	ldr.w	r5, [r6], #4
 800b47a:	600e      	str	r6, [r1, #0]
 800b47c:	d514      	bpl.n	800b4a8 <_printf_i+0x1ac>
 800b47e:	07d9      	lsls	r1, r3, #31
 800b480:	bf44      	itt	mi
 800b482:	f043 0320 	orrmi.w	r3, r3, #32
 800b486:	6023      	strmi	r3, [r4, #0]
 800b488:	b91d      	cbnz	r5, 800b492 <_printf_i+0x196>
 800b48a:	6823      	ldr	r3, [r4, #0]
 800b48c:	f023 0320 	bic.w	r3, r3, #32
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	2310      	movs	r3, #16
 800b494:	e7b0      	b.n	800b3f8 <_printf_i+0xfc>
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	f043 0320 	orr.w	r3, r3, #32
 800b49c:	6023      	str	r3, [r4, #0]
 800b49e:	2378      	movs	r3, #120	; 0x78
 800b4a0:	4828      	ldr	r0, [pc, #160]	; (800b544 <_printf_i+0x248>)
 800b4a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4a6:	e7e3      	b.n	800b470 <_printf_i+0x174>
 800b4a8:	065e      	lsls	r6, r3, #25
 800b4aa:	bf48      	it	mi
 800b4ac:	b2ad      	uxthmi	r5, r5
 800b4ae:	e7e6      	b.n	800b47e <_printf_i+0x182>
 800b4b0:	4616      	mov	r6, r2
 800b4b2:	e7bb      	b.n	800b42c <_printf_i+0x130>
 800b4b4:	680b      	ldr	r3, [r1, #0]
 800b4b6:	6826      	ldr	r6, [r4, #0]
 800b4b8:	6960      	ldr	r0, [r4, #20]
 800b4ba:	1d1d      	adds	r5, r3, #4
 800b4bc:	600d      	str	r5, [r1, #0]
 800b4be:	0635      	lsls	r5, r6, #24
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	d501      	bpl.n	800b4c8 <_printf_i+0x1cc>
 800b4c4:	6018      	str	r0, [r3, #0]
 800b4c6:	e002      	b.n	800b4ce <_printf_i+0x1d2>
 800b4c8:	0671      	lsls	r1, r6, #25
 800b4ca:	d5fb      	bpl.n	800b4c4 <_printf_i+0x1c8>
 800b4cc:	8018      	strh	r0, [r3, #0]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	6123      	str	r3, [r4, #16]
 800b4d2:	4616      	mov	r6, r2
 800b4d4:	e7ba      	b.n	800b44c <_printf_i+0x150>
 800b4d6:	680b      	ldr	r3, [r1, #0]
 800b4d8:	1d1a      	adds	r2, r3, #4
 800b4da:	600a      	str	r2, [r1, #0]
 800b4dc:	681e      	ldr	r6, [r3, #0]
 800b4de:	6862      	ldr	r2, [r4, #4]
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f7f4 fe7c 	bl	80001e0 <memchr>
 800b4e8:	b108      	cbz	r0, 800b4ee <_printf_i+0x1f2>
 800b4ea:	1b80      	subs	r0, r0, r6
 800b4ec:	6060      	str	r0, [r4, #4]
 800b4ee:	6863      	ldr	r3, [r4, #4]
 800b4f0:	6123      	str	r3, [r4, #16]
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4f8:	e7a8      	b.n	800b44c <_printf_i+0x150>
 800b4fa:	6923      	ldr	r3, [r4, #16]
 800b4fc:	4632      	mov	r2, r6
 800b4fe:	4649      	mov	r1, r9
 800b500:	4640      	mov	r0, r8
 800b502:	47d0      	blx	sl
 800b504:	3001      	adds	r0, #1
 800b506:	d0ab      	beq.n	800b460 <_printf_i+0x164>
 800b508:	6823      	ldr	r3, [r4, #0]
 800b50a:	079b      	lsls	r3, r3, #30
 800b50c:	d413      	bmi.n	800b536 <_printf_i+0x23a>
 800b50e:	68e0      	ldr	r0, [r4, #12]
 800b510:	9b03      	ldr	r3, [sp, #12]
 800b512:	4298      	cmp	r0, r3
 800b514:	bfb8      	it	lt
 800b516:	4618      	movlt	r0, r3
 800b518:	e7a4      	b.n	800b464 <_printf_i+0x168>
 800b51a:	2301      	movs	r3, #1
 800b51c:	4632      	mov	r2, r6
 800b51e:	4649      	mov	r1, r9
 800b520:	4640      	mov	r0, r8
 800b522:	47d0      	blx	sl
 800b524:	3001      	adds	r0, #1
 800b526:	d09b      	beq.n	800b460 <_printf_i+0x164>
 800b528:	3501      	adds	r5, #1
 800b52a:	68e3      	ldr	r3, [r4, #12]
 800b52c:	9903      	ldr	r1, [sp, #12]
 800b52e:	1a5b      	subs	r3, r3, r1
 800b530:	42ab      	cmp	r3, r5
 800b532:	dcf2      	bgt.n	800b51a <_printf_i+0x21e>
 800b534:	e7eb      	b.n	800b50e <_printf_i+0x212>
 800b536:	2500      	movs	r5, #0
 800b538:	f104 0619 	add.w	r6, r4, #25
 800b53c:	e7f5      	b.n	800b52a <_printf_i+0x22e>
 800b53e:	bf00      	nop
 800b540:	0800c04d 	.word	0x0800c04d
 800b544:	0800c05e 	.word	0x0800c05e

0800b548 <memcpy>:
 800b548:	440a      	add	r2, r1
 800b54a:	4291      	cmp	r1, r2
 800b54c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b550:	d100      	bne.n	800b554 <memcpy+0xc>
 800b552:	4770      	bx	lr
 800b554:	b510      	push	{r4, lr}
 800b556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b55a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b55e:	4291      	cmp	r1, r2
 800b560:	d1f9      	bne.n	800b556 <memcpy+0xe>
 800b562:	bd10      	pop	{r4, pc}

0800b564 <memmove>:
 800b564:	4288      	cmp	r0, r1
 800b566:	b510      	push	{r4, lr}
 800b568:	eb01 0402 	add.w	r4, r1, r2
 800b56c:	d902      	bls.n	800b574 <memmove+0x10>
 800b56e:	4284      	cmp	r4, r0
 800b570:	4623      	mov	r3, r4
 800b572:	d807      	bhi.n	800b584 <memmove+0x20>
 800b574:	1e43      	subs	r3, r0, #1
 800b576:	42a1      	cmp	r1, r4
 800b578:	d008      	beq.n	800b58c <memmove+0x28>
 800b57a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b57e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b582:	e7f8      	b.n	800b576 <memmove+0x12>
 800b584:	4402      	add	r2, r0
 800b586:	4601      	mov	r1, r0
 800b588:	428a      	cmp	r2, r1
 800b58a:	d100      	bne.n	800b58e <memmove+0x2a>
 800b58c:	bd10      	pop	{r4, pc}
 800b58e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b596:	e7f7      	b.n	800b588 <memmove+0x24>

0800b598 <_free_r>:
 800b598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b59a:	2900      	cmp	r1, #0
 800b59c:	d048      	beq.n	800b630 <_free_r+0x98>
 800b59e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5a2:	9001      	str	r0, [sp, #4]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f1a1 0404 	sub.w	r4, r1, #4
 800b5aa:	bfb8      	it	lt
 800b5ac:	18e4      	addlt	r4, r4, r3
 800b5ae:	f000 f8d3 	bl	800b758 <__malloc_lock>
 800b5b2:	4a20      	ldr	r2, [pc, #128]	; (800b634 <_free_r+0x9c>)
 800b5b4:	9801      	ldr	r0, [sp, #4]
 800b5b6:	6813      	ldr	r3, [r2, #0]
 800b5b8:	4615      	mov	r5, r2
 800b5ba:	b933      	cbnz	r3, 800b5ca <_free_r+0x32>
 800b5bc:	6063      	str	r3, [r4, #4]
 800b5be:	6014      	str	r4, [r2, #0]
 800b5c0:	b003      	add	sp, #12
 800b5c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5c6:	f000 b8cd 	b.w	800b764 <__malloc_unlock>
 800b5ca:	42a3      	cmp	r3, r4
 800b5cc:	d90b      	bls.n	800b5e6 <_free_r+0x4e>
 800b5ce:	6821      	ldr	r1, [r4, #0]
 800b5d0:	1862      	adds	r2, r4, r1
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	bf04      	itt	eq
 800b5d6:	681a      	ldreq	r2, [r3, #0]
 800b5d8:	685b      	ldreq	r3, [r3, #4]
 800b5da:	6063      	str	r3, [r4, #4]
 800b5dc:	bf04      	itt	eq
 800b5de:	1852      	addeq	r2, r2, r1
 800b5e0:	6022      	streq	r2, [r4, #0]
 800b5e2:	602c      	str	r4, [r5, #0]
 800b5e4:	e7ec      	b.n	800b5c0 <_free_r+0x28>
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	b10b      	cbz	r3, 800b5f0 <_free_r+0x58>
 800b5ec:	42a3      	cmp	r3, r4
 800b5ee:	d9fa      	bls.n	800b5e6 <_free_r+0x4e>
 800b5f0:	6811      	ldr	r1, [r2, #0]
 800b5f2:	1855      	adds	r5, r2, r1
 800b5f4:	42a5      	cmp	r5, r4
 800b5f6:	d10b      	bne.n	800b610 <_free_r+0x78>
 800b5f8:	6824      	ldr	r4, [r4, #0]
 800b5fa:	4421      	add	r1, r4
 800b5fc:	1854      	adds	r4, r2, r1
 800b5fe:	42a3      	cmp	r3, r4
 800b600:	6011      	str	r1, [r2, #0]
 800b602:	d1dd      	bne.n	800b5c0 <_free_r+0x28>
 800b604:	681c      	ldr	r4, [r3, #0]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	6053      	str	r3, [r2, #4]
 800b60a:	4421      	add	r1, r4
 800b60c:	6011      	str	r1, [r2, #0]
 800b60e:	e7d7      	b.n	800b5c0 <_free_r+0x28>
 800b610:	d902      	bls.n	800b618 <_free_r+0x80>
 800b612:	230c      	movs	r3, #12
 800b614:	6003      	str	r3, [r0, #0]
 800b616:	e7d3      	b.n	800b5c0 <_free_r+0x28>
 800b618:	6825      	ldr	r5, [r4, #0]
 800b61a:	1961      	adds	r1, r4, r5
 800b61c:	428b      	cmp	r3, r1
 800b61e:	bf04      	itt	eq
 800b620:	6819      	ldreq	r1, [r3, #0]
 800b622:	685b      	ldreq	r3, [r3, #4]
 800b624:	6063      	str	r3, [r4, #4]
 800b626:	bf04      	itt	eq
 800b628:	1949      	addeq	r1, r1, r5
 800b62a:	6021      	streq	r1, [r4, #0]
 800b62c:	6054      	str	r4, [r2, #4]
 800b62e:	e7c7      	b.n	800b5c0 <_free_r+0x28>
 800b630:	b003      	add	sp, #12
 800b632:	bd30      	pop	{r4, r5, pc}
 800b634:	20000254 	.word	0x20000254

0800b638 <_malloc_r>:
 800b638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63a:	1ccd      	adds	r5, r1, #3
 800b63c:	f025 0503 	bic.w	r5, r5, #3
 800b640:	3508      	adds	r5, #8
 800b642:	2d0c      	cmp	r5, #12
 800b644:	bf38      	it	cc
 800b646:	250c      	movcc	r5, #12
 800b648:	2d00      	cmp	r5, #0
 800b64a:	4606      	mov	r6, r0
 800b64c:	db01      	blt.n	800b652 <_malloc_r+0x1a>
 800b64e:	42a9      	cmp	r1, r5
 800b650:	d903      	bls.n	800b65a <_malloc_r+0x22>
 800b652:	230c      	movs	r3, #12
 800b654:	6033      	str	r3, [r6, #0]
 800b656:	2000      	movs	r0, #0
 800b658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b65a:	f000 f87d 	bl	800b758 <__malloc_lock>
 800b65e:	4921      	ldr	r1, [pc, #132]	; (800b6e4 <_malloc_r+0xac>)
 800b660:	680a      	ldr	r2, [r1, #0]
 800b662:	4614      	mov	r4, r2
 800b664:	b99c      	cbnz	r4, 800b68e <_malloc_r+0x56>
 800b666:	4f20      	ldr	r7, [pc, #128]	; (800b6e8 <_malloc_r+0xb0>)
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	b923      	cbnz	r3, 800b676 <_malloc_r+0x3e>
 800b66c:	4621      	mov	r1, r4
 800b66e:	4630      	mov	r0, r6
 800b670:	f000 f862 	bl	800b738 <_sbrk_r>
 800b674:	6038      	str	r0, [r7, #0]
 800b676:	4629      	mov	r1, r5
 800b678:	4630      	mov	r0, r6
 800b67a:	f000 f85d 	bl	800b738 <_sbrk_r>
 800b67e:	1c43      	adds	r3, r0, #1
 800b680:	d123      	bne.n	800b6ca <_malloc_r+0x92>
 800b682:	230c      	movs	r3, #12
 800b684:	6033      	str	r3, [r6, #0]
 800b686:	4630      	mov	r0, r6
 800b688:	f000 f86c 	bl	800b764 <__malloc_unlock>
 800b68c:	e7e3      	b.n	800b656 <_malloc_r+0x1e>
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	1b5b      	subs	r3, r3, r5
 800b692:	d417      	bmi.n	800b6c4 <_malloc_r+0x8c>
 800b694:	2b0b      	cmp	r3, #11
 800b696:	d903      	bls.n	800b6a0 <_malloc_r+0x68>
 800b698:	6023      	str	r3, [r4, #0]
 800b69a:	441c      	add	r4, r3
 800b69c:	6025      	str	r5, [r4, #0]
 800b69e:	e004      	b.n	800b6aa <_malloc_r+0x72>
 800b6a0:	6863      	ldr	r3, [r4, #4]
 800b6a2:	42a2      	cmp	r2, r4
 800b6a4:	bf0c      	ite	eq
 800b6a6:	600b      	streq	r3, [r1, #0]
 800b6a8:	6053      	strne	r3, [r2, #4]
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f000 f85a 	bl	800b764 <__malloc_unlock>
 800b6b0:	f104 000b 	add.w	r0, r4, #11
 800b6b4:	1d23      	adds	r3, r4, #4
 800b6b6:	f020 0007 	bic.w	r0, r0, #7
 800b6ba:	1ac2      	subs	r2, r0, r3
 800b6bc:	d0cc      	beq.n	800b658 <_malloc_r+0x20>
 800b6be:	1a1b      	subs	r3, r3, r0
 800b6c0:	50a3      	str	r3, [r4, r2]
 800b6c2:	e7c9      	b.n	800b658 <_malloc_r+0x20>
 800b6c4:	4622      	mov	r2, r4
 800b6c6:	6864      	ldr	r4, [r4, #4]
 800b6c8:	e7cc      	b.n	800b664 <_malloc_r+0x2c>
 800b6ca:	1cc4      	adds	r4, r0, #3
 800b6cc:	f024 0403 	bic.w	r4, r4, #3
 800b6d0:	42a0      	cmp	r0, r4
 800b6d2:	d0e3      	beq.n	800b69c <_malloc_r+0x64>
 800b6d4:	1a21      	subs	r1, r4, r0
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	f000 f82e 	bl	800b738 <_sbrk_r>
 800b6dc:	3001      	adds	r0, #1
 800b6de:	d1dd      	bne.n	800b69c <_malloc_r+0x64>
 800b6e0:	e7cf      	b.n	800b682 <_malloc_r+0x4a>
 800b6e2:	bf00      	nop
 800b6e4:	20000254 	.word	0x20000254
 800b6e8:	20000258 	.word	0x20000258

0800b6ec <_realloc_r>:
 800b6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ee:	4607      	mov	r7, r0
 800b6f0:	4614      	mov	r4, r2
 800b6f2:	460e      	mov	r6, r1
 800b6f4:	b921      	cbnz	r1, 800b700 <_realloc_r+0x14>
 800b6f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b6fa:	4611      	mov	r1, r2
 800b6fc:	f7ff bf9c 	b.w	800b638 <_malloc_r>
 800b700:	b922      	cbnz	r2, 800b70c <_realloc_r+0x20>
 800b702:	f7ff ff49 	bl	800b598 <_free_r>
 800b706:	4625      	mov	r5, r4
 800b708:	4628      	mov	r0, r5
 800b70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b70c:	f000 f830 	bl	800b770 <_malloc_usable_size_r>
 800b710:	42a0      	cmp	r0, r4
 800b712:	d20f      	bcs.n	800b734 <_realloc_r+0x48>
 800b714:	4621      	mov	r1, r4
 800b716:	4638      	mov	r0, r7
 800b718:	f7ff ff8e 	bl	800b638 <_malloc_r>
 800b71c:	4605      	mov	r5, r0
 800b71e:	2800      	cmp	r0, #0
 800b720:	d0f2      	beq.n	800b708 <_realloc_r+0x1c>
 800b722:	4631      	mov	r1, r6
 800b724:	4622      	mov	r2, r4
 800b726:	f7ff ff0f 	bl	800b548 <memcpy>
 800b72a:	4631      	mov	r1, r6
 800b72c:	4638      	mov	r0, r7
 800b72e:	f7ff ff33 	bl	800b598 <_free_r>
 800b732:	e7e9      	b.n	800b708 <_realloc_r+0x1c>
 800b734:	4635      	mov	r5, r6
 800b736:	e7e7      	b.n	800b708 <_realloc_r+0x1c>

0800b738 <_sbrk_r>:
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	4d06      	ldr	r5, [pc, #24]	; (800b754 <_sbrk_r+0x1c>)
 800b73c:	2300      	movs	r3, #0
 800b73e:	4604      	mov	r4, r0
 800b740:	4608      	mov	r0, r1
 800b742:	602b      	str	r3, [r5, #0]
 800b744:	f7fe fd6e 	bl	800a224 <_sbrk>
 800b748:	1c43      	adds	r3, r0, #1
 800b74a:	d102      	bne.n	800b752 <_sbrk_r+0x1a>
 800b74c:	682b      	ldr	r3, [r5, #0]
 800b74e:	b103      	cbz	r3, 800b752 <_sbrk_r+0x1a>
 800b750:	6023      	str	r3, [r4, #0]
 800b752:	bd38      	pop	{r3, r4, r5, pc}
 800b754:	2000141c 	.word	0x2000141c

0800b758 <__malloc_lock>:
 800b758:	4801      	ldr	r0, [pc, #4]	; (800b760 <__malloc_lock+0x8>)
 800b75a:	f000 b811 	b.w	800b780 <__retarget_lock_acquire_recursive>
 800b75e:	bf00      	nop
 800b760:	20001424 	.word	0x20001424

0800b764 <__malloc_unlock>:
 800b764:	4801      	ldr	r0, [pc, #4]	; (800b76c <__malloc_unlock+0x8>)
 800b766:	f000 b80c 	b.w	800b782 <__retarget_lock_release_recursive>
 800b76a:	bf00      	nop
 800b76c:	20001424 	.word	0x20001424

0800b770 <_malloc_usable_size_r>:
 800b770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b774:	1f18      	subs	r0, r3, #4
 800b776:	2b00      	cmp	r3, #0
 800b778:	bfbc      	itt	lt
 800b77a:	580b      	ldrlt	r3, [r1, r0]
 800b77c:	18c0      	addlt	r0, r0, r3
 800b77e:	4770      	bx	lr

0800b780 <__retarget_lock_acquire_recursive>:
 800b780:	4770      	bx	lr

0800b782 <__retarget_lock_release_recursive>:
 800b782:	4770      	bx	lr

0800b784 <_init>:
 800b784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b786:	bf00      	nop
 800b788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b78a:	bc08      	pop	{r3}
 800b78c:	469e      	mov	lr, r3
 800b78e:	4770      	bx	lr

0800b790 <_fini>:
 800b790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b792:	bf00      	nop
 800b794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b796:	bc08      	pop	{r3}
 800b798:	469e      	mov	lr, r3
 800b79a:	4770      	bx	lr
