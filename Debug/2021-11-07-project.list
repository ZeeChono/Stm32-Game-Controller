
2021-11-07-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007950  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007ad8  08007ad8  00017ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b68  08007b68  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  08007b68  08007b68  00017b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b70  08007b70  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b70  08007b70  00017b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b74  08007b74  00017b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08007b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e8  20000174  08007cec  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b5c  08007cec  00020b5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1d7  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000365c  00000000  00000000  0003b37b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  0003e9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  0003fc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f83  00000000  00000000  00040d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e1b  00000000  00000000  00069cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec8c6  00000000  00000000  0007fade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016c3a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf4  00000000  00000000  0016c3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000174 	.word	0x20000174
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007ac0 	.word	0x08007ac0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000178 	.word	0x20000178
 80001c4:	08007ac0 	.word	0x08007ac0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ca:	2003      	movs	r0, #3
 80004cc:	f000 f960 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004d0:	2000      	movs	r0, #0
 80004d2:	f000 f80d 	bl	80004f0 <HAL_InitTick>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d002      	beq.n	80004e2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004dc:	2301      	movs	r3, #1
 80004de:	71fb      	strb	r3, [r7, #7]
 80004e0:	e001      	b.n	80004e6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004e2:	f006 fbc5 	bl	8006c70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004e6:	79fb      	ldrb	r3, [r7, #7]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004f8:	2300      	movs	r3, #0
 80004fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <HAL_InitTick+0x6c>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d023      	beq.n	800054c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000504:	4b16      	ldr	r3, [pc, #88]	; (8000560 <HAL_InitTick+0x70>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b14      	ldr	r3, [pc, #80]	; (800055c <HAL_InitTick+0x6c>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	4619      	mov	r1, r3
 800050e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000512:	fbb3 f3f1 	udiv	r3, r3, r1
 8000516:	fbb2 f3f3 	udiv	r3, r2, r3
 800051a:	4618      	mov	r0, r3
 800051c:	f000 f96d 	bl	80007fa <HAL_SYSTICK_Config>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d10f      	bne.n	8000546 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b0f      	cmp	r3, #15
 800052a:	d809      	bhi.n	8000540 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800052c:	2200      	movs	r2, #0
 800052e:	6879      	ldr	r1, [r7, #4]
 8000530:	f04f 30ff 	mov.w	r0, #4294967295
 8000534:	f000 f937 	bl	80007a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000538:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <HAL_InitTick+0x74>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]
 800053e:	e007      	b.n	8000550 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000540:	2301      	movs	r3, #1
 8000542:	73fb      	strb	r3, [r7, #15]
 8000544:	e004      	b.n	8000550 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	73fb      	strb	r3, [r7, #15]
 800054a:	e001      	b.n	8000550 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800054c:	2301      	movs	r3, #1
 800054e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000550:	7bfb      	ldrb	r3, [r7, #15]
}
 8000552:	4618      	mov	r0, r3
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000004 	.word	0x20000004
 8000560:	20000110 	.word	0x20000110
 8000564:	20000000 	.word	0x20000000

08000568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <HAL_IncTick+0x20>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	461a      	mov	r2, r3
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x24>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4413      	add	r3, r2
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <HAL_IncTick+0x24>)
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000004 	.word	0x20000004
 800058c:	200001b0 	.word	0x200001b0

08000590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  return uwTick;
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <HAL_GetTick+0x14>)
 8000596:	681b      	ldr	r3, [r3, #0]
}
 8000598:	4618      	mov	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	200001b0 	.word	0x200001b0

080005a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b0:	f7ff ffee 	bl	8000590 <HAL_GetTick>
 80005b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c0:	d005      	beq.n	80005ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <HAL_Delay+0x44>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	461a      	mov	r2, r3
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005ce:	bf00      	nop
 80005d0:	f7ff ffde 	bl	8000590 <HAL_GetTick>
 80005d4:	4602      	mov	r2, r0
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d8f7      	bhi.n	80005d0 <HAL_Delay+0x28>
  {
  }
}
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff29 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff3e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff31 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffa2 	bl	800074c <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000814:	b480      	push	{r7}
 8000816:	b087      	sub	sp, #28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000822:	e17f      	b.n	8000b24 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	2101      	movs	r1, #1
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	fa01 f303 	lsl.w	r3, r1, r3
 8000830:	4013      	ands	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2b00      	cmp	r3, #0
 8000838:	f000 8171 	beq.w	8000b1e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d00b      	beq.n	800085c <HAL_GPIO_Init+0x48>
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	2b02      	cmp	r3, #2
 800084a:	d007      	beq.n	800085c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000850:	2b11      	cmp	r3, #17
 8000852:	d003      	beq.n	800085c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	2b12      	cmp	r3, #18
 800085a:	d130      	bne.n	80008be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	2203      	movs	r2, #3
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	4013      	ands	r3, r2
 8000872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	68da      	ldr	r2, [r3, #12]
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	4313      	orrs	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000892:	2201      	movs	r2, #1
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43db      	mvns	r3, r3
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	4013      	ands	r3, r2
 80008a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	091b      	lsrs	r3, r3, #4
 80008a8:	f003 0201 	and.w	r2, r3, #1
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 0303 	and.w	r3, r3, #3
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d118      	bne.n	80008fc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008d0:	2201      	movs	r2, #1
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4013      	ands	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	08db      	lsrs	r3, r3, #3
 80008e6:	f003 0201 	and.w	r2, r3, #1
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	2203      	movs	r2, #3
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	4013      	ands	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	689a      	ldr	r2, [r3, #8]
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	4313      	orrs	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2b02      	cmp	r3, #2
 8000932:	d003      	beq.n	800093c <HAL_GPIO_Init+0x128>
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2b12      	cmp	r3, #18
 800093a:	d123      	bne.n	8000984 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	08da      	lsrs	r2, r3, #3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3208      	adds	r2, #8
 8000944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000948:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	f003 0307 	and.w	r3, r3, #7
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	220f      	movs	r2, #15
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	691a      	ldr	r2, [r3, #16]
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4313      	orrs	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	08da      	lsrs	r2, r3, #3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3208      	adds	r2, #8
 800097e:	6939      	ldr	r1, [r7, #16]
 8000980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	2203      	movs	r2, #3
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 0203 	and.w	r2, r3, #3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	f000 80ac 	beq.w	8000b1e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b5f      	ldr	r3, [pc, #380]	; (8000b44 <HAL_GPIO_Init+0x330>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ca:	4a5e      	ldr	r2, [pc, #376]	; (8000b44 <HAL_GPIO_Init+0x330>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6613      	str	r3, [r2, #96]	; 0x60
 80009d2:	4b5c      	ldr	r3, [pc, #368]	; (8000b44 <HAL_GPIO_Init+0x330>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009de:	4a5a      	ldr	r2, [pc, #360]	; (8000b48 <HAL_GPIO_Init+0x334>)
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	3302      	adds	r3, #2
 80009e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	f003 0303 	and.w	r3, r3, #3
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	220f      	movs	r2, #15
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43db      	mvns	r3, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a08:	d025      	beq.n	8000a56 <HAL_GPIO_Init+0x242>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4f      	ldr	r2, [pc, #316]	; (8000b4c <HAL_GPIO_Init+0x338>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d01f      	beq.n	8000a52 <HAL_GPIO_Init+0x23e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4e      	ldr	r2, [pc, #312]	; (8000b50 <HAL_GPIO_Init+0x33c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d019      	beq.n	8000a4e <HAL_GPIO_Init+0x23a>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4d      	ldr	r2, [pc, #308]	; (8000b54 <HAL_GPIO_Init+0x340>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d013      	beq.n	8000a4a <HAL_GPIO_Init+0x236>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a4c      	ldr	r2, [pc, #304]	; (8000b58 <HAL_GPIO_Init+0x344>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d00d      	beq.n	8000a46 <HAL_GPIO_Init+0x232>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a4b      	ldr	r2, [pc, #300]	; (8000b5c <HAL_GPIO_Init+0x348>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d007      	beq.n	8000a42 <HAL_GPIO_Init+0x22e>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a4a      	ldr	r2, [pc, #296]	; (8000b60 <HAL_GPIO_Init+0x34c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d101      	bne.n	8000a3e <HAL_GPIO_Init+0x22a>
 8000a3a:	2306      	movs	r3, #6
 8000a3c:	e00c      	b.n	8000a58 <HAL_GPIO_Init+0x244>
 8000a3e:	2307      	movs	r3, #7
 8000a40:	e00a      	b.n	8000a58 <HAL_GPIO_Init+0x244>
 8000a42:	2305      	movs	r3, #5
 8000a44:	e008      	b.n	8000a58 <HAL_GPIO_Init+0x244>
 8000a46:	2304      	movs	r3, #4
 8000a48:	e006      	b.n	8000a58 <HAL_GPIO_Init+0x244>
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	e004      	b.n	8000a58 <HAL_GPIO_Init+0x244>
 8000a4e:	2302      	movs	r3, #2
 8000a50:	e002      	b.n	8000a58 <HAL_GPIO_Init+0x244>
 8000a52:	2301      	movs	r3, #1
 8000a54:	e000      	b.n	8000a58 <HAL_GPIO_Init+0x244>
 8000a56:	2300      	movs	r3, #0
 8000a58:	697a      	ldr	r2, [r7, #20]
 8000a5a:	f002 0203 	and.w	r2, r2, #3
 8000a5e:	0092      	lsls	r2, r2, #2
 8000a60:	4093      	lsls	r3, r2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a68:	4937      	ldr	r1, [pc, #220]	; (8000b48 <HAL_GPIO_Init+0x334>)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	089b      	lsrs	r3, r3, #2
 8000a6e:	3302      	adds	r3, #2
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a76:	4b3b      	ldr	r3, [pc, #236]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a9a:	4a32      	ldr	r2, [pc, #200]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000aa0:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ac4:	4a27      	ldr	r2, [pc, #156]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000aca:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000aee:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b18:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f47f ae78 	bne.w	8000824 <HAL_GPIO_Init+0x10>
  }
}
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
 8000b38:	371c      	adds	r7, #28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010000 	.word	0x40010000
 8000b4c:	48000400 	.word	0x48000400
 8000b50:	48000800 	.word	0x48000800
 8000b54:	48000c00 	.word	0x48000c00
 8000b58:	48001000 	.word	0x48001000
 8000b5c:	48001400 	.word	0x48001400
 8000b60:	48001800 	.word	0x48001800
 8000b64:	40010400 	.word	0x40010400

08000b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
 8000b74:	4613      	mov	r3, r2
 8000b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b78:	787b      	ldrb	r3, [r7, #1]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b84:	e002      	b.n	8000b8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b86:	887a      	ldrh	r2, [r7, #2]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000baa:	887a      	ldrh	r2, [r7, #2]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	041a      	lsls	r2, r3, #16
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	43d9      	mvns	r1, r3
 8000bb6:	887b      	ldrh	r3, [r7, #2]
 8000bb8:	400b      	ands	r3, r1
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	619a      	str	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bd8:	695a      	ldr	r2, [r3, #20]
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d006      	beq.n	8000bf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f006 f818 	bl	8006c20 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40010400 	.word	0x40010400

08000bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e081      	b.n	8000d12 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d106      	bne.n	8000c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f006 f848 	bl	8006cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2224      	movs	r2, #36	; 0x24
 8000c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f022 0201 	bic.w	r2, r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d107      	bne.n	8000c76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	e006      	b.n	8000c84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000c82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d104      	bne.n	8000c96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	6812      	ldr	r2, [r2, #0]
 8000ca0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ca8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	691a      	ldr	r2, [r3, #16]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	ea42 0103 	orr.w	r1, r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	021a      	lsls	r2, r3, #8
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	69d9      	ldr	r1, [r3, #28]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a1a      	ldr	r2, [r3, #32]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f042 0201 	orr.w	r2, r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2220      	movs	r2, #32
 8000cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b20      	cmp	r3, #32
 8000d2e:	d138      	bne.n	8000da2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d101      	bne.n	8000d3e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e032      	b.n	8000da4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2201      	movs	r2, #1
 8000d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2224      	movs	r2, #36	; 0x24
 8000d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0201 	bic.w	r2, r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d6c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	6819      	ldr	r1, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f042 0201 	orr.w	r2, r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2220      	movs	r2, #32
 8000d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000da2:	2302      	movs	r3, #2
  }
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b20      	cmp	r3, #32
 8000dc4:	d139      	bne.n	8000e3a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d101      	bne.n	8000dd4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	e033      	b.n	8000e3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2224      	movs	r2, #36	; 0x24
 8000de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 0201 	bic.w	r2, r2, #1
 8000df2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e02:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f042 0201 	orr.w	r2, r2, #1
 8000e24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2220      	movs	r2, #32
 8000e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000e3a:	2302      	movs	r3, #2
  }
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4a:	b08f      	sub	sp, #60	; 0x3c
 8000e4c:	af0a      	add	r7, sp, #40	; 0x28
 8000e4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e116      	b.n	8001088 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d106      	bne.n	8000e7a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f006 f87b 	bl	8006f70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d102      	bne.n	8000e94 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 f892 	bl	8003fc2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	603b      	str	r3, [r7, #0]
 8000ea4:	687e      	ldr	r6, [r7, #4]
 8000ea6:	466d      	mov	r5, sp
 8000ea8:	f106 0410 	add.w	r4, r6, #16
 8000eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000eb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ebc:	1d33      	adds	r3, r6, #4
 8000ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ec0:	6838      	ldr	r0, [r7, #0]
 8000ec2:	f002 ffa4 	bl	8003e0e <USB_CoreInit>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d005      	beq.n	8000ed8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2202      	movs	r2, #2
 8000ed0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e0d7      	b.n	8001088 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 f880 	bl	8003fe4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	e04a      	b.n	8000f80 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000eea:	7bfa      	ldrb	r2, [r7, #15]
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	1a9b      	subs	r3, r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	333d      	adds	r3, #61	; 0x3d
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000efe:	7bfa      	ldrb	r2, [r7, #15]
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	1a9b      	subs	r3, r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	333c      	adds	r3, #60	; 0x3c
 8000f0e:	7bfa      	ldrb	r2, [r7, #15]
 8000f10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f12:	7bfa      	ldrb	r2, [r7, #15]
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	b298      	uxth	r0, r3
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	440b      	add	r3, r1
 8000f24:	3342      	adds	r3, #66	; 0x42
 8000f26:	4602      	mov	r2, r0
 8000f28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f2a:	7bfa      	ldrb	r2, [r7, #15]
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	1a9b      	subs	r3, r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	440b      	add	r3, r1
 8000f38:	333f      	adds	r3, #63	; 0x3f
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	4613      	mov	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	1a9b      	subs	r3, r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	3344      	adds	r3, #68	; 0x44
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f52:	7bfa      	ldrb	r2, [r7, #15]
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	4613      	mov	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	1a9b      	subs	r3, r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	440b      	add	r3, r1
 8000f60:	3348      	adds	r3, #72	; 0x48
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f66:	7bfa      	ldrb	r2, [r7, #15]
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	1a9b      	subs	r3, r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	3350      	adds	r3, #80	; 0x50
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	7bfa      	ldrb	r2, [r7, #15]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d3af      	bcc.n	8000eea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]
 8000f8e:	e044      	b.n	800101a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f90:	7bfa      	ldrb	r2, [r7, #15]
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4613      	mov	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	1a9b      	subs	r3, r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	1a9b      	subs	r3, r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	1a9b      	subs	r3, r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	440b      	add	r3, r1
 8000fca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	1a9b      	subs	r3, r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	1a9b      	subs	r3, r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ffe:	7bfa      	ldrb	r2, [r7, #15]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	1a9b      	subs	r3, r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	440b      	add	r3, r1
 800100c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	3301      	adds	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	d3b5      	bcc.n	8000f90 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	687e      	ldr	r6, [r7, #4]
 800102c:	466d      	mov	r5, sp
 800102e:	f106 0410 	add.w	r4, r6, #16
 8001032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800103e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001042:	1d33      	adds	r3, r6, #4
 8001044:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001046:	6838      	ldr	r0, [r7, #0]
 8001048:	f002 fff6 	bl	8004038 <USB_DevInit>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d005      	beq.n	800105e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2202      	movs	r2, #2
 8001056:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e014      	b.n	8001088 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	2b01      	cmp	r3, #1
 8001074:	d102      	bne.n	800107c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 ff4a 	bl	8001f10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f003 ff78 	bl	8004f76 <USB_DevDisconnect>

  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001090 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d101      	bne.n	80010ac <HAL_PCD_Start+0x1c>
 80010a8:	2302      	movs	r3, #2
 80010aa:	e01c      	b.n	80010e6 <HAL_PCD_Start+0x56>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d105      	bne.n	80010c8 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 ff67 	bl	8003fa0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 ff2c 	bl	8004f34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010ee:	b590      	push	{r4, r7, lr}
 80010f0:	b08d      	sub	sp, #52	; 0x34
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f003 ffea 	bl	80050de <USB_GetMode>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	f040 838f 	bne.w	8001830 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f003 ff4e 	bl	8004fb8 <USB_ReadInterrupts>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	f000 8385 	beq.w	800182e <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f003 ff45 	bl	8004fb8 <USB_ReadInterrupts>
 800112e:	4603      	mov	r3, r0
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b02      	cmp	r3, #2
 8001136:	d107      	bne.n	8001148 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	695a      	ldr	r2, [r3, #20]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f002 0202 	and.w	r2, r2, #2
 8001146:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f003 ff33 	bl	8004fb8 <USB_ReadInterrupts>
 8001152:	4603      	mov	r3, r0
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	2b10      	cmp	r3, #16
 800115a:	d161      	bne.n	8001220 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	699a      	ldr	r2, [r3, #24]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0210 	bic.w	r2, r2, #16
 800116a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800116c:	6a3b      	ldr	r3, [r7, #32]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	f003 020f 	and.w	r2, r3, #15
 8001178:	4613      	mov	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	3304      	adds	r3, #4
 800118a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	0c5b      	lsrs	r3, r3, #17
 8001190:	f003 030f 	and.w	r3, r3, #15
 8001194:	2b02      	cmp	r3, #2
 8001196:	d124      	bne.n	80011e2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800119e:	4013      	ands	r3, r2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d035      	beq.n	8001210 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	6a38      	ldr	r0, [r7, #32]
 80011b8:	f003 fd99 	bl	8004cee <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011c8:	441a      	add	r2, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	699a      	ldr	r2, [r3, #24]
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011da:	441a      	add	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	619a      	str	r2, [r3, #24]
 80011e0:	e016      	b.n	8001210 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	0c5b      	lsrs	r3, r3, #17
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d110      	bne.n	8001210 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80011f4:	2208      	movs	r2, #8
 80011f6:	4619      	mov	r1, r3
 80011f8:	6a38      	ldr	r0, [r7, #32]
 80011fa:	f003 fd78 	bl	8004cee <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	699a      	ldr	r2, [r3, #24]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800120a:	441a      	add	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	699a      	ldr	r2, [r3, #24]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0210 	orr.w	r2, r2, #16
 800121e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f003 fec7 	bl	8004fb8 <USB_ReadInterrupts>
 800122a:	4603      	mov	r3, r0
 800122c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001230:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001234:	d16e      	bne.n	8001314 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f003 fecd 	bl	8004fde <USB_ReadDevAllOutEpInterrupt>
 8001244:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001246:	e062      	b.n	800130e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d057      	beq.n	8001302 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f003 fef2 	bl	8005046 <USB_ReadDevOutEPInterrupt>
 8001262:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00c      	beq.n	8001288 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	015a      	lsls	r2, r3, #5
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	4413      	add	r3, r2
 8001276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800127a:	461a      	mov	r2, r3
 800127c:	2301      	movs	r3, #1
 800127e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001280:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 fd6a 	bl	8001d5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00c      	beq.n	80012ac <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	015a      	lsls	r2, r3, #5
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	4413      	add	r3, r2
 800129a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800129e:	461a      	mov	r2, r3
 80012a0:	2308      	movs	r3, #8
 80012a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 fda6 	bl	8001df8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	f003 0310 	and.w	r3, r3, #16
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d008      	beq.n	80012c8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	015a      	lsls	r2, r3, #5
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	4413      	add	r3, r2
 80012be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012c2:	461a      	mov	r2, r3
 80012c4:	2310      	movs	r3, #16
 80012c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	f003 0320 	and.w	r3, r3, #32
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d008      	beq.n	80012e4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	015a      	lsls	r2, r3, #5
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	4413      	add	r3, r2
 80012da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012de:	461a      	mov	r2, r3
 80012e0:	2320      	movs	r3, #32
 80012e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d009      	beq.n	8001302 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	015a      	lsls	r2, r3, #5
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	4413      	add	r3, r2
 80012f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012fa:	461a      	mov	r2, r3
 80012fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001300:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	3301      	adds	r3, #1
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130a:	085b      	lsrs	r3, r3, #1
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800130e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001310:	2b00      	cmp	r3, #0
 8001312:	d199      	bne.n	8001248 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fe4d 	bl	8004fb8 <USB_ReadInterrupts>
 800131e:	4603      	mov	r3, r0
 8001320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001324:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001328:	f040 8087 	bne.w	800143a <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f003 fe6e 	bl	8005012 <USB_ReadDevAllInEpInterrupt>
 8001336:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800133c:	e07a      	b.n	8001434 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	d06f      	beq.n	8001428 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f003 fe95 	bl	8005082 <USB_ReadDevInEPInterrupt>
 8001358:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d020      	beq.n	80013a6 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	2201      	movs	r2, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	43db      	mvns	r3, r3
 800137e:	69f9      	ldr	r1, [r7, #28]
 8001380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001384:	4013      	ands	r3, r2
 8001386:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	015a      	lsls	r2, r3, #5
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	4413      	add	r3, r2
 8001390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001394:	461a      	mov	r2, r3
 8001396:	2301      	movs	r3, #1
 8001398:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4619      	mov	r1, r3
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f005 fea4 	bl	80070ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	f003 0308 	and.w	r3, r3, #8
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	015a      	lsls	r2, r3, #5
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	4413      	add	r3, r2
 80013b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013bc:	461a      	mov	r2, r3
 80013be:	2308      	movs	r3, #8
 80013c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d008      	beq.n	80013de <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	015a      	lsls	r2, r3, #5
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	4413      	add	r3, r2
 80013d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013d8:	461a      	mov	r2, r3
 80013da:	2310      	movs	r3, #16
 80013dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d008      	beq.n	80013fa <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	015a      	lsls	r2, r3, #5
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	4413      	add	r3, r2
 80013f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013f4:	461a      	mov	r2, r3
 80013f6:	2340      	movs	r3, #64	; 0x40
 80013f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d008      	beq.n	8001416 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	015a      	lsls	r2, r3, #5
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	4413      	add	r3, r2
 800140c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001410:	461a      	mov	r2, r3
 8001412:	2302      	movs	r3, #2
 8001414:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 fc11 	bl	8001c4a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	3301      	adds	r3, #1
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800142e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001430:	085b      	lsrs	r3, r3, #1
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001436:	2b00      	cmp	r3, #0
 8001438:	d181      	bne.n	800133e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f003 fdba 	bl	8004fb8 <USB_ReadInterrupts>
 8001444:	4603      	mov	r3, r0
 8001446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800144a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800144e:	d122      	bne.n	8001496 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800146a:	2b01      	cmp	r3, #1
 800146c:	d108      	bne.n	8001480 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001476:	2100      	movs	r1, #0
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f006 f93d 	bl	80076f8 <HAL_PCDEx_LPM_Callback>
 800147e:	e002      	b.n	8001486 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f005 fea1 	bl	80071c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001494:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f003 fd8c 	bl	8004fb8 <USB_ReadInterrupts>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014aa:	d112      	bne.n	80014d2 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d102      	bne.n	80014c2 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f005 fe5d 	bl	800717c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80014d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f003 fd6e 	bl	8004fb8 <USB_ReadInterrupts>
 80014dc:	4603      	mov	r3, r0
 80014de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80014e6:	d121      	bne.n	800152c <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	695a      	ldr	r2, [r3, #20]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80014f6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d111      	bne.n	8001526 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	f003 020f 	and.w	r2, r3, #15
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800151c:	2101      	movs	r1, #1
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f006 f8ea 	bl	80076f8 <HAL_PCDEx_LPM_Callback>
 8001524:	e002      	b.n	800152c <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f005 fe28 	bl	800717c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f003 fd41 	bl	8004fb8 <USB_ReadInterrupts>
 8001536:	4603      	mov	r3, r0
 8001538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800153c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001540:	f040 80c5 	bne.w	80016ce <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	69fa      	ldr	r2, [r7, #28]
 800154e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2110      	movs	r1, #16
 800155e:	4618      	mov	r0, r3
 8001560:	f002 feb6 	bl	80042d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001568:	e056      	b.n	8001618 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156c:	015a      	lsls	r2, r3, #5
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	4413      	add	r3, r2
 8001572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001576:	461a      	mov	r2, r3
 8001578:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800157c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800157e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001580:	015a      	lsls	r2, r3, #5
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	4413      	add	r3, r2
 8001586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800158e:	0151      	lsls	r1, r2, #5
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	440a      	add	r2, r1
 8001594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001598:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800159c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	015a      	lsls	r2, r3, #5
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ae:	0151      	lsls	r1, r2, #5
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	440a      	add	r2, r1
 80015b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80015be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c0:	015a      	lsls	r2, r3, #5
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ca:	461a      	mov	r2, r3
 80015cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015d0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80015d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d4:	015a      	lsls	r2, r3, #5
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	4413      	add	r3, r2
 80015da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015e2:	0151      	lsls	r1, r2, #5
 80015e4:	69fa      	ldr	r2, [r7, #28]
 80015e6:	440a      	add	r2, r1
 80015e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80015ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80015f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f4:	015a      	lsls	r2, r3, #5
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	4413      	add	r3, r2
 80015fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001602:	0151      	lsls	r1, r2, #5
 8001604:	69fa      	ldr	r2, [r7, #28]
 8001606:	440a      	add	r2, r1
 8001608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800160c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001610:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	3301      	adds	r3, #1
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800161e:	429a      	cmp	r2, r3
 8001620:	d3a3      	bcc.n	800156a <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001630:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001634:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	2b00      	cmp	r3, #0
 800163c:	d016      	beq.n	800166c <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001648:	69fa      	ldr	r2, [r7, #28]
 800164a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800164e:	f043 030b 	orr.w	r3, r3, #11
 8001652:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001664:	f043 030b 	orr.w	r3, r3, #11
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	e015      	b.n	8001698 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800167a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800167e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001682:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	69fa      	ldr	r2, [r7, #28]
 800168e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001692:	f043 030b 	orr.w	r3, r3, #11
 8001696:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016aa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4610      	mov	r0, r2
 80016ba:	f003 fd41 	bl	8005140 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 fc70 	bl	8004fb8 <USB_ReadInterrupts>
 80016d8:	4603      	mov	r3, r0
 80016da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016e2:	d124      	bne.n	800172e <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 fd06 	bl	80050fa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f002 fe4d 	bl	8004392 <USB_GetDevSpeed>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681c      	ldr	r4, [r3, #0]
 8001704:	f001 f9f0 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8001708:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800170e:	b2db      	uxtb	r3, r3
 8001710:	461a      	mov	r2, r3
 8001712:	4620      	mov	r0, r4
 8001714:	f002 fba8 	bl	8003e68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f005 fd10 	bl	800713e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800172c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f003 fc40 	bl	8004fb8 <USB_ReadInterrupts>
 8001738:	4603      	mov	r3, r0
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b08      	cmp	r3, #8
 8001740:	d10a      	bne.n	8001758 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f005 fced 	bl	8007122 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f002 0208 	and.w	r2, r2, #8
 8001756:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f003 fc2b 	bl	8004fb8 <USB_ReadInterrupts>
 8001762:	4603      	mov	r3, r0
 8001764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800176c:	d10f      	bne.n	800178e <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	b2db      	uxtb	r3, r3
 8001776:	4619      	mov	r1, r3
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f005 fd5f 	bl	800723c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695a      	ldr	r2, [r3, #20]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800178c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fc10 	bl	8004fb8 <USB_ReadInterrupts>
 8001798:	4603      	mov	r3, r0
 800179a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017a2:	d10f      	bne.n	80017c4 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f005 fd32 	bl	8007218 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	695a      	ldr	r2, [r3, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80017c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 fbf5 	bl	8004fb8 <USB_ReadInterrupts>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80017d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d8:	d10a      	bne.n	80017f0 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f005 fd40 	bl	8007260 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80017ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 fbdf 	bl	8004fb8 <USB_ReadInterrupts>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b04      	cmp	r3, #4
 8001802:	d115      	bne.n	8001830 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f005 fd30 	bl	800727c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6859      	ldr	r1, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	430a      	orrs	r2, r1
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	e000      	b.n	8001830 <HAL_PCD_IRQHandler+0x742>
      return;
 800182e:	bf00      	nop
    }
  }
}
 8001830:	3734      	adds	r7, #52	; 0x34
 8001832:	46bd      	mov	sp, r7
 8001834:	bd90      	pop	{r4, r7, pc}

08001836 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	460b      	mov	r3, r1
 8001840:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_PCD_SetAddress+0x1a>
 800184c:	2302      	movs	r3, #2
 800184e:	e013      	b.n	8001878 <HAL_PCD_SetAddress+0x42>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	78fa      	ldrb	r2, [r7, #3]
 800185c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	78fa      	ldrb	r2, [r7, #3]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f003 fb3d 	bl	8004ee8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	4608      	mov	r0, r1
 800188a:	4611      	mov	r1, r2
 800188c:	461a      	mov	r2, r3
 800188e:	4603      	mov	r3, r0
 8001890:	70fb      	strb	r3, [r7, #3]
 8001892:	460b      	mov	r3, r1
 8001894:	803b      	strh	r3, [r7, #0]
 8001896:	4613      	mov	r3, r2
 8001898:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800189e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	da0f      	bge.n	80018c6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	f003 020f 	and.w	r2, r3, #15
 80018ac:	4613      	mov	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	3338      	adds	r3, #56	; 0x38
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	3304      	adds	r3, #4
 80018bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2201      	movs	r2, #1
 80018c2:	705a      	strb	r2, [r3, #1]
 80018c4:	e00f      	b.n	80018e6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	f003 020f 	and.w	r2, r3, #15
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	3304      	adds	r3, #4
 80018de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018f2:	883a      	ldrh	r2, [r7, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	78ba      	ldrb	r2, [r7, #2]
 80018fc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	785b      	ldrb	r3, [r3, #1]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b29a      	uxth	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001910:	78bb      	ldrb	r3, [r7, #2]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d102      	bne.n	800191c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_PCD_EP_Open+0xaa>
 8001926:	2302      	movs	r3, #2
 8001928:	e00e      	b.n	8001948 <HAL_PCD_EP_Open+0xc8>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68f9      	ldr	r1, [r7, #12]
 8001938:	4618      	mov	r0, r3
 800193a:	f002 fd49 	bl	80043d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001946:	7afb      	ldrb	r3, [r7, #11]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800195c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001960:	2b00      	cmp	r3, #0
 8001962:	da0f      	bge.n	8001984 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	f003 020f 	and.w	r2, r3, #15
 800196a:	4613      	mov	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	1a9b      	subs	r3, r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	3338      	adds	r3, #56	; 0x38
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	4413      	add	r3, r2
 8001978:	3304      	adds	r3, #4
 800197a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2201      	movs	r2, #1
 8001980:	705a      	strb	r2, [r3, #1]
 8001982:	e00f      	b.n	80019a4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	f003 020f 	and.w	r2, r3, #15
 800198a:	4613      	mov	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	1a9b      	subs	r3, r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	3304      	adds	r3, #4
 800199c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d101      	bne.n	80019be <HAL_PCD_EP_Close+0x6e>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e00e      	b.n	80019dc <HAL_PCD_EP_Close+0x8c>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68f9      	ldr	r1, [r7, #12]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 fd87 	bl	80044e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	460b      	mov	r3, r1
 80019f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019f4:	7afb      	ldrb	r3, [r7, #11]
 80019f6:	f003 020f 	and.w	r2, r3, #15
 80019fa:	4613      	mov	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	4413      	add	r3, r2
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2200      	movs	r2, #0
 8001a24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a26:	7afb      	ldrb	r3, [r7, #11]
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a32:	7afb      	ldrb	r3, [r7, #11]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d106      	bne.n	8001a4a <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6979      	ldr	r1, [r7, #20]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f003 f804 	bl	8004a50 <USB_EP0StartXfer>
 8001a48:	e005      	b.n	8001a56 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6979      	ldr	r1, [r7, #20]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 fe21 	bl	8004698 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a70:	7afb      	ldrb	r3, [r7, #11]
 8001a72:	f003 020f 	and.w	r2, r3, #15
 8001a76:	4613      	mov	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	1a9b      	subs	r3, r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	3338      	adds	r3, #56	; 0x38
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	3304      	adds	r3, #4
 8001a86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa0:	7afb      	ldrb	r3, [r7, #11]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001aac:	7afb      	ldrb	r3, [r7, #11]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d106      	bne.n	8001ac4 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6979      	ldr	r1, [r7, #20]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 ffc7 	bl	8004a50 <USB_EP0StartXfer>
 8001ac2:	e005      	b.n	8001ad0 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6979      	ldr	r1, [r7, #20]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f002 fde4 	bl	8004698 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b084      	sub	sp, #16
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	f003 020f 	and.w	r2, r3, #15
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d901      	bls.n	8001af8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e04e      	b.n	8001b96 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	da0f      	bge.n	8001b20 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	f003 020f 	and.w	r2, r3, #15
 8001b06:	4613      	mov	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	1a9b      	subs	r3, r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	3338      	adds	r3, #56	; 0x38
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	3304      	adds	r3, #4
 8001b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	705a      	strb	r2, [r3, #1]
 8001b1e:	e00d      	b.n	8001b3c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b20:	78fa      	ldrb	r2, [r7, #3]
 8001b22:	4613      	mov	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	3304      	adds	r3, #4
 8001b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_PCD_EP_SetStall+0x82>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e01c      	b.n	8001b96 <HAL_PCD_EP_SetStall+0xbc>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 f8e8 	bl	8004d40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d108      	bne.n	8001b8c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b84:	4619      	mov	r1, r3
 8001b86:	4610      	mov	r0, r2
 8001b88:	f003 fada 	bl	8005140 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	f003 020f 	and.w	r2, r3, #15
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d901      	bls.n	8001bbc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e042      	b.n	8001c42 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	da0f      	bge.n	8001be4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	f003 020f 	and.w	r2, r3, #15
 8001bca:	4613      	mov	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	3338      	adds	r3, #56	; 0x38
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3304      	adds	r3, #4
 8001bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	705a      	strb	r2, [r3, #1]
 8001be2:	e00f      	b.n	8001c04 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	f003 020f 	and.w	r2, r3, #15
 8001bea:	4613      	mov	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_PCD_EP_ClrStall+0x86>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e00e      	b.n	8001c42 <HAL_PCD_EP_ClrStall+0xa4>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68f9      	ldr	r1, [r7, #12]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 f8f2 	bl	8004e1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b088      	sub	sp, #32
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	4613      	mov	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	3338      	adds	r3, #56	; 0x38
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3304      	adds	r3, #4
 8001c70:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	699a      	ldr	r2, [r3, #24]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d901      	bls.n	8001c82 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e067      	b.n	8001d52 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d902      	bls.n	8001c9e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3303      	adds	r3, #3
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ca6:	e026      	b.n	8001cf6 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	695a      	ldr	r2, [r3, #20]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d902      	bls.n	8001cc4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	3303      	adds	r3, #3
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	68d9      	ldr	r1, [r3, #12]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	6978      	ldr	r0, [r7, #20]
 8001cda:	f002 ffd7 	bl	8004c8c <USB_WritePacket>

    ep->xfer_buff  += len;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	441a      	add	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	699a      	ldr	r2, [r3, #24]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	441a      	add	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d809      	bhi.n	8001d20 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	699a      	ldr	r2, [r3, #24]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d203      	bcs.n	8001d20 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1c3      	bne.n	8001ca8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	695a      	ldr	r2, [r3, #20]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d811      	bhi.n	8001d50 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	2201      	movs	r2, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	6939      	ldr	r1, [r7, #16]
 8001d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3720      	adds	r7, #32
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	333c      	adds	r3, #60	; 0x3c
 8001d74:	3304      	adds	r3, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	015a      	lsls	r2, r3, #5
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4413      	add	r3, r2
 8001d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4a19      	ldr	r2, [pc, #100]	; (8001df4 <PCD_EP_OutXfrComplete_int+0x98>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d124      	bne.n	8001ddc <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00a      	beq.n	8001db2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	015a      	lsls	r2, r3, #5
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001da8:	461a      	mov	r2, r3
 8001daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dae:	6093      	str	r3, [r2, #8]
 8001db0:	e01a      	b.n	8001de8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f003 0320 	and.w	r3, r3, #32
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	015a      	lsls	r2, r3, #5
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2320      	movs	r3, #32
 8001dcc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f005 f96f 	bl	80070b8 <HAL_PCD_DataOutStageCallback>
 8001dda:	e005      	b.n	8001de8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	4619      	mov	r1, r3
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f005 f968 	bl	80070b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	4f54310a 	.word	0x4f54310a

08001df8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	333c      	adds	r3, #60	; 0x3c
 8001e10:	3304      	adds	r3, #4
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <PCD_EP_OutSetupPacket_int+0x64>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d90e      	bls.n	8001e4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d009      	beq.n	8001e4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e44:	461a      	mov	r2, r3
 8001e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f005 f921 	bl	8007094 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	4f54300a 	.word	0x4f54300a

08001e60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d107      	bne.n	8001e8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001e7e:	883b      	ldrh	r3, [r7, #0]
 8001e80:	0419      	lsls	r1, r3, #16
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
 8001e8c:	e028      	b.n	8001ee0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	0c1b      	lsrs	r3, r3, #16
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	4413      	add	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	e00d      	b.n	8001ebe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	3340      	adds	r3, #64	; 0x40
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	0c1b      	lsrs	r3, r3, #16
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d3ec      	bcc.n	8001ea2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001ec8:	883b      	ldrh	r3, [r7, #0]
 8001eca:	0418      	lsls	r0, r3, #16
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6819      	ldr	r1, [r3, #0]
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	4302      	orrs	r2, r0
 8001ed8:	3340      	adds	r3, #64	; 0x40
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	887a      	ldrh	r2, [r7, #2]
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f42:	f043 0303 	orr.w	r3, r3, #3
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40007000 	.word	0x40007000

08001f74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f82:	d130      	bne.n	8001fe6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f84:	4b23      	ldr	r3, [pc, #140]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f90:	d038      	beq.n	8002004 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f9a:	4a1e      	ldr	r2, [pc, #120]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2232      	movs	r2, #50	; 0x32
 8001fa8:	fb02 f303 	mul.w	r3, r2, r3
 8001fac:	4a1b      	ldr	r2, [pc, #108]	; (800201c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	0c9b      	lsrs	r3, r3, #18
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fb8:	e002      	b.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fcc:	d102      	bne.n	8001fd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1f2      	bne.n	8001fba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe0:	d110      	bne.n	8002004 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e00f      	b.n	8002006 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff2:	d007      	beq.n	8002004 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ffc:	4a05      	ldr	r2, [pc, #20]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002002:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40007000 	.word	0x40007000
 8002018:	20000110 	.word	0x20000110
 800201c:	431bde83 	.word	0x431bde83

08002020 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <HAL_PWREx_EnableVddUSB+0x1c>)
 800202a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800202e:	6053      	str	r3, [r2, #4]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40007000 	.word	0x40007000

08002040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e3d4      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002052:	4ba1      	ldr	r3, [pc, #644]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800205c:	4b9e      	ldr	r3, [pc, #632]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80e4 	beq.w	800223c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <HAL_RCC_OscConfig+0x4a>
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	2b0c      	cmp	r3, #12
 800207e:	f040 808b 	bne.w	8002198 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2b01      	cmp	r3, #1
 8002086:	f040 8087 	bne.w	8002198 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800208a:	4b93      	ldr	r3, [pc, #588]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_RCC_OscConfig+0x62>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e3ac      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1a      	ldr	r2, [r3, #32]
 80020a6:	4b8c      	ldr	r3, [pc, #560]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d004      	beq.n	80020bc <HAL_RCC_OscConfig+0x7c>
 80020b2:	4b89      	ldr	r3, [pc, #548]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ba:	e005      	b.n	80020c8 <HAL_RCC_OscConfig+0x88>
 80020bc:	4b86      	ldr	r3, [pc, #536]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80020be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d223      	bcs.n	8002114 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fd41 	bl	8002b58 <RCC_SetFlashLatencyFromMSIRange>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e38d      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e0:	4b7d      	ldr	r3, [pc, #500]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a7c      	ldr	r2, [pc, #496]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80020e6:	f043 0308 	orr.w	r3, r3, #8
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	4b7a      	ldr	r3, [pc, #488]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4977      	ldr	r1, [pc, #476]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020fe:	4b76      	ldr	r3, [pc, #472]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	4972      	ldr	r1, [pc, #456]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 800210e:	4313      	orrs	r3, r2
 8002110:	604b      	str	r3, [r1, #4]
 8002112:	e025      	b.n	8002160 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002114:	4b70      	ldr	r3, [pc, #448]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a6f      	ldr	r2, [pc, #444]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 800211a:	f043 0308 	orr.w	r3, r3, #8
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b6d      	ldr	r3, [pc, #436]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	496a      	ldr	r1, [pc, #424]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002132:	4b69      	ldr	r3, [pc, #420]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	4965      	ldr	r1, [pc, #404]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d109      	bne.n	8002160 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	4618      	mov	r0, r3
 8002152:	f000 fd01 	bl	8002b58 <RCC_SetFlashLatencyFromMSIRange>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e34d      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002160:	f000 fc36 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 8002164:	4602      	mov	r2, r0
 8002166:	4b5c      	ldr	r3, [pc, #368]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	495a      	ldr	r1, [pc, #360]	; (80022dc <HAL_RCC_OscConfig+0x29c>)
 8002172:	5ccb      	ldrb	r3, [r1, r3]
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	fa22 f303 	lsr.w	r3, r2, r3
 800217c:	4a58      	ldr	r2, [pc, #352]	; (80022e0 <HAL_RCC_OscConfig+0x2a0>)
 800217e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002180:	4b58      	ldr	r3, [pc, #352]	; (80022e4 <HAL_RCC_OscConfig+0x2a4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe f9b3 	bl	80004f0 <HAL_InitTick>
 800218a:	4603      	mov	r3, r0
 800218c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d052      	beq.n	800223a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	e331      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d032      	beq.n	8002206 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021a0:	4b4d      	ldr	r3, [pc, #308]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a4c      	ldr	r2, [pc, #304]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ac:	f7fe f9f0 	bl	8000590 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021b4:	f7fe f9ec 	bl	8000590 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e31a      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c6:	4b44      	ldr	r3, [pc, #272]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a40      	ldr	r2, [pc, #256]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b3e      	ldr	r3, [pc, #248]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	493b      	ldr	r1, [pc, #236]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f0:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	4936      	ldr	r1, [pc, #216]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
 8002204:	e01a      	b.n	800223c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002206:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a33      	ldr	r2, [pc, #204]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002212:	f7fe f9bd 	bl	8000590 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800221a:	f7fe f9b9 	bl	8000590 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e2e7      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800222c:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x1da>
 8002238:	e000      	b.n	800223c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800223a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d074      	beq.n	8002332 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2b08      	cmp	r3, #8
 800224c:	d005      	beq.n	800225a <HAL_RCC_OscConfig+0x21a>
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b0c      	cmp	r3, #12
 8002252:	d10e      	bne.n	8002272 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d10b      	bne.n	8002272 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225a:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d064      	beq.n	8002330 <HAL_RCC_OscConfig+0x2f0>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d160      	bne.n	8002330 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e2c4      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x24a>
 800227c:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a15      	ldr	r2, [pc, #84]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 8002282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	e01d      	b.n	80022c6 <HAL_RCC_OscConfig+0x286>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002292:	d10c      	bne.n	80022ae <HAL_RCC_OscConfig+0x26e>
 8002294:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0f      	ldr	r2, [pc, #60]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 800229a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0c      	ldr	r2, [pc, #48]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80022a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	e00b      	b.n	80022c6 <HAL_RCC_OscConfig+0x286>
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80022b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a06      	ldr	r2, [pc, #24]	; (80022d8 <HAL_RCC_OscConfig+0x298>)
 80022c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d01c      	beq.n	8002308 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ce:	f7fe f95f 	bl	8000590 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d4:	e011      	b.n	80022fa <HAL_RCC_OscConfig+0x2ba>
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	08007b20 	.word	0x08007b20
 80022e0:	20000110 	.word	0x20000110
 80022e4:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7fe f952 	bl	8000590 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e280      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fa:	4baf      	ldr	r3, [pc, #700]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x2a8>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe f942 	bl	8000590 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7fe f93e 	bl	8000590 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e26c      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002322:	4ba5      	ldr	r3, [pc, #660]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x2d0>
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d060      	beq.n	8002400 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b04      	cmp	r3, #4
 8002342:	d005      	beq.n	8002350 <HAL_RCC_OscConfig+0x310>
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d119      	bne.n	800237e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d116      	bne.n	800237e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002350:	4b99      	ldr	r3, [pc, #612]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_OscConfig+0x328>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e249      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002368:	4b93      	ldr	r3, [pc, #588]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	4990      	ldr	r1, [pc, #576]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800237c:	e040      	b.n	8002400 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d023      	beq.n	80023ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002386:	4b8c      	ldr	r3, [pc, #560]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a8b      	ldr	r2, [pc, #556]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe f8fd 	bl	8000590 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239a:	f7fe f8f9 	bl	8000590 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e227      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ac:	4b82      	ldr	r3, [pc, #520]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b7f      	ldr	r3, [pc, #508]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	061b      	lsls	r3, r3, #24
 80023c6:	497c      	ldr	r1, [pc, #496]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
 80023cc:	e018      	b.n	8002400 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b7a      	ldr	r3, [pc, #488]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a79      	ldr	r2, [pc, #484]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 80023d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7fe f8d9 	bl	8000590 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e2:	f7fe f8d5 	bl	8000590 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e203      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f4:	4b70      	ldr	r3, [pc, #448]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f0      	bne.n	80023e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d03c      	beq.n	8002486 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01c      	beq.n	800244e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002414:	4b68      	ldr	r3, [pc, #416]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 8002416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800241a:	4a67      	ldr	r2, [pc, #412]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7fe f8b4 	bl	8000590 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242c:	f7fe f8b0 	bl	8000590 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e1de      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800243e:	4b5e      	ldr	r3, [pc, #376]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 8002440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ef      	beq.n	800242c <HAL_RCC_OscConfig+0x3ec>
 800244c:	e01b      	b.n	8002486 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244e:	4b5a      	ldr	r3, [pc, #360]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 8002450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002454:	4a58      	ldr	r2, [pc, #352]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245e:	f7fe f897 	bl	8000590 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002466:	f7fe f893 	bl	8000590 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e1c1      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002478:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 800247a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1ef      	bne.n	8002466 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80a6 	beq.w	80025e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002498:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10d      	bne.n	80024c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a4:	4b44      	ldr	r3, [pc, #272]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	4a43      	ldr	r2, [pc, #268]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 80024aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ae:	6593      	str	r3, [r2, #88]	; 0x58
 80024b0:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024bc:	2301      	movs	r3, #1
 80024be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c0:	4b3e      	ldr	r3, [pc, #248]	; (80025bc <HAL_RCC_OscConfig+0x57c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d118      	bne.n	80024fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024cc:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <HAL_RCC_OscConfig+0x57c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a3a      	ldr	r2, [pc, #232]	; (80025bc <HAL_RCC_OscConfig+0x57c>)
 80024d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d8:	f7fe f85a 	bl	8000590 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e0:	f7fe f856 	bl	8000590 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e184      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f2:	4b32      	ldr	r3, [pc, #200]	; (80025bc <HAL_RCC_OscConfig+0x57c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d108      	bne.n	8002518 <HAL_RCC_OscConfig+0x4d8>
 8002506:	4b2c      	ldr	r3, [pc, #176]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	4a2a      	ldr	r2, [pc, #168]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002516:	e024      	b.n	8002562 <HAL_RCC_OscConfig+0x522>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b05      	cmp	r3, #5
 800251e:	d110      	bne.n	8002542 <HAL_RCC_OscConfig+0x502>
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	4a24      	ldr	r2, [pc, #144]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002530:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002536:	4a20      	ldr	r2, [pc, #128]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002540:	e00f      	b.n	8002562 <HAL_RCC_OscConfig+0x522>
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002548:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 800254a:	f023 0301 	bic.w	r3, r3, #1
 800254e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002552:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 8002554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002558:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 800255a:	f023 0304 	bic.w	r3, r3, #4
 800255e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d016      	beq.n	8002598 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256a:	f7fe f811 	bl	8000590 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002570:	e00a      	b.n	8002588 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f7fe f80d 	bl	8000590 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002580:	4293      	cmp	r3, r2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e139      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_OscConfig+0x578>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0ed      	beq.n	8002572 <HAL_RCC_OscConfig+0x532>
 8002596:	e01a      	b.n	80025ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002598:	f7fd fffa 	bl	8000590 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800259e:	e00f      	b.n	80025c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a0:	f7fd fff6 	bl	8000590 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d906      	bls.n	80025c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e122      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c0:	4b90      	ldr	r3, [pc, #576]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1e8      	bne.n	80025a0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ce:	7ffb      	ldrb	r3, [r7, #31]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d105      	bne.n	80025e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d4:	4b8b      	ldr	r3, [pc, #556]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	4a8a      	ldr	r2, [pc, #552]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 80025da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 8108 	beq.w	80027fa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	f040 80d0 	bne.w	8002794 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025f4:	4b83      	ldr	r3, [pc, #524]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f003 0203 	and.w	r2, r3, #3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	429a      	cmp	r2, r3
 8002606:	d130      	bne.n	800266a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	3b01      	subs	r3, #1
 8002614:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d127      	bne.n	800266a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002624:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d11f      	bne.n	800266a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002634:	2a07      	cmp	r2, #7
 8002636:	bf14      	ite	ne
 8002638:	2201      	movne	r2, #1
 800263a:	2200      	moveq	r2, #0
 800263c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800263e:	4293      	cmp	r3, r2
 8002640:	d113      	bne.n	800266a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	085b      	lsrs	r3, r3, #1
 800264e:	3b01      	subs	r3, #1
 8002650:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d109      	bne.n	800266a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	085b      	lsrs	r3, r3, #1
 8002662:	3b01      	subs	r3, #1
 8002664:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d06e      	beq.n	8002748 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2b0c      	cmp	r3, #12
 800266e:	d069      	beq.n	8002744 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002670:	4b64      	ldr	r3, [pc, #400]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d105      	bne.n	8002688 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800267c:	4b61      	ldr	r3, [pc, #388]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0b7      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800268c:	4b5d      	ldr	r3, [pc, #372]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a5c      	ldr	r2, [pc, #368]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 8002692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002696:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002698:	f7fd ff7a 	bl	8000590 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a0:	f7fd ff76 	bl	8000590 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e0a4      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b2:	4b54      	ldr	r3, [pc, #336]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026be:	4b51      	ldr	r3, [pc, #324]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	4b51      	ldr	r3, [pc, #324]	; (8002808 <HAL_RCC_OscConfig+0x7c8>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026ce:	3a01      	subs	r2, #1
 80026d0:	0112      	lsls	r2, r2, #4
 80026d2:	4311      	orrs	r1, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026d8:	0212      	lsls	r2, r2, #8
 80026da:	4311      	orrs	r1, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026e0:	0852      	lsrs	r2, r2, #1
 80026e2:	3a01      	subs	r2, #1
 80026e4:	0552      	lsls	r2, r2, #21
 80026e6:	4311      	orrs	r1, r2
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026ec:	0852      	lsrs	r2, r2, #1
 80026ee:	3a01      	subs	r2, #1
 80026f0:	0652      	lsls	r2, r2, #25
 80026f2:	4311      	orrs	r1, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026f8:	0912      	lsrs	r2, r2, #4
 80026fa:	0452      	lsls	r2, r2, #17
 80026fc:	430a      	orrs	r2, r1
 80026fe:	4941      	ldr	r1, [pc, #260]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002704:	4b3f      	ldr	r3, [pc, #252]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a3e      	ldr	r2, [pc, #248]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 800270a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800270e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002710:	4b3c      	ldr	r3, [pc, #240]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4a3b      	ldr	r2, [pc, #236]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 8002716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800271a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800271c:	f7fd ff38 	bl	8000590 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002724:	f7fd ff34 	bl	8000590 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e062      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002736:	4b33      	ldr	r3, [pc, #204]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002742:	e05a      	b.n	80027fa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e059      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002748:	4b2e      	ldr	r3, [pc, #184]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d152      	bne.n	80027fa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 800275a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800275e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002760:	4b28      	ldr	r3, [pc, #160]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a27      	ldr	r2, [pc, #156]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 8002766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800276a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800276c:	f7fd ff10 	bl	8000590 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002774:	f7fd ff0c 	bl	8000590 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e03a      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002786:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x734>
 8002792:	e032      	b.n	80027fa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d02d      	beq.n	80027f6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a19      	ldr	r2, [pc, #100]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 80027a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027a4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80027a6:	4b17      	ldr	r3, [pc, #92]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d105      	bne.n	80027be <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80027b2:	4b14      	ldr	r3, [pc, #80]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	4a13      	ldr	r2, [pc, #76]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 80027b8:	f023 0303 	bic.w	r3, r3, #3
 80027bc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	4a10      	ldr	r2, [pc, #64]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 80027c4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f7fd fedf 	bl	8000590 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d6:	f7fd fedb 	bl	8000590 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e009      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_RCC_OscConfig+0x7c4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f0      	bne.n	80027d6 <HAL_RCC_OscConfig+0x796>
 80027f4:	e001      	b.n	80027fa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3720      	adds	r7, #32
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	f99d808c 	.word	0xf99d808c

0800280c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0c8      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002820:	4b66      	ldr	r3, [pc, #408]	; (80029bc <HAL_RCC_ClockConfig+0x1b0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d910      	bls.n	8002850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b63      	ldr	r3, [pc, #396]	; (80029bc <HAL_RCC_ClockConfig+0x1b0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 0207 	bic.w	r2, r3, #7
 8002836:	4961      	ldr	r1, [pc, #388]	; (80029bc <HAL_RCC_ClockConfig+0x1b0>)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b5f      	ldr	r3, [pc, #380]	; (80029bc <HAL_RCC_ClockConfig+0x1b0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0b0      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d04c      	beq.n	80028f6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d107      	bne.n	8002874 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002864:	4b56      	ldr	r3, [pc, #344]	; (80029c0 <HAL_RCC_ClockConfig+0x1b4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d121      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e09e      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d107      	bne.n	800288c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800287c:	4b50      	ldr	r3, [pc, #320]	; (80029c0 <HAL_RCC_ClockConfig+0x1b4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d115      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e092      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d107      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002894:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <HAL_RCC_ClockConfig+0x1b4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d109      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e086      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a4:	4b46      	ldr	r3, [pc, #280]	; (80029c0 <HAL_RCC_ClockConfig+0x1b4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e07e      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028b4:	4b42      	ldr	r3, [pc, #264]	; (80029c0 <HAL_RCC_ClockConfig+0x1b4>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f023 0203 	bic.w	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	493f      	ldr	r1, [pc, #252]	; (80029c0 <HAL_RCC_ClockConfig+0x1b4>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c6:	f7fd fe63 	bl	8000590 <HAL_GetTick>
 80028ca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028cc:	e00a      	b.n	80028e4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ce:	f7fd fe5f 	bl	8000590 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028dc:	4293      	cmp	r3, r2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e066      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e4:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <HAL_RCC_ClockConfig+0x1b4>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 020c 	and.w	r2, r3, #12
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d1eb      	bne.n	80028ce <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d008      	beq.n	8002914 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002902:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <HAL_RCC_ClockConfig+0x1b4>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	492c      	ldr	r1, [pc, #176]	; (80029c0 <HAL_RCC_ClockConfig+0x1b4>)
 8002910:	4313      	orrs	r3, r2
 8002912:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002914:	4b29      	ldr	r3, [pc, #164]	; (80029bc <HAL_RCC_ClockConfig+0x1b0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d210      	bcs.n	8002944 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b26      	ldr	r3, [pc, #152]	; (80029bc <HAL_RCC_ClockConfig+0x1b0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 0207 	bic.w	r2, r3, #7
 800292a:	4924      	ldr	r1, [pc, #144]	; (80029bc <HAL_RCC_ClockConfig+0x1b0>)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	4313      	orrs	r3, r2
 8002930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b22      	ldr	r3, [pc, #136]	; (80029bc <HAL_RCC_ClockConfig+0x1b0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e036      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_RCC_ClockConfig+0x1b4>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4918      	ldr	r1, [pc, #96]	; (80029c0 <HAL_RCC_ClockConfig+0x1b4>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800296e:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <HAL_RCC_ClockConfig+0x1b4>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4910      	ldr	r1, [pc, #64]	; (80029c0 <HAL_RCC_ClockConfig+0x1b4>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002982:	f000 f825 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 8002986:	4602      	mov	r2, r0
 8002988:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <HAL_RCC_ClockConfig+0x1b4>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	490c      	ldr	r1, [pc, #48]	; (80029c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002994:	5ccb      	ldrb	r3, [r1, r3]
 8002996:	f003 031f 	and.w	r3, r3, #31
 800299a:	fa22 f303 	lsr.w	r3, r2, r3
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029a2:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <HAL_RCC_ClockConfig+0x1c0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fd fda2 	bl	80004f0 <HAL_InitTick>
 80029ac:	4603      	mov	r3, r0
 80029ae:	72fb      	strb	r3, [r7, #11]

  return status;
 80029b0:	7afb      	ldrb	r3, [r7, #11]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40022000 	.word	0x40022000
 80029c0:	40021000 	.word	0x40021000
 80029c4:	08007b20 	.word	0x08007b20
 80029c8:	20000110 	.word	0x20000110
 80029cc:	20000000 	.word	0x20000000

080029d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b089      	sub	sp, #36	; 0x24
 80029d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029de:	4b3e      	ldr	r3, [pc, #248]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029e8:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x34>
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	d121      	bne.n	8002a42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d11e      	bne.n	8002a42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a04:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d107      	bne.n	8002a20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a10:	4b31      	ldr	r3, [pc, #196]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	e005      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a20:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a2c:	4a2b      	ldr	r2, [pc, #172]	; (8002adc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10d      	bne.n	8002a58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d102      	bne.n	8002a4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a48:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a4a:	61bb      	str	r3, [r7, #24]
 8002a4c:	e004      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a54:	4b23      	ldr	r3, [pc, #140]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	2b0c      	cmp	r3, #12
 8002a5c:	d134      	bne.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d003      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0xac>
 8002a74:	e005      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a78:	617b      	str	r3, [r7, #20]
      break;
 8002a7a:	e005      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a7c:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a7e:	617b      	str	r3, [r7, #20]
      break;
 8002a80:	e002      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	617b      	str	r3, [r7, #20]
      break;
 8002a86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a88:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	3301      	adds	r3, #1
 8002a94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	fb02 f203 	mul.w	r2, r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	0e5b      	lsrs	r3, r3, #25
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	3301      	adds	r3, #1
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3724      	adds	r7, #36	; 0x24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	08007b38 	.word	0x08007b38
 8002ae0:	00f42400 	.word	0x00f42400
 8002ae4:	007a1200 	.word	0x007a1200

08002ae8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HAL_RCC_GetHCLKFreq+0x14>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20000110 	.word	0x20000110

08002b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b04:	f7ff fff0 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	0a1b      	lsrs	r3, r3, #8
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	4904      	ldr	r1, [pc, #16]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b16:	5ccb      	ldrb	r3, [r1, r3]
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40021000 	.word	0x40021000
 8002b28:	08007b30 	.word	0x08007b30

08002b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b30:	f7ff ffda 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	0adb      	lsrs	r3, r3, #11
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	4904      	ldr	r1, [pc, #16]	; (8002b54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b42:	5ccb      	ldrb	r3, [r1, r3]
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	08007b30 	.word	0x08007b30

08002b58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b64:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b70:	f7ff f9f2 	bl	8001f58 <HAL_PWREx_GetVoltageRange>
 8002b74:	6178      	str	r0, [r7, #20]
 8002b76:	e014      	b.n	8002ba2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	4a24      	ldr	r2, [pc, #144]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b82:	6593      	str	r3, [r2, #88]	; 0x58
 8002b84:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b90:	f7ff f9e2 	bl	8001f58 <HAL_PWREx_GetVoltageRange>
 8002b94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b96:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba8:	d10b      	bne.n	8002bc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b80      	cmp	r3, #128	; 0x80
 8002bae:	d919      	bls.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2ba0      	cmp	r3, #160	; 0xa0
 8002bb4:	d902      	bls.n	8002bbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	e013      	b.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	e010      	b.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b80      	cmp	r3, #128	; 0x80
 8002bc6:	d902      	bls.n	8002bce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bc8:	2303      	movs	r3, #3
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	e00a      	b.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b80      	cmp	r3, #128	; 0x80
 8002bd2:	d102      	bne.n	8002bda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	e004      	b.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b70      	cmp	r3, #112	; 0x70
 8002bde:	d101      	bne.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002be0:	2301      	movs	r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 0207 	bic.w	r2, r3, #7
 8002bec:	4909      	ldr	r1, [pc, #36]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bf4:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d001      	beq.n	8002c06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40022000 	.word	0x40022000

08002c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c20:	2300      	movs	r3, #0
 8002c22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c24:	2300      	movs	r3, #0
 8002c26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d041      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c3c:	d02a      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c42:	d824      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c48:	d008      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c4e:	d81e      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c58:	d010      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c5a:	e018      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c5c:	4b86      	ldr	r3, [pc, #536]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4a85      	ldr	r2, [pc, #532]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c68:	e015      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fabb 	bl	80031ec <RCCEx_PLLSAI1_Config>
 8002c76:	4603      	mov	r3, r0
 8002c78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c7a:	e00c      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3320      	adds	r3, #32
 8002c80:	2100      	movs	r1, #0
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fba6 	bl	80033d4 <RCCEx_PLLSAI2_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c8c:	e003      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	74fb      	strb	r3, [r7, #19]
      break;
 8002c92:	e000      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c96:	7cfb      	ldrb	r3, [r7, #19]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c9c:	4b76      	ldr	r3, [pc, #472]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002caa:	4973      	ldr	r1, [pc, #460]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cb2:	e001      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d041      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ccc:	d02a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002cce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cd2:	d824      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cd8:	d008      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cde:	d81e      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce8:	d010      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cea:	e018      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cec:	4b62      	ldr	r3, [pc, #392]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a61      	ldr	r2, [pc, #388]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cf8:	e015      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fa73 	bl	80031ec <RCCEx_PLLSAI1_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d0a:	e00c      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3320      	adds	r3, #32
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fb5e 	bl	80033d4 <RCCEx_PLLSAI2_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d1c:	e003      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	74fb      	strb	r3, [r7, #19]
      break;
 8002d22:	e000      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d26:	7cfb      	ldrb	r3, [r7, #19]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10b      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d2c:	4b52      	ldr	r3, [pc, #328]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d3a:	494f      	ldr	r1, [pc, #316]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d42:	e001      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d44:	7cfb      	ldrb	r3, [r7, #19]
 8002d46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80a0 	beq.w	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d5a:	4b47      	ldr	r3, [pc, #284]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00d      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d70:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d74:	4a40      	ldr	r2, [pc, #256]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d7c:	4b3e      	ldr	r3, [pc, #248]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d8c:	4b3b      	ldr	r3, [pc, #236]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a3a      	ldr	r2, [pc, #232]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d98:	f7fd fbfa 	bl	8000590 <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d9e:	e009      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da0:	f7fd fbf6 	bl	8000590 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d902      	bls.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	74fb      	strb	r3, [r7, #19]
        break;
 8002db2:	e005      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002db4:	4b31      	ldr	r3, [pc, #196]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0ef      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002dc0:	7cfb      	ldrb	r3, [r7, #19]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d15c      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dc6:	4b2c      	ldr	r3, [pc, #176]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01f      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d019      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002de4:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002df0:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	4a20      	ldr	r2, [pc, #128]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e00:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	4a1c      	ldr	r2, [pc, #112]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e10:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d016      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fd fbb5 	bl	8000590 <HAL_GetTick>
 8002e26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e28:	e00b      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2a:	f7fd fbb1 	bl	8000590 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d902      	bls.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	74fb      	strb	r3, [r7, #19]
            break;
 8002e40:	e006      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e42:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0ec      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e50:	7cfb      	ldrb	r3, [r7, #19]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e56:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e66:	4904      	ldr	r1, [pc, #16]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e6e:	e009      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	74bb      	strb	r3, [r7, #18]
 8002e74:	e006      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e84:	7c7b      	ldrb	r3, [r7, #17]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d105      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8a:	4b9e      	ldr	r3, [pc, #632]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	4a9d      	ldr	r2, [pc, #628]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea2:	4b98      	ldr	r3, [pc, #608]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	f023 0203 	bic.w	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	4994      	ldr	r1, [pc, #592]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ec4:	4b8f      	ldr	r3, [pc, #572]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eca:	f023 020c 	bic.w	r2, r3, #12
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	498c      	ldr	r1, [pc, #560]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ee6:	4b87      	ldr	r3, [pc, #540]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	4983      	ldr	r1, [pc, #524]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f08:	4b7e      	ldr	r3, [pc, #504]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	497b      	ldr	r1, [pc, #492]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f2a:	4b76      	ldr	r3, [pc, #472]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f38:	4972      	ldr	r1, [pc, #456]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f4c:	4b6d      	ldr	r3, [pc, #436]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5a:	496a      	ldr	r1, [pc, #424]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f6e:	4b65      	ldr	r3, [pc, #404]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	4961      	ldr	r1, [pc, #388]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f90:	4b5c      	ldr	r3, [pc, #368]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9e:	4959      	ldr	r1, [pc, #356]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fb2:	4b54      	ldr	r3, [pc, #336]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc0:	4950      	ldr	r1, [pc, #320]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fd4:	4b4b      	ldr	r3, [pc, #300]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	4948      	ldr	r1, [pc, #288]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ff6:	4b43      	ldr	r3, [pc, #268]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	493f      	ldr	r1, [pc, #252]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d028      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003018:	4b3a      	ldr	r3, [pc, #232]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003026:	4937      	ldr	r1, [pc, #220]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003032:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003036:	d106      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003038:	4b32      	ldr	r3, [pc, #200]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a31      	ldr	r2, [pc, #196]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003042:	60d3      	str	r3, [r2, #12]
 8003044:	e011      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800304a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800304e:	d10c      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3304      	adds	r3, #4
 8003054:	2101      	movs	r1, #1
 8003056:	4618      	mov	r0, r3
 8003058:	f000 f8c8 	bl	80031ec <RCCEx_PLLSAI1_Config>
 800305c:	4603      	mov	r3, r0
 800305e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003060:	7cfb      	ldrb	r3, [r7, #19]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003066:	7cfb      	ldrb	r3, [r7, #19]
 8003068:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d028      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003076:	4b23      	ldr	r3, [pc, #140]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	491f      	ldr	r1, [pc, #124]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003094:	d106      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003096:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	4a1a      	ldr	r2, [pc, #104]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030a0:	60d3      	str	r3, [r2, #12]
 80030a2:	e011      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3304      	adds	r3, #4
 80030b2:	2101      	movs	r1, #1
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 f899 	bl	80031ec <RCCEx_PLLSAI1_Config>
 80030ba:	4603      	mov	r3, r0
 80030bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030be:	7cfb      	ldrb	r3, [r7, #19]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80030c4:	7cfb      	ldrb	r3, [r7, #19]
 80030c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d02b      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e2:	4908      	ldr	r1, [pc, #32]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030f2:	d109      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030f4:	4b03      	ldr	r3, [pc, #12]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	4a02      	ldr	r2, [pc, #8]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030fe:	60d3      	str	r3, [r2, #12]
 8003100:	e014      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003110:	d10c      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3304      	adds	r3, #4
 8003116:	2101      	movs	r1, #1
 8003118:	4618      	mov	r0, r3
 800311a:	f000 f867 	bl	80031ec <RCCEx_PLLSAI1_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003122:	7cfb      	ldrb	r3, [r7, #19]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003128:	7cfb      	ldrb	r3, [r7, #19]
 800312a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d02f      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003138:	4b2b      	ldr	r3, [pc, #172]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003146:	4928      	ldr	r1, [pc, #160]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003152:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003156:	d10d      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3304      	adds	r3, #4
 800315c:	2102      	movs	r1, #2
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f844 	bl	80031ec <RCCEx_PLLSAI1_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d014      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800316e:	7cfb      	ldrb	r3, [r7, #19]
 8003170:	74bb      	strb	r3, [r7, #18]
 8003172:	e011      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800317c:	d10c      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3320      	adds	r3, #32
 8003182:	2102      	movs	r1, #2
 8003184:	4618      	mov	r0, r3
 8003186:	f000 f925 	bl	80033d4 <RCCEx_PLLSAI2_Config>
 800318a:	4603      	mov	r3, r0
 800318c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800318e:	7cfb      	ldrb	r3, [r7, #19]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031a4:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031b2:	490d      	ldr	r1, [pc, #52]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031c6:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031d6:	4904      	ldr	r1, [pc, #16]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031de:	7cbb      	ldrb	r3, [r7, #18]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000

080031ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031fa:	4b75      	ldr	r3, [pc, #468]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d018      	beq.n	8003238 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003206:	4b72      	ldr	r3, [pc, #456]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0203 	and.w	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d10d      	bne.n	8003232 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
       ||
 800321a:	2b00      	cmp	r3, #0
 800321c:	d009      	beq.n	8003232 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800321e:	4b6c      	ldr	r3, [pc, #432]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
       ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d047      	beq.n	80032c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
 8003236:	e044      	b.n	80032c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d018      	beq.n	8003272 <RCCEx_PLLSAI1_Config+0x86>
 8003240:	2b03      	cmp	r3, #3
 8003242:	d825      	bhi.n	8003290 <RCCEx_PLLSAI1_Config+0xa4>
 8003244:	2b01      	cmp	r3, #1
 8003246:	d002      	beq.n	800324e <RCCEx_PLLSAI1_Config+0x62>
 8003248:	2b02      	cmp	r3, #2
 800324a:	d009      	beq.n	8003260 <RCCEx_PLLSAI1_Config+0x74>
 800324c:	e020      	b.n	8003290 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800324e:	4b60      	ldr	r3, [pc, #384]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d11d      	bne.n	8003296 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800325e:	e01a      	b.n	8003296 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003260:	4b5b      	ldr	r3, [pc, #364]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003268:	2b00      	cmp	r3, #0
 800326a:	d116      	bne.n	800329a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003270:	e013      	b.n	800329a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003272:	4b57      	ldr	r3, [pc, #348]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10f      	bne.n	800329e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800327e:	4b54      	ldr	r3, [pc, #336]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800328e:	e006      	b.n	800329e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
      break;
 8003294:	e004      	b.n	80032a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003296:	bf00      	nop
 8003298:	e002      	b.n	80032a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800329a:	bf00      	nop
 800329c:	e000      	b.n	80032a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800329e:	bf00      	nop
    }

    if(status == HAL_OK)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10d      	bne.n	80032c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032a6:	4b4a      	ldr	r3, [pc, #296]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6819      	ldr	r1, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	430b      	orrs	r3, r1
 80032bc:	4944      	ldr	r1, [pc, #272]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d17d      	bne.n	80033c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032c8:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a40      	ldr	r2, [pc, #256]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d4:	f7fd f95c 	bl	8000590 <HAL_GetTick>
 80032d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032da:	e009      	b.n	80032f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032dc:	f7fd f958 	bl	8000590 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d902      	bls.n	80032f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	73fb      	strb	r3, [r7, #15]
        break;
 80032ee:	e005      	b.n	80032fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032f0:	4b37      	ldr	r3, [pc, #220]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ef      	bne.n	80032dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d160      	bne.n	80033c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d111      	bne.n	800332c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003308:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6892      	ldr	r2, [r2, #8]
 8003318:	0211      	lsls	r1, r2, #8
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	68d2      	ldr	r2, [r2, #12]
 800331e:	0912      	lsrs	r2, r2, #4
 8003320:	0452      	lsls	r2, r2, #17
 8003322:	430a      	orrs	r2, r1
 8003324:	492a      	ldr	r1, [pc, #168]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	610b      	str	r3, [r1, #16]
 800332a:	e027      	b.n	800337c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d112      	bne.n	8003358 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003332:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800333a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6892      	ldr	r2, [r2, #8]
 8003342:	0211      	lsls	r1, r2, #8
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6912      	ldr	r2, [r2, #16]
 8003348:	0852      	lsrs	r2, r2, #1
 800334a:	3a01      	subs	r2, #1
 800334c:	0552      	lsls	r2, r2, #21
 800334e:	430a      	orrs	r2, r1
 8003350:	491f      	ldr	r1, [pc, #124]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	610b      	str	r3, [r1, #16]
 8003356:	e011      	b.n	800337c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003358:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003360:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6892      	ldr	r2, [r2, #8]
 8003368:	0211      	lsls	r1, r2, #8
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6952      	ldr	r2, [r2, #20]
 800336e:	0852      	lsrs	r2, r2, #1
 8003370:	3a01      	subs	r2, #1
 8003372:	0652      	lsls	r2, r2, #25
 8003374:	430a      	orrs	r2, r1
 8003376:	4916      	ldr	r1, [pc, #88]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003378:	4313      	orrs	r3, r2
 800337a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800337c:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003382:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003386:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003388:	f7fd f902 	bl	8000590 <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800338e:	e009      	b.n	80033a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003390:	f7fd f8fe 	bl	8000590 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d902      	bls.n	80033a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	73fb      	strb	r3, [r7, #15]
          break;
 80033a2:	e005      	b.n	80033b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033a4:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0ef      	beq.n	8003390 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	4904      	ldr	r1, [pc, #16]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000

080033d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033e2:	4b6a      	ldr	r3, [pc, #424]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d018      	beq.n	8003420 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80033ee:	4b67      	ldr	r3, [pc, #412]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f003 0203 	and.w	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d10d      	bne.n	800341a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
       ||
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003406:	4b61      	ldr	r3, [pc, #388]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	091b      	lsrs	r3, r3, #4
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
       ||
 8003416:	429a      	cmp	r2, r3
 8003418:	d047      	beq.n	80034aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
 800341e:	e044      	b.n	80034aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d018      	beq.n	800345a <RCCEx_PLLSAI2_Config+0x86>
 8003428:	2b03      	cmp	r3, #3
 800342a:	d825      	bhi.n	8003478 <RCCEx_PLLSAI2_Config+0xa4>
 800342c:	2b01      	cmp	r3, #1
 800342e:	d002      	beq.n	8003436 <RCCEx_PLLSAI2_Config+0x62>
 8003430:	2b02      	cmp	r3, #2
 8003432:	d009      	beq.n	8003448 <RCCEx_PLLSAI2_Config+0x74>
 8003434:	e020      	b.n	8003478 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003436:	4b55      	ldr	r3, [pc, #340]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d11d      	bne.n	800347e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003446:	e01a      	b.n	800347e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003448:	4b50      	ldr	r3, [pc, #320]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003450:	2b00      	cmp	r3, #0
 8003452:	d116      	bne.n	8003482 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003458:	e013      	b.n	8003482 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800345a:	4b4c      	ldr	r3, [pc, #304]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10f      	bne.n	8003486 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003466:	4b49      	ldr	r3, [pc, #292]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003476:	e006      	b.n	8003486 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
      break;
 800347c:	e004      	b.n	8003488 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800347e:	bf00      	nop
 8003480:	e002      	b.n	8003488 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003482:	bf00      	nop
 8003484:	e000      	b.n	8003488 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003486:	bf00      	nop
    }

    if(status == HAL_OK)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10d      	bne.n	80034aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800348e:	4b3f      	ldr	r3, [pc, #252]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6819      	ldr	r1, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	3b01      	subs	r3, #1
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	430b      	orrs	r3, r1
 80034a4:	4939      	ldr	r1, [pc, #228]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d167      	bne.n	8003580 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034b0:	4b36      	ldr	r3, [pc, #216]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a35      	ldr	r2, [pc, #212]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034bc:	f7fd f868 	bl	8000590 <HAL_GetTick>
 80034c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034c2:	e009      	b.n	80034d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034c4:	f7fd f864 	bl	8000590 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d902      	bls.n	80034d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	73fb      	strb	r3, [r7, #15]
        break;
 80034d6:	e005      	b.n	80034e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034d8:	4b2c      	ldr	r3, [pc, #176]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1ef      	bne.n	80034c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d14a      	bne.n	8003580 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d111      	bne.n	8003514 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034f0:	4b26      	ldr	r3, [pc, #152]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6892      	ldr	r2, [r2, #8]
 8003500:	0211      	lsls	r1, r2, #8
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68d2      	ldr	r2, [r2, #12]
 8003506:	0912      	lsrs	r2, r2, #4
 8003508:	0452      	lsls	r2, r2, #17
 800350a:	430a      	orrs	r2, r1
 800350c:	491f      	ldr	r1, [pc, #124]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 800350e:	4313      	orrs	r3, r2
 8003510:	614b      	str	r3, [r1, #20]
 8003512:	e011      	b.n	8003538 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800351c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6892      	ldr	r2, [r2, #8]
 8003524:	0211      	lsls	r1, r2, #8
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6912      	ldr	r2, [r2, #16]
 800352a:	0852      	lsrs	r2, r2, #1
 800352c:	3a01      	subs	r2, #1
 800352e:	0652      	lsls	r2, r2, #25
 8003530:	430a      	orrs	r2, r1
 8003532:	4916      	ldr	r1, [pc, #88]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003534:	4313      	orrs	r3, r2
 8003536:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003538:	4b14      	ldr	r3, [pc, #80]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a13      	ldr	r2, [pc, #76]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 800353e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003542:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fd f824 	bl	8000590 <HAL_GetTick>
 8003548:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800354a:	e009      	b.n	8003560 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800354c:	f7fd f820 	bl	8000590 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d902      	bls.n	8003560 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	73fb      	strb	r3, [r7, #15]
          break;
 800355e:	e005      	b.n	800356c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003560:	4b0a      	ldr	r3, [pc, #40]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0ef      	beq.n	800354c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	4904      	ldr	r1, [pc, #16]	; (800358c <RCCEx_PLLSAI2_Config+0x1b8>)
 800357c:	4313      	orrs	r3, r2
 800357e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000

08003590 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e040      	b.n	8003624 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f003 fbde 	bl	8006d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2224      	movs	r2, #36	; 0x24
 80035bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f82c 	bl	800362c <UART_SetConfig>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d101      	bne.n	80035de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e022      	b.n	8003624 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 faaa 	bl	8003b40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800360a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fb31 	bl	8003c84 <UART_CheckIdleState>
 8003622:	4603      	mov	r3, r0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800362c:	b5b0      	push	{r4, r5, r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	4313      	orrs	r3, r2
 800364e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	4bad      	ldr	r3, [pc, #692]	; (800390c <UART_SetConfig+0x2e0>)
 8003658:	4013      	ands	r3, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6812      	ldr	r2, [r2, #0]
 800365e:	69f9      	ldr	r1, [r7, #28]
 8003660:	430b      	orrs	r3, r1
 8003662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4aa2      	ldr	r2, [pc, #648]	; (8003910 <UART_SetConfig+0x2e4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d004      	beq.n	8003694 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	4313      	orrs	r3, r2
 8003692:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a99      	ldr	r2, [pc, #612]	; (8003914 <UART_SetConfig+0x2e8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d121      	bne.n	80036f6 <UART_SetConfig+0xca>
 80036b2:	4b99      	ldr	r3, [pc, #612]	; (8003918 <UART_SetConfig+0x2ec>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d817      	bhi.n	80036f0 <UART_SetConfig+0xc4>
 80036c0:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <UART_SetConfig+0x9c>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036d9 	.word	0x080036d9
 80036cc:	080036e5 	.word	0x080036e5
 80036d0:	080036df 	.word	0x080036df
 80036d4:	080036eb 	.word	0x080036eb
 80036d8:	2301      	movs	r3, #1
 80036da:	76fb      	strb	r3, [r7, #27]
 80036dc:	e0e7      	b.n	80038ae <UART_SetConfig+0x282>
 80036de:	2302      	movs	r3, #2
 80036e0:	76fb      	strb	r3, [r7, #27]
 80036e2:	e0e4      	b.n	80038ae <UART_SetConfig+0x282>
 80036e4:	2304      	movs	r3, #4
 80036e6:	76fb      	strb	r3, [r7, #27]
 80036e8:	e0e1      	b.n	80038ae <UART_SetConfig+0x282>
 80036ea:	2308      	movs	r3, #8
 80036ec:	76fb      	strb	r3, [r7, #27]
 80036ee:	e0de      	b.n	80038ae <UART_SetConfig+0x282>
 80036f0:	2310      	movs	r3, #16
 80036f2:	76fb      	strb	r3, [r7, #27]
 80036f4:	e0db      	b.n	80038ae <UART_SetConfig+0x282>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a88      	ldr	r2, [pc, #544]	; (800391c <UART_SetConfig+0x2f0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d132      	bne.n	8003766 <UART_SetConfig+0x13a>
 8003700:	4b85      	ldr	r3, [pc, #532]	; (8003918 <UART_SetConfig+0x2ec>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b0c      	cmp	r3, #12
 800370c:	d828      	bhi.n	8003760 <UART_SetConfig+0x134>
 800370e:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <UART_SetConfig+0xe8>)
 8003710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003714:	08003749 	.word	0x08003749
 8003718:	08003761 	.word	0x08003761
 800371c:	08003761 	.word	0x08003761
 8003720:	08003761 	.word	0x08003761
 8003724:	08003755 	.word	0x08003755
 8003728:	08003761 	.word	0x08003761
 800372c:	08003761 	.word	0x08003761
 8003730:	08003761 	.word	0x08003761
 8003734:	0800374f 	.word	0x0800374f
 8003738:	08003761 	.word	0x08003761
 800373c:	08003761 	.word	0x08003761
 8003740:	08003761 	.word	0x08003761
 8003744:	0800375b 	.word	0x0800375b
 8003748:	2300      	movs	r3, #0
 800374a:	76fb      	strb	r3, [r7, #27]
 800374c:	e0af      	b.n	80038ae <UART_SetConfig+0x282>
 800374e:	2302      	movs	r3, #2
 8003750:	76fb      	strb	r3, [r7, #27]
 8003752:	e0ac      	b.n	80038ae <UART_SetConfig+0x282>
 8003754:	2304      	movs	r3, #4
 8003756:	76fb      	strb	r3, [r7, #27]
 8003758:	e0a9      	b.n	80038ae <UART_SetConfig+0x282>
 800375a:	2308      	movs	r3, #8
 800375c:	76fb      	strb	r3, [r7, #27]
 800375e:	e0a6      	b.n	80038ae <UART_SetConfig+0x282>
 8003760:	2310      	movs	r3, #16
 8003762:	76fb      	strb	r3, [r7, #27]
 8003764:	e0a3      	b.n	80038ae <UART_SetConfig+0x282>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a6d      	ldr	r2, [pc, #436]	; (8003920 <UART_SetConfig+0x2f4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d120      	bne.n	80037b2 <UART_SetConfig+0x186>
 8003770:	4b69      	ldr	r3, [pc, #420]	; (8003918 <UART_SetConfig+0x2ec>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800377a:	2b30      	cmp	r3, #48	; 0x30
 800377c:	d013      	beq.n	80037a6 <UART_SetConfig+0x17a>
 800377e:	2b30      	cmp	r3, #48	; 0x30
 8003780:	d814      	bhi.n	80037ac <UART_SetConfig+0x180>
 8003782:	2b20      	cmp	r3, #32
 8003784:	d009      	beq.n	800379a <UART_SetConfig+0x16e>
 8003786:	2b20      	cmp	r3, #32
 8003788:	d810      	bhi.n	80037ac <UART_SetConfig+0x180>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <UART_SetConfig+0x168>
 800378e:	2b10      	cmp	r3, #16
 8003790:	d006      	beq.n	80037a0 <UART_SetConfig+0x174>
 8003792:	e00b      	b.n	80037ac <UART_SetConfig+0x180>
 8003794:	2300      	movs	r3, #0
 8003796:	76fb      	strb	r3, [r7, #27]
 8003798:	e089      	b.n	80038ae <UART_SetConfig+0x282>
 800379a:	2302      	movs	r3, #2
 800379c:	76fb      	strb	r3, [r7, #27]
 800379e:	e086      	b.n	80038ae <UART_SetConfig+0x282>
 80037a0:	2304      	movs	r3, #4
 80037a2:	76fb      	strb	r3, [r7, #27]
 80037a4:	e083      	b.n	80038ae <UART_SetConfig+0x282>
 80037a6:	2308      	movs	r3, #8
 80037a8:	76fb      	strb	r3, [r7, #27]
 80037aa:	e080      	b.n	80038ae <UART_SetConfig+0x282>
 80037ac:	2310      	movs	r3, #16
 80037ae:	76fb      	strb	r3, [r7, #27]
 80037b0:	e07d      	b.n	80038ae <UART_SetConfig+0x282>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a5b      	ldr	r2, [pc, #364]	; (8003924 <UART_SetConfig+0x2f8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d120      	bne.n	80037fe <UART_SetConfig+0x1d2>
 80037bc:	4b56      	ldr	r3, [pc, #344]	; (8003918 <UART_SetConfig+0x2ec>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037c6:	2bc0      	cmp	r3, #192	; 0xc0
 80037c8:	d013      	beq.n	80037f2 <UART_SetConfig+0x1c6>
 80037ca:	2bc0      	cmp	r3, #192	; 0xc0
 80037cc:	d814      	bhi.n	80037f8 <UART_SetConfig+0x1cc>
 80037ce:	2b80      	cmp	r3, #128	; 0x80
 80037d0:	d009      	beq.n	80037e6 <UART_SetConfig+0x1ba>
 80037d2:	2b80      	cmp	r3, #128	; 0x80
 80037d4:	d810      	bhi.n	80037f8 <UART_SetConfig+0x1cc>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <UART_SetConfig+0x1b4>
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d006      	beq.n	80037ec <UART_SetConfig+0x1c0>
 80037de:	e00b      	b.n	80037f8 <UART_SetConfig+0x1cc>
 80037e0:	2300      	movs	r3, #0
 80037e2:	76fb      	strb	r3, [r7, #27]
 80037e4:	e063      	b.n	80038ae <UART_SetConfig+0x282>
 80037e6:	2302      	movs	r3, #2
 80037e8:	76fb      	strb	r3, [r7, #27]
 80037ea:	e060      	b.n	80038ae <UART_SetConfig+0x282>
 80037ec:	2304      	movs	r3, #4
 80037ee:	76fb      	strb	r3, [r7, #27]
 80037f0:	e05d      	b.n	80038ae <UART_SetConfig+0x282>
 80037f2:	2308      	movs	r3, #8
 80037f4:	76fb      	strb	r3, [r7, #27]
 80037f6:	e05a      	b.n	80038ae <UART_SetConfig+0x282>
 80037f8:	2310      	movs	r3, #16
 80037fa:	76fb      	strb	r3, [r7, #27]
 80037fc:	e057      	b.n	80038ae <UART_SetConfig+0x282>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a49      	ldr	r2, [pc, #292]	; (8003928 <UART_SetConfig+0x2fc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d125      	bne.n	8003854 <UART_SetConfig+0x228>
 8003808:	4b43      	ldr	r3, [pc, #268]	; (8003918 <UART_SetConfig+0x2ec>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003816:	d017      	beq.n	8003848 <UART_SetConfig+0x21c>
 8003818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800381c:	d817      	bhi.n	800384e <UART_SetConfig+0x222>
 800381e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003822:	d00b      	beq.n	800383c <UART_SetConfig+0x210>
 8003824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003828:	d811      	bhi.n	800384e <UART_SetConfig+0x222>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <UART_SetConfig+0x20a>
 800382e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003832:	d006      	beq.n	8003842 <UART_SetConfig+0x216>
 8003834:	e00b      	b.n	800384e <UART_SetConfig+0x222>
 8003836:	2300      	movs	r3, #0
 8003838:	76fb      	strb	r3, [r7, #27]
 800383a:	e038      	b.n	80038ae <UART_SetConfig+0x282>
 800383c:	2302      	movs	r3, #2
 800383e:	76fb      	strb	r3, [r7, #27]
 8003840:	e035      	b.n	80038ae <UART_SetConfig+0x282>
 8003842:	2304      	movs	r3, #4
 8003844:	76fb      	strb	r3, [r7, #27]
 8003846:	e032      	b.n	80038ae <UART_SetConfig+0x282>
 8003848:	2308      	movs	r3, #8
 800384a:	76fb      	strb	r3, [r7, #27]
 800384c:	e02f      	b.n	80038ae <UART_SetConfig+0x282>
 800384e:	2310      	movs	r3, #16
 8003850:	76fb      	strb	r3, [r7, #27]
 8003852:	e02c      	b.n	80038ae <UART_SetConfig+0x282>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a2d      	ldr	r2, [pc, #180]	; (8003910 <UART_SetConfig+0x2e4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d125      	bne.n	80038aa <UART_SetConfig+0x27e>
 800385e:	4b2e      	ldr	r3, [pc, #184]	; (8003918 <UART_SetConfig+0x2ec>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003864:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003868:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800386c:	d017      	beq.n	800389e <UART_SetConfig+0x272>
 800386e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003872:	d817      	bhi.n	80038a4 <UART_SetConfig+0x278>
 8003874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003878:	d00b      	beq.n	8003892 <UART_SetConfig+0x266>
 800387a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800387e:	d811      	bhi.n	80038a4 <UART_SetConfig+0x278>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <UART_SetConfig+0x260>
 8003884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003888:	d006      	beq.n	8003898 <UART_SetConfig+0x26c>
 800388a:	e00b      	b.n	80038a4 <UART_SetConfig+0x278>
 800388c:	2300      	movs	r3, #0
 800388e:	76fb      	strb	r3, [r7, #27]
 8003890:	e00d      	b.n	80038ae <UART_SetConfig+0x282>
 8003892:	2302      	movs	r3, #2
 8003894:	76fb      	strb	r3, [r7, #27]
 8003896:	e00a      	b.n	80038ae <UART_SetConfig+0x282>
 8003898:	2304      	movs	r3, #4
 800389a:	76fb      	strb	r3, [r7, #27]
 800389c:	e007      	b.n	80038ae <UART_SetConfig+0x282>
 800389e:	2308      	movs	r3, #8
 80038a0:	76fb      	strb	r3, [r7, #27]
 80038a2:	e004      	b.n	80038ae <UART_SetConfig+0x282>
 80038a4:	2310      	movs	r3, #16
 80038a6:	76fb      	strb	r3, [r7, #27]
 80038a8:	e001      	b.n	80038ae <UART_SetConfig+0x282>
 80038aa:	2310      	movs	r3, #16
 80038ac:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a17      	ldr	r2, [pc, #92]	; (8003910 <UART_SetConfig+0x2e4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	f040 8087 	bne.w	80039c8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038ba:	7efb      	ldrb	r3, [r7, #27]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d837      	bhi.n	8003930 <UART_SetConfig+0x304>
 80038c0:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <UART_SetConfig+0x29c>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	080038ed 	.word	0x080038ed
 80038cc:	08003931 	.word	0x08003931
 80038d0:	080038f5 	.word	0x080038f5
 80038d4:	08003931 	.word	0x08003931
 80038d8:	080038fb 	.word	0x080038fb
 80038dc:	08003931 	.word	0x08003931
 80038e0:	08003931 	.word	0x08003931
 80038e4:	08003931 	.word	0x08003931
 80038e8:	08003903 	.word	0x08003903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ec:	f7ff f908 	bl	8002b00 <HAL_RCC_GetPCLK1Freq>
 80038f0:	6178      	str	r0, [r7, #20]
        break;
 80038f2:	e022      	b.n	800393a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f4:	4b0d      	ldr	r3, [pc, #52]	; (800392c <UART_SetConfig+0x300>)
 80038f6:	617b      	str	r3, [r7, #20]
        break;
 80038f8:	e01f      	b.n	800393a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038fa:	f7ff f869 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 80038fe:	6178      	str	r0, [r7, #20]
        break;
 8003900:	e01b      	b.n	800393a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003906:	617b      	str	r3, [r7, #20]
        break;
 8003908:	e017      	b.n	800393a <UART_SetConfig+0x30e>
 800390a:	bf00      	nop
 800390c:	efff69f3 	.word	0xefff69f3
 8003910:	40008000 	.word	0x40008000
 8003914:	40013800 	.word	0x40013800
 8003918:	40021000 	.word	0x40021000
 800391c:	40004400 	.word	0x40004400
 8003920:	40004800 	.word	0x40004800
 8003924:	40004c00 	.word	0x40004c00
 8003928:	40005000 	.word	0x40005000
 800392c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	76bb      	strb	r3, [r7, #26]
        break;
 8003938:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80f1 	beq.w	8003b24 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	4413      	add	r3, r2
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	429a      	cmp	r2, r3
 8003950:	d305      	bcc.n	800395e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	429a      	cmp	r2, r3
 800395c:	d902      	bls.n	8003964 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	76bb      	strb	r3, [r7, #26]
 8003962:	e0df      	b.n	8003b24 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	4618      	mov	r0, r3
 8003968:	f04f 0100 	mov.w	r1, #0
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	020b      	lsls	r3, r1, #8
 8003976:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800397a:	0202      	lsls	r2, r0, #8
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	6849      	ldr	r1, [r1, #4]
 8003980:	0849      	lsrs	r1, r1, #1
 8003982:	4608      	mov	r0, r1
 8003984:	f04f 0100 	mov.w	r1, #0
 8003988:	1814      	adds	r4, r2, r0
 800398a:	eb43 0501 	adc.w	r5, r3, r1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	461a      	mov	r2, r3
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	4620      	mov	r0, r4
 800399a:	4629      	mov	r1, r5
 800399c:	f7fc fc14 	bl	80001c8 <__aeabi_uldivmod>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4613      	mov	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ae:	d308      	bcc.n	80039c2 <UART_SetConfig+0x396>
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039b6:	d204      	bcs.n	80039c2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	60da      	str	r2, [r3, #12]
 80039c0:	e0b0      	b.n	8003b24 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	76bb      	strb	r3, [r7, #26]
 80039c6:	e0ad      	b.n	8003b24 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d0:	d15c      	bne.n	8003a8c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80039d2:	7efb      	ldrb	r3, [r7, #27]
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d828      	bhi.n	8003a2a <UART_SetConfig+0x3fe>
 80039d8:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <UART_SetConfig+0x3b4>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	08003a05 	.word	0x08003a05
 80039e4:	08003a0d 	.word	0x08003a0d
 80039e8:	08003a15 	.word	0x08003a15
 80039ec:	08003a2b 	.word	0x08003a2b
 80039f0:	08003a1b 	.word	0x08003a1b
 80039f4:	08003a2b 	.word	0x08003a2b
 80039f8:	08003a2b 	.word	0x08003a2b
 80039fc:	08003a2b 	.word	0x08003a2b
 8003a00:	08003a23 	.word	0x08003a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a04:	f7ff f87c 	bl	8002b00 <HAL_RCC_GetPCLK1Freq>
 8003a08:	6178      	str	r0, [r7, #20]
        break;
 8003a0a:	e013      	b.n	8003a34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a0c:	f7ff f88e 	bl	8002b2c <HAL_RCC_GetPCLK2Freq>
 8003a10:	6178      	str	r0, [r7, #20]
        break;
 8003a12:	e00f      	b.n	8003a34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a14:	4b49      	ldr	r3, [pc, #292]	; (8003b3c <UART_SetConfig+0x510>)
 8003a16:	617b      	str	r3, [r7, #20]
        break;
 8003a18:	e00c      	b.n	8003a34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1a:	f7fe ffd9 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 8003a1e:	6178      	str	r0, [r7, #20]
        break;
 8003a20:	e008      	b.n	8003a34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a26:	617b      	str	r3, [r7, #20]
        break;
 8003a28:	e004      	b.n	8003a34 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	76bb      	strb	r3, [r7, #26]
        break;
 8003a32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d074      	beq.n	8003b24 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	005a      	lsls	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	441a      	add	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b0f      	cmp	r3, #15
 8003a56:	d916      	bls.n	8003a86 <UART_SetConfig+0x45a>
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5e:	d212      	bcs.n	8003a86 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	f023 030f 	bic.w	r3, r3, #15
 8003a68:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	89fb      	ldrh	r3, [r7, #14]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	89fa      	ldrh	r2, [r7, #14]
 8003a82:	60da      	str	r2, [r3, #12]
 8003a84:	e04e      	b.n	8003b24 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	76bb      	strb	r3, [r7, #26]
 8003a8a:	e04b      	b.n	8003b24 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a8c:	7efb      	ldrb	r3, [r7, #27]
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d827      	bhi.n	8003ae2 <UART_SetConfig+0x4b6>
 8003a92:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <UART_SetConfig+0x46c>)
 8003a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a98:	08003abd 	.word	0x08003abd
 8003a9c:	08003ac5 	.word	0x08003ac5
 8003aa0:	08003acd 	.word	0x08003acd
 8003aa4:	08003ae3 	.word	0x08003ae3
 8003aa8:	08003ad3 	.word	0x08003ad3
 8003aac:	08003ae3 	.word	0x08003ae3
 8003ab0:	08003ae3 	.word	0x08003ae3
 8003ab4:	08003ae3 	.word	0x08003ae3
 8003ab8:	08003adb 	.word	0x08003adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003abc:	f7ff f820 	bl	8002b00 <HAL_RCC_GetPCLK1Freq>
 8003ac0:	6178      	str	r0, [r7, #20]
        break;
 8003ac2:	e013      	b.n	8003aec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ac4:	f7ff f832 	bl	8002b2c <HAL_RCC_GetPCLK2Freq>
 8003ac8:	6178      	str	r0, [r7, #20]
        break;
 8003aca:	e00f      	b.n	8003aec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003acc:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <UART_SetConfig+0x510>)
 8003ace:	617b      	str	r3, [r7, #20]
        break;
 8003ad0:	e00c      	b.n	8003aec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ad2:	f7fe ff7d 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 8003ad6:	6178      	str	r0, [r7, #20]
        break;
 8003ad8:	e008      	b.n	8003aec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ade:	617b      	str	r3, [r7, #20]
        break;
 8003ae0:	e004      	b.n	8003aec <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	76bb      	strb	r3, [r7, #26]
        break;
 8003aea:	bf00      	nop
    }

    if (pclk != 0U)
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d018      	beq.n	8003b24 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	085a      	lsrs	r2, r3, #1
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	441a      	add	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	2b0f      	cmp	r3, #15
 8003b0c:	d908      	bls.n	8003b20 <UART_SetConfig+0x4f4>
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b14:	d204      	bcs.n	8003b20 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	60da      	str	r2, [r3, #12]
 8003b1e:	e001      	b.n	8003b24 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b30:	7ebb      	ldrb	r3, [r7, #26]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bdb0      	pop	{r4, r5, r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	00f42400 	.word	0x00f42400

08003b40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01a      	beq.n	8003c56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c3e:	d10a      	bne.n	8003c56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	605a      	str	r2, [r3, #4]
  }
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c94:	f7fc fc7c 	bl	8000590 <HAL_GetTick>
 8003c98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d10e      	bne.n	8003cc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ca8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f82d 	bl	8003d16 <UART_WaitOnFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e023      	b.n	8003d0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d10e      	bne.n	8003cf2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f817 	bl	8003d16 <UART_WaitOnFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e00d      	b.n	8003d0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	603b      	str	r3, [r7, #0]
 8003d22:	4613      	mov	r3, r2
 8003d24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d26:	e05e      	b.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2e:	d05a      	beq.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d30:	f7fc fc2e 	bl	8000590 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d302      	bcc.n	8003d46 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d11b      	bne.n	8003d7e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d54:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0201 	bic.w	r2, r2, #1
 8003d64:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e043      	b.n	8003e06 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d02c      	beq.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d9a:	d124      	bne.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003da4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003db4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0201 	bic.w	r2, r2, #1
 8003dc4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e00f      	b.n	8003e06 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4013      	ands	r3, r2
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	bf0c      	ite	eq
 8003df6:	2301      	moveq	r3, #1
 8003df8:	2300      	movne	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d091      	beq.n	8003d28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e0e:	b084      	sub	sp, #16
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	f107 001c 	add.w	r0, r7, #28
 8003e1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f001 f9cf 	bl	80051d0 <USB_CoreReset>
 8003e32:	4603      	mov	r3, r0
 8003e34:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d106      	bne.n	8003e4a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38
 8003e48:	e005      	b.n	8003e56 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e62:	b004      	add	sp, #16
 8003e64:	4770      	bx	lr
	...

08003e68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	4613      	mov	r3, r2
 8003e74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d165      	bne.n	8003f48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4a3e      	ldr	r2, [pc, #248]	; (8003f78 <USB_SetTurnaroundTime+0x110>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d906      	bls.n	8003e92 <USB_SetTurnaroundTime+0x2a>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4a3d      	ldr	r2, [pc, #244]	; (8003f7c <USB_SetTurnaroundTime+0x114>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d202      	bcs.n	8003e92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e8c:	230f      	movs	r3, #15
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	e05c      	b.n	8003f4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4a39      	ldr	r2, [pc, #228]	; (8003f7c <USB_SetTurnaroundTime+0x114>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d306      	bcc.n	8003ea8 <USB_SetTurnaroundTime+0x40>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4a38      	ldr	r2, [pc, #224]	; (8003f80 <USB_SetTurnaroundTime+0x118>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d202      	bcs.n	8003ea8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ea2:	230e      	movs	r3, #14
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	e051      	b.n	8003f4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4a35      	ldr	r2, [pc, #212]	; (8003f80 <USB_SetTurnaroundTime+0x118>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d306      	bcc.n	8003ebe <USB_SetTurnaroundTime+0x56>
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4a34      	ldr	r2, [pc, #208]	; (8003f84 <USB_SetTurnaroundTime+0x11c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d202      	bcs.n	8003ebe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003eb8:	230d      	movs	r3, #13
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	e046      	b.n	8003f4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4a30      	ldr	r2, [pc, #192]	; (8003f84 <USB_SetTurnaroundTime+0x11c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d306      	bcc.n	8003ed4 <USB_SetTurnaroundTime+0x6c>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	4a2f      	ldr	r2, [pc, #188]	; (8003f88 <USB_SetTurnaroundTime+0x120>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d802      	bhi.n	8003ed4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003ece:	230c      	movs	r3, #12
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	e03b      	b.n	8003f4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4a2c      	ldr	r2, [pc, #176]	; (8003f88 <USB_SetTurnaroundTime+0x120>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d906      	bls.n	8003eea <USB_SetTurnaroundTime+0x82>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4a2b      	ldr	r2, [pc, #172]	; (8003f8c <USB_SetTurnaroundTime+0x124>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d802      	bhi.n	8003eea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003ee4:	230b      	movs	r3, #11
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	e030      	b.n	8003f4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	4a27      	ldr	r2, [pc, #156]	; (8003f8c <USB_SetTurnaroundTime+0x124>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d906      	bls.n	8003f00 <USB_SetTurnaroundTime+0x98>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4a26      	ldr	r2, [pc, #152]	; (8003f90 <USB_SetTurnaroundTime+0x128>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d802      	bhi.n	8003f00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003efa:	230a      	movs	r3, #10
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	e025      	b.n	8003f4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4a23      	ldr	r2, [pc, #140]	; (8003f90 <USB_SetTurnaroundTime+0x128>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d906      	bls.n	8003f16 <USB_SetTurnaroundTime+0xae>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4a22      	ldr	r2, [pc, #136]	; (8003f94 <USB_SetTurnaroundTime+0x12c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d202      	bcs.n	8003f16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003f10:	2309      	movs	r3, #9
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	e01a      	b.n	8003f4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4a1e      	ldr	r2, [pc, #120]	; (8003f94 <USB_SetTurnaroundTime+0x12c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d306      	bcc.n	8003f2c <USB_SetTurnaroundTime+0xc4>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4a1d      	ldr	r2, [pc, #116]	; (8003f98 <USB_SetTurnaroundTime+0x130>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d802      	bhi.n	8003f2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003f26:	2308      	movs	r3, #8
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	e00f      	b.n	8003f4c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4a1a      	ldr	r2, [pc, #104]	; (8003f98 <USB_SetTurnaroundTime+0x130>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d906      	bls.n	8003f42 <USB_SetTurnaroundTime+0xda>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4a19      	ldr	r2, [pc, #100]	; (8003f9c <USB_SetTurnaroundTime+0x134>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d202      	bcs.n	8003f42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003f3c:	2307      	movs	r3, #7
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e004      	b.n	8003f4c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003f42:	2306      	movs	r3, #6
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	e001      	b.n	8003f4c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003f48:	2309      	movs	r3, #9
 8003f4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	029b      	lsls	r3, r3, #10
 8003f60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	00d8acbf 	.word	0x00d8acbf
 8003f7c:	00e4e1c0 	.word	0x00e4e1c0
 8003f80:	00f42400 	.word	0x00f42400
 8003f84:	01067380 	.word	0x01067380
 8003f88:	011a499f 	.word	0x011a499f
 8003f8c:	01312cff 	.word	0x01312cff
 8003f90:	014ca43f 	.word	0x014ca43f
 8003f94:	016e3600 	.word	0x016e3600
 8003f98:	01a6ab1f 	.word	0x01a6ab1f
 8003f9c:	01e84800 	.word	0x01e84800

08003fa0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f043 0201 	orr.w	r2, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f023 0201 	bic.w	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d106      	bne.n	8004010 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	60da      	str	r2, [r3, #12]
 800400e:	e00b      	b.n	8004028 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	60da      	str	r2, [r3, #12]
 8004022:	e001      	b.n	8004028 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e003      	b.n	8004030 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004028:	2032      	movs	r0, #50	; 0x32
 800402a:	f7fc fabd 	bl	80005a8 <HAL_Delay>

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004038:	b084      	sub	sp, #16
 800403a:	b580      	push	{r7, lr}
 800403c:	b086      	sub	sp, #24
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	e009      	b.n	800406c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	3340      	adds	r3, #64	; 0x40
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	2200      	movs	r2, #0
 8004064:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	3301      	adds	r3, #1
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b0e      	cmp	r3, #14
 8004070:	d9f2      	bls.n	8004058 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004074:	2b00      	cmp	r3, #0
 8004076:	d11c      	bne.n	80040b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004086:	f043 0302 	orr.w	r3, r3, #2
 800408a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	e005      	b.n	80040be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040c4:	461a      	mov	r2, r3
 80040c6:	2300      	movs	r3, #0
 80040c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d0:	4619      	mov	r1, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d8:	461a      	mov	r2, r3
 80040da:	680b      	ldr	r3, [r1, #0]
 80040dc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040de:	2103      	movs	r1, #3
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f93d 	bl	8004360 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040e6:	2110      	movs	r1, #16
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f8f1 	bl	80042d0 <USB_FlushTxFifo>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f90f 	bl	800431c <USB_FlushRxFifo>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410e:	461a      	mov	r2, r3
 8004110:	2300      	movs	r3, #0
 8004112:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411a:	461a      	mov	r2, r3
 800411c:	2300      	movs	r3, #0
 800411e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004126:	461a      	mov	r2, r3
 8004128:	2300      	movs	r3, #0
 800412a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	e043      	b.n	80041ba <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004148:	d118      	bne.n	800417c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4413      	add	r3, r2
 8004158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415c:	461a      	mov	r2, r3
 800415e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	e013      	b.n	800418e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004172:	461a      	mov	r2, r3
 8004174:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	e008      	b.n	800418e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004188:	461a      	mov	r2, r3
 800418a:	2300      	movs	r3, #0
 800418c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419a:	461a      	mov	r2, r3
 800419c:	2300      	movs	r3, #0
 800419e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ac:	461a      	mov	r2, r3
 80041ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	3301      	adds	r3, #1
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d3b7      	bcc.n	8004132 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	e043      	b.n	8004250 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041de:	d118      	bne.n	8004212 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f2:	461a      	mov	r2, r3
 80041f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e013      	b.n	8004224 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004208:	461a      	mov	r2, r3
 800420a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	e008      	b.n	8004224 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421e:	461a      	mov	r2, r3
 8004220:	2300      	movs	r3, #0
 8004222:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004230:	461a      	mov	r2, r3
 8004232:	2300      	movs	r3, #0
 8004234:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	461a      	mov	r2, r3
 8004244:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004248:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	3301      	adds	r3, #1
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	429a      	cmp	r2, r3
 8004256:	d3b7      	bcc.n	80041c8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800426a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004278:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f043 0210 	orr.w	r2, r3, #16
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	4b10      	ldr	r3, [pc, #64]	; (80042cc <USB_DevInit+0x294>)
 800428c:	4313      	orrs	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f043 0208 	orr.w	r2, r3, #8
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d107      	bne.n	80042ba <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042b2:	f043 0304 	orr.w	r3, r3, #4
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042c6:	b004      	add	sp, #16
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	803c3800 	.word	0x803c3800

080042d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	019b      	lsls	r3, r3, #6
 80042e2:	f043 0220 	orr.w	r2, r3, #32
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3301      	adds	r3, #1
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4a09      	ldr	r2, [pc, #36]	; (8004318 <USB_FlushTxFifo+0x48>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e006      	b.n	800430a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b20      	cmp	r3, #32
 8004306:	d0f0      	beq.n	80042ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	00030d40 	.word	0x00030d40

0800431c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2210      	movs	r2, #16
 800432c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3301      	adds	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4a09      	ldr	r2, [pc, #36]	; (800435c <USB_FlushRxFifo+0x40>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d901      	bls.n	8004340 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e006      	b.n	800434e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b10      	cmp	r3, #16
 800434a:	d0f0      	beq.n	800432e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	00030d40 	.word	0x00030d40

08004360 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004380:	4313      	orrs	r3, r2
 8004382:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004392:	b480      	push	{r7}
 8004394:	b087      	sub	sp, #28
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 0306 	and.w	r3, r3, #6
 80043aa:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d002      	beq.n	80043b8 <USB_GetDevSpeed+0x26>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b06      	cmp	r3, #6
 80043b6:	d102      	bne.n	80043be <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80043b8:	2302      	movs	r3, #2
 80043ba:	75fb      	strb	r3, [r7, #23]
 80043bc:	e001      	b.n	80043c2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80043be:	230f      	movs	r3, #15
 80043c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	785b      	ldrb	r3, [r3, #1]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d13a      	bne.n	8004462 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f2:	69da      	ldr	r2, [r3, #28]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	2101      	movs	r1, #1
 80043fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004402:	b29b      	uxth	r3, r3
 8004404:	68f9      	ldr	r1, [r7, #12]
 8004406:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800440a:	4313      	orrs	r3, r2
 800440c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4413      	add	r3, r2
 8004416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d155      	bne.n	80044d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	78db      	ldrb	r3, [r3, #3]
 800443e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004440:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	059b      	lsls	r3, r3, #22
 8004446:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004448:	4313      	orrs	r3, r2
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	0151      	lsls	r1, r2, #5
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	440a      	add	r2, r1
 8004452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	e036      	b.n	80044d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004468:	69da      	ldr	r2, [r3, #28]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	2101      	movs	r1, #1
 8004474:	fa01 f303 	lsl.w	r3, r1, r3
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	68f9      	ldr	r1, [r7, #12]
 800447c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004480:	4313      	orrs	r3, r2
 8004482:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d11a      	bne.n	80044d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	78db      	ldrb	r3, [r3, #3]
 80044b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044b6:	430b      	orrs	r3, r1
 80044b8:	4313      	orrs	r3, r2
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	0151      	lsls	r1, r2, #5
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	440a      	add	r2, r1
 80044c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	785b      	ldrb	r3, [r3, #1]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d161      	bne.n	80045c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800450e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004512:	d11f      	bne.n	8004554 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	0151      	lsls	r1, r2, #5
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	440a      	add	r2, r1
 800452a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800452e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004532:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	0151      	lsls	r1, r2, #5
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	440a      	add	r2, r1
 800454a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800454e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004552:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	2101      	movs	r1, #1
 8004566:	fa01 f303 	lsl.w	r3, r1, r3
 800456a:	b29b      	uxth	r3, r3
 800456c:	43db      	mvns	r3, r3
 800456e:	68f9      	ldr	r1, [r7, #12]
 8004570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004574:	4013      	ands	r3, r2
 8004576:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	2101      	movs	r1, #1
 800458a:	fa01 f303 	lsl.w	r3, r1, r3
 800458e:	b29b      	uxth	r3, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	68f9      	ldr	r1, [r7, #12]
 8004594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004598:	4013      	ands	r3, r2
 800459a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	0159      	lsls	r1, r3, #5
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	440b      	add	r3, r1
 80045b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b6:	4619      	mov	r1, r3
 80045b8:	4b35      	ldr	r3, [pc, #212]	; (8004690 <USB_DeactivateEndpoint+0x1b0>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	600b      	str	r3, [r1, #0]
 80045be:	e060      	b.n	8004682 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045d6:	d11f      	bne.n	8004618 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	0151      	lsls	r1, r2, #5
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	440a      	add	r2, r1
 80045ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	0151      	lsls	r1, r2, #5
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	440a      	add	r2, r1
 800460e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004612:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004616:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	2101      	movs	r1, #1
 800462a:	fa01 f303 	lsl.w	r3, r1, r3
 800462e:	041b      	lsls	r3, r3, #16
 8004630:	43db      	mvns	r3, r3
 8004632:	68f9      	ldr	r1, [r7, #12]
 8004634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004638:	4013      	ands	r3, r2
 800463a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	2101      	movs	r1, #1
 800464e:	fa01 f303 	lsl.w	r3, r1, r3
 8004652:	041b      	lsls	r3, r3, #16
 8004654:	43db      	mvns	r3, r3
 8004656:	68f9      	ldr	r1, [r7, #12]
 8004658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800465c:	4013      	ands	r3, r2
 800465e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	0159      	lsls	r1, r3, #5
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	440b      	add	r3, r1
 8004676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467a:	4619      	mov	r1, r3
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <USB_DeactivateEndpoint+0x1b4>)
 800467e:	4013      	ands	r3, r2
 8004680:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	ec337800 	.word	0xec337800
 8004694:	eff37800 	.word	0xeff37800

08004698 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	785b      	ldrb	r3, [r3, #1]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	f040 810a 	bne.w	80048ca <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d132      	bne.n	8004724 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	0151      	lsls	r1, r2, #5
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	440a      	add	r2, r1
 80046d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	0151      	lsls	r1, r2, #5
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	440a      	add	r2, r1
 80046f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004700:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	0151      	lsls	r1, r2, #5
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	440a      	add	r2, r1
 8004718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800471c:	0cdb      	lsrs	r3, r3, #19
 800471e:	04db      	lsls	r3, r3, #19
 8004720:	6113      	str	r3, [r2, #16]
 8004722:	e074      	b.n	800480e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	0151      	lsls	r1, r2, #5
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	440a      	add	r2, r1
 800473a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800473e:	0cdb      	lsrs	r3, r3, #19
 8004740:	04db      	lsls	r3, r3, #19
 8004742:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	0151      	lsls	r1, r2, #5
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	440a      	add	r2, r1
 800475a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800475e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004762:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004766:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6959      	ldr	r1, [r3, #20]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	440b      	add	r3, r1
 8004780:	1e59      	subs	r1, r3, #1
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	fbb1 f3f3 	udiv	r3, r1, r3
 800478a:	04d9      	lsls	r1, r3, #19
 800478c:	4baf      	ldr	r3, [pc, #700]	; (8004a4c <USB_EPStartXfer+0x3b4>)
 800478e:	400b      	ands	r3, r1
 8004790:	6939      	ldr	r1, [r7, #16]
 8004792:	0148      	lsls	r0, r1, #5
 8004794:	6979      	ldr	r1, [r7, #20]
 8004796:	4401      	add	r1, r0
 8004798:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800479c:	4313      	orrs	r3, r2
 800479e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b6:	6939      	ldr	r1, [r7, #16]
 80047b8:	0148      	lsls	r0, r1, #5
 80047ba:	6979      	ldr	r1, [r7, #20]
 80047bc:	4401      	add	r1, r0
 80047be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047c2:	4313      	orrs	r3, r2
 80047c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	78db      	ldrb	r3, [r3, #3]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d11f      	bne.n	800480e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	0151      	lsls	r1, r2, #5
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	440a      	add	r2, r1
 80047e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80047ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	0151      	lsls	r1, r2, #5
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	440a      	add	r2, r1
 8004804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800480c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	0151      	lsls	r1, r2, #5
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	440a      	add	r2, r1
 8004824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004828:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800482c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	78db      	ldrb	r3, [r3, #3]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d015      	beq.n	8004862 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 8100 	beq.w	8004a40 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	2101      	movs	r1, #1
 8004852:	fa01 f303 	lsl.w	r3, r1, r3
 8004856:	6979      	ldr	r1, [r7, #20]
 8004858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800485c:	4313      	orrs	r3, r2
 800485e:	634b      	str	r3, [r1, #52]	; 0x34
 8004860:	e0ee      	b.n	8004a40 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d110      	bne.n	8004894 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	0151      	lsls	r1, r2, #5
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	440a      	add	r2, r1
 8004888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e00f      	b.n	80048b4 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	0151      	lsls	r1, r2, #5
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	440a      	add	r2, r1
 80048aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68d9      	ldr	r1, [r3, #12]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781a      	ldrb	r2, [r3, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f9e2 	bl	8004c8c <USB_WritePacket>
 80048c8:	e0ba      	b.n	8004a40 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	0151      	lsls	r1, r2, #5
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	440a      	add	r2, r1
 80048e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048e4:	0cdb      	lsrs	r3, r3, #19
 80048e6:	04db      	lsls	r3, r3, #19
 80048e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	0151      	lsls	r1, r2, #5
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	440a      	add	r2, r1
 8004900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004904:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004908:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800490c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d123      	bne.n	800495e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800492c:	6939      	ldr	r1, [r7, #16]
 800492e:	0148      	lsls	r0, r1, #5
 8004930:	6979      	ldr	r1, [r7, #20]
 8004932:	4401      	add	r1, r0
 8004934:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004938:	4313      	orrs	r3, r2
 800493a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	0151      	lsls	r1, r2, #5
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	440a      	add	r2, r1
 8004952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004956:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800495a:	6113      	str	r3, [r2, #16]
 800495c:	e033      	b.n	80049c6 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	4413      	add	r3, r2
 8004968:	1e5a      	subs	r2, r3, #1
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004972:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	89fb      	ldrh	r3, [r7, #14]
 8004984:	04d9      	lsls	r1, r3, #19
 8004986:	4b31      	ldr	r3, [pc, #196]	; (8004a4c <USB_EPStartXfer+0x3b4>)
 8004988:	400b      	ands	r3, r1
 800498a:	6939      	ldr	r1, [r7, #16]
 800498c:	0148      	lsls	r0, r1, #5
 800498e:	6979      	ldr	r1, [r7, #20]
 8004990:	4401      	add	r1, r0
 8004992:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004996:	4313      	orrs	r3, r2
 8004998:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	89f9      	ldrh	r1, [r7, #14]
 80049ae:	fb01 f303 	mul.w	r3, r1, r3
 80049b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b6:	6939      	ldr	r1, [r7, #16]
 80049b8:	0148      	lsls	r0, r1, #5
 80049ba:	6979      	ldr	r1, [r7, #20]
 80049bc:	4401      	add	r1, r0
 80049be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049c2:	4313      	orrs	r3, r2
 80049c4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	78db      	ldrb	r3, [r3, #3]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d128      	bne.n	8004a20 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d110      	bne.n	8004a00 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	0151      	lsls	r1, r2, #5
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	440a      	add	r2, r1
 80049f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	e00f      	b.n	8004a20 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	0151      	lsls	r1, r2, #5
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	440a      	add	r2, r1
 8004a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	0151      	lsls	r1, r2, #5
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	440a      	add	r2, r1
 8004a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	1ff80000 	.word	0x1ff80000

08004a50 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	f040 80ab 	bne.w	8004bc4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d132      	bne.n	8004adc <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	0151      	lsls	r1, r2, #5
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	440a      	add	r2, r1
 8004a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	0151      	lsls	r1, r2, #5
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	440a      	add	r2, r1
 8004ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ab8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	0151      	lsls	r1, r2, #5
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	440a      	add	r2, r1
 8004ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad4:	0cdb      	lsrs	r3, r3, #19
 8004ad6:	04db      	lsls	r3, r3, #19
 8004ad8:	6113      	str	r3, [r2, #16]
 8004ada:	e04e      	b.n	8004b7a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af6:	0cdb      	lsrs	r3, r3, #19
 8004af8:	04db      	lsls	r3, r3, #19
 8004afa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	0151      	lsls	r1, r2, #5
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	440a      	add	r2, r1
 8004b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b1e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d903      	bls.n	8004b34 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	0151      	lsls	r1, r2, #5
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	440a      	add	r2, r1
 8004b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	0148      	lsls	r0, r1, #5
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	4401      	add	r1, r0
 8004b72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b76:	4313      	orrs	r3, r2
 8004b78:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	0151      	lsls	r1, r2, #5
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	440a      	add	r2, r1
 8004b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b98:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d06d      	beq.n	8004c7e <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb8:	68f9      	ldr	r1, [r7, #12]
 8004bba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	634b      	str	r3, [r1, #52]	; 0x34
 8004bc2:	e05c      	b.n	8004c7e <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	0151      	lsls	r1, r2, #5
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	440a      	add	r2, r1
 8004bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bde:	0cdb      	lsrs	r3, r3, #19
 8004be0:	04db      	lsls	r3, r3, #19
 8004be2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	0151      	lsls	r1, r2, #5
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	440a      	add	r2, r1
 8004bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bfe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c06:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	0148      	lsls	r0, r1, #5
 8004c52:	68f9      	ldr	r1, [r7, #12]
 8004c54:	4401      	add	r1, r0
 8004c56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	0151      	lsls	r1, r2, #5
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	440a      	add	r2, r1
 8004c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b089      	sub	sp, #36	; 0x24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	4611      	mov	r1, r2
 8004c98:	461a      	mov	r2, r3
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	71fb      	strb	r3, [r7, #7]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004caa:	88bb      	ldrh	r3, [r7, #4]
 8004cac:	3303      	adds	r3, #3
 8004cae:	089b      	lsrs	r3, r3, #2
 8004cb0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	e00f      	b.n	8004cd8 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004cb8:	79fb      	ldrb	r3, [r7, #7]
 8004cba:	031a      	lsls	r2, r3, #12
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	61bb      	str	r3, [r7, #24]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d3eb      	bcc.n	8004cb8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3724      	adds	r7, #36	; 0x24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b089      	sub	sp, #36	; 0x24
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	60b9      	str	r1, [r7, #8]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004d04:	88fb      	ldrh	r3, [r7, #6]
 8004d06:	3303      	adds	r3, #3
 8004d08:	089b      	lsrs	r3, r3, #2
 8004d0a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	e00b      	b.n	8004d2a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	3304      	adds	r3, #4
 8004d22:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	3301      	adds	r3, #1
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d3ef      	bcc.n	8004d12 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004d32:	69fb      	ldr	r3, [r7, #28]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3724      	adds	r7, #36	; 0x24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	785b      	ldrb	r3, [r3, #1]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d12c      	bne.n	8004db6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	db12      	blt.n	8004d94 <USB_EPSetStall+0x54>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00f      	beq.n	8004d94 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	0151      	lsls	r1, r2, #5
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	440a      	add	r2, r1
 8004d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d92:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	0151      	lsls	r1, r2, #5
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	440a      	add	r2, r1
 8004daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	e02b      	b.n	8004e0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	db12      	blt.n	8004dee <USB_EPSetStall+0xae>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00f      	beq.n	8004dee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004de8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	785b      	ldrb	r3, [r3, #1]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d128      	bne.n	8004e8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	78db      	ldrb	r3, [r3, #3]
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d003      	beq.n	8004e68 <USB_EPClearStall+0x4c>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	78db      	ldrb	r3, [r3, #3]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d138      	bne.n	8004eda <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	e027      	b.n	8004eda <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	0151      	lsls	r1, r2, #5
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	440a      	add	r2, r1
 8004ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ea4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ea8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	78db      	ldrb	r3, [r3, #3]
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d003      	beq.n	8004eba <USB_EPClearStall+0x9e>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	78db      	ldrb	r3, [r3, #3]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d10f      	bne.n	8004eda <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f0a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004f1c:	68f9      	ldr	r1, [r7, #12]
 8004f1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f22:	4313      	orrs	r3, r2
 8004f24:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f62:	f023 0302 	bic.w	r3, r3, #2
 8004f66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b085      	sub	sp, #20
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f90:	f023 0303 	bic.w	r3, r3, #3
 8004f94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fa4:	f043 0302 	orr.w	r3, r3, #2
 8004fa8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	4013      	ands	r3, r2
 8005000:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	0c1b      	lsrs	r3, r3, #16
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	4013      	ands	r3, r2
 8005034:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	b29b      	uxth	r3, r3
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005046:	b480      	push	{r7}
 8005048:	b085      	sub	sp, #20
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	460b      	mov	r3, r1
 8005050:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	4013      	ands	r3, r2
 8005072:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005074:	68bb      	ldr	r3, [r7, #8]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005082:	b480      	push	{r7}
 8005084:	b087      	sub	sp, #28
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	460b      	mov	r3, r1
 800508c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	f003 030f 	and.w	r3, r3, #15
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	fa22 f303 	lsr.w	r3, r2, r3
 80050b2:	01db      	lsls	r3, r3, #7
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4013      	ands	r3, r2
 80050ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050d0:	68bb      	ldr	r3, [r7, #8]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	f003 0301 	and.w	r3, r3, #1
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b085      	sub	sp, #20
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005114:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005118:	f023 0307 	bic.w	r3, r3, #7
 800511c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800512c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005130:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	333c      	adds	r3, #60	; 0x3c
 8005152:	3304      	adds	r3, #4
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4a1c      	ldr	r2, [pc, #112]	; (80051cc <USB_EP0_OutStart+0x8c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d90a      	bls.n	8005176 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800516c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005170:	d101      	bne.n	8005176 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	e024      	b.n	80051c0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517c:	461a      	mov	r2, r3
 800517e:	2300      	movs	r3, #0
 8005180:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005190:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005194:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a4:	f043 0318 	orr.w	r3, r3, #24
 80051a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80051bc:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	4f54300a 	.word	0x4f54300a

080051d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3301      	adds	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4a13      	ldr	r2, [pc, #76]	; (8005234 <USB_CoreReset+0x64>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d901      	bls.n	80051ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e01b      	b.n	8005226 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	daf2      	bge.n	80051dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f043 0201 	orr.w	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3301      	adds	r3, #1
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4a09      	ldr	r2, [pc, #36]	; (8005234 <USB_CoreReset+0x64>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d901      	bls.n	8005218 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e006      	b.n	8005226 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b01      	cmp	r3, #1
 8005222:	d0f0      	beq.n	8005206 <USB_CoreReset+0x36>

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	00030d40 	.word	0x00030d40

08005238 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005244:	2010      	movs	r0, #16
 8005246:	f002 faa5 	bl	8007794 <USBD_static_malloc>
 800524a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d105      	bne.n	800525e <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800525a:	2302      	movs	r3, #2
 800525c:	e01b      	b.n	8005296 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	7c1b      	ldrb	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d103      	bne.n	8005276 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2207      	movs	r2, #7
 8005272:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005274:	e002      	b.n	800527c <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	220a      	movs	r2, #10
 800527a:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800527c:	2304      	movs	r3, #4
 800527e:	2203      	movs	r2, #3
 8005280:	2181      	movs	r1, #129	; 0x81
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f002 f886 	bl	8007394 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	460b      	mov	r3, r1
 80052a8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80052aa:	2181      	movs	r1, #129	; 0x81
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f002 f8af 	bl	8007410 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d009      	beq.n	80052dc <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052ce:	4618      	mov	r0, r3
 80052d0:	f002 fa6e 	bl	80077b0 <USBD_static_free>
    pdev->pClassData = NULL;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052f8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005308:	2303      	movs	r3, #3
 800530a:	e0e8      	b.n	80054de <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005314:	2b00      	cmp	r3, #0
 8005316:	d046      	beq.n	80053a6 <USBD_HID_Setup+0xbe>
 8005318:	2b20      	cmp	r3, #32
 800531a:	f040 80d8 	bne.w	80054ce <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	3b02      	subs	r3, #2
 8005324:	2b09      	cmp	r3, #9
 8005326:	d836      	bhi.n	8005396 <USBD_HID_Setup+0xae>
 8005328:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <USBD_HID_Setup+0x48>)
 800532a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532e:	bf00      	nop
 8005330:	08005387 	.word	0x08005387
 8005334:	08005367 	.word	0x08005367
 8005338:	08005397 	.word	0x08005397
 800533c:	08005397 	.word	0x08005397
 8005340:	08005397 	.word	0x08005397
 8005344:	08005397 	.word	0x08005397
 8005348:	08005397 	.word	0x08005397
 800534c:	08005397 	.word	0x08005397
 8005350:	08005375 	.word	0x08005375
 8005354:	08005359 	.word	0x08005359
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	885b      	ldrh	r3, [r3, #2]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	601a      	str	r2, [r3, #0]
          break;
 8005364:	e01e      	b.n	80053a4 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f001 fa4c 	bl	800680a <USBD_CtlSendData>
          break;
 8005372:	e017      	b.n	80053a4 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	885b      	ldrh	r3, [r3, #2]
 8005378:	0a1b      	lsrs	r3, r3, #8
 800537a:	b29b      	uxth	r3, r3
 800537c:	b2db      	uxtb	r3, r3
 800537e:	461a      	mov	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	605a      	str	r2, [r3, #4]
          break;
 8005384:	e00e      	b.n	80053a4 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3304      	adds	r3, #4
 800538a:	2201      	movs	r2, #1
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f001 fa3b 	bl	800680a <USBD_CtlSendData>
          break;
 8005394:	e006      	b.n	80053a4 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005396:	6839      	ldr	r1, [r7, #0]
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f001 f9c5 	bl	8006728 <USBD_CtlError>
          ret = USBD_FAIL;
 800539e:	2303      	movs	r3, #3
 80053a0:	75fb      	strb	r3, [r7, #23]
          break;
 80053a2:	bf00      	nop
      }
      break;
 80053a4:	e09a      	b.n	80054dc <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	785b      	ldrb	r3, [r3, #1]
 80053aa:	2b0b      	cmp	r3, #11
 80053ac:	f200 8086 	bhi.w	80054bc <USBD_HID_Setup+0x1d4>
 80053b0:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <USBD_HID_Setup+0xd0>)
 80053b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b6:	bf00      	nop
 80053b8:	080053e9 	.word	0x080053e9
 80053bc:	080054cb 	.word	0x080054cb
 80053c0:	080054bd 	.word	0x080054bd
 80053c4:	080054bd 	.word	0x080054bd
 80053c8:	080054bd 	.word	0x080054bd
 80053cc:	080054bd 	.word	0x080054bd
 80053d0:	08005413 	.word	0x08005413
 80053d4:	080054bd 	.word	0x080054bd
 80053d8:	080054bd 	.word	0x080054bd
 80053dc:	080054bd 	.word	0x080054bd
 80053e0:	0800546b 	.word	0x0800546b
 80053e4:	08005495 	.word	0x08005495
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d107      	bne.n	8005404 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80053f4:	f107 030a 	add.w	r3, r7, #10
 80053f8:	2202      	movs	r2, #2
 80053fa:	4619      	mov	r1, r3
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f001 fa04 	bl	800680a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005402:	e063      	b.n	80054cc <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8005404:	6839      	ldr	r1, [r7, #0]
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f001 f98e 	bl	8006728 <USBD_CtlError>
            ret = USBD_FAIL;
 800540c:	2303      	movs	r3, #3
 800540e:	75fb      	strb	r3, [r7, #23]
          break;
 8005410:	e05c      	b.n	80054cc <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	885b      	ldrh	r3, [r3, #2]
 8005416:	0a1b      	lsrs	r3, r3, #8
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b22      	cmp	r3, #34	; 0x22
 800541c:	d108      	bne.n	8005430 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	88db      	ldrh	r3, [r3, #6]
 8005422:	2b4a      	cmp	r3, #74	; 0x4a
 8005424:	bf28      	it	cs
 8005426:	234a      	movcs	r3, #74	; 0x4a
 8005428:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800542a:	4b2f      	ldr	r3, [pc, #188]	; (80054e8 <USBD_HID_Setup+0x200>)
 800542c:	613b      	str	r3, [r7, #16]
 800542e:	e015      	b.n	800545c <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	885b      	ldrh	r3, [r3, #2]
 8005434:	0a1b      	lsrs	r3, r3, #8
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b21      	cmp	r3, #33	; 0x21
 800543a:	d108      	bne.n	800544e <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800543c:	4b2b      	ldr	r3, [pc, #172]	; (80054ec <USBD_HID_Setup+0x204>)
 800543e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	88db      	ldrh	r3, [r3, #6]
 8005444:	2b09      	cmp	r3, #9
 8005446:	bf28      	it	cs
 8005448:	2309      	movcs	r3, #9
 800544a:	82bb      	strh	r3, [r7, #20]
 800544c:	e006      	b.n	800545c <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800544e:	6839      	ldr	r1, [r7, #0]
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f001 f969 	bl	8006728 <USBD_CtlError>
            ret = USBD_FAIL;
 8005456:	2303      	movs	r3, #3
 8005458:	75fb      	strb	r3, [r7, #23]
            break;
 800545a:	e037      	b.n	80054cc <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800545c:	8abb      	ldrh	r3, [r7, #20]
 800545e:	461a      	mov	r2, r3
 8005460:	6939      	ldr	r1, [r7, #16]
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f001 f9d1 	bl	800680a <USBD_CtlSendData>
          break;
 8005468:	e030      	b.n	80054cc <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b03      	cmp	r3, #3
 8005474:	d107      	bne.n	8005486 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3308      	adds	r3, #8
 800547a:	2201      	movs	r2, #1
 800547c:	4619      	mov	r1, r3
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f001 f9c3 	bl	800680a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005484:	e022      	b.n	80054cc <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f001 f94d 	bl	8006728 <USBD_CtlError>
            ret = USBD_FAIL;
 800548e:	2303      	movs	r3, #3
 8005490:	75fb      	strb	r3, [r7, #23]
          break;
 8005492:	e01b      	b.n	80054cc <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b03      	cmp	r3, #3
 800549e:	d106      	bne.n	80054ae <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	885b      	ldrh	r3, [r3, #2]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	461a      	mov	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054ac:	e00e      	b.n	80054cc <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80054ae:	6839      	ldr	r1, [r7, #0]
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f001 f939 	bl	8006728 <USBD_CtlError>
            ret = USBD_FAIL;
 80054b6:	2303      	movs	r3, #3
 80054b8:	75fb      	strb	r3, [r7, #23]
          break;
 80054ba:	e007      	b.n	80054cc <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80054bc:	6839      	ldr	r1, [r7, #0]
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f001 f932 	bl	8006728 <USBD_CtlError>
          ret = USBD_FAIL;
 80054c4:	2303      	movs	r3, #3
 80054c6:	75fb      	strb	r3, [r7, #23]
          break;
 80054c8:	e000      	b.n	80054cc <USBD_HID_Setup+0x1e4>
          break;
 80054ca:	bf00      	nop
      }
      break;
 80054cc:	e006      	b.n	80054dc <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80054ce:	6839      	ldr	r1, [r7, #0]
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f001 f929 	bl	8006728 <USBD_CtlError>
      ret = USBD_FAIL;
 80054d6:	2303      	movs	r3, #3
 80054d8:	75fb      	strb	r3, [r7, #23]
      break;
 80054da:	bf00      	nop
  }

  return (uint8_t)ret;
 80054dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	200000c4 	.word	0x200000c4
 80054ec:	200000ac 	.word	0x200000ac

080054f0 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	4613      	mov	r3, r2
 80054fc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005504:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 800550c:	2303      	movs	r3, #3
 800550e:	e013      	b.n	8005538 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b03      	cmp	r3, #3
 800551a:	d10c      	bne.n	8005536 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	7b1b      	ldrb	r3, [r3, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d108      	bne.n	8005536 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	2201      	movs	r2, #1
 8005528:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	2181      	movs	r1, #129	; 0x81
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f002 f871 	bl	8007618 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2222      	movs	r2, #34	; 0x22
 800554c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800554e:	4b03      	ldr	r3, [pc, #12]	; (800555c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005550:	4618      	mov	r0, r3
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	20000040 	.word	0x20000040

08005560 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2222      	movs	r2, #34	; 0x22
 800556c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800556e:	4b03      	ldr	r3, [pc, #12]	; (800557c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	20000064 	.word	0x20000064

08005580 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2222      	movs	r2, #34	; 0x22
 800558c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800558e:	4b03      	ldr	r3, [pc, #12]	; (800559c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	20000088 	.word	0x20000088

080055a0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055b2:	2200      	movs	r2, #0
 80055b4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	220a      	movs	r2, #10
 80055d0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80055d2:	4b03      	ldr	r3, [pc, #12]	; (80055e0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	200000b8 	.word	0x200000b8

080055e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	4613      	mov	r3, r2
 80055f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e01f      	b.n	800563c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	79fa      	ldrb	r2, [r7, #7]
 800562e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f001 fe31 	bl	8007298 <USBD_LL_Init>
 8005636:	4603      	mov	r3, r0
 8005638:	75fb      	strb	r3, [r7, #23]

  return ret;
 800563a:	7dfb      	ldrb	r3, [r7, #23]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005658:	2303      	movs	r3, #3
 800565a:	e016      	b.n	800568a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00b      	beq.n	8005688 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	f107 020e 	add.w	r2, r7, #14
 800567c:	4610      	mov	r0, r2
 800567e:	4798      	blx	r3
 8005680:	4602      	mov	r2, r0
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b082      	sub	sp, #8
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f001 fe48 	bl	8007330 <USBD_LL_Start>
 80056a0:	4603      	mov	r3, r0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80056cc:	2303      	movs	r3, #3
 80056ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	78fa      	ldrb	r2, [r7, #3]
 80056e4:	4611      	mov	r1, r2
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	4798      	blx	r3
 80056ea:	4603      	mov	r3, r0
 80056ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	460b      	mov	r3, r1
 8005702:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800570a:	2b00      	cmp	r3, #0
 800570c:	d007      	beq.n	800571e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	78fa      	ldrb	r2, [r7, #3]
 8005718:	4611      	mov	r1, r2
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	4798      	blx	r3
  }

  return USBD_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005738:	6839      	ldr	r1, [r7, #0]
 800573a:	4618      	mov	r0, r3
 800573c:	f000 ffba 	bl	80066b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800574e:	461a      	mov	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800575c:	f003 031f 	and.w	r3, r3, #31
 8005760:	2b02      	cmp	r3, #2
 8005762:	d01a      	beq.n	800579a <USBD_LL_SetupStage+0x72>
 8005764:	2b02      	cmp	r3, #2
 8005766:	d822      	bhi.n	80057ae <USBD_LL_SetupStage+0x86>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <USBD_LL_SetupStage+0x4a>
 800576c:	2b01      	cmp	r3, #1
 800576e:	d00a      	beq.n	8005786 <USBD_LL_SetupStage+0x5e>
 8005770:	e01d      	b.n	80057ae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fa62 	bl	8005c44 <USBD_StdDevReq>
 8005780:	4603      	mov	r3, r0
 8005782:	73fb      	strb	r3, [r7, #15]
      break;
 8005784:	e020      	b.n	80057c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fac6 	bl	8005d20 <USBD_StdItfReq>
 8005794:	4603      	mov	r3, r0
 8005796:	73fb      	strb	r3, [r7, #15]
      break;
 8005798:	e016      	b.n	80057c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057a0:	4619      	mov	r1, r3
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fb05 	bl	8005db2 <USBD_StdEPReq>
 80057a8:	4603      	mov	r3, r0
 80057aa:	73fb      	strb	r3, [r7, #15]
      break;
 80057ac:	e00c      	b.n	80057c8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80057b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 fe5d 	bl	800747c <USBD_LL_StallEP>
 80057c2:	4603      	mov	r3, r0
 80057c4:	73fb      	strb	r3, [r7, #15]
      break;
 80057c6:	bf00      	nop
  }

  return ret;
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b086      	sub	sp, #24
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	460b      	mov	r3, r1
 80057dc:	607a      	str	r2, [r7, #4]
 80057de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80057e0:	7afb      	ldrb	r3, [r7, #11]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d138      	bne.n	8005858 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80057ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d14a      	bne.n	800588e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	429a      	cmp	r2, r3
 8005802:	d913      	bls.n	800582c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	1ad2      	subs	r2, r2, r3
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	4293      	cmp	r3, r2
 800581c:	bf28      	it	cs
 800581e:	4613      	movcs	r3, r2
 8005820:	461a      	mov	r2, r3
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f001 f81c 	bl	8006862 <USBD_CtlContinueRx>
 800582a:	e030      	b.n	800588e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b03      	cmp	r3, #3
 8005836:	d10b      	bne.n	8005850 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f001 f817 	bl	8006884 <USBD_CtlSendStatus>
 8005856:	e01a      	b.n	800588e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b03      	cmp	r3, #3
 8005862:	d114      	bne.n	800588e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00e      	beq.n	800588e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	7afa      	ldrb	r2, [r7, #11]
 800587a:	4611      	mov	r1, r2
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	4798      	blx	r3
 8005880:	4603      	mov	r3, r0
 8005882:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800588a:	7dfb      	ldrb	r3, [r7, #23]
 800588c:	e000      	b.n	8005890 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	460b      	mov	r3, r1
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80058a6:	7afb      	ldrb	r3, [r7, #11]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d16b      	bne.n	8005984 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3314      	adds	r3, #20
 80058b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d156      	bne.n	800596a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d914      	bls.n	80058f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	1ad2      	subs	r2, r2, r3
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	461a      	mov	r2, r3
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 ffae 	bl	8006840 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058e4:	2300      	movs	r3, #0
 80058e6:	2200      	movs	r2, #0
 80058e8:	2100      	movs	r1, #0
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f001 fecc 	bl	8007688 <USBD_LL_PrepareReceive>
 80058f0:	e03b      	b.n	800596a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d11c      	bne.n	8005938 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005906:	429a      	cmp	r2, r3
 8005908:	d316      	bcc.n	8005938 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005914:	429a      	cmp	r2, r3
 8005916:	d20f      	bcs.n	8005938 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005918:	2200      	movs	r2, #0
 800591a:	2100      	movs	r1, #0
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 ff8f 	bl	8006840 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800592a:	2300      	movs	r3, #0
 800592c:	2200      	movs	r2, #0
 800592e:	2100      	movs	r1, #0
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f001 fea9 	bl	8007688 <USBD_LL_PrepareReceive>
 8005936:	e018      	b.n	800596a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b03      	cmp	r3, #3
 8005942:	d10b      	bne.n	800595c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d005      	beq.n	800595c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800595c:	2180      	movs	r1, #128	; 0x80
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f001 fd8c 	bl	800747c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 ffa0 	bl	80068aa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005970:	2b01      	cmp	r3, #1
 8005972:	d122      	bne.n	80059ba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f7ff fe98 	bl	80056aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005982:	e01a      	b.n	80059ba <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b03      	cmp	r3, #3
 800598e:	d114      	bne.n	80059ba <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00e      	beq.n	80059ba <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	7afa      	ldrb	r2, [r7, #11]
 80059a6:	4611      	mov	r1, r2
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	4798      	blx	r3
 80059ac:	4603      	mov	r3, r0
 80059ae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80059b6:	7dfb      	ldrb	r3, [r7, #23]
 80059b8:	e000      	b.n	80059bc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e02f      	b.n	8005a58 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00f      	beq.n	8005a22 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d009      	beq.n	8005a22 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6852      	ldr	r2, [r2, #4]
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a22:	2340      	movs	r3, #64	; 0x40
 8005a24:	2200      	movs	r2, #0
 8005a26:	2100      	movs	r1, #0
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f001 fcb3 	bl	8007394 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2240      	movs	r2, #64	; 0x40
 8005a3a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a3e:	2340      	movs	r3, #64	; 0x40
 8005a40:	2200      	movs	r2, #0
 8005a42:	2180      	movs	r1, #128	; 0x80
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f001 fca5 	bl	8007394 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2240      	movs	r2, #64	; 0x40
 8005a54:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	78fa      	ldrb	r2, [r7, #3]
 8005a70:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2204      	movs	r2, #4
 8005a9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d106      	bne.n	8005ace <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e012      	b.n	8005b18 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d10b      	bne.n	8005b16 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d005      	beq.n	8005b16 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e014      	b.n	8005b64 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d10d      	bne.n	8005b62 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d007      	beq.n	8005b62 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	78fa      	ldrb	r2, [r7, #3]
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e014      	b.n	8005bb0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d10d      	bne.n	8005bae <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	78fa      	ldrb	r2, [r7, #3]
 8005ba8:	4611      	mov	r1, r2
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d009      	beq.n	8005bfc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6852      	ldr	r2, [r2, #4]
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	4798      	blx	r3
  }

  return USBD_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b087      	sub	sp, #28
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005c24:	8a3b      	ldrh	r3, [r7, #16]
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	b21a      	sxth	r2, r3
 8005c2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	b21b      	sxth	r3, r3
 8005c32:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c34:	89fb      	ldrh	r3, [r7, #14]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
	...

08005c44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c5a:	2b40      	cmp	r3, #64	; 0x40
 8005c5c:	d005      	beq.n	8005c6a <USBD_StdDevReq+0x26>
 8005c5e:	2b40      	cmp	r3, #64	; 0x40
 8005c60:	d853      	bhi.n	8005d0a <USBD_StdDevReq+0xc6>
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00b      	beq.n	8005c7e <USBD_StdDevReq+0x3a>
 8005c66:	2b20      	cmp	r3, #32
 8005c68:	d14f      	bne.n	8005d0a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	4798      	blx	r3
 8005c78:	4603      	mov	r3, r0
 8005c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c7c:	e04a      	b.n	8005d14 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	785b      	ldrb	r3, [r3, #1]
 8005c82:	2b09      	cmp	r3, #9
 8005c84:	d83b      	bhi.n	8005cfe <USBD_StdDevReq+0xba>
 8005c86:	a201      	add	r2, pc, #4	; (adr r2, 8005c8c <USBD_StdDevReq+0x48>)
 8005c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8c:	08005ce1 	.word	0x08005ce1
 8005c90:	08005cf5 	.word	0x08005cf5
 8005c94:	08005cff 	.word	0x08005cff
 8005c98:	08005ceb 	.word	0x08005ceb
 8005c9c:	08005cff 	.word	0x08005cff
 8005ca0:	08005cbf 	.word	0x08005cbf
 8005ca4:	08005cb5 	.word	0x08005cb5
 8005ca8:	08005cff 	.word	0x08005cff
 8005cac:	08005cd7 	.word	0x08005cd7
 8005cb0:	08005cc9 	.word	0x08005cc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f9de 	bl	8006078 <USBD_GetDescriptor>
          break;
 8005cbc:	e024      	b.n	8005d08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005cbe:	6839      	ldr	r1, [r7, #0]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fb6d 	bl	80063a0 <USBD_SetAddress>
          break;
 8005cc6:	e01f      	b.n	8005d08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005cc8:	6839      	ldr	r1, [r7, #0]
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fbac 	bl	8006428 <USBD_SetConfig>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	73fb      	strb	r3, [r7, #15]
          break;
 8005cd4:	e018      	b.n	8005d08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005cd6:	6839      	ldr	r1, [r7, #0]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fc4b 	bl	8006574 <USBD_GetConfig>
          break;
 8005cde:	e013      	b.n	8005d08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fc7c 	bl	80065e0 <USBD_GetStatus>
          break;
 8005ce8:	e00e      	b.n	8005d08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fcab 	bl	8006648 <USBD_SetFeature>
          break;
 8005cf2:	e009      	b.n	8005d08 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005cf4:	6839      	ldr	r1, [r7, #0]
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fcba 	bl	8006670 <USBD_ClrFeature>
          break;
 8005cfc:	e004      	b.n	8005d08 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fd11 	bl	8006728 <USBD_CtlError>
          break;
 8005d06:	bf00      	nop
      }
      break;
 8005d08:	e004      	b.n	8005d14 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005d0a:	6839      	ldr	r1, [r7, #0]
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fd0b 	bl	8006728 <USBD_CtlError>
      break;
 8005d12:	bf00      	nop
  }

  return ret;
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop

08005d20 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d005      	beq.n	8005d46 <USBD_StdItfReq+0x26>
 8005d3a:	2b40      	cmp	r3, #64	; 0x40
 8005d3c:	d82f      	bhi.n	8005d9e <USBD_StdItfReq+0x7e>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <USBD_StdItfReq+0x26>
 8005d42:	2b20      	cmp	r3, #32
 8005d44:	d12b      	bne.n	8005d9e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d81d      	bhi.n	8005d90 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	889b      	ldrh	r3, [r3, #4]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d813      	bhi.n	8005d86 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	4798      	blx	r3
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	88db      	ldrh	r3, [r3, #6]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d110      	bne.n	8005d9a <USBD_StdItfReq+0x7a>
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10d      	bne.n	8005d9a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fd80 	bl	8006884 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005d84:	e009      	b.n	8005d9a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fccd 	bl	8006728 <USBD_CtlError>
          break;
 8005d8e:	e004      	b.n	8005d9a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fcc8 	bl	8006728 <USBD_CtlError>
          break;
 8005d98:	e000      	b.n	8005d9c <USBD_StdItfReq+0x7c>
          break;
 8005d9a:	bf00      	nop
      }
      break;
 8005d9c:	e004      	b.n	8005da8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005d9e:	6839      	ldr	r1, [r7, #0]
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fcc1 	bl	8006728 <USBD_CtlError>
      break;
 8005da6:	bf00      	nop
  }

  return ret;
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	889b      	ldrh	r3, [r3, #4]
 8005dc4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dce:	2b40      	cmp	r3, #64	; 0x40
 8005dd0:	d007      	beq.n	8005de2 <USBD_StdEPReq+0x30>
 8005dd2:	2b40      	cmp	r3, #64	; 0x40
 8005dd4:	f200 8145 	bhi.w	8006062 <USBD_StdEPReq+0x2b0>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00c      	beq.n	8005df6 <USBD_StdEPReq+0x44>
 8005ddc:	2b20      	cmp	r3, #32
 8005dde:	f040 8140 	bne.w	8006062 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	4798      	blx	r3
 8005df0:	4603      	mov	r3, r0
 8005df2:	73fb      	strb	r3, [r7, #15]
      break;
 8005df4:	e13a      	b.n	800606c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d007      	beq.n	8005e0e <USBD_StdEPReq+0x5c>
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	f300 8129 	bgt.w	8006056 <USBD_StdEPReq+0x2a4>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d07f      	beq.n	8005f08 <USBD_StdEPReq+0x156>
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d03c      	beq.n	8005e86 <USBD_StdEPReq+0xd4>
 8005e0c:	e123      	b.n	8006056 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d002      	beq.n	8005e20 <USBD_StdEPReq+0x6e>
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d016      	beq.n	8005e4c <USBD_StdEPReq+0x9a>
 8005e1e:	e02c      	b.n	8005e7a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e20:	7bbb      	ldrb	r3, [r7, #14]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00d      	beq.n	8005e42 <USBD_StdEPReq+0x90>
 8005e26:	7bbb      	ldrb	r3, [r7, #14]
 8005e28:	2b80      	cmp	r3, #128	; 0x80
 8005e2a:	d00a      	beq.n	8005e42 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e2c:	7bbb      	ldrb	r3, [r7, #14]
 8005e2e:	4619      	mov	r1, r3
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f001 fb23 	bl	800747c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e36:	2180      	movs	r1, #128	; 0x80
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f001 fb1f 	bl	800747c <USBD_LL_StallEP>
 8005e3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e40:	e020      	b.n	8005e84 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fc6f 	bl	8006728 <USBD_CtlError>
              break;
 8005e4a:	e01b      	b.n	8005e84 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	885b      	ldrh	r3, [r3, #2]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10e      	bne.n	8005e72 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e54:	7bbb      	ldrb	r3, [r7, #14]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00b      	beq.n	8005e72 <USBD_StdEPReq+0xc0>
 8005e5a:	7bbb      	ldrb	r3, [r7, #14]
 8005e5c:	2b80      	cmp	r3, #128	; 0x80
 8005e5e:	d008      	beq.n	8005e72 <USBD_StdEPReq+0xc0>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	88db      	ldrh	r3, [r3, #6]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d104      	bne.n	8005e72 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e68:	7bbb      	ldrb	r3, [r7, #14]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f001 fb05 	bl	800747c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fd06 	bl	8006884 <USBD_CtlSendStatus>

              break;
 8005e78:	e004      	b.n	8005e84 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005e7a:	6839      	ldr	r1, [r7, #0]
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fc53 	bl	8006728 <USBD_CtlError>
              break;
 8005e82:	bf00      	nop
          }
          break;
 8005e84:	e0ec      	b.n	8006060 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d002      	beq.n	8005e98 <USBD_StdEPReq+0xe6>
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d016      	beq.n	8005ec4 <USBD_StdEPReq+0x112>
 8005e96:	e030      	b.n	8005efa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e98:	7bbb      	ldrb	r3, [r7, #14]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00d      	beq.n	8005eba <USBD_StdEPReq+0x108>
 8005e9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ea0:	2b80      	cmp	r3, #128	; 0x80
 8005ea2:	d00a      	beq.n	8005eba <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ea4:	7bbb      	ldrb	r3, [r7, #14]
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f001 fae7 	bl	800747c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005eae:	2180      	movs	r1, #128	; 0x80
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f001 fae3 	bl	800747c <USBD_LL_StallEP>
 8005eb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005eb8:	e025      	b.n	8005f06 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fc33 	bl	8006728 <USBD_CtlError>
              break;
 8005ec2:	e020      	b.n	8005f06 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	885b      	ldrh	r3, [r3, #2]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d11b      	bne.n	8005f04 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ecc:	7bbb      	ldrb	r3, [r7, #14]
 8005ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d004      	beq.n	8005ee0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ed6:	7bbb      	ldrb	r3, [r7, #14]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f001 fb04 	bl	80074e8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fccf 	bl	8006884 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	4798      	blx	r3
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005ef8:	e004      	b.n	8005f04 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005efa:	6839      	ldr	r1, [r7, #0]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fc13 	bl	8006728 <USBD_CtlError>
              break;
 8005f02:	e000      	b.n	8005f06 <USBD_StdEPReq+0x154>
              break;
 8005f04:	bf00      	nop
          }
          break;
 8005f06:	e0ab      	b.n	8006060 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d002      	beq.n	8005f1a <USBD_StdEPReq+0x168>
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d032      	beq.n	8005f7e <USBD_StdEPReq+0x1cc>
 8005f18:	e097      	b.n	800604a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f1a:	7bbb      	ldrb	r3, [r7, #14]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <USBD_StdEPReq+0x17e>
 8005f20:	7bbb      	ldrb	r3, [r7, #14]
 8005f22:	2b80      	cmp	r3, #128	; 0x80
 8005f24:	d004      	beq.n	8005f30 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fbfd 	bl	8006728 <USBD_CtlError>
                break;
 8005f2e:	e091      	b.n	8006054 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	da0b      	bge.n	8005f50 <USBD_StdEPReq+0x19e>
 8005f38:	7bbb      	ldrb	r3, [r7, #14]
 8005f3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f3e:	4613      	mov	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	3310      	adds	r3, #16
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	e00b      	b.n	8005f68 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f50:	7bbb      	ldrb	r3, [r7, #14]
 8005f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	4413      	add	r3, r2
 8005f66:	3304      	adds	r3, #4
 8005f68:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2202      	movs	r2, #2
 8005f74:	4619      	mov	r1, r3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fc47 	bl	800680a <USBD_CtlSendData>
              break;
 8005f7c:	e06a      	b.n	8006054 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005f7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	da11      	bge.n	8005faa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f86:	7bbb      	ldrb	r3, [r7, #14]
 8005f88:	f003 020f 	and.w	r2, r3, #15
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	3324      	adds	r3, #36	; 0x24
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d117      	bne.n	8005fd0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fbc0 	bl	8006728 <USBD_CtlError>
                  break;
 8005fa8:	e054      	b.n	8006054 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005faa:	7bbb      	ldrb	r3, [r7, #14]
 8005fac:	f003 020f 	and.w	r2, r3, #15
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d104      	bne.n	8005fd0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005fc6:	6839      	ldr	r1, [r7, #0]
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 fbad 	bl	8006728 <USBD_CtlError>
                  break;
 8005fce:	e041      	b.n	8006054 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	da0b      	bge.n	8005ff0 <USBD_StdEPReq+0x23e>
 8005fd8:	7bbb      	ldrb	r3, [r7, #14]
 8005fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	3310      	adds	r3, #16
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	4413      	add	r3, r2
 8005fec:	3304      	adds	r3, #4
 8005fee:	e00b      	b.n	8006008 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ff0:	7bbb      	ldrb	r3, [r7, #14]
 8005ff2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	4413      	add	r3, r2
 8006006:	3304      	adds	r3, #4
 8006008:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800600a:	7bbb      	ldrb	r3, [r7, #14]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <USBD_StdEPReq+0x264>
 8006010:	7bbb      	ldrb	r3, [r7, #14]
 8006012:	2b80      	cmp	r3, #128	; 0x80
 8006014:	d103      	bne.n	800601e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	e00e      	b.n	800603c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800601e:	7bbb      	ldrb	r3, [r7, #14]
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f001 fa96 	bl	8007554 <USBD_LL_IsStallEP>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2201      	movs	r2, #1
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	e002      	b.n	800603c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2202      	movs	r2, #2
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fbe1 	bl	800680a <USBD_CtlSendData>
              break;
 8006048:	e004      	b.n	8006054 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800604a:	6839      	ldr	r1, [r7, #0]
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fb6b 	bl	8006728 <USBD_CtlError>
              break;
 8006052:	bf00      	nop
          }
          break;
 8006054:	e004      	b.n	8006060 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fb65 	bl	8006728 <USBD_CtlError>
          break;
 800605e:	bf00      	nop
      }
      break;
 8006060:	e004      	b.n	800606c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fb5f 	bl	8006728 <USBD_CtlError>
      break;
 800606a:	bf00      	nop
  }

  return ret;
 800606c:	7bfb      	ldrb	r3, [r7, #15]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	885b      	ldrh	r3, [r3, #2]
 8006092:	0a1b      	lsrs	r3, r3, #8
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	2b0e      	cmp	r3, #14
 800609a:	f200 8152 	bhi.w	8006342 <USBD_GetDescriptor+0x2ca>
 800609e:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <USBD_GetDescriptor+0x2c>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	08006115 	.word	0x08006115
 80060a8:	0800612d 	.word	0x0800612d
 80060ac:	0800616d 	.word	0x0800616d
 80060b0:	08006343 	.word	0x08006343
 80060b4:	08006343 	.word	0x08006343
 80060b8:	080062e3 	.word	0x080062e3
 80060bc:	0800630f 	.word	0x0800630f
 80060c0:	08006343 	.word	0x08006343
 80060c4:	08006343 	.word	0x08006343
 80060c8:	08006343 	.word	0x08006343
 80060cc:	08006343 	.word	0x08006343
 80060d0:	08006343 	.word	0x08006343
 80060d4:	08006343 	.word	0x08006343
 80060d8:	08006343 	.word	0x08006343
 80060dc:	080060e1 	.word	0x080060e1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	7c12      	ldrb	r2, [r2, #16]
 80060f8:	f107 0108 	add.w	r1, r7, #8
 80060fc:	4610      	mov	r0, r2
 80060fe:	4798      	blx	r3
 8006100:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006102:	e126      	b.n	8006352 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fb0e 	bl	8006728 <USBD_CtlError>
        err++;
 800610c:	7afb      	ldrb	r3, [r7, #11]
 800610e:	3301      	adds	r3, #1
 8006110:	72fb      	strb	r3, [r7, #11]
      break;
 8006112:	e11e      	b.n	8006352 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	7c12      	ldrb	r2, [r2, #16]
 8006120:	f107 0108 	add.w	r1, r7, #8
 8006124:	4610      	mov	r0, r2
 8006126:	4798      	blx	r3
 8006128:	60f8      	str	r0, [r7, #12]
      break;
 800612a:	e112      	b.n	8006352 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	7c1b      	ldrb	r3, [r3, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10d      	bne.n	8006150 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800613a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613c:	f107 0208 	add.w	r2, r7, #8
 8006140:	4610      	mov	r0, r2
 8006142:	4798      	blx	r3
 8006144:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3301      	adds	r3, #1
 800614a:	2202      	movs	r2, #2
 800614c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800614e:	e100      	b.n	8006352 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006158:	f107 0208 	add.w	r2, r7, #8
 800615c:	4610      	mov	r0, r2
 800615e:	4798      	blx	r3
 8006160:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3301      	adds	r3, #1
 8006166:	2202      	movs	r2, #2
 8006168:	701a      	strb	r2, [r3, #0]
      break;
 800616a:	e0f2      	b.n	8006352 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	885b      	ldrh	r3, [r3, #2]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b05      	cmp	r3, #5
 8006174:	f200 80ac 	bhi.w	80062d0 <USBD_GetDescriptor+0x258>
 8006178:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <USBD_GetDescriptor+0x108>)
 800617a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617e:	bf00      	nop
 8006180:	08006199 	.word	0x08006199
 8006184:	080061cd 	.word	0x080061cd
 8006188:	08006201 	.word	0x08006201
 800618c:	08006235 	.word	0x08006235
 8006190:	08006269 	.word	0x08006269
 8006194:	0800629d 	.word	0x0800629d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00b      	beq.n	80061bc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	7c12      	ldrb	r2, [r2, #16]
 80061b0:	f107 0108 	add.w	r1, r7, #8
 80061b4:	4610      	mov	r0, r2
 80061b6:	4798      	blx	r3
 80061b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061ba:	e091      	b.n	80062e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fab2 	bl	8006728 <USBD_CtlError>
            err++;
 80061c4:	7afb      	ldrb	r3, [r7, #11]
 80061c6:	3301      	adds	r3, #1
 80061c8:	72fb      	strb	r3, [r7, #11]
          break;
 80061ca:	e089      	b.n	80062e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00b      	beq.n	80061f0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	7c12      	ldrb	r2, [r2, #16]
 80061e4:	f107 0108 	add.w	r1, r7, #8
 80061e8:	4610      	mov	r0, r2
 80061ea:	4798      	blx	r3
 80061ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061ee:	e077      	b.n	80062e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fa98 	bl	8006728 <USBD_CtlError>
            err++;
 80061f8:	7afb      	ldrb	r3, [r7, #11]
 80061fa:	3301      	adds	r3, #1
 80061fc:	72fb      	strb	r3, [r7, #11]
          break;
 80061fe:	e06f      	b.n	80062e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00b      	beq.n	8006224 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	7c12      	ldrb	r2, [r2, #16]
 8006218:	f107 0108 	add.w	r1, r7, #8
 800621c:	4610      	mov	r0, r2
 800621e:	4798      	blx	r3
 8006220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006222:	e05d      	b.n	80062e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fa7e 	bl	8006728 <USBD_CtlError>
            err++;
 800622c:	7afb      	ldrb	r3, [r7, #11]
 800622e:	3301      	adds	r3, #1
 8006230:	72fb      	strb	r3, [r7, #11]
          break;
 8006232:	e055      	b.n	80062e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00b      	beq.n	8006258 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	7c12      	ldrb	r2, [r2, #16]
 800624c:	f107 0108 	add.w	r1, r7, #8
 8006250:	4610      	mov	r0, r2
 8006252:	4798      	blx	r3
 8006254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006256:	e043      	b.n	80062e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fa64 	bl	8006728 <USBD_CtlError>
            err++;
 8006260:	7afb      	ldrb	r3, [r7, #11]
 8006262:	3301      	adds	r3, #1
 8006264:	72fb      	strb	r3, [r7, #11]
          break;
 8006266:	e03b      	b.n	80062e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00b      	beq.n	800628c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	7c12      	ldrb	r2, [r2, #16]
 8006280:	f107 0108 	add.w	r1, r7, #8
 8006284:	4610      	mov	r0, r2
 8006286:	4798      	blx	r3
 8006288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800628a:	e029      	b.n	80062e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fa4a 	bl	8006728 <USBD_CtlError>
            err++;
 8006294:	7afb      	ldrb	r3, [r7, #11]
 8006296:	3301      	adds	r3, #1
 8006298:	72fb      	strb	r3, [r7, #11]
          break;
 800629a:	e021      	b.n	80062e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00b      	beq.n	80062c0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	7c12      	ldrb	r2, [r2, #16]
 80062b4:	f107 0108 	add.w	r1, r7, #8
 80062b8:	4610      	mov	r0, r2
 80062ba:	4798      	blx	r3
 80062bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062be:	e00f      	b.n	80062e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80062c0:	6839      	ldr	r1, [r7, #0]
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fa30 	bl	8006728 <USBD_CtlError>
            err++;
 80062c8:	7afb      	ldrb	r3, [r7, #11]
 80062ca:	3301      	adds	r3, #1
 80062cc:	72fb      	strb	r3, [r7, #11]
          break;
 80062ce:	e007      	b.n	80062e0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fa28 	bl	8006728 <USBD_CtlError>
          err++;
 80062d8:	7afb      	ldrb	r3, [r7, #11]
 80062da:	3301      	adds	r3, #1
 80062dc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80062de:	bf00      	nop
      }
      break;
 80062e0:	e037      	b.n	8006352 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	7c1b      	ldrb	r3, [r3, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d109      	bne.n	80062fe <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f2:	f107 0208 	add.w	r2, r7, #8
 80062f6:	4610      	mov	r0, r2
 80062f8:	4798      	blx	r3
 80062fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062fc:	e029      	b.n	8006352 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fa11 	bl	8006728 <USBD_CtlError>
        err++;
 8006306:	7afb      	ldrb	r3, [r7, #11]
 8006308:	3301      	adds	r3, #1
 800630a:	72fb      	strb	r3, [r7, #11]
      break;
 800630c:	e021      	b.n	8006352 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	7c1b      	ldrb	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10d      	bne.n	8006332 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	f107 0208 	add.w	r2, r7, #8
 8006322:	4610      	mov	r0, r2
 8006324:	4798      	blx	r3
 8006326:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3301      	adds	r3, #1
 800632c:	2207      	movs	r2, #7
 800632e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006330:	e00f      	b.n	8006352 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f9f7 	bl	8006728 <USBD_CtlError>
        err++;
 800633a:	7afb      	ldrb	r3, [r7, #11]
 800633c:	3301      	adds	r3, #1
 800633e:	72fb      	strb	r3, [r7, #11]
      break;
 8006340:	e007      	b.n	8006352 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006342:	6839      	ldr	r1, [r7, #0]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f9ef 	bl	8006728 <USBD_CtlError>
      err++;
 800634a:	7afb      	ldrb	r3, [r7, #11]
 800634c:	3301      	adds	r3, #1
 800634e:	72fb      	strb	r3, [r7, #11]
      break;
 8006350:	bf00      	nop
  }

  if (err != 0U)
 8006352:	7afb      	ldrb	r3, [r7, #11]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d11e      	bne.n	8006396 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	88db      	ldrh	r3, [r3, #6]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d016      	beq.n	800638e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006360:	893b      	ldrh	r3, [r7, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00e      	beq.n	8006384 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	88da      	ldrh	r2, [r3, #6]
 800636a:	893b      	ldrh	r3, [r7, #8]
 800636c:	4293      	cmp	r3, r2
 800636e:	bf28      	it	cs
 8006370:	4613      	movcs	r3, r2
 8006372:	b29b      	uxth	r3, r3
 8006374:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006376:	893b      	ldrh	r3, [r7, #8]
 8006378:	461a      	mov	r2, r3
 800637a:	68f9      	ldr	r1, [r7, #12]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fa44 	bl	800680a <USBD_CtlSendData>
 8006382:	e009      	b.n	8006398 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f9ce 	bl	8006728 <USBD_CtlError>
 800638c:	e004      	b.n	8006398 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fa78 	bl	8006884 <USBD_CtlSendStatus>
 8006394:	e000      	b.n	8006398 <USBD_GetDescriptor+0x320>
    return;
 8006396:	bf00      	nop
  }
}
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop

080063a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	889b      	ldrh	r3, [r3, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d131      	bne.n	8006416 <USBD_SetAddress+0x76>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	88db      	ldrh	r3, [r3, #6]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d12d      	bne.n	8006416 <USBD_SetAddress+0x76>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	885b      	ldrh	r3, [r3, #2]
 80063be:	2b7f      	cmp	r3, #127	; 0x7f
 80063c0:	d829      	bhi.n	8006416 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	885b      	ldrh	r3, [r3, #2]
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d104      	bne.n	80063e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f9a3 	bl	8006728 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063e2:	e01d      	b.n	8006420 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	7bfa      	ldrb	r2, [r7, #15]
 80063e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 f8db 	bl	80075ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fa44 	bl	8006884 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d004      	beq.n	800640c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2202      	movs	r2, #2
 8006406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800640a:	e009      	b.n	8006420 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006414:	e004      	b.n	8006420 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f985 	bl	8006728 <USBD_CtlError>
  }
}
 800641e:	bf00      	nop
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	885b      	ldrh	r3, [r3, #2]
 800643a:	b2da      	uxtb	r2, r3
 800643c:	4b4c      	ldr	r3, [pc, #304]	; (8006570 <USBD_SetConfig+0x148>)
 800643e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006440:	4b4b      	ldr	r3, [pc, #300]	; (8006570 <USBD_SetConfig+0x148>)
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d905      	bls.n	8006454 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f96c 	bl	8006728 <USBD_CtlError>
    return USBD_FAIL;
 8006450:	2303      	movs	r3, #3
 8006452:	e088      	b.n	8006566 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d002      	beq.n	8006466 <USBD_SetConfig+0x3e>
 8006460:	2b03      	cmp	r3, #3
 8006462:	d025      	beq.n	80064b0 <USBD_SetConfig+0x88>
 8006464:	e071      	b.n	800654a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006466:	4b42      	ldr	r3, [pc, #264]	; (8006570 <USBD_SetConfig+0x148>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d01c      	beq.n	80064a8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800646e:	4b40      	ldr	r3, [pc, #256]	; (8006570 <USBD_SetConfig+0x148>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006478:	4b3d      	ldr	r3, [pc, #244]	; (8006570 <USBD_SetConfig+0x148>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff f91e 	bl	80056c0 <USBD_SetClassConfig>
 8006484:	4603      	mov	r3, r0
 8006486:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006488:	7bfb      	ldrb	r3, [r7, #15]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d004      	beq.n	8006498 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f949 	bl	8006728 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006496:	e065      	b.n	8006564 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f9f3 	bl	8006884 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2203      	movs	r2, #3
 80064a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80064a6:	e05d      	b.n	8006564 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f9eb 	bl	8006884 <USBD_CtlSendStatus>
      break;
 80064ae:	e059      	b.n	8006564 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80064b0:	4b2f      	ldr	r3, [pc, #188]	; (8006570 <USBD_SetConfig+0x148>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d112      	bne.n	80064de <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80064c0:	4b2b      	ldr	r3, [pc, #172]	; (8006570 <USBD_SetConfig+0x148>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80064ca:	4b29      	ldr	r3, [pc, #164]	; (8006570 <USBD_SetConfig+0x148>)
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	4619      	mov	r1, r3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff f911 	bl	80056f8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f9d4 	bl	8006884 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80064dc:	e042      	b.n	8006564 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80064de:	4b24      	ldr	r3, [pc, #144]	; (8006570 <USBD_SetConfig+0x148>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	461a      	mov	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d02a      	beq.n	8006542 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	4619      	mov	r1, r3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff f8ff 	bl	80056f8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80064fa:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <USBD_SetConfig+0x148>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006504:	4b1a      	ldr	r3, [pc, #104]	; (8006570 <USBD_SetConfig+0x148>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff f8d8 	bl	80056c0 <USBD_SetClassConfig>
 8006510:	4603      	mov	r3, r0
 8006512:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00f      	beq.n	800653a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f903 	bl	8006728 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	b2db      	uxtb	r3, r3
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff f8e4 	bl	80056f8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006538:	e014      	b.n	8006564 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f9a2 	bl	8006884 <USBD_CtlSendStatus>
      break;
 8006540:	e010      	b.n	8006564 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f99e 	bl	8006884 <USBD_CtlSendStatus>
      break;
 8006548:	e00c      	b.n	8006564 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f8eb 	bl	8006728 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006552:	4b07      	ldr	r3, [pc, #28]	; (8006570 <USBD_SetConfig+0x148>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff f8cd 	bl	80056f8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800655e:	2303      	movs	r3, #3
 8006560:	73fb      	strb	r3, [r7, #15]
      break;
 8006562:	bf00      	nop
  }

  return ret;
 8006564:	7bfb      	ldrb	r3, [r7, #15]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000190 	.word	0x20000190

08006574 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	88db      	ldrh	r3, [r3, #6]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d004      	beq.n	8006590 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f8cd 	bl	8006728 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800658e:	e023      	b.n	80065d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	dc02      	bgt.n	80065a2 <USBD_GetConfig+0x2e>
 800659c:	2b00      	cmp	r3, #0
 800659e:	dc03      	bgt.n	80065a8 <USBD_GetConfig+0x34>
 80065a0:	e015      	b.n	80065ce <USBD_GetConfig+0x5a>
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d00b      	beq.n	80065be <USBD_GetConfig+0x4a>
 80065a6:	e012      	b.n	80065ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3308      	adds	r3, #8
 80065b2:	2201      	movs	r2, #1
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f927 	bl	800680a <USBD_CtlSendData>
        break;
 80065bc:	e00c      	b.n	80065d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3304      	adds	r3, #4
 80065c2:	2201      	movs	r2, #1
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f91f 	bl	800680a <USBD_CtlSendData>
        break;
 80065cc:	e004      	b.n	80065d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f8a9 	bl	8006728 <USBD_CtlError>
        break;
 80065d6:	bf00      	nop
}
 80065d8:	bf00      	nop
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	3b01      	subs	r3, #1
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d81e      	bhi.n	8006636 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	88db      	ldrh	r3, [r3, #6]
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d004      	beq.n	800660a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f890 	bl	8006728 <USBD_CtlError>
        break;
 8006608:	e01a      	b.n	8006640 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006616:	2b00      	cmp	r3, #0
 8006618:	d005      	beq.n	8006626 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f043 0202 	orr.w	r2, r3, #2
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	330c      	adds	r3, #12
 800662a:	2202      	movs	r2, #2
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f8eb 	bl	800680a <USBD_CtlSendData>
      break;
 8006634:	e004      	b.n	8006640 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f875 	bl	8006728 <USBD_CtlError>
      break;
 800663e:	bf00      	nop
  }
}
 8006640:	bf00      	nop
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	885b      	ldrh	r3, [r3, #2]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d106      	bne.n	8006668 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f90e 	bl	8006884 <USBD_CtlSendStatus>
  }
}
 8006668:	bf00      	nop
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006680:	b2db      	uxtb	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	2b02      	cmp	r3, #2
 8006686:	d80b      	bhi.n	80066a0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	885b      	ldrh	r3, [r3, #2]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d10c      	bne.n	80066aa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f8f3 	bl	8006884 <USBD_CtlSendStatus>
      }
      break;
 800669e:	e004      	b.n	80066aa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f840 	bl	8006728 <USBD_CtlError>
      break;
 80066a8:	e000      	b.n	80066ac <USBD_ClrFeature+0x3c>
      break;
 80066aa:	bf00      	nop
  }
}
 80066ac:	bf00      	nop
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	781a      	ldrb	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3301      	adds	r3, #1
 80066ce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	781a      	ldrb	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3301      	adds	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f7ff fa91 	bl	8005c06 <SWAPBYTE>
 80066e4:	4603      	mov	r3, r0
 80066e6:	461a      	mov	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3301      	adds	r3, #1
 80066f6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f7ff fa84 	bl	8005c06 <SWAPBYTE>
 80066fe:	4603      	mov	r3, r0
 8006700:	461a      	mov	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	3301      	adds	r3, #1
 800670a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3301      	adds	r3, #1
 8006710:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f7ff fa77 	bl	8005c06 <SWAPBYTE>
 8006718:	4603      	mov	r3, r0
 800671a:	461a      	mov	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	80da      	strh	r2, [r3, #6]
}
 8006720:	bf00      	nop
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006732:	2180      	movs	r1, #128	; 0x80
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fea1 	bl	800747c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800673a:	2100      	movs	r1, #0
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fe9d 	bl	800747c <USBD_LL_StallEP>
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b086      	sub	sp, #24
 800674e:	af00      	add	r7, sp, #0
 8006750:	60f8      	str	r0, [r7, #12]
 8006752:	60b9      	str	r1, [r7, #8]
 8006754:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d036      	beq.n	80067ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006764:	6938      	ldr	r0, [r7, #16]
 8006766:	f000 f836 	bl	80067d6 <USBD_GetLen>
 800676a:	4603      	mov	r3, r0
 800676c:	3301      	adds	r3, #1
 800676e:	b29b      	uxth	r3, r3
 8006770:	005b      	lsls	r3, r3, #1
 8006772:	b29a      	uxth	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006778:	7dfb      	ldrb	r3, [r7, #23]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	4413      	add	r3, r2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	7812      	ldrb	r2, [r2, #0]
 8006782:	701a      	strb	r2, [r3, #0]
  idx++;
 8006784:	7dfb      	ldrb	r3, [r7, #23]
 8006786:	3301      	adds	r3, #1
 8006788:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800678a:	7dfb      	ldrb	r3, [r7, #23]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	4413      	add	r3, r2
 8006790:	2203      	movs	r2, #3
 8006792:	701a      	strb	r2, [r3, #0]
  idx++;
 8006794:	7dfb      	ldrb	r3, [r7, #23]
 8006796:	3301      	adds	r3, #1
 8006798:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800679a:	e013      	b.n	80067c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800679c:	7dfb      	ldrb	r3, [r7, #23]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	4413      	add	r3, r2
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	7812      	ldrb	r2, [r2, #0]
 80067a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	3301      	adds	r3, #1
 80067ac:	613b      	str	r3, [r7, #16]
    idx++;
 80067ae:	7dfb      	ldrb	r3, [r7, #23]
 80067b0:	3301      	adds	r3, #1
 80067b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80067b4:	7dfb      	ldrb	r3, [r7, #23]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	4413      	add	r3, r2
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]
    idx++;
 80067be:	7dfb      	ldrb	r3, [r7, #23]
 80067c0:	3301      	adds	r3, #1
 80067c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e7      	bne.n	800679c <USBD_GetString+0x52>
 80067cc:	e000      	b.n	80067d0 <USBD_GetString+0x86>
    return;
 80067ce:	bf00      	nop
  }
}
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b085      	sub	sp, #20
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80067e6:	e005      	b.n	80067f4 <USBD_GetLen+0x1e>
  {
    len++;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
 80067ea:	3301      	adds	r3, #1
 80067ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	3301      	adds	r3, #1
 80067f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1f5      	bne.n	80067e8 <USBD_GetLen+0x12>
  }

  return len;
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b084      	sub	sp, #16
 800680e:	af00      	add	r7, sp, #0
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2202      	movs	r2, #2
 800681a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	2100      	movs	r1, #0
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 fef1 	bl	8007618 <USBD_LL_Transmit>

  return USBD_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	2100      	movs	r1, #0
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 fee0 	bl	8007618 <USBD_LL_Transmit>

  return USBD_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	2100      	movs	r1, #0
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 ff07 	bl	8007688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2204      	movs	r2, #4
 8006890:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006894:	2300      	movs	r3, #0
 8006896:	2200      	movs	r2, #0
 8006898:	2100      	movs	r1, #0
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 febc 	bl	8007618 <USBD_LL_Transmit>

  return USBD_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b082      	sub	sp, #8
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2205      	movs	r2, #5
 80068b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068ba:	2300      	movs	r3, #0
 80068bc:	2200      	movs	r2, #0
 80068be:	2100      	movs	r1, #0
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fee1 	bl	8007688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80068d4:	f7f9 fdf4 	bl	80004c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80068d8:	f000 f82a 	bl	8006930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80068dc:	f000 f8ea 	bl	8006ab4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80068e0:	f000 f878 	bl	80069d4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80068e4:	f000 fb1e 	bl	8006f24 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80068e8:	f000 f8b4 	bl	8006a54 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (button_flag==1)
 80068ec:	4b0d      	ldr	r3, [pc, #52]	; (8006924 <main+0x54>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d1fb      	bne.n	80068ec <main+0x1c>
	  {
	   mousehid.button = 1;
 80068f4:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <main+0x58>)
 80068f6:	2201      	movs	r2, #1
 80068f8:	701a      	strb	r2, [r3, #0]
	   USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 80068fa:	2204      	movs	r2, #4
 80068fc:	490a      	ldr	r1, [pc, #40]	; (8006928 <main+0x58>)
 80068fe:	480b      	ldr	r0, [pc, #44]	; (800692c <main+0x5c>)
 8006900:	f7fe fdf6 	bl	80054f0 <USBD_HID_SendReport>
	   HAL_Delay (50);
 8006904:	2032      	movs	r0, #50	; 0x32
 8006906:	f7f9 fe4f 	bl	80005a8 <HAL_Delay>
	   mousehid.button = 0;
 800690a:	4b07      	ldr	r3, [pc, #28]	; (8006928 <main+0x58>)
 800690c:	2200      	movs	r2, #0
 800690e:	701a      	strb	r2, [r3, #0]

	   USBD_HID_SendReport(&hUsbDeviceFS,&mousehid, sizeof (mousehid));
 8006910:	2204      	movs	r2, #4
 8006912:	4905      	ldr	r1, [pc, #20]	; (8006928 <main+0x58>)
 8006914:	4805      	ldr	r0, [pc, #20]	; (800692c <main+0x5c>)
 8006916:	f7fe fdeb 	bl	80054f0 <USBD_HID_SendReport>
	   button_flag =0;
 800691a:	4b02      	ldr	r3, [pc, #8]	; (8006924 <main+0x54>)
 800691c:	2200      	movs	r2, #0
 800691e:	701a      	strb	r2, [r3, #0]
	  if (button_flag==1)
 8006920:	e7e4      	b.n	80068ec <main+0x1c>
 8006922:	bf00      	nop
 8006924:	20000198 	.word	0x20000198
 8006928:	20000194 	.word	0x20000194
 800692c:	20000284 	.word	0x20000284

08006930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b096      	sub	sp, #88	; 0x58
 8006934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006936:	f107 0314 	add.w	r3, r7, #20
 800693a:	2244      	movs	r2, #68	; 0x44
 800693c:	2100      	movs	r1, #0
 800693e:	4618      	mov	r0, r3
 8006940:	f001 f8b6 	bl	8007ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006944:	463b      	mov	r3, r7
 8006946:	2200      	movs	r2, #0
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	605a      	str	r2, [r3, #4]
 800694c:	609a      	str	r2, [r3, #8]
 800694e:	60da      	str	r2, [r3, #12]
 8006950:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006952:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006956:	f7fb fb0d 	bl	8001f74 <HAL_PWREx_ControlVoltageScaling>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8006960:	f000 f978 	bl	8006c54 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8006964:	2310      	movs	r3, #16
 8006966:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006968:	2301      	movs	r3, #1
 800696a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800696c:	2300      	movs	r3, #0
 800696e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006970:	2360      	movs	r3, #96	; 0x60
 8006972:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006974:	2302      	movs	r3, #2
 8006976:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006978:	2301      	movs	r3, #1
 800697a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800697c:	2301      	movs	r3, #1
 800697e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8006980:	2328      	movs	r3, #40	; 0x28
 8006982:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006984:	2307      	movs	r3, #7
 8006986:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006988:	2302      	movs	r3, #2
 800698a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800698c:	2302      	movs	r3, #2
 800698e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006990:	f107 0314 	add.w	r3, r7, #20
 8006994:	4618      	mov	r0, r3
 8006996:	f7fb fb53 	bl	8002040 <HAL_RCC_OscConfig>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80069a0:	f000 f958 	bl	8006c54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80069a4:	230f      	movs	r3, #15
 80069a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80069a8:	2303      	movs	r3, #3
 80069aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80069b4:	2300      	movs	r3, #0
 80069b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80069b8:	463b      	mov	r3, r7
 80069ba:	2104      	movs	r1, #4
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fb ff25 	bl	800280c <HAL_RCC_ClockConfig>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80069c8:	f000 f944 	bl	8006c54 <Error_Handler>
  }
}
 80069cc:	bf00      	nop
 80069ce:	3758      	adds	r7, #88	; 0x58
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80069d8:	4b1b      	ldr	r3, [pc, #108]	; (8006a48 <MX_I2C1_Init+0x74>)
 80069da:	4a1c      	ldr	r2, [pc, #112]	; (8006a4c <MX_I2C1_Init+0x78>)
 80069dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80069de:	4b1a      	ldr	r3, [pc, #104]	; (8006a48 <MX_I2C1_Init+0x74>)
 80069e0:	4a1b      	ldr	r2, [pc, #108]	; (8006a50 <MX_I2C1_Init+0x7c>)
 80069e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80069e4:	4b18      	ldr	r3, [pc, #96]	; (8006a48 <MX_I2C1_Init+0x74>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80069ea:	4b17      	ldr	r3, [pc, #92]	; (8006a48 <MX_I2C1_Init+0x74>)
 80069ec:	2201      	movs	r2, #1
 80069ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80069f0:	4b15      	ldr	r3, [pc, #84]	; (8006a48 <MX_I2C1_Init+0x74>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80069f6:	4b14      	ldr	r3, [pc, #80]	; (8006a48 <MX_I2C1_Init+0x74>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80069fc:	4b12      	ldr	r3, [pc, #72]	; (8006a48 <MX_I2C1_Init+0x74>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006a02:	4b11      	ldr	r3, [pc, #68]	; (8006a48 <MX_I2C1_Init+0x74>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006a08:	4b0f      	ldr	r3, [pc, #60]	; (8006a48 <MX_I2C1_Init+0x74>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006a0e:	480e      	ldr	r0, [pc, #56]	; (8006a48 <MX_I2C1_Init+0x74>)
 8006a10:	f7fa f8f4 	bl	8000bfc <HAL_I2C_Init>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006a1a:	f000 f91b 	bl	8006c54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006a1e:	2100      	movs	r1, #0
 8006a20:	4809      	ldr	r0, [pc, #36]	; (8006a48 <MX_I2C1_Init+0x74>)
 8006a22:	f7fa f97a 	bl	8000d1a <HAL_I2CEx_ConfigAnalogFilter>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006a2c:	f000 f912 	bl	8006c54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006a30:	2100      	movs	r1, #0
 8006a32:	4805      	ldr	r0, [pc, #20]	; (8006a48 <MX_I2C1_Init+0x74>)
 8006a34:	f7fa f9bc 	bl	8000db0 <HAL_I2CEx_ConfigDigitalFilter>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006a3e:	f000 f909 	bl	8006c54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006a42:	bf00      	nop
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	200001b4 	.word	0x200001b4
 8006a4c:	40005400 	.word	0x40005400
 8006a50:	10909cec 	.word	0x10909cec

08006a54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006a58:	4b14      	ldr	r3, [pc, #80]	; (8006aac <MX_USART1_UART_Init+0x58>)
 8006a5a:	4a15      	ldr	r2, [pc, #84]	; (8006ab0 <MX_USART1_UART_Init+0x5c>)
 8006a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006a5e:	4b13      	ldr	r3, [pc, #76]	; (8006aac <MX_USART1_UART_Init+0x58>)
 8006a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006a66:	4b11      	ldr	r3, [pc, #68]	; (8006aac <MX_USART1_UART_Init+0x58>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006a6c:	4b0f      	ldr	r3, [pc, #60]	; (8006aac <MX_USART1_UART_Init+0x58>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006a72:	4b0e      	ldr	r3, [pc, #56]	; (8006aac <MX_USART1_UART_Init+0x58>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006a78:	4b0c      	ldr	r3, [pc, #48]	; (8006aac <MX_USART1_UART_Init+0x58>)
 8006a7a:	220c      	movs	r2, #12
 8006a7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a7e:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <MX_USART1_UART_Init+0x58>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a84:	4b09      	ldr	r3, [pc, #36]	; (8006aac <MX_USART1_UART_Init+0x58>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006a8a:	4b08      	ldr	r3, [pc, #32]	; (8006aac <MX_USART1_UART_Init+0x58>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006a90:	4b06      	ldr	r3, [pc, #24]	; (8006aac <MX_USART1_UART_Init+0x58>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006a96:	4805      	ldr	r0, [pc, #20]	; (8006aac <MX_USART1_UART_Init+0x58>)
 8006a98:	f7fc fd7a 	bl	8003590 <HAL_UART_Init>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006aa2:	f000 f8d7 	bl	8006c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006aa6:	bf00      	nop
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20000200 	.word	0x20000200
 8006ab0:	40013800 	.word	0x40013800

08006ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b08a      	sub	sp, #40	; 0x28
 8006ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006aba:	f107 0314 	add.w	r3, r7, #20
 8006abe:	2200      	movs	r2, #0
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	605a      	str	r2, [r3, #4]
 8006ac4:	609a      	str	r2, [r3, #8]
 8006ac6:	60da      	str	r2, [r3, #12]
 8006ac8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006aca:	4b4f      	ldr	r3, [pc, #316]	; (8006c08 <MX_GPIO_Init+0x154>)
 8006acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ace:	4a4e      	ldr	r2, [pc, #312]	; (8006c08 <MX_GPIO_Init+0x154>)
 8006ad0:	f043 0310 	orr.w	r3, r3, #16
 8006ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ad6:	4b4c      	ldr	r3, [pc, #304]	; (8006c08 <MX_GPIO_Init+0x154>)
 8006ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ada:	f003 0310 	and.w	r3, r3, #16
 8006ade:	613b      	str	r3, [r7, #16]
 8006ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ae2:	4b49      	ldr	r3, [pc, #292]	; (8006c08 <MX_GPIO_Init+0x154>)
 8006ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae6:	4a48      	ldr	r2, [pc, #288]	; (8006c08 <MX_GPIO_Init+0x154>)
 8006ae8:	f043 0304 	orr.w	r3, r3, #4
 8006aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006aee:	4b46      	ldr	r3, [pc, #280]	; (8006c08 <MX_GPIO_Init+0x154>)
 8006af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af2:	f003 0304 	and.w	r3, r3, #4
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006afa:	4b43      	ldr	r3, [pc, #268]	; (8006c08 <MX_GPIO_Init+0x154>)
 8006afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006afe:	4a42      	ldr	r2, [pc, #264]	; (8006c08 <MX_GPIO_Init+0x154>)
 8006b00:	f043 0302 	orr.w	r3, r3, #2
 8006b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b06:	4b40      	ldr	r3, [pc, #256]	; (8006c08 <MX_GPIO_Init+0x154>)
 8006b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	60bb      	str	r3, [r7, #8]
 8006b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b12:	4b3d      	ldr	r3, [pc, #244]	; (8006c08 <MX_GPIO_Init+0x154>)
 8006b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b16:	4a3c      	ldr	r2, [pc, #240]	; (8006c08 <MX_GPIO_Init+0x154>)
 8006b18:	f043 0308 	orr.w	r3, r3, #8
 8006b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b1e:	4b3a      	ldr	r3, [pc, #232]	; (8006c08 <MX_GPIO_Init+0x154>)
 8006b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b22:	f003 0308 	and.w	r3, r3, #8
 8006b26:	607b      	str	r3, [r7, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b2a:	4b37      	ldr	r3, [pc, #220]	; (8006c08 <MX_GPIO_Init+0x154>)
 8006b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b2e:	4a36      	ldr	r2, [pc, #216]	; (8006c08 <MX_GPIO_Init+0x154>)
 8006b30:	f043 0301 	orr.w	r3, r3, #1
 8006b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b36:	4b34      	ldr	r3, [pc, #208]	; (8006c08 <MX_GPIO_Init+0x154>)
 8006b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	603b      	str	r3, [r7, #0]
 8006b40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 8006b42:	2201      	movs	r2, #1
 8006b44:	2108      	movs	r1, #8
 8006b46:	4831      	ldr	r0, [pc, #196]	; (8006c0c <MX_GPIO_Init+0x158>)
 8006b48:	f7fa f80e 	bl	8000b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b52:	482f      	ldr	r0, [pc, #188]	; (8006c10 <MX_GPIO_Init+0x15c>)
 8006b54:	f7fa f808 	bl	8000b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_ERROR_Pin */
  GPIO_InitStruct.Pin = LED_ERROR_Pin;
 8006b58:	2308      	movs	r3, #8
 8006b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b60:	2300      	movs	r3, #0
 8006b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b64:	2300      	movs	r3, #0
 8006b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_ERROR_GPIO_Port, &GPIO_InitStruct);
 8006b68:	f107 0314 	add.w	r3, r7, #20
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4827      	ldr	r0, [pc, #156]	; (8006c0c <MX_GPIO_Init+0x158>)
 8006b70:	f7f9 fe50 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSHBUTTON_Pin */
  GPIO_InitStruct.Pin = PUSHBUTTON_Pin;
 8006b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006b7a:	4b26      	ldr	r3, [pc, #152]	; (8006c14 <MX_GPIO_Init+0x160>)
 8006b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 8006b82:	f107 0314 	add.w	r3, r7, #20
 8006b86:	4619      	mov	r1, r3
 8006b88:	4823      	ldr	r0, [pc, #140]	; (8006c18 <MX_GPIO_Init+0x164>)
 8006b8a:	f7f9 fe43 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : test_push_Pin */
  GPIO_InitStruct.Pin = test_push_Pin;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006b92:	4b20      	ldr	r3, [pc, #128]	; (8006c14 <MX_GPIO_Init+0x160>)
 8006b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006b96:	2302      	movs	r3, #2
 8006b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(test_push_GPIO_Port, &GPIO_InitStruct);
 8006b9a:	f107 0314 	add.w	r3, r7, #20
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	481d      	ldr	r0, [pc, #116]	; (8006c18 <MX_GPIO_Init+0x164>)
 8006ba2:	f7f9 fe37 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8006ba6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bac:	2301      	movs	r3, #1
 8006bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8006bb8:	f107 0314 	add.w	r3, r7, #20
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4814      	ldr	r0, [pc, #80]	; (8006c10 <MX_GPIO_Init+0x15c>)
 8006bc0:	f7f9 fe28 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006bc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006bca:	4b12      	ldr	r3, [pc, #72]	; (8006c14 <MX_GPIO_Init+0x160>)
 8006bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bd2:	f107 0314 	add.w	r3, r7, #20
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4810      	ldr	r0, [pc, #64]	; (8006c1c <MX_GPIO_Init+0x168>)
 8006bda:	f7f9 fe1b 	bl	8000814 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006bde:	2200      	movs	r2, #0
 8006be0:	2100      	movs	r1, #0
 8006be2:	2006      	movs	r0, #6
 8006be4:	f7f9 fddf 	bl	80007a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006be8:	2006      	movs	r0, #6
 8006bea:	f7f9 fdf8 	bl	80007de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006bee:	2200      	movs	r2, #0
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	2028      	movs	r0, #40	; 0x28
 8006bf4:	f7f9 fdd7 	bl	80007a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006bf8:	2028      	movs	r0, #40	; 0x28
 8006bfa:	f7f9 fdf0 	bl	80007de <HAL_NVIC_EnableIRQ>

}
 8006bfe:	bf00      	nop
 8006c00:	3728      	adds	r7, #40	; 0x28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	48001000 	.word	0x48001000
 8006c10:	48000400 	.word	0x48000400
 8006c14:	10110000 	.word	0x10110000
 8006c18:	48000800 	.word	0x48000800
 8006c1c:	48000c00 	.word	0x48000c00

08006c20 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4603      	mov	r3, r0
 8006c28:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PUSHBUTTON_Pin)
 8006c2a:	88fb      	ldrh	r3, [r7, #6]
 8006c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c30:	d107      	bne.n	8006c42 <HAL_GPIO_EXTI_Callback+0x22>
	{
		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8006c32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c36:	4805      	ldr	r0, [pc, #20]	; (8006c4c <HAL_GPIO_EXTI_Callback+0x2c>)
 8006c38:	f7f9 ffae 	bl	8000b98 <HAL_GPIO_TogglePin>
		 button_flag = 1;
 8006c3c:	4b04      	ldr	r3, [pc, #16]	; (8006c50 <HAL_GPIO_EXTI_Callback+0x30>)
 8006c3e:	2201      	movs	r2, #1
 8006c40:	701a      	strb	r2, [r3, #0]
	}

}
 8006c42:	bf00      	nop
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	48000400 	.word	0x48000400
 8006c50:	20000198 	.word	0x20000198

08006c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2108      	movs	r1, #8
 8006c5c:	4803      	ldr	r0, [pc, #12]	; (8006c6c <Error_Handler+0x18>)
 8006c5e:	f7f9 ff83 	bl	8000b68 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006c62:	b672      	cpsid	i
}
 8006c64:	bf00      	nop
  __disable_irq();
  __BKPT();
 8006c66:	be00      	bkpt	0x0000
  while (1)
 8006c68:	e7fe      	b.n	8006c68 <Error_Handler+0x14>
 8006c6a:	bf00      	nop
 8006c6c:	48001000 	.word	0x48001000

08006c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c76:	4b0f      	ldr	r3, [pc, #60]	; (8006cb4 <HAL_MspInit+0x44>)
 8006c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c7a:	4a0e      	ldr	r2, [pc, #56]	; (8006cb4 <HAL_MspInit+0x44>)
 8006c7c:	f043 0301 	orr.w	r3, r3, #1
 8006c80:	6613      	str	r3, [r2, #96]	; 0x60
 8006c82:	4b0c      	ldr	r3, [pc, #48]	; (8006cb4 <HAL_MspInit+0x44>)
 8006c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	607b      	str	r3, [r7, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c8e:	4b09      	ldr	r3, [pc, #36]	; (8006cb4 <HAL_MspInit+0x44>)
 8006c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c92:	4a08      	ldr	r2, [pc, #32]	; (8006cb4 <HAL_MspInit+0x44>)
 8006c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c98:	6593      	str	r3, [r2, #88]	; 0x58
 8006c9a:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <HAL_MspInit+0x44>)
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ca6:	bf00      	nop
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	40021000 	.word	0x40021000

08006cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b0ac      	sub	sp, #176	; 0xb0
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	605a      	str	r2, [r3, #4]
 8006cca:	609a      	str	r2, [r3, #8]
 8006ccc:	60da      	str	r2, [r3, #12]
 8006cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006cd0:	f107 0314 	add.w	r3, r7, #20
 8006cd4:	2288      	movs	r2, #136	; 0x88
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fee9 	bl	8007ab0 <memset>
  if(hi2c->Instance==I2C1)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a21      	ldr	r2, [pc, #132]	; (8006d68 <HAL_I2C_MspInit+0xb0>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d13b      	bne.n	8006d60 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006ce8:	2340      	movs	r3, #64	; 0x40
 8006cea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006cec:	2300      	movs	r3, #0
 8006cee:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006cf0:	f107 0314 	add.w	r3, r7, #20
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fb ff8f 	bl	8002c18 <HAL_RCCEx_PeriphCLKConfig>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006d00:	f7ff ffa8 	bl	8006c54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d04:	4b19      	ldr	r3, [pc, #100]	; (8006d6c <HAL_I2C_MspInit+0xb4>)
 8006d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d08:	4a18      	ldr	r2, [pc, #96]	; (8006d6c <HAL_I2C_MspInit+0xb4>)
 8006d0a:	f043 0302 	orr.w	r3, r3, #2
 8006d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d10:	4b16      	ldr	r3, [pc, #88]	; (8006d6c <HAL_I2C_MspInit+0xb4>)
 8006d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006d1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006d20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006d24:	2312      	movs	r3, #18
 8006d26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d30:	2303      	movs	r3, #3
 8006d32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006d36:	2304      	movs	r3, #4
 8006d38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006d40:	4619      	mov	r1, r3
 8006d42:	480b      	ldr	r0, [pc, #44]	; (8006d70 <HAL_I2C_MspInit+0xb8>)
 8006d44:	f7f9 fd66 	bl	8000814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006d48:	4b08      	ldr	r3, [pc, #32]	; (8006d6c <HAL_I2C_MspInit+0xb4>)
 8006d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d4c:	4a07      	ldr	r2, [pc, #28]	; (8006d6c <HAL_I2C_MspInit+0xb4>)
 8006d4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d52:	6593      	str	r3, [r2, #88]	; 0x58
 8006d54:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <HAL_I2C_MspInit+0xb4>)
 8006d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d5c:	60fb      	str	r3, [r7, #12]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006d60:	bf00      	nop
 8006d62:	37b0      	adds	r7, #176	; 0xb0
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	40005400 	.word	0x40005400
 8006d6c:	40021000 	.word	0x40021000
 8006d70:	48000400 	.word	0x48000400

08006d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b0ac      	sub	sp, #176	; 0xb0
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	605a      	str	r2, [r3, #4]
 8006d86:	609a      	str	r2, [r3, #8]
 8006d88:	60da      	str	r2, [r3, #12]
 8006d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006d8c:	f107 0314 	add.w	r3, r7, #20
 8006d90:	2288      	movs	r2, #136	; 0x88
 8006d92:	2100      	movs	r1, #0
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 fe8b 	bl	8007ab0 <memset>
  if(huart->Instance==USART1)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a21      	ldr	r2, [pc, #132]	; (8006e24 <HAL_UART_MspInit+0xb0>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d13a      	bne.n	8006e1a <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006da4:	2301      	movs	r3, #1
 8006da6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006da8:	2300      	movs	r3, #0
 8006daa:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006dac:	f107 0314 	add.w	r3, r7, #20
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7fb ff31 	bl	8002c18 <HAL_RCCEx_PeriphCLKConfig>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006dbc:	f7ff ff4a 	bl	8006c54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006dc0:	4b19      	ldr	r3, [pc, #100]	; (8006e28 <HAL_UART_MspInit+0xb4>)
 8006dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dc4:	4a18      	ldr	r2, [pc, #96]	; (8006e28 <HAL_UART_MspInit+0xb4>)
 8006dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dca:	6613      	str	r3, [r2, #96]	; 0x60
 8006dcc:	4b16      	ldr	r3, [pc, #88]	; (8006e28 <HAL_UART_MspInit+0xb4>)
 8006dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dd4:	613b      	str	r3, [r7, #16]
 8006dd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dd8:	4b13      	ldr	r3, [pc, #76]	; (8006e28 <HAL_UART_MspInit+0xb4>)
 8006dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ddc:	4a12      	ldr	r2, [pc, #72]	; (8006e28 <HAL_UART_MspInit+0xb4>)
 8006dde:	f043 0302 	orr.w	r3, r3, #2
 8006de2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006de4:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <HAL_UART_MspInit+0xb4>)
 8006de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	60fb      	str	r3, [r7, #12]
 8006dee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006df0:	23c0      	movs	r3, #192	; 0xc0
 8006df2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006df6:	2302      	movs	r3, #2
 8006df8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e02:	2303      	movs	r3, #3
 8006e04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006e08:	2307      	movs	r3, #7
 8006e0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006e12:	4619      	mov	r1, r3
 8006e14:	4805      	ldr	r0, [pc, #20]	; (8006e2c <HAL_UART_MspInit+0xb8>)
 8006e16:	f7f9 fcfd 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006e1a:	bf00      	nop
 8006e1c:	37b0      	adds	r7, #176	; 0xb0
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	40013800 	.word	0x40013800
 8006e28:	40021000 	.word	0x40021000
 8006e2c:	48000400 	.word	0x48000400

08006e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006e34:	e7fe      	b.n	8006e34 <NMI_Handler+0x4>

08006e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006e36:	b480      	push	{r7}
 8006e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006e3a:	e7fe      	b.n	8006e3a <HardFault_Handler+0x4>

08006e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006e40:	e7fe      	b.n	8006e40 <MemManage_Handler+0x4>

08006e42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006e42:	b480      	push	{r7}
 8006e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006e46:	e7fe      	b.n	8006e46 <BusFault_Handler+0x4>

08006e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006e4c:	e7fe      	b.n	8006e4c <UsageFault_Handler+0x4>

08006e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006e52:	bf00      	nop
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006e60:	bf00      	nop
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006e6e:	bf00      	nop
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e7c:	f7f9 fb74 	bl	8000568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006e80:	bf00      	nop
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8006e88:	2001      	movs	r0, #1
 8006e8a:	f7f9 fe9f 	bl	8000bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006e8e:	bf00      	nop
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8006e96:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006e9a:	f7f9 fe97 	bl	8000bcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006e9e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006ea2:	f7f9 fe93 	bl	8000bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006ea6:	bf00      	nop
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006eb0:	4802      	ldr	r0, [pc, #8]	; (8006ebc <OTG_FS_IRQHandler+0x10>)
 8006eb2:	f7fa f91c 	bl	80010ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006eb6:	bf00      	nop
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000554 	.word	0x20000554

08006ec0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006ec4:	4b15      	ldr	r3, [pc, #84]	; (8006f1c <SystemInit+0x5c>)
 8006ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eca:	4a14      	ldr	r2, [pc, #80]	; (8006f1c <SystemInit+0x5c>)
 8006ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006ed4:	4b12      	ldr	r3, [pc, #72]	; (8006f20 <SystemInit+0x60>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a11      	ldr	r2, [pc, #68]	; (8006f20 <SystemInit+0x60>)
 8006eda:	f043 0301 	orr.w	r3, r3, #1
 8006ede:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006ee0:	4b0f      	ldr	r3, [pc, #60]	; (8006f20 <SystemInit+0x60>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006ee6:	4b0e      	ldr	r3, [pc, #56]	; (8006f20 <SystemInit+0x60>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a0d      	ldr	r2, [pc, #52]	; (8006f20 <SystemInit+0x60>)
 8006eec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006ef0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006ef4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006ef6:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <SystemInit+0x60>)
 8006ef8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006efc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006efe:	4b08      	ldr	r3, [pc, #32]	; (8006f20 <SystemInit+0x60>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a07      	ldr	r2, [pc, #28]	; (8006f20 <SystemInit+0x60>)
 8006f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006f0a:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <SystemInit+0x60>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	619a      	str	r2, [r3, #24]
}
 8006f10:	bf00      	nop
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	e000ed00 	.word	0xe000ed00
 8006f20:	40021000 	.word	0x40021000

08006f24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	490e      	ldr	r1, [pc, #56]	; (8006f64 <MX_USB_DEVICE_Init+0x40>)
 8006f2c:	480e      	ldr	r0, [pc, #56]	; (8006f68 <MX_USB_DEVICE_Init+0x44>)
 8006f2e:	f7fe fb59 	bl	80055e4 <USBD_Init>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f38:	f7ff fe8c 	bl	8006c54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006f3c:	490b      	ldr	r1, [pc, #44]	; (8006f6c <MX_USB_DEVICE_Init+0x48>)
 8006f3e:	480a      	ldr	r0, [pc, #40]	; (8006f68 <MX_USB_DEVICE_Init+0x44>)
 8006f40:	f7fe fb80 	bl	8005644 <USBD_RegisterClass>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d001      	beq.n	8006f4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006f4a:	f7ff fe83 	bl	8006c54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f4e:	4806      	ldr	r0, [pc, #24]	; (8006f68 <MX_USB_DEVICE_Init+0x44>)
 8006f50:	f7fe fb9f 	bl	8005692 <USBD_Start>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006f5a:	f7ff fe7b 	bl	8006c54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f5e:	bf00      	nop
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	20000114 	.word	0x20000114
 8006f68:	20000284 	.word	0x20000284
 8006f6c:	20000008 	.word	0x20000008

08006f70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b0ac      	sub	sp, #176	; 0xb0
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	605a      	str	r2, [r3, #4]
 8006f82:	609a      	str	r2, [r3, #8]
 8006f84:	60da      	str	r2, [r3, #12]
 8006f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006f88:	f107 0314 	add.w	r3, r7, #20
 8006f8c:	2288      	movs	r2, #136	; 0x88
 8006f8e:	2100      	movs	r1, #0
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 fd8d 	bl	8007ab0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f9e:	d173      	bne.n	8007088 <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fa4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8006fa6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006faa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8006fb6:	2318      	movs	r3, #24
 8006fb8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8006fba:	2307      	movs	r3, #7
 8006fbc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8006fc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006fca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006fcc:	f107 0314 	add.w	r3, r7, #20
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fb fe21 	bl	8002c18 <HAL_RCCEx_PeriphCLKConfig>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8006fdc:	f7ff fe3a 	bl	8006c54 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fe0:	4b2b      	ldr	r3, [pc, #172]	; (8007090 <HAL_PCD_MspInit+0x120>)
 8006fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe4:	4a2a      	ldr	r2, [pc, #168]	; (8007090 <HAL_PCD_MspInit+0x120>)
 8006fe6:	f043 0301 	orr.w	r3, r3, #1
 8006fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fec:	4b28      	ldr	r3, [pc, #160]	; (8007090 <HAL_PCD_MspInit+0x120>)
 8006fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	613b      	str	r3, [r7, #16]
 8006ff6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006ff8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007000:	2302      	movs	r3, #2
 8007002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007006:	2300      	movs	r3, #0
 8007008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800700c:	2303      	movs	r3, #3
 800700e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007012:	230a      	movs	r3, #10
 8007014:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007018:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800701c:	4619      	mov	r1, r3
 800701e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007022:	f7f9 fbf7 	bl	8000814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007026:	4b1a      	ldr	r3, [pc, #104]	; (8007090 <HAL_PCD_MspInit+0x120>)
 8007028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800702a:	4a19      	ldr	r2, [pc, #100]	; (8007090 <HAL_PCD_MspInit+0x120>)
 800702c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007032:	4b17      	ldr	r3, [pc, #92]	; (8007090 <HAL_PCD_MspInit+0x120>)
 8007034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800703a:	60fb      	str	r3, [r7, #12]
 800703c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800703e:	4b14      	ldr	r3, [pc, #80]	; (8007090 <HAL_PCD_MspInit+0x120>)
 8007040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d114      	bne.n	8007074 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800704a:	4b11      	ldr	r3, [pc, #68]	; (8007090 <HAL_PCD_MspInit+0x120>)
 800704c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704e:	4a10      	ldr	r2, [pc, #64]	; (8007090 <HAL_PCD_MspInit+0x120>)
 8007050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007054:	6593      	str	r3, [r2, #88]	; 0x58
 8007056:	4b0e      	ldr	r3, [pc, #56]	; (8007090 <HAL_PCD_MspInit+0x120>)
 8007058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800705a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800705e:	60bb      	str	r3, [r7, #8]
 8007060:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8007062:	f7fa ffdd 	bl	8002020 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007066:	4b0a      	ldr	r3, [pc, #40]	; (8007090 <HAL_PCD_MspInit+0x120>)
 8007068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706a:	4a09      	ldr	r2, [pc, #36]	; (8007090 <HAL_PCD_MspInit+0x120>)
 800706c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007070:	6593      	str	r3, [r2, #88]	; 0x58
 8007072:	e001      	b.n	8007078 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8007074:	f7fa ffd4 	bl	8002020 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007078:	2200      	movs	r2, #0
 800707a:	2100      	movs	r1, #0
 800707c:	2043      	movs	r0, #67	; 0x43
 800707e:	f7f9 fb92 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007082:	2043      	movs	r0, #67	; 0x43
 8007084:	f7f9 fbab 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007088:	bf00      	nop
 800708a:	37b0      	adds	r7, #176	; 0xb0
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	40021000 	.word	0x40021000

08007094 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070a8:	4619      	mov	r1, r3
 80070aa:	4610      	mov	r0, r2
 80070ac:	f7fe fb3c 	bl	8005728 <USBD_LL_SetupStage>
}
 80070b0:	bf00      	nop
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80070ca:	78fa      	ldrb	r2, [r7, #3]
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	4613      	mov	r3, r2
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	1a9b      	subs	r3, r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	440b      	add	r3, r1
 80070d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	78fb      	ldrb	r3, [r7, #3]
 80070e0:	4619      	mov	r1, r3
 80070e2:	f7fe fb76 	bl	80057d2 <USBD_LL_DataOutStage>
}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	460b      	mov	r3, r1
 80070f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007100:	78fa      	ldrb	r2, [r7, #3]
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	4613      	mov	r3, r2
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	1a9b      	subs	r3, r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	3348      	adds	r3, #72	; 0x48
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	78fb      	ldrb	r3, [r7, #3]
 8007114:	4619      	mov	r1, r3
 8007116:	f7fe fbbf 	bl	8005898 <USBD_LL_DataInStage>
}
 800711a:	bf00      	nop
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b082      	sub	sp, #8
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007130:	4618      	mov	r0, r3
 8007132:	f7fe fcd3 	bl	8005adc <USBD_LL_SOF>
}
 8007136:	bf00      	nop
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007146:	2301      	movs	r3, #1
 8007148:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	2b02      	cmp	r3, #2
 8007150:	d001      	beq.n	8007156 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007152:	f7ff fd7f 	bl	8006c54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800715c:	7bfa      	ldrb	r2, [r7, #15]
 800715e:	4611      	mov	r1, r2
 8007160:	4618      	mov	r0, r3
 8007162:	f7fe fc7d 	bl	8005a60 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800716c:	4618      	mov	r0, r3
 800716e:	f7fe fc29 	bl	80059c4 <USBD_LL_Reset>
}
 8007172:	bf00      	nop
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	6812      	ldr	r2, [r2, #0]
 8007192:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007196:	f043 0301 	orr.w	r3, r3, #1
 800719a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fe fc6c 	bl	8005a80 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d005      	beq.n	80071bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071b0:	4b04      	ldr	r3, [pc, #16]	; (80071c4 <HAL_PCD_SuspendCallback+0x48>)
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	4a03      	ldr	r2, [pc, #12]	; (80071c4 <HAL_PCD_SuspendCallback+0x48>)
 80071b6:	f043 0306 	orr.w	r3, r3, #6
 80071ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80071bc:	bf00      	nop
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	e000ed00 	.word	0xe000ed00

080071c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	6812      	ldr	r2, [r2, #0]
 80071de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071e2:	f023 0301 	bic.w	r3, r3, #1
 80071e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d007      	beq.n	8007200 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071f0:	4b08      	ldr	r3, [pc, #32]	; (8007214 <HAL_PCD_ResumeCallback+0x4c>)
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	4a07      	ldr	r2, [pc, #28]	; (8007214 <HAL_PCD_ResumeCallback+0x4c>)
 80071f6:	f023 0306 	bic.w	r3, r3, #6
 80071fa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80071fc:	f000 fae2 	bl	80077c4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe fc50 	bl	8005aac <USBD_LL_Resume>
}
 800720c:	bf00      	nop
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	e000ed00 	.word	0xe000ed00

08007218 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800722a:	78fa      	ldrb	r2, [r7, #3]
 800722c:	4611      	mov	r1, r2
 800722e:	4618      	mov	r0, r3
 8007230:	f7fe fc9c 	bl	8005b6c <USBD_LL_IsoOUTIncomplete>
}
 8007234:	bf00      	nop
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800724e:	78fa      	ldrb	r2, [r7, #3]
 8007250:	4611      	mov	r1, r2
 8007252:	4618      	mov	r0, r3
 8007254:	f7fe fc64 	bl	8005b20 <USBD_LL_IsoINIncomplete>
}
 8007258:	bf00      	nop
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe fca2 	bl	8005bb8 <USBD_LL_DevConnected>
}
 8007274:	bf00      	nop
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fc9f 	bl	8005bce <USBD_LL_DevDisconnected>
}
 8007290:	bf00      	nop
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d13c      	bne.n	8007322 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80072a8:	4a20      	ldr	r2, [pc, #128]	; (800732c <USBD_LL_Init+0x94>)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a1e      	ldr	r2, [pc, #120]	; (800732c <USBD_LL_Init+0x94>)
 80072b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072b8:	4b1c      	ldr	r3, [pc, #112]	; (800732c <USBD_LL_Init+0x94>)
 80072ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80072be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80072c0:	4b1a      	ldr	r3, [pc, #104]	; (800732c <USBD_LL_Init+0x94>)
 80072c2:	2206      	movs	r2, #6
 80072c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80072c6:	4b19      	ldr	r3, [pc, #100]	; (800732c <USBD_LL_Init+0x94>)
 80072c8:	2202      	movs	r2, #2
 80072ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80072cc:	4b17      	ldr	r3, [pc, #92]	; (800732c <USBD_LL_Init+0x94>)
 80072ce:	2202      	movs	r2, #2
 80072d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80072d2:	4b16      	ldr	r3, [pc, #88]	; (800732c <USBD_LL_Init+0x94>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80072d8:	4b14      	ldr	r3, [pc, #80]	; (800732c <USBD_LL_Init+0x94>)
 80072da:	2200      	movs	r2, #0
 80072dc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80072de:	4b13      	ldr	r3, [pc, #76]	; (800732c <USBD_LL_Init+0x94>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80072e4:	4b11      	ldr	r3, [pc, #68]	; (800732c <USBD_LL_Init+0x94>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80072ea:	4b10      	ldr	r3, [pc, #64]	; (800732c <USBD_LL_Init+0x94>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80072f0:	4b0e      	ldr	r3, [pc, #56]	; (800732c <USBD_LL_Init+0x94>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80072f6:	480d      	ldr	r0, [pc, #52]	; (800732c <USBD_LL_Init+0x94>)
 80072f8:	f7f9 fda6 	bl	8000e48 <HAL_PCD_Init>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007302:	f7ff fca7 	bl	8006c54 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007306:	2180      	movs	r1, #128	; 0x80
 8007308:	4808      	ldr	r0, [pc, #32]	; (800732c <USBD_LL_Init+0x94>)
 800730a:	f7fa fdf0 	bl	8001eee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800730e:	2240      	movs	r2, #64	; 0x40
 8007310:	2100      	movs	r1, #0
 8007312:	4806      	ldr	r0, [pc, #24]	; (800732c <USBD_LL_Init+0x94>)
 8007314:	f7fa fda4 	bl	8001e60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007318:	2280      	movs	r2, #128	; 0x80
 800731a:	2101      	movs	r1, #1
 800731c:	4803      	ldr	r0, [pc, #12]	; (800732c <USBD_LL_Init+0x94>)
 800731e:	f7fa fd9f 	bl	8001e60 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	20000554 	.word	0x20000554

08007330 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007346:	4618      	mov	r0, r3
 8007348:	f7f9 fea2 	bl	8001090 <HAL_PCD_Start>
 800734c:	4603      	mov	r3, r0
 800734e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007350:	7bbb      	ldrb	r3, [r7, #14]
 8007352:	2b03      	cmp	r3, #3
 8007354:	d816      	bhi.n	8007384 <USBD_LL_Start+0x54>
 8007356:	a201      	add	r2, pc, #4	; (adr r2, 800735c <USBD_LL_Start+0x2c>)
 8007358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735c:	0800736d 	.word	0x0800736d
 8007360:	08007373 	.word	0x08007373
 8007364:	08007379 	.word	0x08007379
 8007368:	0800737f 	.word	0x0800737f
    case HAL_OK :
      usb_status = USBD_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	73fb      	strb	r3, [r7, #15]
    break;
 8007370:	e00b      	b.n	800738a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007372:	2303      	movs	r3, #3
 8007374:	73fb      	strb	r3, [r7, #15]
    break;
 8007376:	e008      	b.n	800738a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007378:	2301      	movs	r3, #1
 800737a:	73fb      	strb	r3, [r7, #15]
    break;
 800737c:	e005      	b.n	800738a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800737e:	2303      	movs	r3, #3
 8007380:	73fb      	strb	r3, [r7, #15]
    break;
 8007382:	e002      	b.n	800738a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007384:	2303      	movs	r3, #3
 8007386:	73fb      	strb	r3, [r7, #15]
    break;
 8007388:	bf00      	nop
  }
  return usb_status;
 800738a:	7bfb      	ldrb	r3, [r7, #15]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	4608      	mov	r0, r1
 800739e:	4611      	mov	r1, r2
 80073a0:	461a      	mov	r2, r3
 80073a2:	4603      	mov	r3, r0
 80073a4:	70fb      	strb	r3, [r7, #3]
 80073a6:	460b      	mov	r3, r1
 80073a8:	70bb      	strb	r3, [r7, #2]
 80073aa:	4613      	mov	r3, r2
 80073ac:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80073bc:	78bb      	ldrb	r3, [r7, #2]
 80073be:	883a      	ldrh	r2, [r7, #0]
 80073c0:	78f9      	ldrb	r1, [r7, #3]
 80073c2:	f7fa fa5d 	bl	8001880 <HAL_PCD_EP_Open>
 80073c6:	4603      	mov	r3, r0
 80073c8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	2b03      	cmp	r3, #3
 80073ce:	d817      	bhi.n	8007400 <USBD_LL_OpenEP+0x6c>
 80073d0:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <USBD_LL_OpenEP+0x44>)
 80073d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d6:	bf00      	nop
 80073d8:	080073e9 	.word	0x080073e9
 80073dc:	080073ef 	.word	0x080073ef
 80073e0:	080073f5 	.word	0x080073f5
 80073e4:	080073fb 	.word	0x080073fb
    case HAL_OK :
      usb_status = USBD_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	73fb      	strb	r3, [r7, #15]
    break;
 80073ec:	e00b      	b.n	8007406 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80073ee:	2303      	movs	r3, #3
 80073f0:	73fb      	strb	r3, [r7, #15]
    break;
 80073f2:	e008      	b.n	8007406 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80073f4:	2301      	movs	r3, #1
 80073f6:	73fb      	strb	r3, [r7, #15]
    break;
 80073f8:	e005      	b.n	8007406 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80073fa:	2303      	movs	r3, #3
 80073fc:	73fb      	strb	r3, [r7, #15]
    break;
 80073fe:	e002      	b.n	8007406 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007400:	2303      	movs	r3, #3
 8007402:	73fb      	strb	r3, [r7, #15]
    break;
 8007404:	bf00      	nop
  }
  return usb_status;
 8007406:	7bfb      	ldrb	r3, [r7, #15]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800742a:	78fa      	ldrb	r2, [r7, #3]
 800742c:	4611      	mov	r1, r2
 800742e:	4618      	mov	r0, r3
 8007430:	f7fa fa8e 	bl	8001950 <HAL_PCD_EP_Close>
 8007434:	4603      	mov	r3, r0
 8007436:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b03      	cmp	r3, #3
 800743c:	d816      	bhi.n	800746c <USBD_LL_CloseEP+0x5c>
 800743e:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <USBD_LL_CloseEP+0x34>)
 8007440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007444:	08007455 	.word	0x08007455
 8007448:	0800745b 	.word	0x0800745b
 800744c:	08007461 	.word	0x08007461
 8007450:	08007467 	.word	0x08007467
    case HAL_OK :
      usb_status = USBD_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	73fb      	strb	r3, [r7, #15]
    break;
 8007458:	e00b      	b.n	8007472 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800745a:	2303      	movs	r3, #3
 800745c:	73fb      	strb	r3, [r7, #15]
    break;
 800745e:	e008      	b.n	8007472 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007460:	2301      	movs	r3, #1
 8007462:	73fb      	strb	r3, [r7, #15]
    break;
 8007464:	e005      	b.n	8007472 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007466:	2303      	movs	r3, #3
 8007468:	73fb      	strb	r3, [r7, #15]
    break;
 800746a:	e002      	b.n	8007472 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800746c:	2303      	movs	r3, #3
 800746e:	73fb      	strb	r3, [r7, #15]
    break;
 8007470:	bf00      	nop
  }
  return usb_status;
 8007472:	7bfb      	ldrb	r3, [r7, #15]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	460b      	mov	r3, r1
 8007486:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007496:	78fa      	ldrb	r2, [r7, #3]
 8007498:	4611      	mov	r1, r2
 800749a:	4618      	mov	r0, r3
 800749c:	f7fa fb1d 	bl	8001ada <HAL_PCD_EP_SetStall>
 80074a0:	4603      	mov	r3, r0
 80074a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d816      	bhi.n	80074d8 <USBD_LL_StallEP+0x5c>
 80074aa:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <USBD_LL_StallEP+0x34>)
 80074ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b0:	080074c1 	.word	0x080074c1
 80074b4:	080074c7 	.word	0x080074c7
 80074b8:	080074cd 	.word	0x080074cd
 80074bc:	080074d3 	.word	0x080074d3
    case HAL_OK :
      usb_status = USBD_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	73fb      	strb	r3, [r7, #15]
    break;
 80074c4:	e00b      	b.n	80074de <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80074c6:	2303      	movs	r3, #3
 80074c8:	73fb      	strb	r3, [r7, #15]
    break;
 80074ca:	e008      	b.n	80074de <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80074cc:	2301      	movs	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
    break;
 80074d0:	e005      	b.n	80074de <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80074d2:	2303      	movs	r3, #3
 80074d4:	73fb      	strb	r3, [r7, #15]
    break;
 80074d6:	e002      	b.n	80074de <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80074d8:	2303      	movs	r3, #3
 80074da:	73fb      	strb	r3, [r7, #15]
    break;
 80074dc:	bf00      	nop
  }
  return usb_status;
 80074de:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074f8:	2300      	movs	r3, #0
 80074fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007502:	78fa      	ldrb	r2, [r7, #3]
 8007504:	4611      	mov	r1, r2
 8007506:	4618      	mov	r0, r3
 8007508:	f7fa fb49 	bl	8001b9e <HAL_PCD_EP_ClrStall>
 800750c:	4603      	mov	r3, r0
 800750e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	2b03      	cmp	r3, #3
 8007514:	d816      	bhi.n	8007544 <USBD_LL_ClearStallEP+0x5c>
 8007516:	a201      	add	r2, pc, #4	; (adr r2, 800751c <USBD_LL_ClearStallEP+0x34>)
 8007518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751c:	0800752d 	.word	0x0800752d
 8007520:	08007533 	.word	0x08007533
 8007524:	08007539 	.word	0x08007539
 8007528:	0800753f 	.word	0x0800753f
    case HAL_OK :
      usb_status = USBD_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	73fb      	strb	r3, [r7, #15]
    break;
 8007530:	e00b      	b.n	800754a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007532:	2303      	movs	r3, #3
 8007534:	73fb      	strb	r3, [r7, #15]
    break;
 8007536:	e008      	b.n	800754a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007538:	2301      	movs	r3, #1
 800753a:	73fb      	strb	r3, [r7, #15]
    break;
 800753c:	e005      	b.n	800754a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800753e:	2303      	movs	r3, #3
 8007540:	73fb      	strb	r3, [r7, #15]
    break;
 8007542:	e002      	b.n	800754a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007544:	2303      	movs	r3, #3
 8007546:	73fb      	strb	r3, [r7, #15]
    break;
 8007548:	bf00      	nop
  }
  return usb_status;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007566:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800756c:	2b00      	cmp	r3, #0
 800756e:	da0b      	bge.n	8007588 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007570:	78fb      	ldrb	r3, [r7, #3]
 8007572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007576:	68f9      	ldr	r1, [r7, #12]
 8007578:	4613      	mov	r3, r2
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	1a9b      	subs	r3, r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	440b      	add	r3, r1
 8007582:	333e      	adds	r3, #62	; 0x3e
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	e00b      	b.n	80075a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800758e:	68f9      	ldr	r1, [r7, #12]
 8007590:	4613      	mov	r3, r2
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	1a9b      	subs	r3, r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	440b      	add	r3, r1
 800759a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800759e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075b8:	2300      	movs	r3, #0
 80075ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075c6:	78fa      	ldrb	r2, [r7, #3]
 80075c8:	4611      	mov	r1, r2
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fa f933 	bl	8001836 <HAL_PCD_SetAddress>
 80075d0:	4603      	mov	r3, r0
 80075d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d816      	bhi.n	8007608 <USBD_LL_SetUSBAddress+0x5c>
 80075da:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <USBD_LL_SetUSBAddress+0x34>)
 80075dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e0:	080075f1 	.word	0x080075f1
 80075e4:	080075f7 	.word	0x080075f7
 80075e8:	080075fd 	.word	0x080075fd
 80075ec:	08007603 	.word	0x08007603
    case HAL_OK :
      usb_status = USBD_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	73fb      	strb	r3, [r7, #15]
    break;
 80075f4:	e00b      	b.n	800760e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80075f6:	2303      	movs	r3, #3
 80075f8:	73fb      	strb	r3, [r7, #15]
    break;
 80075fa:	e008      	b.n	800760e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80075fc:	2301      	movs	r3, #1
 80075fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007600:	e005      	b.n	800760e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007602:	2303      	movs	r3, #3
 8007604:	73fb      	strb	r3, [r7, #15]
    break;
 8007606:	e002      	b.n	800760e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007608:	2303      	movs	r3, #3
 800760a:	73fb      	strb	r3, [r7, #15]
    break;
 800760c:	bf00      	nop
  }
  return usb_status;
 800760e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	607a      	str	r2, [r7, #4]
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	460b      	mov	r3, r1
 8007626:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007636:	7af9      	ldrb	r1, [r7, #11]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	f7fa fa10 	bl	8001a60 <HAL_PCD_EP_Transmit>
 8007640:	4603      	mov	r3, r0
 8007642:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007644:	7dbb      	ldrb	r3, [r7, #22]
 8007646:	2b03      	cmp	r3, #3
 8007648:	d816      	bhi.n	8007678 <USBD_LL_Transmit+0x60>
 800764a:	a201      	add	r2, pc, #4	; (adr r2, 8007650 <USBD_LL_Transmit+0x38>)
 800764c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007650:	08007661 	.word	0x08007661
 8007654:	08007667 	.word	0x08007667
 8007658:	0800766d 	.word	0x0800766d
 800765c:	08007673 	.word	0x08007673
    case HAL_OK :
      usb_status = USBD_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	75fb      	strb	r3, [r7, #23]
    break;
 8007664:	e00b      	b.n	800767e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007666:	2303      	movs	r3, #3
 8007668:	75fb      	strb	r3, [r7, #23]
    break;
 800766a:	e008      	b.n	800767e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800766c:	2301      	movs	r3, #1
 800766e:	75fb      	strb	r3, [r7, #23]
    break;
 8007670:	e005      	b.n	800767e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007672:	2303      	movs	r3, #3
 8007674:	75fb      	strb	r3, [r7, #23]
    break;
 8007676:	e002      	b.n	800767e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007678:	2303      	movs	r3, #3
 800767a:	75fb      	strb	r3, [r7, #23]
    break;
 800767c:	bf00      	nop
  }
  return usb_status;
 800767e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	607a      	str	r2, [r7, #4]
 8007692:	603b      	str	r3, [r7, #0]
 8007694:	460b      	mov	r3, r1
 8007696:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80076a6:	7af9      	ldrb	r1, [r7, #11]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	f7fa f99a 	bl	80019e4 <HAL_PCD_EP_Receive>
 80076b0:	4603      	mov	r3, r0
 80076b2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80076b4:	7dbb      	ldrb	r3, [r7, #22]
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d816      	bhi.n	80076e8 <USBD_LL_PrepareReceive+0x60>
 80076ba:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <USBD_LL_PrepareReceive+0x38>)
 80076bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c0:	080076d1 	.word	0x080076d1
 80076c4:	080076d7 	.word	0x080076d7
 80076c8:	080076dd 	.word	0x080076dd
 80076cc:	080076e3 	.word	0x080076e3
    case HAL_OK :
      usb_status = USBD_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	75fb      	strb	r3, [r7, #23]
    break;
 80076d4:	e00b      	b.n	80076ee <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076d6:	2303      	movs	r3, #3
 80076d8:	75fb      	strb	r3, [r7, #23]
    break;
 80076da:	e008      	b.n	80076ee <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076dc:	2301      	movs	r3, #1
 80076de:	75fb      	strb	r3, [r7, #23]
    break;
 80076e0:	e005      	b.n	80076ee <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076e2:	2303      	movs	r3, #3
 80076e4:	75fb      	strb	r3, [r7, #23]
    break;
 80076e6:	e002      	b.n	80076ee <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80076e8:	2303      	movs	r3, #3
 80076ea:	75fb      	strb	r3, [r7, #23]
    break;
 80076ec:	bf00      	nop
  }
  return usb_status;
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007704:	78fb      	ldrb	r3, [r7, #3]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_PCDEx_LPM_Callback+0x18>
 800770a:	2b01      	cmp	r3, #1
 800770c:	d01f      	beq.n	800774e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800770e:	e03b      	b.n	8007788 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d007      	beq.n	8007728 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007718:	f000 f854 	bl	80077c4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800771c:	4b1c      	ldr	r3, [pc, #112]	; (8007790 <HAL_PCDEx_LPM_Callback+0x98>)
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	4a1b      	ldr	r2, [pc, #108]	; (8007790 <HAL_PCDEx_LPM_Callback+0x98>)
 8007722:	f023 0306 	bic.w	r3, r3, #6
 8007726:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	6812      	ldr	r2, [r2, #0]
 8007736:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800773a:	f023 0301 	bic.w	r3, r3, #1
 800773e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe f9b0 	bl	8005aac <USBD_LL_Resume>
    break;
 800774c:	e01c      	b.n	8007788 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	6812      	ldr	r2, [r2, #0]
 800775c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007760:	f043 0301 	orr.w	r3, r3, #1
 8007764:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800776c:	4618      	mov	r0, r3
 800776e:	f7fe f987 	bl	8005a80 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d005      	beq.n	8007786 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800777a:	4b05      	ldr	r3, [pc, #20]	; (8007790 <HAL_PCDEx_LPM_Callback+0x98>)
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	4a04      	ldr	r2, [pc, #16]	; (8007790 <HAL_PCDEx_LPM_Callback+0x98>)
 8007780:	f043 0306 	orr.w	r3, r3, #6
 8007784:	6113      	str	r3, [r2, #16]
    break;
 8007786:	bf00      	nop
}
 8007788:	bf00      	nop
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	e000ed00 	.word	0xe000ed00

08007794 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800779c:	4b03      	ldr	r3, [pc, #12]	; (80077ac <USBD_static_malloc+0x18>)
}
 800779e:	4618      	mov	r0, r3
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	2000019c 	.word	0x2000019c

080077b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]

}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80077c8:	f7ff f8b2 	bl	8006930 <SystemClock_Config>
}
 80077cc:	bf00      	nop
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	6039      	str	r1, [r7, #0]
 80077da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2212      	movs	r2, #18
 80077e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077e2:	4b03      	ldr	r3, [pc, #12]	; (80077f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	20000134 	.word	0x20000134

080077f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	6039      	str	r1, [r7, #0]
 80077fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	2204      	movs	r2, #4
 8007804:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007806:	4b03      	ldr	r3, [pc, #12]	; (8007814 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007808:	4618      	mov	r0, r3
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	20000154 	.word	0x20000154

08007818 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	6039      	str	r1, [r7, #0]
 8007822:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007824:	79fb      	ldrb	r3, [r7, #7]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d105      	bne.n	8007836 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	4907      	ldr	r1, [pc, #28]	; (800784c <USBD_FS_ProductStrDescriptor+0x34>)
 800782e:	4808      	ldr	r0, [pc, #32]	; (8007850 <USBD_FS_ProductStrDescriptor+0x38>)
 8007830:	f7fe ff8b 	bl	800674a <USBD_GetString>
 8007834:	e004      	b.n	8007840 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	4904      	ldr	r1, [pc, #16]	; (800784c <USBD_FS_ProductStrDescriptor+0x34>)
 800783a:	4805      	ldr	r0, [pc, #20]	; (8007850 <USBD_FS_ProductStrDescriptor+0x38>)
 800783c:	f7fe ff85 	bl	800674a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007840:	4b02      	ldr	r3, [pc, #8]	; (800784c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	2000095c 	.word	0x2000095c
 8007850:	08007ad8 	.word	0x08007ad8

08007854 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	4603      	mov	r3, r0
 800785c:	6039      	str	r1, [r7, #0]
 800785e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	4904      	ldr	r1, [pc, #16]	; (8007874 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007864:	4804      	ldr	r0, [pc, #16]	; (8007878 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007866:	f7fe ff70 	bl	800674a <USBD_GetString>
  return USBD_StrDesc;
 800786a:	4b02      	ldr	r3, [pc, #8]	; (8007874 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800786c:	4618      	mov	r0, r3
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	2000095c 	.word	0x2000095c
 8007878:	08007af0 	.word	0x08007af0

0800787c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	6039      	str	r1, [r7, #0]
 8007886:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	221a      	movs	r2, #26
 800788c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800788e:	f000 f855 	bl	800793c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007892:	4b02      	ldr	r3, [pc, #8]	; (800789c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	20000158 	.word	0x20000158

080078a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	4603      	mov	r3, r0
 80078a8:	6039      	str	r1, [r7, #0]
 80078aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d105      	bne.n	80078be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	4907      	ldr	r1, [pc, #28]	; (80078d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80078b6:	4808      	ldr	r0, [pc, #32]	; (80078d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078b8:	f7fe ff47 	bl	800674a <USBD_GetString>
 80078bc:	e004      	b.n	80078c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	4904      	ldr	r1, [pc, #16]	; (80078d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80078c2:	4805      	ldr	r0, [pc, #20]	; (80078d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078c4:	f7fe ff41 	bl	800674a <USBD_GetString>
  }
  return USBD_StrDesc;
 80078c8:	4b02      	ldr	r3, [pc, #8]	; (80078d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	2000095c 	.word	0x2000095c
 80078d8:	08007b04 	.word	0x08007b04

080078dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	4603      	mov	r3, r0
 80078e4:	6039      	str	r1, [r7, #0]
 80078e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d105      	bne.n	80078fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	4907      	ldr	r1, [pc, #28]	; (8007910 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078f2:	4808      	ldr	r0, [pc, #32]	; (8007914 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078f4:	f7fe ff29 	bl	800674a <USBD_GetString>
 80078f8:	e004      	b.n	8007904 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	4904      	ldr	r1, [pc, #16]	; (8007910 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078fe:	4805      	ldr	r0, [pc, #20]	; (8007914 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007900:	f7fe ff23 	bl	800674a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007904:	4b02      	ldr	r3, [pc, #8]	; (8007910 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	2000095c 	.word	0x2000095c
 8007914:	08007b10 	.word	0x08007b10

08007918 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	6039      	str	r1, [r7, #0]
 8007922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	220c      	movs	r2, #12
 8007928:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800792a:	4b03      	ldr	r3, [pc, #12]	; (8007938 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	20000148 	.word	0x20000148

0800793c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007942:	4b0f      	ldr	r3, [pc, #60]	; (8007980 <Get_SerialNum+0x44>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007948:	4b0e      	ldr	r3, [pc, #56]	; (8007984 <Get_SerialNum+0x48>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800794e:	4b0e      	ldr	r3, [pc, #56]	; (8007988 <Get_SerialNum+0x4c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4413      	add	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d009      	beq.n	8007976 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007962:	2208      	movs	r2, #8
 8007964:	4909      	ldr	r1, [pc, #36]	; (800798c <Get_SerialNum+0x50>)
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 f814 	bl	8007994 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800796c:	2204      	movs	r2, #4
 800796e:	4908      	ldr	r1, [pc, #32]	; (8007990 <Get_SerialNum+0x54>)
 8007970:	68b8      	ldr	r0, [r7, #8]
 8007972:	f000 f80f 	bl	8007994 <IntToUnicode>
  }
}
 8007976:	bf00      	nop
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	1fff7590 	.word	0x1fff7590
 8007984:	1fff7594 	.word	0x1fff7594
 8007988:	1fff7598 	.word	0x1fff7598
 800798c:	2000015a 	.word	0x2000015a
 8007990:	2000016a 	.word	0x2000016a

08007994 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	4613      	mov	r3, r2
 80079a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80079a6:	2300      	movs	r3, #0
 80079a8:	75fb      	strb	r3, [r7, #23]
 80079aa:	e027      	b.n	80079fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	0f1b      	lsrs	r3, r3, #28
 80079b0:	2b09      	cmp	r3, #9
 80079b2:	d80b      	bhi.n	80079cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	0f1b      	lsrs	r3, r3, #28
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	4619      	mov	r1, r3
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	440b      	add	r3, r1
 80079c4:	3230      	adds	r2, #48	; 0x30
 80079c6:	b2d2      	uxtb	r2, r2
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	e00a      	b.n	80079e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	0f1b      	lsrs	r3, r3, #28
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	4619      	mov	r1, r3
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	440b      	add	r3, r1
 80079dc:	3237      	adds	r2, #55	; 0x37
 80079de:	b2d2      	uxtb	r2, r2
 80079e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	011b      	lsls	r3, r3, #4
 80079e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	005b      	lsls	r3, r3, #1
 80079ec:	3301      	adds	r3, #1
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	4413      	add	r3, r2
 80079f2:	2200      	movs	r2, #0
 80079f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
 80079f8:	3301      	adds	r3, #1
 80079fa:	75fb      	strb	r3, [r7, #23]
 80079fc:	7dfa      	ldrb	r2, [r7, #23]
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d3d3      	bcc.n	80079ac <IntToUnicode+0x18>
  }
}
 8007a04:	bf00      	nop
 8007a06:	bf00      	nop
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
	...

08007a14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007a4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007a18:	f7ff fa52 	bl	8006ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007a1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007a1e:	e003      	b.n	8007a28 <LoopCopyDataInit>

08007a20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007a20:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007a22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007a24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007a26:	3104      	adds	r1, #4

08007a28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007a28:	480a      	ldr	r0, [pc, #40]	; (8007a54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007a2a:	4b0b      	ldr	r3, [pc, #44]	; (8007a58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007a2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007a2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007a30:	d3f6      	bcc.n	8007a20 <CopyDataInit>
	ldr	r2, =_sbss
 8007a32:	4a0a      	ldr	r2, [pc, #40]	; (8007a5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8007a34:	e002      	b.n	8007a3c <LoopFillZerobss>

08007a36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007a36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007a38:	f842 3b04 	str.w	r3, [r2], #4

08007a3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007a3c:	4b08      	ldr	r3, [pc, #32]	; (8007a60 <LoopForever+0x16>)
	cmp	r2, r3
 8007a3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007a40:	d3f9      	bcc.n	8007a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007a42:	f000 f811 	bl	8007a68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007a46:	f7fe ff43 	bl	80068d0 <main>

08007a4a <LoopForever>:

LoopForever:
    b LoopForever
 8007a4a:	e7fe      	b.n	8007a4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007a4c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8007a50:	08007b78 	.word	0x08007b78
	ldr	r0, =_sdata
 8007a54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007a58:	20000174 	.word	0x20000174
	ldr	r2, =_sbss
 8007a5c:	20000174 	.word	0x20000174
	ldr	r3, = _ebss
 8007a60:	20000b5c 	.word	0x20000b5c

08007a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007a64:	e7fe      	b.n	8007a64 <ADC1_2_IRQHandler>
	...

08007a68 <__libc_init_array>:
 8007a68:	b570      	push	{r4, r5, r6, lr}
 8007a6a:	4d0d      	ldr	r5, [pc, #52]	; (8007aa0 <__libc_init_array+0x38>)
 8007a6c:	4c0d      	ldr	r4, [pc, #52]	; (8007aa4 <__libc_init_array+0x3c>)
 8007a6e:	1b64      	subs	r4, r4, r5
 8007a70:	10a4      	asrs	r4, r4, #2
 8007a72:	2600      	movs	r6, #0
 8007a74:	42a6      	cmp	r6, r4
 8007a76:	d109      	bne.n	8007a8c <__libc_init_array+0x24>
 8007a78:	4d0b      	ldr	r5, [pc, #44]	; (8007aa8 <__libc_init_array+0x40>)
 8007a7a:	4c0c      	ldr	r4, [pc, #48]	; (8007aac <__libc_init_array+0x44>)
 8007a7c:	f000 f820 	bl	8007ac0 <_init>
 8007a80:	1b64      	subs	r4, r4, r5
 8007a82:	10a4      	asrs	r4, r4, #2
 8007a84:	2600      	movs	r6, #0
 8007a86:	42a6      	cmp	r6, r4
 8007a88:	d105      	bne.n	8007a96 <__libc_init_array+0x2e>
 8007a8a:	bd70      	pop	{r4, r5, r6, pc}
 8007a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a90:	4798      	blx	r3
 8007a92:	3601      	adds	r6, #1
 8007a94:	e7ee      	b.n	8007a74 <__libc_init_array+0xc>
 8007a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a9a:	4798      	blx	r3
 8007a9c:	3601      	adds	r6, #1
 8007a9e:	e7f2      	b.n	8007a86 <__libc_init_array+0x1e>
 8007aa0:	08007b70 	.word	0x08007b70
 8007aa4:	08007b70 	.word	0x08007b70
 8007aa8:	08007b70 	.word	0x08007b70
 8007aac:	08007b74 	.word	0x08007b74

08007ab0 <memset>:
 8007ab0:	4402      	add	r2, r0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d100      	bne.n	8007aba <memset+0xa>
 8007ab8:	4770      	bx	lr
 8007aba:	f803 1b01 	strb.w	r1, [r3], #1
 8007abe:	e7f9      	b.n	8007ab4 <memset+0x4>

08007ac0 <_init>:
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac2:	bf00      	nop
 8007ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac6:	bc08      	pop	{r3}
 8007ac8:	469e      	mov	lr, r3
 8007aca:	4770      	bx	lr

08007acc <_fini>:
 8007acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ace:	bf00      	nop
 8007ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad2:	bc08      	pop	{r3}
 8007ad4:	469e      	mov	lr, r3
 8007ad6:	4770      	bx	lr
