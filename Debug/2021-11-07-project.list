
2021-11-07-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006d7c  08006d7c  00016d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e04  08006e04  00020174  2**0
                  CONTENTS
  4 .ARM          00000000  08006e04  08006e04  00020174  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e04  08006e04  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e04  08006e04  00016e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e08  08006e08  00016e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08006e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000964  20000174  08006f80  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad8  08006f80  00020ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018fad  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000340c  00000000  00000000  00039151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  0003c560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  0003d570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002858f  00000000  00000000  0003e418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b6d  00000000  00000000  000669a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e77cf  00000000  00000000  0007a514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00161ce3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000412c  00000000  00000000  00161d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000174 	.word	0x20000174
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d64 	.word	0x08006d64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000178 	.word	0x20000178
 80001c4:	08006d64 	.word	0x08006d64

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d2:	2003      	movs	r0, #3
 80001d4:	f000 f960 	bl	8000498 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 f80d 	bl	80001f8 <HAL_InitTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e001      	b.n	80001ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ea:	f005 fefd 	bl	8005fe8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <HAL_InitTick+0x6c>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d023      	beq.n	8000254 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800020c:	4b16      	ldr	r3, [pc, #88]	; (8000268 <HAL_InitTick+0x70>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <HAL_InitTick+0x6c>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	4619      	mov	r1, r3
 8000216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021a:	fbb3 f3f1 	udiv	r3, r3, r1
 800021e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f96d 	bl	8000502 <HAL_SYSTICK_Config>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d10f      	bne.n	800024e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b0f      	cmp	r3, #15
 8000232:	d809      	bhi.n	8000248 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000234:	2200      	movs	r2, #0
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	f04f 30ff 	mov.w	r0, #4294967295
 800023c:	f000 f937 	bl	80004ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000240:	4a0a      	ldr	r2, [pc, #40]	; (800026c <HAL_InitTick+0x74>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6013      	str	r3, [r2, #0]
 8000246:	e007      	b.n	8000258 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000248:	2301      	movs	r3, #1
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	e004      	b.n	8000258 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800024e:	2301      	movs	r3, #1
 8000250:	73fb      	strb	r3, [r7, #15]
 8000252:	e001      	b.n	8000258 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000254:	2301      	movs	r3, #1
 8000256:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000258:	7bfb      	ldrb	r3, [r7, #15]
}
 800025a:	4618      	mov	r0, r3
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000004 	.word	0x20000004
 8000268:	20000110 	.word	0x20000110
 800026c:	20000000 	.word	0x20000000

08000270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <HAL_IncTick+0x20>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <HAL_IncTick+0x24>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4413      	add	r3, r2
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <HAL_IncTick+0x24>)
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000004 	.word	0x20000004
 8000294:	200001b0 	.word	0x200001b0

08000298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <HAL_GetTick+0x14>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	200001b0 	.word	0x200001b0

080002b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b8:	f7ff ffee 	bl	8000298 <HAL_GetTick>
 80002bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002c8:	d005      	beq.n	80002d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <HAL_Delay+0x44>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	461a      	mov	r2, r3
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	4413      	add	r3, r2
 80002d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002d6:	bf00      	nop
 80002d8:	f7ff ffde 	bl	8000298 <HAL_GetTick>
 80002dc:	4602      	mov	r2, r0
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	1ad3      	subs	r3, r2, r3
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d8f7      	bhi.n	80002d8 <HAL_Delay+0x28>
  {
  }
}
 80002e8:	bf00      	nop
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000004 	.word	0x20000004

080002f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f003 0307 	and.w	r3, r3, #7
 8000306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <__NVIC_SetPriorityGrouping+0x44>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800030e:	68ba      	ldr	r2, [r7, #8]
 8000310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000314:	4013      	ands	r3, r2
 8000316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800032a:	4a04      	ldr	r2, [pc, #16]	; (800033c <__NVIC_SetPriorityGrouping+0x44>)
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	60d3      	str	r3, [r2, #12]
}
 8000330:	bf00      	nop
 8000332:	3714      	adds	r7, #20
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <__NVIC_GetPriorityGrouping+0x18>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	0a1b      	lsrs	r3, r3, #8
 800034a:	f003 0307 	and.w	r3, r3, #7
}
 800034e:	4618      	mov	r0, r3
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036a:	2b00      	cmp	r3, #0
 800036c:	db0b      	blt.n	8000386 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	f003 021f 	and.w	r2, r3, #31
 8000374:	4907      	ldr	r1, [pc, #28]	; (8000394 <__NVIC_EnableIRQ+0x38>)
 8000376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037a:	095b      	lsrs	r3, r3, #5
 800037c:	2001      	movs	r0, #1
 800037e:	fa00 f202 	lsl.w	r2, r0, r2
 8000382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	e000e100 	.word	0xe000e100

08000398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	6039      	str	r1, [r7, #0]
 80003a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	db0a      	blt.n	80003c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	490c      	ldr	r1, [pc, #48]	; (80003e4 <__NVIC_SetPriority+0x4c>)
 80003b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b6:	0112      	lsls	r2, r2, #4
 80003b8:	b2d2      	uxtb	r2, r2
 80003ba:	440b      	add	r3, r1
 80003bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003c0:	e00a      	b.n	80003d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	4908      	ldr	r1, [pc, #32]	; (80003e8 <__NVIC_SetPriority+0x50>)
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	f003 030f 	and.w	r3, r3, #15
 80003ce:	3b04      	subs	r3, #4
 80003d0:	0112      	lsls	r2, r2, #4
 80003d2:	b2d2      	uxtb	r2, r2
 80003d4:	440b      	add	r3, r1
 80003d6:	761a      	strb	r2, [r3, #24]
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	e000e100 	.word	0xe000e100
 80003e8:	e000ed00 	.word	0xe000ed00

080003ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b089      	sub	sp, #36	; 0x24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f003 0307 	and.w	r3, r3, #7
 80003fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000400:	69fb      	ldr	r3, [r7, #28]
 8000402:	f1c3 0307 	rsb	r3, r3, #7
 8000406:	2b04      	cmp	r3, #4
 8000408:	bf28      	it	cs
 800040a:	2304      	movcs	r3, #4
 800040c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800040e:	69fb      	ldr	r3, [r7, #28]
 8000410:	3304      	adds	r3, #4
 8000412:	2b06      	cmp	r3, #6
 8000414:	d902      	bls.n	800041c <NVIC_EncodePriority+0x30>
 8000416:	69fb      	ldr	r3, [r7, #28]
 8000418:	3b03      	subs	r3, #3
 800041a:	e000      	b.n	800041e <NVIC_EncodePriority+0x32>
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000420:	f04f 32ff 	mov.w	r2, #4294967295
 8000424:	69bb      	ldr	r3, [r7, #24]
 8000426:	fa02 f303 	lsl.w	r3, r2, r3
 800042a:	43da      	mvns	r2, r3
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	401a      	ands	r2, r3
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000434:	f04f 31ff 	mov.w	r1, #4294967295
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	fa01 f303 	lsl.w	r3, r1, r3
 800043e:	43d9      	mvns	r1, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000444:	4313      	orrs	r3, r2
         );
}
 8000446:	4618      	mov	r0, r3
 8000448:	3724      	adds	r7, #36	; 0x24
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
	...

08000454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3b01      	subs	r3, #1
 8000460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000464:	d301      	bcc.n	800046a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000466:	2301      	movs	r3, #1
 8000468:	e00f      	b.n	800048a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800046a:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <SysTick_Config+0x40>)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3b01      	subs	r3, #1
 8000470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000472:	210f      	movs	r1, #15
 8000474:	f04f 30ff 	mov.w	r0, #4294967295
 8000478:	f7ff ff8e 	bl	8000398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <SysTick_Config+0x40>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <SysTick_Config+0x40>)
 8000484:	2207      	movs	r2, #7
 8000486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	e000e010 	.word	0xe000e010

08000498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	f7ff ff29 	bl	80002f8 <__NVIC_SetPriorityGrouping>
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b086      	sub	sp, #24
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	4603      	mov	r3, r0
 80004b6:	60b9      	str	r1, [r7, #8]
 80004b8:	607a      	str	r2, [r7, #4]
 80004ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004c0:	f7ff ff3e 	bl	8000340 <__NVIC_GetPriorityGrouping>
 80004c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	68b9      	ldr	r1, [r7, #8]
 80004ca:	6978      	ldr	r0, [r7, #20]
 80004cc:	f7ff ff8e 	bl	80003ec <NVIC_EncodePriority>
 80004d0:	4602      	mov	r2, r0
 80004d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004d6:	4611      	mov	r1, r2
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff ff5d 	bl	8000398 <__NVIC_SetPriority>
}
 80004de:	bf00      	nop
 80004e0:	3718      	adds	r7, #24
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b082      	sub	sp, #8
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	4603      	mov	r3, r0
 80004ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ff31 	bl	800035c <__NVIC_EnableIRQ>
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b082      	sub	sp, #8
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f7ff ffa2 	bl	8000454 <SysTick_Config>
 8000510:	4603      	mov	r3, r0
}
 8000512:	4618      	mov	r0, r3
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800052a:	e17f      	b.n	800082c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	2101      	movs	r1, #1
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	fa01 f303 	lsl.w	r3, r1, r3
 8000538:	4013      	ands	r3, r2
 800053a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	2b00      	cmp	r3, #0
 8000540:	f000 8171 	beq.w	8000826 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d00b      	beq.n	8000564 <HAL_GPIO_Init+0x48>
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	2b02      	cmp	r3, #2
 8000552:	d007      	beq.n	8000564 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000558:	2b11      	cmp	r3, #17
 800055a:	d003      	beq.n	8000564 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	2b12      	cmp	r3, #18
 8000562:	d130      	bne.n	80005c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	2203      	movs	r2, #3
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	43db      	mvns	r3, r3
 8000576:	693a      	ldr	r2, [r7, #16]
 8000578:	4013      	ands	r3, r2
 800057a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	68da      	ldr	r2, [r3, #12]
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	fa02 f303 	lsl.w	r3, r2, r3
 8000588:	693a      	ldr	r2, [r7, #16]
 800058a:	4313      	orrs	r3, r2
 800058c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	693a      	ldr	r2, [r7, #16]
 8000592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800059a:	2201      	movs	r2, #1
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	43db      	mvns	r3, r3
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	4013      	ands	r3, r2
 80005a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	091b      	lsrs	r3, r3, #4
 80005b0:	f003 0201 	and.w	r2, r3, #1
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	4313      	orrs	r3, r2
 80005be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	693a      	ldr	r2, [r7, #16]
 80005c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	f003 0303 	and.w	r3, r3, #3
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	d118      	bne.n	8000604 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80005d8:	2201      	movs	r2, #1
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	43db      	mvns	r3, r3
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	4013      	ands	r3, r2
 80005e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	08db      	lsrs	r3, r3, #3
 80005ee:	f003 0201 	and.w	r2, r3, #1
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	693a      	ldr	r2, [r7, #16]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	693a      	ldr	r2, [r7, #16]
 8000602:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	2203      	movs	r2, #3
 8000610:	fa02 f303 	lsl.w	r3, r2, r3
 8000614:	43db      	mvns	r3, r3
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	4013      	ands	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	689a      	ldr	r2, [r3, #8]
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	fa02 f303 	lsl.w	r3, r2, r3
 8000628:	693a      	ldr	r2, [r7, #16]
 800062a:	4313      	orrs	r3, r2
 800062c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	2b02      	cmp	r3, #2
 800063a:	d003      	beq.n	8000644 <HAL_GPIO_Init+0x128>
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	2b12      	cmp	r3, #18
 8000642:	d123      	bne.n	800068c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	08da      	lsrs	r2, r3, #3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3208      	adds	r2, #8
 800064c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000650:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	f003 0307 	and.w	r3, r3, #7
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	220f      	movs	r2, #15
 800065c:	fa02 f303 	lsl.w	r3, r2, r3
 8000660:	43db      	mvns	r3, r3
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	4013      	ands	r3, r2
 8000666:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	691a      	ldr	r2, [r3, #16]
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	693a      	ldr	r2, [r7, #16]
 800067a:	4313      	orrs	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	08da      	lsrs	r2, r3, #3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	3208      	adds	r2, #8
 8000686:	6939      	ldr	r1, [r7, #16]
 8000688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	2203      	movs	r2, #3
 8000698:	fa02 f303 	lsl.w	r3, r2, r3
 800069c:	43db      	mvns	r3, r3
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	4013      	ands	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	f003 0203 	and.w	r2, r3, #3
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	693a      	ldr	r2, [r7, #16]
 80006be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	f000 80ac 	beq.w	8000826 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ce:	4b5f      	ldr	r3, [pc, #380]	; (800084c <HAL_GPIO_Init+0x330>)
 80006d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006d2:	4a5e      	ldr	r2, [pc, #376]	; (800084c <HAL_GPIO_Init+0x330>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6613      	str	r3, [r2, #96]	; 0x60
 80006da:	4b5c      	ldr	r3, [pc, #368]	; (800084c <HAL_GPIO_Init+0x330>)
 80006dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80006e6:	4a5a      	ldr	r2, [pc, #360]	; (8000850 <HAL_GPIO_Init+0x334>)
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	089b      	lsrs	r3, r3, #2
 80006ec:	3302      	adds	r3, #2
 80006ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	f003 0303 	and.w	r3, r3, #3
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	220f      	movs	r2, #15
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	43db      	mvns	r3, r3
 8000704:	693a      	ldr	r2, [r7, #16]
 8000706:	4013      	ands	r3, r2
 8000708:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000710:	d025      	beq.n	800075e <HAL_GPIO_Init+0x242>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a4f      	ldr	r2, [pc, #316]	; (8000854 <HAL_GPIO_Init+0x338>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d01f      	beq.n	800075a <HAL_GPIO_Init+0x23e>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a4e      	ldr	r2, [pc, #312]	; (8000858 <HAL_GPIO_Init+0x33c>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d019      	beq.n	8000756 <HAL_GPIO_Init+0x23a>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a4d      	ldr	r2, [pc, #308]	; (800085c <HAL_GPIO_Init+0x340>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d013      	beq.n	8000752 <HAL_GPIO_Init+0x236>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a4c      	ldr	r2, [pc, #304]	; (8000860 <HAL_GPIO_Init+0x344>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d00d      	beq.n	800074e <HAL_GPIO_Init+0x232>
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a4b      	ldr	r2, [pc, #300]	; (8000864 <HAL_GPIO_Init+0x348>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d007      	beq.n	800074a <HAL_GPIO_Init+0x22e>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a4a      	ldr	r2, [pc, #296]	; (8000868 <HAL_GPIO_Init+0x34c>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d101      	bne.n	8000746 <HAL_GPIO_Init+0x22a>
 8000742:	2306      	movs	r3, #6
 8000744:	e00c      	b.n	8000760 <HAL_GPIO_Init+0x244>
 8000746:	2307      	movs	r3, #7
 8000748:	e00a      	b.n	8000760 <HAL_GPIO_Init+0x244>
 800074a:	2305      	movs	r3, #5
 800074c:	e008      	b.n	8000760 <HAL_GPIO_Init+0x244>
 800074e:	2304      	movs	r3, #4
 8000750:	e006      	b.n	8000760 <HAL_GPIO_Init+0x244>
 8000752:	2303      	movs	r3, #3
 8000754:	e004      	b.n	8000760 <HAL_GPIO_Init+0x244>
 8000756:	2302      	movs	r3, #2
 8000758:	e002      	b.n	8000760 <HAL_GPIO_Init+0x244>
 800075a:	2301      	movs	r3, #1
 800075c:	e000      	b.n	8000760 <HAL_GPIO_Init+0x244>
 800075e:	2300      	movs	r3, #0
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	f002 0203 	and.w	r2, r2, #3
 8000766:	0092      	lsls	r2, r2, #2
 8000768:	4093      	lsls	r3, r2
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	4313      	orrs	r3, r2
 800076e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000770:	4937      	ldr	r1, [pc, #220]	; (8000850 <HAL_GPIO_Init+0x334>)
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	089b      	lsrs	r3, r3, #2
 8000776:	3302      	adds	r3, #2
 8000778:	693a      	ldr	r2, [r7, #16]
 800077a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800077e:	4b3b      	ldr	r3, [pc, #236]	; (800086c <HAL_GPIO_Init+0x350>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	43db      	mvns	r3, r3
 8000788:	693a      	ldr	r2, [r7, #16]
 800078a:	4013      	ands	r3, r2
 800078c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000796:	2b00      	cmp	r3, #0
 8000798:	d003      	beq.n	80007a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	4313      	orrs	r3, r2
 80007a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80007a2:	4a32      	ldr	r2, [pc, #200]	; (800086c <HAL_GPIO_Init+0x350>)
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80007a8:	4b30      	ldr	r3, [pc, #192]	; (800086c <HAL_GPIO_Init+0x350>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	43db      	mvns	r3, r3
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	4013      	ands	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d003      	beq.n	80007cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80007c4:	693a      	ldr	r2, [r7, #16]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80007cc:	4a27      	ldr	r2, [pc, #156]	; (800086c <HAL_GPIO_Init+0x350>)
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <HAL_GPIO_Init+0x350>)
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	43db      	mvns	r3, r3
 80007dc:	693a      	ldr	r2, [r7, #16]
 80007de:	4013      	ands	r3, r2
 80007e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d003      	beq.n	80007f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80007f6:	4a1d      	ldr	r2, [pc, #116]	; (800086c <HAL_GPIO_Init+0x350>)
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <HAL_GPIO_Init+0x350>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	43db      	mvns	r3, r3
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	4013      	ands	r3, r2
 800080a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000814:	2b00      	cmp	r3, #0
 8000816:	d003      	beq.n	8000820 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	4313      	orrs	r3, r2
 800081e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <HAL_GPIO_Init+0x350>)
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	3301      	adds	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	fa22 f303 	lsr.w	r3, r2, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	f47f ae78 	bne.w	800052c <HAL_GPIO_Init+0x10>
  }
}
 800083c:	bf00      	nop
 800083e:	bf00      	nop
 8000840:	371c      	adds	r7, #28
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000
 8000850:	40010000 	.word	0x40010000
 8000854:	48000400 	.word	0x48000400
 8000858:	48000800 	.word	0x48000800
 800085c:	48000c00 	.word	0x48000c00
 8000860:	48001000 	.word	0x48001000
 8000864:	48001400 	.word	0x48001400
 8000868:	48001800 	.word	0x48001800
 800086c:	40010400 	.word	0x40010400

08000870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	807b      	strh	r3, [r7, #2]
 800087c:	4613      	mov	r3, r2
 800087e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000880:	787b      	ldrb	r3, [r7, #1]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d003      	beq.n	800088e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000886:	887a      	ldrh	r2, [r7, #2]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800088c:	e002      	b.n	8000894 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800088e:	887a      	ldrh	r2, [r7, #2]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80008b2:	887a      	ldrh	r2, [r7, #2]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	4013      	ands	r3, r2
 80008b8:	041a      	lsls	r2, r3, #16
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	43d9      	mvns	r1, r3
 80008be:	887b      	ldrh	r3, [r7, #2]
 80008c0:	400b      	ands	r3, r1
 80008c2:	431a      	orrs	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	619a      	str	r2, [r3, #24]
}
 80008c8:	bf00      	nop
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80008e0:	695a      	ldr	r2, [r3, #20]
 80008e2:	88fb      	ldrh	r3, [r7, #6]
 80008e4:	4013      	ands	r3, r2
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d006      	beq.n	80008f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80008ec:	88fb      	ldrh	r3, [r7, #6]
 80008ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f005 fb54 	bl	8005fa0 <HAL_GPIO_EXTI_Callback>
  }
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40010400 	.word	0x40010400

08000904 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d101      	bne.n	8000916 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e081      	b.n	8000a1a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d106      	bne.n	8000930 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f005 fb80 	bl	8006030 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2224      	movs	r2, #36	; 0x24
 8000934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f022 0201 	bic.w	r2, r2, #1
 8000946:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685a      	ldr	r2, [r3, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000954:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	689a      	ldr	r2, [r3, #8]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000964:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d107      	bne.n	800097e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	689a      	ldr	r2, [r3, #8]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	e006      	b.n	800098c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689a      	ldr	r2, [r3, #8]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800098a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	2b02      	cmp	r3, #2
 8000992:	d104      	bne.n	800099e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800099c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	6812      	ldr	r2, [r2, #0]
 80009a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	68da      	ldr	r2, [r3, #12]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80009c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	691a      	ldr	r2, [r3, #16]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	ea42 0103 	orr.w	r1, r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	021a      	lsls	r2, r3, #8
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	430a      	orrs	r2, r1
 80009da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	69d9      	ldr	r1, [r3, #28]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6a1a      	ldr	r2, [r3, #32]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	430a      	orrs	r2, r1
 80009ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f042 0201 	orr.w	r2, r2, #1
 80009fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2220      	movs	r2, #32
 8000a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
 8000a2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b20      	cmp	r3, #32
 8000a36:	d138      	bne.n	8000aaa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d101      	bne.n	8000a46 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000a42:	2302      	movs	r3, #2
 8000a44:	e032      	b.n	8000aac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2224      	movs	r2, #36	; 0x24
 8000a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f022 0201 	bic.w	r2, r2, #1
 8000a64:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a74:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	6819      	ldr	r1, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	683a      	ldr	r2, [r7, #0]
 8000a82:	430a      	orrs	r2, r1
 8000a84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f042 0201 	orr.w	r2, r2, #1
 8000a94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2220      	movs	r2, #32
 8000a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e000      	b.n	8000aac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000aaa:	2302      	movs	r3, #2
  }
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b20      	cmp	r3, #32
 8000acc:	d139      	bne.n	8000b42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d101      	bne.n	8000adc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000ad8:	2302      	movs	r3, #2
 8000ada:	e033      	b.n	8000b44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2224      	movs	r2, #36	; 0x24
 8000ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f022 0201 	bic.w	r2, r2, #1
 8000afa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	021b      	lsls	r3, r3, #8
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f042 0201 	orr.w	r2, r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2220      	movs	r2, #32
 8000b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e000      	b.n	8000b44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000b42:	2302      	movs	r3, #2
  }
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b52:	b08f      	sub	sp, #60	; 0x3c
 8000b54:	af0a      	add	r7, sp, #40	; 0x28
 8000b56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e116      	b.n	8000d90 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d106      	bne.n	8000b82 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f005 fb49 	bl	8006214 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2203      	movs	r2, #3
 8000b86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d102      	bne.n	8000b9c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f002 fc26 	bl	80033f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	687e      	ldr	r6, [r7, #4]
 8000bae:	466d      	mov	r5, sp
 8000bb0:	f106 0410 	add.w	r4, r6, #16
 8000bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bc4:	1d33      	adds	r3, r6, #4
 8000bc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bc8:	6838      	ldr	r0, [r7, #0]
 8000bca:	f002 fb39 	bl	8003240 <USB_CoreInit>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d005      	beq.n	8000be0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e0d7      	b.n	8000d90 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f002 fc14 	bl	8003414 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]
 8000bf0:	e04a      	b.n	8000c88 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000bf2:	7bfa      	ldrb	r2, [r7, #15]
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	1a9b      	subs	r3, r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	440b      	add	r3, r1
 8000c00:	333d      	adds	r3, #61	; 0x3d
 8000c02:	2201      	movs	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c06:	7bfa      	ldrb	r2, [r7, #15]
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	1a9b      	subs	r3, r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	440b      	add	r3, r1
 8000c14:	333c      	adds	r3, #60	; 0x3c
 8000c16:	7bfa      	ldrb	r2, [r7, #15]
 8000c18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c1a:	7bfa      	ldrb	r2, [r7, #15]
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	b298      	uxth	r0, r3
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	4613      	mov	r3, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	3342      	adds	r3, #66	; 0x42
 8000c2e:	4602      	mov	r2, r0
 8000c30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c32:	7bfa      	ldrb	r2, [r7, #15]
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	4613      	mov	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	1a9b      	subs	r3, r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	440b      	add	r3, r1
 8000c40:	333f      	adds	r3, #63	; 0x3f
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c46:	7bfa      	ldrb	r2, [r7, #15]
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	3344      	adds	r3, #68	; 0x44
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c5a:	7bfa      	ldrb	r2, [r7, #15]
 8000c5c:	6879      	ldr	r1, [r7, #4]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	440b      	add	r3, r1
 8000c68:	3348      	adds	r3, #72	; 0x48
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c6e:	7bfa      	ldrb	r2, [r7, #15]
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	4613      	mov	r3, r2
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	1a9b      	subs	r3, r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	3350      	adds	r3, #80	; 0x50
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	3301      	adds	r3, #1
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	7bfa      	ldrb	r2, [r7, #15]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d3af      	bcc.n	8000bf2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	73fb      	strb	r3, [r7, #15]
 8000c96:	e044      	b.n	8000d22 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c98:	7bfa      	ldrb	r2, [r7, #15]
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	1a9b      	subs	r3, r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000cae:	7bfa      	ldrb	r2, [r7, #15]
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	1a9b      	subs	r3, r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000cc0:	7bfa      	ldrb	r2, [r7, #15]
 8000cc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cc4:	7bfa      	ldrb	r2, [r7, #15]
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	1a9b      	subs	r3, r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000cda:	7bfa      	ldrb	r2, [r7, #15]
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	1a9b      	subs	r3, r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000cf0:	7bfa      	ldrb	r2, [r7, #15]
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	1a9b      	subs	r3, r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d06:	7bfa      	ldrb	r2, [r7, #15]
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	1a9b      	subs	r3, r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	440b      	add	r3, r1
 8000d14:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	73fb      	strb	r3, [r7, #15]
 8000d22:	7bfa      	ldrb	r2, [r7, #15]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d3b5      	bcc.n	8000c98 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	687e      	ldr	r6, [r7, #4]
 8000d34:	466d      	mov	r5, sp
 8000d36:	f106 0410 	add.w	r4, r6, #16
 8000d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d46:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d4a:	1d33      	adds	r3, r6, #4
 8000d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d4e:	6838      	ldr	r0, [r7, #0]
 8000d50:	f002 fb8a 	bl	8003468 <USB_DevInit>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d005      	beq.n	8000d66 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e014      	b.n	8000d90 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d102      	bne.n	8000d84 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 ff4a 	bl	8001c18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f003 fb0c 	bl	80043a6 <USB_DevDisconnect>

  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d101      	bne.n	8000db4 <HAL_PCD_Start+0x1c>
 8000db0:	2302      	movs	r3, #2
 8000db2:	e01c      	b.n	8000dee <HAL_PCD_Start+0x56>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2201      	movs	r2, #1
 8000db8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d105      	bne.n	8000dd0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 fafb 	bl	80033d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f003 fac0 	bl	8004364 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000df6:	b590      	push	{r4, r7, lr}
 8000df8:	b08d      	sub	sp, #52	; 0x34
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000e04:	6a3b      	ldr	r3, [r7, #32]
 8000e06:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f003 fb7e 	bl	800450e <USB_GetMode>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f040 838f 	bne.w	8001538 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 fae2 	bl	80043e8 <USB_ReadInterrupts>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 8385 	beq.w	8001536 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 fad9 	bl	80043e8 <USB_ReadInterrupts>
 8000e36:	4603      	mov	r3, r0
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d107      	bne.n	8000e50 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f002 0202 	and.w	r2, r2, #2
 8000e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f003 fac7 	bl	80043e8 <USB_ReadInterrupts>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f003 0310 	and.w	r3, r3, #16
 8000e60:	2b10      	cmp	r3, #16
 8000e62:	d161      	bne.n	8000f28 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	699a      	ldr	r2, [r3, #24]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 0210 	bic.w	r2, r2, #16
 8000e72:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8000e74:	6a3b      	ldr	r3, [r7, #32]
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	f003 020f 	and.w	r2, r3, #15
 8000e80:	4613      	mov	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	1a9b      	subs	r3, r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	4413      	add	r3, r2
 8000e90:	3304      	adds	r3, #4
 8000e92:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	0c5b      	lsrs	r3, r3, #17
 8000e98:	f003 030f 	and.w	r3, r3, #15
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d124      	bne.n	8000eea <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d035      	beq.n	8000f18 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000eb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	6a38      	ldr	r0, [r7, #32]
 8000ec0:	f003 f92d 	bl	800411e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	091b      	lsrs	r3, r3, #4
 8000ecc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ed0:	441a      	add	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	699a      	ldr	r2, [r3, #24]
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	091b      	lsrs	r3, r3, #4
 8000ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ee2:	441a      	add	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	619a      	str	r2, [r3, #24]
 8000ee8:	e016      	b.n	8000f18 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	0c5b      	lsrs	r3, r3, #17
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d110      	bne.n	8000f18 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8000efc:	2208      	movs	r2, #8
 8000efe:	4619      	mov	r1, r3
 8000f00:	6a38      	ldr	r0, [r7, #32]
 8000f02:	f003 f90c 	bl	800411e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	699a      	ldr	r2, [r3, #24]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f12:	441a      	add	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	699a      	ldr	r2, [r3, #24]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0210 	orr.w	r2, r2, #16
 8000f26:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f003 fa5b 	bl	80043e8 <USB_ReadInterrupts>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000f3c:	d16e      	bne.n	800101c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fa61 	bl	800440e <USB_ReadDevAllOutEpInterrupt>
 8000f4c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000f4e:	e062      	b.n	8001016 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d057      	beq.n	800100a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fa86 	bl	8004476 <USB_ReadDevOutEPInterrupt>
 8000f6a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00c      	beq.n	8000f90 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	015a      	lsls	r2, r3, #5
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f82:	461a      	mov	r2, r3
 8000f84:	2301      	movs	r3, #1
 8000f86:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 fd6a 	bl	8001a64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00c      	beq.n	8000fb4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	015a      	lsls	r2, r3, #5
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	2308      	movs	r3, #8
 8000faa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000fac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 fda6 	bl	8001b00 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	f003 0310 	and.w	r3, r3, #16
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d008      	beq.n	8000fd0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	015a      	lsls	r2, r3, #5
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fca:	461a      	mov	r2, r3
 8000fcc:	2310      	movs	r3, #16
 8000fce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	f003 0320 	and.w	r3, r3, #32
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d008      	beq.n	8000fec <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	015a      	lsls	r2, r3, #5
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	2320      	movs	r3, #32
 8000fea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d009      	beq.n	800100a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	015a      	lsls	r2, r3, #5
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001002:	461a      	mov	r2, r3
 8001004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001008:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	3301      	adds	r3, #1
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001012:	085b      	lsrs	r3, r3, #1
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	2b00      	cmp	r3, #0
 800101a:	d199      	bne.n	8000f50 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f003 f9e1 	bl	80043e8 <USB_ReadInterrupts>
 8001026:	4603      	mov	r3, r0
 8001028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800102c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001030:	f040 8087 	bne.w	8001142 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f003 fa02 	bl	8004442 <USB_ReadDevAllInEpInterrupt>
 800103e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001044:	e07a      	b.n	800113c <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d06f      	beq.n	8001130 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f003 fa29 	bl	80044b2 <USB_ReadDevInEPInterrupt>
 8001060:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	2b00      	cmp	r3, #0
 800106a:	d020      	beq.n	80010ae <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	2201      	movs	r2, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43db      	mvns	r3, r3
 8001086:	69f9      	ldr	r1, [r7, #28]
 8001088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800108c:	4013      	ands	r3, r2
 800108e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	015a      	lsls	r2, r3, #5
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	4413      	add	r3, r2
 8001098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800109c:	461a      	mov	r2, r3
 800109e:	2301      	movs	r3, #1
 80010a0:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4619      	mov	r1, r3
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f005 f972 	bl	8006392 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	015a      	lsls	r2, r3, #5
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	4413      	add	r3, r2
 80010c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010c4:	461a      	mov	r2, r3
 80010c6:	2308      	movs	r3, #8
 80010c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d008      	beq.n	80010e6 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	015a      	lsls	r2, r3, #5
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	4413      	add	r3, r2
 80010dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010e0:	461a      	mov	r2, r3
 80010e2:	2310      	movs	r3, #16
 80010e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d008      	beq.n	8001102 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	015a      	lsls	r2, r3, #5
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	4413      	add	r3, r2
 80010f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010fc:	461a      	mov	r2, r3
 80010fe:	2340      	movs	r3, #64	; 0x40
 8001100:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d008      	beq.n	800111e <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	015a      	lsls	r2, r3, #5
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	4413      	add	r3, r2
 8001114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001118:	461a      	mov	r2, r3
 800111a:	2302      	movs	r3, #2
 800111c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 fc11 	bl	8001952 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	3301      	adds	r3, #1
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001138:	085b      	lsrs	r3, r3, #1
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800113c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113e:	2b00      	cmp	r3, #0
 8001140:	d181      	bne.n	8001046 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f003 f94e 	bl	80043e8 <USB_ReadInterrupts>
 800114c:	4603      	mov	r3, r0
 800114e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001152:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001156:	d122      	bne.n	800119e <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	69fa      	ldr	r2, [r7, #28]
 8001162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001166:	f023 0301 	bic.w	r3, r3, #1
 800116a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001172:	2b01      	cmp	r3, #1
 8001174:	d108      	bne.n	8001188 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800117e:	2100      	movs	r1, #0
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f005 fc0b 	bl	800699c <HAL_PCDEx_LPM_Callback>
 8001186:	e002      	b.n	800118e <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f005 f96f 	bl	800646c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	695a      	ldr	r2, [r3, #20]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800119c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 f920 	bl	80043e8 <USB_ReadInterrupts>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011b2:	d112      	bne.n	80011da <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d102      	bne.n	80011ca <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f005 f92b 	bl	8006420 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	695a      	ldr	r2, [r3, #20]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80011d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 f902 	bl	80043e8 <USB_ReadInterrupts>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011ee:	d121      	bne.n	8001234 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80011fe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001206:	2b00      	cmp	r3, #0
 8001208:	d111      	bne.n	800122e <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	f003 020f 	and.w	r2, r3, #15
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001224:	2101      	movs	r1, #1
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f005 fbb8 	bl	800699c <HAL_PCDEx_LPM_Callback>
 800122c:	e002      	b.n	8001234 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f005 f8f6 	bl	8006420 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f003 f8d5 	bl	80043e8 <USB_ReadInterrupts>
 800123e:	4603      	mov	r3, r0
 8001240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001248:	f040 80c5 	bne.w	80013d6 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	69fa      	ldr	r2, [r7, #28]
 8001256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800125a:	f023 0301 	bic.w	r3, r3, #1
 800125e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2110      	movs	r1, #16
 8001266:	4618      	mov	r0, r3
 8001268:	f002 fa4a 	bl	8003700 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001270:	e056      	b.n	8001320 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001274:	015a      	lsls	r2, r3, #5
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	4413      	add	r3, r2
 800127a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800127e:	461a      	mov	r2, r3
 8001280:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001284:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001288:	015a      	lsls	r2, r3, #5
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	4413      	add	r3, r2
 800128e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001296:	0151      	lsls	r1, r2, #5
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	440a      	add	r2, r1
 800129c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80012a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012a4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80012a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a8:	015a      	lsls	r2, r3, #5
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	4413      	add	r3, r2
 80012ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012b6:	0151      	lsls	r1, r2, #5
 80012b8:	69fa      	ldr	r2, [r7, #28]
 80012ba:	440a      	add	r2, r1
 80012bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80012c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80012c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c8:	015a      	lsls	r2, r3, #5
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	4413      	add	r3, r2
 80012ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012d2:	461a      	mov	r2, r3
 80012d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	015a      	lsls	r2, r3, #5
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	4413      	add	r3, r2
 80012e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ea:	0151      	lsls	r1, r2, #5
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	440a      	add	r2, r1
 80012f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80012f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	015a      	lsls	r2, r3, #5
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	4413      	add	r3, r2
 8001302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800130a:	0151      	lsls	r1, r2, #5
 800130c:	69fa      	ldr	r2, [r7, #28]
 800130e:	440a      	add	r2, r1
 8001310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001314:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001318:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131c:	3301      	adds	r3, #1
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001326:	429a      	cmp	r2, r3
 8001328:	d3a3      	bcc.n	8001272 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001338:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800133c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	2b00      	cmp	r3, #0
 8001344:	d016      	beq.n	8001374 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800134c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001356:	f043 030b 	orr.w	r3, r3, #11
 800135a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800136c:	f043 030b 	orr.w	r3, r3, #11
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	e015      	b.n	80013a0 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001382:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001386:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800138a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800139a:	f043 030b 	orr.w	r3, r3, #11
 800139e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80013be:	4619      	mov	r1, r3
 80013c0:	4610      	mov	r0, r2
 80013c2:	f003 f8d5 	bl	8004570 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	695a      	ldr	r2, [r3, #20]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80013d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 f804 	bl	80043e8 <USB_ReadInterrupts>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013ea:	d124      	bne.n	8001436 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 f89a 	bl	800452a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 f9e1 	bl	80037c2 <USB_GetDevSpeed>
 8001400:	4603      	mov	r3, r0
 8001402:	461a      	mov	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681c      	ldr	r4, [r3, #0]
 800140c:	f001 f9f0 	bl	80027f0 <HAL_RCC_GetHCLKFreq>
 8001410:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001416:	b2db      	uxtb	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	4620      	mov	r0, r4
 800141c:	f001 ff3c 	bl	8003298 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f004 ffde 	bl	80063e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	695a      	ldr	r2, [r3, #20]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001434:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f002 ffd4 	bl	80043e8 <USB_ReadInterrupts>
 8001440:	4603      	mov	r3, r0
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b08      	cmp	r3, #8
 8001448:	d10a      	bne.n	8001460 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f004 ffbb 	bl	80063c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f002 0208 	and.w	r2, r2, #8
 800145e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f002 ffbf 	bl	80043e8 <USB_ReadInterrupts>
 800146a:	4603      	mov	r3, r0
 800146c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001470:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001474:	d10f      	bne.n	8001496 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	b2db      	uxtb	r3, r3
 800147e:	4619      	mov	r1, r3
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f005 f82d 	bl	80064e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001494:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f002 ffa4 	bl	80043e8 <USB_ReadInterrupts>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014aa:	d10f      	bne.n	80014cc <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	4619      	mov	r1, r3
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f005 f800 	bl	80064bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	695a      	ldr	r2, [r3, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80014ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 ff89 	bl	80043e8 <USB_ReadInterrupts>
 80014d6:	4603      	mov	r3, r0
 80014d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80014dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e0:	d10a      	bne.n	80014f8 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f005 f80e 	bl	8006504 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	695a      	ldr	r2, [r3, #20]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80014f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 ff73 	bl	80043e8 <USB_ReadInterrupts>
 8001502:	4603      	mov	r3, r0
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b04      	cmp	r3, #4
 800150a:	d115      	bne.n	8001538 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f004 fffe 	bl	8006520 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6859      	ldr	r1, [r3, #4]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	430a      	orrs	r2, r1
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	e000      	b.n	8001538 <HAL_PCD_IRQHandler+0x742>
      return;
 8001536:	bf00      	nop
    }
  }
}
 8001538:	3734      	adds	r7, #52	; 0x34
 800153a:	46bd      	mov	sp, r7
 800153c:	bd90      	pop	{r4, r7, pc}

0800153e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	460b      	mov	r3, r1
 8001548:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_PCD_SetAddress+0x1a>
 8001554:	2302      	movs	r3, #2
 8001556:	e013      	b.n	8001580 <HAL_PCD_SetAddress+0x42>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	78fa      	ldrb	r2, [r7, #3]
 8001564:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	78fa      	ldrb	r2, [r7, #3]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f002 fed1 	bl	8004318 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	4608      	mov	r0, r1
 8001592:	4611      	mov	r1, r2
 8001594:	461a      	mov	r2, r3
 8001596:	4603      	mov	r3, r0
 8001598:	70fb      	strb	r3, [r7, #3]
 800159a:	460b      	mov	r3, r1
 800159c:	803b      	strh	r3, [r7, #0]
 800159e:	4613      	mov	r3, r2
 80015a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	da0f      	bge.n	80015ce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	f003 020f 	and.w	r2, r3, #15
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	1a9b      	subs	r3, r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	3338      	adds	r3, #56	; 0x38
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	3304      	adds	r3, #4
 80015c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2201      	movs	r2, #1
 80015ca:	705a      	strb	r2, [r3, #1]
 80015cc:	e00f      	b.n	80015ee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	f003 020f 	and.w	r2, r3, #15
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	4413      	add	r3, r2
 80015e4:	3304      	adds	r3, #4
 80015e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80015fa:	883a      	ldrh	r2, [r7, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	78ba      	ldrb	r2, [r7, #2]
 8001604:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	785b      	ldrb	r3, [r3, #1]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b29a      	uxth	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001618:	78bb      	ldrb	r3, [r7, #2]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d102      	bne.n	8001624 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800162a:	2b01      	cmp	r3, #1
 800162c:	d101      	bne.n	8001632 <HAL_PCD_EP_Open+0xaa>
 800162e:	2302      	movs	r3, #2
 8001630:	e00e      	b.n	8001650 <HAL_PCD_EP_Open+0xc8>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68f9      	ldr	r1, [r7, #12]
 8001640:	4618      	mov	r0, r3
 8001642:	f002 f8dd 	bl	8003800 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800164e:	7afb      	ldrb	r3, [r7, #11]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001668:	2b00      	cmp	r3, #0
 800166a:	da0f      	bge.n	800168c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	f003 020f 	and.w	r2, r3, #15
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	1a9b      	subs	r3, r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	3338      	adds	r3, #56	; 0x38
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	3304      	adds	r3, #4
 8001682:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2201      	movs	r2, #1
 8001688:	705a      	strb	r2, [r3, #1]
 800168a:	e00f      	b.n	80016ac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	f003 020f 	and.w	r2, r3, #15
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	1a9b      	subs	r3, r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	3304      	adds	r3, #4
 80016a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_PCD_EP_Close+0x6e>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e00e      	b.n	80016e4 <HAL_PCD_EP_Close+0x8c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68f9      	ldr	r1, [r7, #12]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 f91b 	bl	8003910 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	460b      	mov	r3, r1
 80016fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016fc:	7afb      	ldrb	r3, [r7, #11]
 80016fe:	f003 020f 	and.w	r2, r3, #15
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	1a9b      	subs	r3, r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4413      	add	r3, r2
 8001712:	3304      	adds	r3, #4
 8001714:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2200      	movs	r2, #0
 800172c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800172e:	7afb      	ldrb	r3, [r7, #11]
 8001730:	f003 030f 	and.w	r3, r3, #15
 8001734:	b2da      	uxtb	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800173a:	7afb      	ldrb	r3, [r7, #11]
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	2b00      	cmp	r3, #0
 8001742:	d106      	bne.n	8001752 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6979      	ldr	r1, [r7, #20]
 800174a:	4618      	mov	r0, r3
 800174c:	f002 fb98 	bl	8003e80 <USB_EP0StartXfer>
 8001750:	e005      	b.n	800175e <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6979      	ldr	r1, [r7, #20]
 8001758:	4618      	mov	r0, r3
 800175a:	f002 f9b5 	bl	8003ac8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	460b      	mov	r3, r1
 8001776:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001778:	7afb      	ldrb	r3, [r7, #11]
 800177a:	f003 020f 	and.w	r2, r3, #15
 800177e:	4613      	mov	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	1a9b      	subs	r3, r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	3338      	adds	r3, #56	; 0x38
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	3304      	adds	r3, #4
 800178e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2201      	movs	r2, #1
 80017a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017a8:	7afb      	ldrb	r3, [r7, #11]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017b4:	7afb      	ldrb	r3, [r7, #11]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d106      	bne.n	80017cc <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6979      	ldr	r1, [r7, #20]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fb5b 	bl	8003e80 <USB_EP0StartXfer>
 80017ca:	e005      	b.n	80017d8 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6979      	ldr	r1, [r7, #20]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 f978 	bl	8003ac8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	460b      	mov	r3, r1
 80017ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	f003 020f 	and.w	r2, r3, #15
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d901      	bls.n	8001800 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e04e      	b.n	800189e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001800:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001804:	2b00      	cmp	r3, #0
 8001806:	da0f      	bge.n	8001828 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	f003 020f 	and.w	r2, r3, #15
 800180e:	4613      	mov	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	1a9b      	subs	r3, r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	3338      	adds	r3, #56	; 0x38
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	3304      	adds	r3, #4
 800181e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2201      	movs	r2, #1
 8001824:	705a      	strb	r2, [r3, #1]
 8001826:	e00d      	b.n	8001844 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	4613      	mov	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	1a9b      	subs	r3, r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	3304      	adds	r3, #4
 800183c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2201      	movs	r2, #1
 8001848:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	b2da      	uxtb	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800185c:	2b01      	cmp	r3, #1
 800185e:	d101      	bne.n	8001864 <HAL_PCD_EP_SetStall+0x82>
 8001860:	2302      	movs	r3, #2
 8001862:	e01c      	b.n	800189e <HAL_PCD_EP_SetStall+0xbc>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68f9      	ldr	r1, [r7, #12]
 8001872:	4618      	mov	r0, r3
 8001874:	f002 fc7c 	bl	8004170 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	2b00      	cmp	r3, #0
 8001880:	d108      	bne.n	8001894 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800188c:	4619      	mov	r1, r3
 800188e:	4610      	mov	r0, r2
 8001890:	f002 fe6e 	bl	8004570 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	460b      	mov	r3, r1
 80018b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	f003 020f 	and.w	r2, r3, #15
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d901      	bls.n	80018c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e042      	b.n	800194a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	da0f      	bge.n	80018ec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	f003 020f 	and.w	r2, r3, #15
 80018d2:	4613      	mov	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	3338      	adds	r3, #56	; 0x38
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	4413      	add	r3, r2
 80018e0:	3304      	adds	r3, #4
 80018e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2201      	movs	r2, #1
 80018e8:	705a      	strb	r2, [r3, #1]
 80018ea:	e00f      	b.n	800190c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	f003 020f 	and.w	r2, r3, #15
 80018f2:	4613      	mov	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	1a9b      	subs	r3, r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	3304      	adds	r3, #4
 8001904:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	b2da      	uxtb	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_PCD_EP_ClrStall+0x86>
 8001928:	2302      	movs	r3, #2
 800192a:	e00e      	b.n	800194a <HAL_PCD_EP_ClrStall+0xa4>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68f9      	ldr	r1, [r7, #12]
 800193a:	4618      	mov	r0, r3
 800193c:	f002 fc86 	bl	800424c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b088      	sub	sp, #32
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	4613      	mov	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	3338      	adds	r3, #56	; 0x38
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	3304      	adds	r3, #4
 8001978:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	699a      	ldr	r2, [r3, #24]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	429a      	cmp	r2, r3
 8001984:	d901      	bls.n	800198a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e067      	b.n	8001a5a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	429a      	cmp	r2, r3
 800199e:	d902      	bls.n	80019a6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3303      	adds	r3, #3
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80019ae:	e026      	b.n	80019fe <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	695a      	ldr	r2, [r3, #20]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d902      	bls.n	80019cc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	3303      	adds	r3, #3
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	68d9      	ldr	r1, [r3, #12]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	6978      	ldr	r0, [r7, #20]
 80019e2:	f002 fb6b 	bl	80040bc <USB_WritePacket>

    ep->xfer_buff  += len;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	441a      	add	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	699a      	ldr	r2, [r3, #24]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	441a      	add	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	015a      	lsls	r2, r3, #5
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d809      	bhi.n	8001a28 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	699a      	ldr	r2, [r3, #24]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d203      	bcs.n	8001a28 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1c3      	bne.n	80019b0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	695a      	ldr	r2, [r3, #20]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d811      	bhi.n	8001a58 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	6939      	ldr	r1, [r7, #16]
 8001a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001a54:	4013      	ands	r3, r2
 8001a56:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	333c      	adds	r3, #60	; 0x3c
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	015a      	lsls	r2, r3, #5
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4a19      	ldr	r2, [pc, #100]	; (8001afc <PCD_EP_OutXfrComplete_int+0x98>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d124      	bne.n	8001ae4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00a      	beq.n	8001aba <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	015a      	lsls	r2, r3, #5
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ab6:	6093      	str	r3, [r2, #8]
 8001ab8:	e01a      	b.n	8001af0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	015a      	lsls	r2, r3, #5
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4413      	add	r3, r2
 8001acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2320      	movs	r3, #32
 8001ad4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	4619      	mov	r1, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f004 fc3d 	bl	800635c <HAL_PCD_DataOutStageCallback>
 8001ae2:	e005      	b.n	8001af0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4619      	mov	r1, r3
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f004 fc36 	bl	800635c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	4f54310a 	.word	0x4f54310a

08001b00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	333c      	adds	r3, #60	; 0x3c
 8001b18:	3304      	adds	r3, #4
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	015a      	lsls	r2, r3, #5
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4a0c      	ldr	r2, [pc, #48]	; (8001b64 <PCD_EP_OutSetupPacket_int+0x64>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d90e      	bls.n	8001b54 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d009      	beq.n	8001b54 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	015a      	lsls	r2, r3, #5
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4413      	add	r3, r2
 8001b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b52:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f004 fbef 	bl	8006338 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	4f54300a 	.word	0x4f54300a

08001b68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	70fb      	strb	r3, [r7, #3]
 8001b74:	4613      	mov	r3, r2
 8001b76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d107      	bne.n	8001b96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001b86:	883b      	ldrh	r3, [r7, #0]
 8001b88:	0419      	lsls	r1, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
 8001b94:	e028      	b.n	8001be8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	0c1b      	lsrs	r3, r3, #16
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	73fb      	strb	r3, [r7, #15]
 8001ba8:	e00d      	b.n	8001bc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	3340      	adds	r3, #64	; 0x40
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	0c1b      	lsrs	r3, r3, #16
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	73fb      	strb	r3, [r7, #15]
 8001bc6:	7bfa      	ldrb	r2, [r7, #15]
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d3ec      	bcc.n	8001baa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001bd0:	883b      	ldrh	r3, [r7, #0]
 8001bd2:	0418      	lsls	r0, r3, #16
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6819      	ldr	r1, [r3, #0]
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	4302      	orrs	r2, r0
 8001be0:	3340      	adds	r3, #64	; 0x40
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	f043 0303 	orr.w	r3, r3, #3
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40007000 	.word	0x40007000

08001c7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c8a:	d130      	bne.n	8001cee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c8c:	4b23      	ldr	r3, [pc, #140]	; (8001d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c98:	d038      	beq.n	8001d0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c9a:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ca2:	4a1e      	ldr	r2, [pc, #120]	; (8001d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2232      	movs	r2, #50	; 0x32
 8001cb0:	fb02 f303 	mul.w	r3, r2, r3
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	0c9b      	lsrs	r3, r3, #18
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cc0:	e002      	b.n	8001cc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd4:	d102      	bne.n	8001cdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f2      	bne.n	8001cc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce8:	d110      	bne.n	8001d0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e00f      	b.n	8001d0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cfa:	d007      	beq.n	8001d0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d04:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40007000 	.word	0x40007000
 8001d20:	20000110 	.word	0x20000110
 8001d24:	431bde83 	.word	0x431bde83

08001d28 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d36:	6053      	str	r3, [r2, #4]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40007000 	.word	0x40007000

08001d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e3d4      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d5a:	4ba1      	ldr	r3, [pc, #644]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d64:	4b9e      	ldr	r3, [pc, #632]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80e4 	beq.w	8001f44 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d007      	beq.n	8001d92 <HAL_RCC_OscConfig+0x4a>
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	f040 808b 	bne.w	8001ea0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	f040 8087 	bne.w	8001ea0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d92:	4b93      	ldr	r3, [pc, #588]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <HAL_RCC_OscConfig+0x62>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e3ac      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a1a      	ldr	r2, [r3, #32]
 8001dae:	4b8c      	ldr	r3, [pc, #560]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x7c>
 8001dba:	4b89      	ldr	r3, [pc, #548]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc2:	e005      	b.n	8001dd0 <HAL_RCC_OscConfig+0x88>
 8001dc4:	4b86      	ldr	r3, [pc, #536]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d223      	bcs.n	8001e1c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 fd15 	bl	8002808 <RCC_SetFlashLatencyFromMSIRange>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e38d      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de8:	4b7d      	ldr	r3, [pc, #500]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a7c      	ldr	r2, [pc, #496]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001dee:	f043 0308 	orr.w	r3, r3, #8
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b7a      	ldr	r3, [pc, #488]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4977      	ldr	r1, [pc, #476]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e06:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	4972      	ldr	r1, [pc, #456]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	604b      	str	r3, [r1, #4]
 8001e1a:	e025      	b.n	8001e68 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e1c:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a6f      	ldr	r2, [pc, #444]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b6d      	ldr	r3, [pc, #436]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	496a      	ldr	r1, [pc, #424]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e3a:	4b69      	ldr	r3, [pc, #420]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	4965      	ldr	r1, [pc, #404]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 fcd5 	bl	8002808 <RCC_SetFlashLatencyFromMSIRange>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e34d      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e68:	f000 fc36 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b5c      	ldr	r3, [pc, #368]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	495a      	ldr	r1, [pc, #360]	; (8001fe4 <HAL_RCC_OscConfig+0x29c>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
 8001e84:	4a58      	ldr	r2, [pc, #352]	; (8001fe8 <HAL_RCC_OscConfig+0x2a0>)
 8001e86:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e88:	4b58      	ldr	r3, [pc, #352]	; (8001fec <HAL_RCC_OscConfig+0x2a4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe f9b3 	bl	80001f8 <HAL_InitTick>
 8001e92:	4603      	mov	r3, r0
 8001e94:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d052      	beq.n	8001f42 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	e331      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d032      	beq.n	8001f0e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ea8:	4b4d      	ldr	r3, [pc, #308]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a4c      	ldr	r2, [pc, #304]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eb4:	f7fe f9f0 	bl	8000298 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ebc:	f7fe f9ec 	bl	8000298 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e31a      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ece:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eda:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a40      	ldr	r2, [pc, #256]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001ee0:	f043 0308 	orr.w	r3, r3, #8
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b3e      	ldr	r3, [pc, #248]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	493b      	ldr	r1, [pc, #236]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef8:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	4936      	ldr	r1, [pc, #216]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
 8001f0c:	e01a      	b.n	8001f44 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f0e:	4b34      	ldr	r3, [pc, #208]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a33      	ldr	r2, [pc, #204]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f1a:	f7fe f9bd 	bl	8000298 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f22:	f7fe f9b9 	bl	8000298 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e2e7      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f34:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x1da>
 8001f40:	e000      	b.n	8001f44 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d074      	beq.n	800203a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d005      	beq.n	8001f62 <HAL_RCC_OscConfig+0x21a>
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2b0c      	cmp	r3, #12
 8001f5a:	d10e      	bne.n	8001f7a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d10b      	bne.n	8001f7a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f62:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d064      	beq.n	8002038 <HAL_RCC_OscConfig+0x2f0>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d160      	bne.n	8002038 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e2c4      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f82:	d106      	bne.n	8001f92 <HAL_RCC_OscConfig+0x24a>
 8001f84:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a15      	ldr	r2, [pc, #84]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	e01d      	b.n	8001fce <HAL_RCC_OscConfig+0x286>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f9a:	d10c      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x26e>
 8001f9c:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0f      	ldr	r2, [pc, #60]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	e00b      	b.n	8001fce <HAL_RCC_OscConfig+0x286>
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a06      	ldr	r2, [pc, #24]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d01c      	beq.n	8002010 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd6:	f7fe f95f 	bl	8000298 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fdc:	e011      	b.n	8002002 <HAL_RCC_OscConfig+0x2ba>
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	08006dc4 	.word	0x08006dc4
 8001fe8:	20000110 	.word	0x20000110
 8001fec:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7fe f952 	bl	8000298 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e280      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002002:	4baf      	ldr	r3, [pc, #700]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x2a8>
 800200e:	e014      	b.n	800203a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7fe f942 	bl	8000298 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002018:	f7fe f93e 	bl	8000298 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e26c      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800202a:	4ba5      	ldr	r3, [pc, #660]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x2d0>
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d060      	beq.n	8002108 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b04      	cmp	r3, #4
 800204a:	d005      	beq.n	8002058 <HAL_RCC_OscConfig+0x310>
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b0c      	cmp	r3, #12
 8002050:	d119      	bne.n	8002086 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d116      	bne.n	8002086 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002058:	4b99      	ldr	r3, [pc, #612]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_OscConfig+0x328>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e249      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b93      	ldr	r3, [pc, #588]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	4990      	ldr	r1, [pc, #576]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002084:	e040      	b.n	8002108 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d023      	beq.n	80020d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208e:	4b8c      	ldr	r3, [pc, #560]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a8b      	ldr	r2, [pc, #556]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209a:	f7fe f8fd 	bl	8000298 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a2:	f7fe f8f9 	bl	8000298 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e227      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b4:	4b82      	ldr	r3, [pc, #520]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c0:	4b7f      	ldr	r3, [pc, #508]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	061b      	lsls	r3, r3, #24
 80020ce:	497c      	ldr	r1, [pc, #496]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
 80020d4:	e018      	b.n	8002108 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d6:	4b7a      	ldr	r3, [pc, #488]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a79      	ldr	r2, [pc, #484]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7fe f8d9 	bl	8000298 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ea:	f7fe f8d5 	bl	8000298 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e203      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020fc:	4b70      	ldr	r3, [pc, #448]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d03c      	beq.n	800218e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d01c      	beq.n	8002156 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211c:	4b68      	ldr	r3, [pc, #416]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800211e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002122:	4a67      	ldr	r2, [pc, #412]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212c:	f7fe f8b4 	bl	8000298 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002134:	f7fe f8b0 	bl	8000298 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e1de      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002146:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ef      	beq.n	8002134 <HAL_RCC_OscConfig+0x3ec>
 8002154:	e01b      	b.n	800218e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002156:	4b5a      	ldr	r3, [pc, #360]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215c:	4a58      	ldr	r2, [pc, #352]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002166:	f7fe f897 	bl	8000298 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216e:	f7fe f893 	bl	8000298 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e1c1      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002180:	4b4f      	ldr	r3, [pc, #316]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1ef      	bne.n	800216e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80a6 	beq.w	80022e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800219c:	2300      	movs	r3, #0
 800219e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021a0:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10d      	bne.n	80021c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ac:	4b44      	ldr	r3, [pc, #272]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	4a43      	ldr	r2, [pc, #268]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80021b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b6:	6593      	str	r3, [r2, #88]	; 0x58
 80021b8:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c4:	2301      	movs	r3, #1
 80021c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c8:	4b3e      	ldr	r3, [pc, #248]	; (80022c4 <HAL_RCC_OscConfig+0x57c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d118      	bne.n	8002206 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021d4:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <HAL_RCC_OscConfig+0x57c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a3a      	ldr	r2, [pc, #232]	; (80022c4 <HAL_RCC_OscConfig+0x57c>)
 80021da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e0:	f7fe f85a 	bl	8000298 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e8:	f7fe f856 	bl	8000298 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e184      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021fa:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <HAL_RCC_OscConfig+0x57c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d108      	bne.n	8002220 <HAL_RCC_OscConfig+0x4d8>
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002214:	4a2a      	ldr	r2, [pc, #168]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800221e:	e024      	b.n	800226a <HAL_RCC_OscConfig+0x522>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b05      	cmp	r3, #5
 8002226:	d110      	bne.n	800224a <HAL_RCC_OscConfig+0x502>
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222e:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002238:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223e:	4a20      	ldr	r2, [pc, #128]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002248:	e00f      	b.n	800226a <HAL_RCC_OscConfig+0x522>
 800224a:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002250:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002252:	f023 0301 	bic.w	r3, r3, #1
 8002256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800225c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002260:	4a17      	ldr	r2, [pc, #92]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002262:	f023 0304 	bic.w	r3, r3, #4
 8002266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d016      	beq.n	80022a0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002272:	f7fe f811 	bl	8000298 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002278:	e00a      	b.n	8002290 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7fe f80d 	bl	8000298 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f241 3288 	movw	r2, #5000	; 0x1388
 8002288:	4293      	cmp	r3, r2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e139      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ed      	beq.n	800227a <HAL_RCC_OscConfig+0x532>
 800229e:	e01a      	b.n	80022d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a0:	f7fd fffa 	bl	8000298 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022a6:	e00f      	b.n	80022c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f7fd fff6 	bl	8000298 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d906      	bls.n	80022c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e122      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022c8:	4b90      	ldr	r3, [pc, #576]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1e8      	bne.n	80022a8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022d6:	7ffb      	ldrb	r3, [r7, #31]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d105      	bne.n	80022e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022dc:	4b8b      	ldr	r3, [pc, #556]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80022de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e0:	4a8a      	ldr	r2, [pc, #552]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80022e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 8108 	beq.w	8002502 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	f040 80d0 	bne.w	800249c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022fc:	4b83      	ldr	r3, [pc, #524]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f003 0203 	and.w	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	429a      	cmp	r2, r3
 800230e:	d130      	bne.n	8002372 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	3b01      	subs	r3, #1
 800231c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800231e:	429a      	cmp	r2, r3
 8002320:	d127      	bne.n	8002372 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d11f      	bne.n	8002372 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800233c:	2a07      	cmp	r2, #7
 800233e:	bf14      	ite	ne
 8002340:	2201      	movne	r2, #1
 8002342:	2200      	moveq	r2, #0
 8002344:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002346:	4293      	cmp	r3, r2
 8002348:	d113      	bne.n	8002372 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	3b01      	subs	r3, #1
 8002358:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800235a:	429a      	cmp	r2, r3
 800235c:	d109      	bne.n	8002372 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	085b      	lsrs	r3, r3, #1
 800236a:	3b01      	subs	r3, #1
 800236c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d06e      	beq.n	8002450 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	2b0c      	cmp	r3, #12
 8002376:	d069      	beq.n	800244c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002378:	4b64      	ldr	r3, [pc, #400]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002384:	4b61      	ldr	r3, [pc, #388]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0b7      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002394:	4b5d      	ldr	r3, [pc, #372]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a5c      	ldr	r2, [pc, #368]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 800239a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800239e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023a0:	f7fd ff7a 	bl	8000298 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a8:	f7fd ff76 	bl	8000298 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e0a4      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ba:	4b54      	ldr	r3, [pc, #336]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c6:	4b51      	ldr	r3, [pc, #324]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	4b51      	ldr	r3, [pc, #324]	; (8002510 <HAL_RCC_OscConfig+0x7c8>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023d6:	3a01      	subs	r2, #1
 80023d8:	0112      	lsls	r2, r2, #4
 80023da:	4311      	orrs	r1, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023e0:	0212      	lsls	r2, r2, #8
 80023e2:	4311      	orrs	r1, r2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023e8:	0852      	lsrs	r2, r2, #1
 80023ea:	3a01      	subs	r2, #1
 80023ec:	0552      	lsls	r2, r2, #21
 80023ee:	4311      	orrs	r1, r2
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023f4:	0852      	lsrs	r2, r2, #1
 80023f6:	3a01      	subs	r2, #1
 80023f8:	0652      	lsls	r2, r2, #25
 80023fa:	4311      	orrs	r1, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002400:	0912      	lsrs	r2, r2, #4
 8002402:	0452      	lsls	r2, r2, #17
 8002404:	430a      	orrs	r2, r1
 8002406:	4941      	ldr	r1, [pc, #260]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800240c:	4b3f      	ldr	r3, [pc, #252]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a3e      	ldr	r2, [pc, #248]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 8002412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002416:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002418:	4b3c      	ldr	r3, [pc, #240]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a3b      	ldr	r2, [pc, #236]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 800241e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002422:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002424:	f7fd ff38 	bl	8000298 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242c:	f7fd ff34 	bl	8000298 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e062      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243e:	4b33      	ldr	r3, [pc, #204]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800244a:	e05a      	b.n	8002502 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e059      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002450:	4b2e      	ldr	r3, [pc, #184]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d152      	bne.n	8002502 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800245c:	4b2b      	ldr	r3, [pc, #172]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a2a      	ldr	r2, [pc, #168]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 8002462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002466:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002468:	4b28      	ldr	r3, [pc, #160]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4a27      	ldr	r2, [pc, #156]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 800246e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002472:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002474:	f7fd ff10 	bl	8000298 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247c:	f7fd ff0c 	bl	8000298 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e03a      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248e:	4b1f      	ldr	r3, [pc, #124]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x734>
 800249a:	e032      	b.n	8002502 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d02d      	beq.n	80024fe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a19      	ldr	r2, [pc, #100]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80024a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80024ae:	4b17      	ldr	r3, [pc, #92]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d105      	bne.n	80024c6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80024ba:	4b14      	ldr	r3, [pc, #80]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	4a13      	ldr	r2, [pc, #76]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80024c0:	f023 0303 	bic.w	r3, r3, #3
 80024c4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	4a10      	ldr	r2, [pc, #64]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80024cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d6:	f7fd fedf 	bl	8000298 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024de:	f7fd fedb 	bl	8000298 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e009      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_RCC_OscConfig+0x7c4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f0      	bne.n	80024de <HAL_RCC_OscConfig+0x796>
 80024fc:	e001      	b.n	8002502 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000
 8002510:	f99d808c 	.word	0xf99d808c

08002514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0c8      	b.n	80026ba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002528:	4b66      	ldr	r3, [pc, #408]	; (80026c4 <HAL_RCC_ClockConfig+0x1b0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d910      	bls.n	8002558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 0207 	bic.w	r2, r3, #7
 800253e:	4961      	ldr	r1, [pc, #388]	; (80026c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b5f      	ldr	r3, [pc, #380]	; (80026c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0b0      	b.n	80026ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d04c      	beq.n	80025fe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d107      	bne.n	800257c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800256c:	4b56      	ldr	r3, [pc, #344]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d121      	bne.n	80025bc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e09e      	b.n	80026ba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d107      	bne.n	8002594 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002584:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d115      	bne.n	80025bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e092      	b.n	80026ba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d107      	bne.n	80025ac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800259c:	4b4a      	ldr	r3, [pc, #296]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d109      	bne.n	80025bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e086      	b.n	80026ba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ac:	4b46      	ldr	r3, [pc, #280]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e07e      	b.n	80026ba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025bc:	4b42      	ldr	r3, [pc, #264]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f023 0203 	bic.w	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	493f      	ldr	r1, [pc, #252]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ce:	f7fd fe63 	bl	8000298 <HAL_GetTick>
 80025d2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d6:	f7fd fe5f 	bl	8000298 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e066      	b.n	80026ba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ec:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 020c 	and.w	r2, r3, #12
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d1eb      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800260a:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	492c      	ldr	r1, [pc, #176]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800261c:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <HAL_RCC_ClockConfig+0x1b0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d210      	bcs.n	800264c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <HAL_RCC_ClockConfig+0x1b0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 0207 	bic.w	r2, r3, #7
 8002632:	4924      	ldr	r1, [pc, #144]	; (80026c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <HAL_RCC_ClockConfig+0x1b0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e036      	b.n	80026ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4918      	ldr	r1, [pc, #96]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002676:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4910      	ldr	r1, [pc, #64]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800268a:	f000 f825 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 800268e:	4602      	mov	r2, r0
 8002690:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	490c      	ldr	r1, [pc, #48]	; (80026cc <HAL_RCC_ClockConfig+0x1b8>)
 800269c:	5ccb      	ldrb	r3, [r1, r3]
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	fa22 f303 	lsr.w	r3, r2, r3
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fd fda2 	bl	80001f8 <HAL_InitTick>
 80026b4:	4603      	mov	r3, r0
 80026b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80026b8:	7afb      	ldrb	r3, [r7, #11]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40022000 	.word	0x40022000
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08006dc4 	.word	0x08006dc4
 80026d0:	20000110 	.word	0x20000110
 80026d4:	20000000 	.word	0x20000000

080026d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	; 0x24
 80026dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e6:	4b3e      	ldr	r3, [pc, #248]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f0:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x34>
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2b0c      	cmp	r3, #12
 8002704:	d121      	bne.n	800274a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d11e      	bne.n	800274a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800270c:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002718:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800271a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	e005      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002728:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002734:	4a2b      	ldr	r2, [pc, #172]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10d      	bne.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b04      	cmp	r3, #4
 800274e:	d102      	bne.n	8002756 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002750:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	e004      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d101      	bne.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800275c:	4b23      	ldr	r3, [pc, #140]	; (80027ec <HAL_RCC_GetSysClockFreq+0x114>)
 800275e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d134      	bne.n	80027d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d003      	beq.n	800277e <HAL_RCC_GetSysClockFreq+0xa6>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b03      	cmp	r3, #3
 800277a:	d003      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0xac>
 800277c:	e005      	b.n	800278a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002780:	617b      	str	r3, [r7, #20]
      break;
 8002782:	e005      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002786:	617b      	str	r3, [r7, #20]
      break;
 8002788:	e002      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	617b      	str	r3, [r7, #20]
      break;
 800278e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002790:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	3301      	adds	r3, #1
 800279c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	fb02 f203 	mul.w	r2, r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	0e5b      	lsrs	r3, r3, #25
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	3301      	adds	r3, #1
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027d0:	69bb      	ldr	r3, [r7, #24]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3724      	adds	r7, #36	; 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08006dd4 	.word	0x08006dd4
 80027e8:	00f42400 	.word	0x00f42400
 80027ec:	007a1200 	.word	0x007a1200

080027f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_RCC_GetHCLKFreq+0x14>)
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000110 	.word	0x20000110

08002808 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002814:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002820:	f7ff fa1e 	bl	8001c60 <HAL_PWREx_GetVoltageRange>
 8002824:	6178      	str	r0, [r7, #20]
 8002826:	e014      	b.n	8002852 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	4a24      	ldr	r2, [pc, #144]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800282e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002832:	6593      	str	r3, [r2, #88]	; 0x58
 8002834:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002840:	f7ff fa0e 	bl	8001c60 <HAL_PWREx_GetVoltageRange>
 8002844:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002846:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	4a1d      	ldr	r2, [pc, #116]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800284c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002850:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002858:	d10b      	bne.n	8002872 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b80      	cmp	r3, #128	; 0x80
 800285e:	d919      	bls.n	8002894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2ba0      	cmp	r3, #160	; 0xa0
 8002864:	d902      	bls.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002866:	2302      	movs	r3, #2
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	e013      	b.n	8002894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800286c:	2301      	movs	r3, #1
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	e010      	b.n	8002894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b80      	cmp	r3, #128	; 0x80
 8002876:	d902      	bls.n	800287e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002878:	2303      	movs	r3, #3
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	e00a      	b.n	8002894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b80      	cmp	r3, #128	; 0x80
 8002882:	d102      	bne.n	800288a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002884:	2302      	movs	r3, #2
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	e004      	b.n	8002894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b70      	cmp	r3, #112	; 0x70
 800288e:	d101      	bne.n	8002894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002890:	2301      	movs	r3, #1
 8002892:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 0207 	bic.w	r2, r3, #7
 800289c:	4909      	ldr	r1, [pc, #36]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d001      	beq.n	80028b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40022000 	.word	0x40022000

080028c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028d0:	2300      	movs	r3, #0
 80028d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028d4:	2300      	movs	r3, #0
 80028d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d041      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028ec:	d02a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028f2:	d824      	bhi.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028f8:	d008      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028fe:	d81e      	bhi.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002908:	d010      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800290a:	e018      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800290c:	4b86      	ldr	r3, [pc, #536]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a85      	ldr	r2, [pc, #532]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002916:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002918:	e015      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3304      	adds	r3, #4
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fabb 	bl	8002e9c <RCCEx_PLLSAI1_Config>
 8002926:	4603      	mov	r3, r0
 8002928:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800292a:	e00c      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3320      	adds	r3, #32
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fba6 	bl	8003084 <RCCEx_PLLSAI2_Config>
 8002938:	4603      	mov	r3, r0
 800293a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800293c:	e003      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	74fb      	strb	r3, [r7, #19]
      break;
 8002942:	e000      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002944:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10b      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800294c:	4b76      	ldr	r3, [pc, #472]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800295a:	4973      	ldr	r1, [pc, #460]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002962:	e001      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d041      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002978:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800297c:	d02a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800297e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002982:	d824      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002984:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002988:	d008      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800298a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800298e:	d81e      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002998:	d010      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800299a:	e018      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800299c:	4b62      	ldr	r3, [pc, #392]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a61      	ldr	r2, [pc, #388]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029a8:	e015      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3304      	adds	r3, #4
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fa73 	bl	8002e9c <RCCEx_PLLSAI1_Config>
 80029b6:	4603      	mov	r3, r0
 80029b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029ba:	e00c      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3320      	adds	r3, #32
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fb5e 	bl	8003084 <RCCEx_PLLSAI2_Config>
 80029c8:	4603      	mov	r3, r0
 80029ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029cc:	e003      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	74fb      	strb	r3, [r7, #19]
      break;
 80029d2:	e000      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80029d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029d6:	7cfb      	ldrb	r3, [r7, #19]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10b      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029dc:	4b52      	ldr	r3, [pc, #328]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ea:	494f      	ldr	r1, [pc, #316]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029f2:	e001      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029f4:	7cfb      	ldrb	r3, [r7, #19]
 80029f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80a0 	beq.w	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a06:	2300      	movs	r3, #0
 8002a08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a0a:	4b47      	ldr	r3, [pc, #284]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00d      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a20:	4b41      	ldr	r3, [pc, #260]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	4a40      	ldr	r2, [pc, #256]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a2c:	4b3e      	ldr	r3, [pc, #248]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a3c:	4b3b      	ldr	r3, [pc, #236]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a3a      	ldr	r2, [pc, #232]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a48:	f7fd fc26 	bl	8000298 <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a4e:	e009      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a50:	f7fd fc22 	bl	8000298 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d902      	bls.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	74fb      	strb	r3, [r7, #19]
        break;
 8002a62:	e005      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a64:	4b31      	ldr	r3, [pc, #196]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0ef      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a70:	7cfb      	ldrb	r3, [r7, #19]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d15c      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a76:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01f      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d019      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a94:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aa0:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	4a20      	ldr	r2, [pc, #128]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ac0:	4a19      	ldr	r2, [pc, #100]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d016      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad2:	f7fd fbe1 	bl	8000298 <HAL_GetTick>
 8002ad6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad8:	e00b      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ada:	f7fd fbdd 	bl	8000298 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d902      	bls.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	74fb      	strb	r3, [r7, #19]
            break;
 8002af0:	e006      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0ec      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b16:	4904      	ldr	r1, [pc, #16]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b1e:	e009      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	74bb      	strb	r3, [r7, #18]
 8002b24:	e006      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b30:	7cfb      	ldrb	r3, [r7, #19]
 8002b32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b34:	7c7b      	ldrb	r3, [r7, #17]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d105      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3a:	4b9e      	ldr	r3, [pc, #632]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3e:	4a9d      	ldr	r2, [pc, #628]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b52:	4b98      	ldr	r3, [pc, #608]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b58:	f023 0203 	bic.w	r2, r3, #3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	4994      	ldr	r1, [pc, #592]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b74:	4b8f      	ldr	r3, [pc, #572]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	f023 020c 	bic.w	r2, r3, #12
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b82:	498c      	ldr	r1, [pc, #560]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b96:	4b87      	ldr	r3, [pc, #540]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	4983      	ldr	r1, [pc, #524]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bb8:	4b7e      	ldr	r3, [pc, #504]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	497b      	ldr	r1, [pc, #492]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bda:	4b76      	ldr	r3, [pc, #472]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be8:	4972      	ldr	r1, [pc, #456]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bfc:	4b6d      	ldr	r3, [pc, #436]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0a:	496a      	ldr	r1, [pc, #424]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c1e:	4b65      	ldr	r3, [pc, #404]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	4961      	ldr	r1, [pc, #388]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c40:	4b5c      	ldr	r3, [pc, #368]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4e:	4959      	ldr	r1, [pc, #356]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c62:	4b54      	ldr	r3, [pc, #336]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c70:	4950      	ldr	r1, [pc, #320]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c84:	4b4b      	ldr	r3, [pc, #300]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c92:	4948      	ldr	r1, [pc, #288]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ca6:	4b43      	ldr	r3, [pc, #268]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb4:	493f      	ldr	r1, [pc, #252]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d028      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cc8:	4b3a      	ldr	r3, [pc, #232]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd6:	4937      	ldr	r1, [pc, #220]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ce6:	d106      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ce8:	4b32      	ldr	r3, [pc, #200]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a31      	ldr	r2, [pc, #196]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cf2:	60d3      	str	r3, [r2, #12]
 8002cf4:	e011      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cfe:	d10c      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3304      	adds	r3, #4
 8002d04:	2101      	movs	r1, #1
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f8c8 	bl	8002e9c <RCCEx_PLLSAI1_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d16:	7cfb      	ldrb	r3, [r7, #19]
 8002d18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d028      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d26:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	491f      	ldr	r1, [pc, #124]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d44:	d106      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d46:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	4a1a      	ldr	r2, [pc, #104]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d50:	60d3      	str	r3, [r2, #12]
 8002d52:	e011      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3304      	adds	r3, #4
 8002d62:	2101      	movs	r1, #1
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 f899 	bl	8002e9c <RCCEx_PLLSAI1_Config>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d6e:	7cfb      	ldrb	r3, [r7, #19]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d74:	7cfb      	ldrb	r3, [r7, #19]
 8002d76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d02b      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d92:	4908      	ldr	r1, [pc, #32]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da2:	d109      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	4a02      	ldr	r2, [pc, #8]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dae:	60d3      	str	r3, [r2, #12]
 8002db0:	e014      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 f867 	bl	8002e9c <RCCEx_PLLSAI1_Config>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dd2:	7cfb      	ldrb	r3, [r7, #19]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002dd8:	7cfb      	ldrb	r3, [r7, #19]
 8002dda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d02f      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002de8:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002df6:	4928      	ldr	r1, [pc, #160]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e06:	d10d      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 f844 	bl	8002e9c <RCCEx_PLLSAI1_Config>
 8002e14:	4603      	mov	r3, r0
 8002e16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e18:	7cfb      	ldrb	r3, [r7, #19]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d014      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e1e:	7cfb      	ldrb	r3, [r7, #19]
 8002e20:	74bb      	strb	r3, [r7, #18]
 8002e22:	e011      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3320      	adds	r3, #32
 8002e32:	2102      	movs	r1, #2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 f925 	bl	8003084 <RCCEx_PLLSAI2_Config>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e54:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e62:	490d      	ldr	r1, [pc, #52]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00b      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e86:	4904      	ldr	r1, [pc, #16]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000

08002e9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eaa:	4b75      	ldr	r3, [pc, #468]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d018      	beq.n	8002ee8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002eb6:	4b72      	ldr	r3, [pc, #456]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f003 0203 	and.w	r2, r3, #3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d10d      	bne.n	8002ee2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
       ||
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ece:	4b6c      	ldr	r3, [pc, #432]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
       ||
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d047      	beq.n	8002f72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
 8002ee6:	e044      	b.n	8002f72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d018      	beq.n	8002f22 <RCCEx_PLLSAI1_Config+0x86>
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d825      	bhi.n	8002f40 <RCCEx_PLLSAI1_Config+0xa4>
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d002      	beq.n	8002efe <RCCEx_PLLSAI1_Config+0x62>
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d009      	beq.n	8002f10 <RCCEx_PLLSAI1_Config+0x74>
 8002efc:	e020      	b.n	8002f40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002efe:	4b60      	ldr	r3, [pc, #384]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d11d      	bne.n	8002f46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f0e:	e01a      	b.n	8002f46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f10:	4b5b      	ldr	r3, [pc, #364]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d116      	bne.n	8002f4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f20:	e013      	b.n	8002f4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f22:	4b57      	ldr	r3, [pc, #348]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10f      	bne.n	8002f4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f2e:	4b54      	ldr	r3, [pc, #336]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d109      	bne.n	8002f4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f3e:	e006      	b.n	8002f4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      break;
 8002f44:	e004      	b.n	8002f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f46:	bf00      	nop
 8002f48:	e002      	b.n	8002f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f4a:	bf00      	nop
 8002f4c:	e000      	b.n	8002f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10d      	bne.n	8002f72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f56:	4b4a      	ldr	r3, [pc, #296]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6819      	ldr	r1, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	4944      	ldr	r1, [pc, #272]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d17d      	bne.n	8003074 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f78:	4b41      	ldr	r3, [pc, #260]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a40      	ldr	r2, [pc, #256]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f84:	f7fd f988 	bl	8000298 <HAL_GetTick>
 8002f88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f8a:	e009      	b.n	8002fa0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f8c:	f7fd f984 	bl	8000298 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d902      	bls.n	8002fa0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f9e:	e005      	b.n	8002fac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fa0:	4b37      	ldr	r3, [pc, #220]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ef      	bne.n	8002f8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d160      	bne.n	8003074 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d111      	bne.n	8002fdc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fb8:	4b31      	ldr	r3, [pc, #196]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6892      	ldr	r2, [r2, #8]
 8002fc8:	0211      	lsls	r1, r2, #8
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68d2      	ldr	r2, [r2, #12]
 8002fce:	0912      	lsrs	r2, r2, #4
 8002fd0:	0452      	lsls	r2, r2, #17
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	492a      	ldr	r1, [pc, #168]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	610b      	str	r3, [r1, #16]
 8002fda:	e027      	b.n	800302c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d112      	bne.n	8003008 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fe2:	4b27      	ldr	r3, [pc, #156]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6892      	ldr	r2, [r2, #8]
 8002ff2:	0211      	lsls	r1, r2, #8
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6912      	ldr	r2, [r2, #16]
 8002ff8:	0852      	lsrs	r2, r2, #1
 8002ffa:	3a01      	subs	r2, #1
 8002ffc:	0552      	lsls	r2, r2, #21
 8002ffe:	430a      	orrs	r2, r1
 8003000:	491f      	ldr	r1, [pc, #124]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	610b      	str	r3, [r1, #16]
 8003006:	e011      	b.n	800302c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003010:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6892      	ldr	r2, [r2, #8]
 8003018:	0211      	lsls	r1, r2, #8
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6952      	ldr	r2, [r2, #20]
 800301e:	0852      	lsrs	r2, r2, #1
 8003020:	3a01      	subs	r2, #1
 8003022:	0652      	lsls	r2, r2, #25
 8003024:	430a      	orrs	r2, r1
 8003026:	4916      	ldr	r1, [pc, #88]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003028:	4313      	orrs	r3, r2
 800302a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800302c:	4b14      	ldr	r3, [pc, #80]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a13      	ldr	r2, [pc, #76]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003032:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003036:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003038:	f7fd f92e 	bl	8000298 <HAL_GetTick>
 800303c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800303e:	e009      	b.n	8003054 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003040:	f7fd f92a 	bl	8000298 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d902      	bls.n	8003054 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	73fb      	strb	r3, [r7, #15]
          break;
 8003052:	e005      	b.n	8003060 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003054:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0ef      	beq.n	8003040 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	4904      	ldr	r1, [pc, #16]	; (8003080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003070:	4313      	orrs	r3, r2
 8003072:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003074:	7bfb      	ldrb	r3, [r7, #15]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000

08003084 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003092:	4b6a      	ldr	r3, [pc, #424]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d018      	beq.n	80030d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800309e:	4b67      	ldr	r3, [pc, #412]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f003 0203 	and.w	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d10d      	bne.n	80030ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
       ||
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80030b6:	4b61      	ldr	r3, [pc, #388]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
       ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d047      	beq.n	800315a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
 80030ce:	e044      	b.n	800315a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d018      	beq.n	800310a <RCCEx_PLLSAI2_Config+0x86>
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d825      	bhi.n	8003128 <RCCEx_PLLSAI2_Config+0xa4>
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d002      	beq.n	80030e6 <RCCEx_PLLSAI2_Config+0x62>
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d009      	beq.n	80030f8 <RCCEx_PLLSAI2_Config+0x74>
 80030e4:	e020      	b.n	8003128 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030e6:	4b55      	ldr	r3, [pc, #340]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d11d      	bne.n	800312e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f6:	e01a      	b.n	800312e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030f8:	4b50      	ldr	r3, [pc, #320]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003100:	2b00      	cmp	r3, #0
 8003102:	d116      	bne.n	8003132 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003108:	e013      	b.n	8003132 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800310a:	4b4c      	ldr	r3, [pc, #304]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10f      	bne.n	8003136 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003116:	4b49      	ldr	r3, [pc, #292]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003126:	e006      	b.n	8003136 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      break;
 800312c:	e004      	b.n	8003138 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800312e:	bf00      	nop
 8003130:	e002      	b.n	8003138 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003132:	bf00      	nop
 8003134:	e000      	b.n	8003138 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003136:	bf00      	nop
    }

    if(status == HAL_OK)
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10d      	bne.n	800315a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800313e:	4b3f      	ldr	r3, [pc, #252]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	430b      	orrs	r3, r1
 8003154:	4939      	ldr	r1, [pc, #228]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003156:	4313      	orrs	r3, r2
 8003158:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d167      	bne.n	8003230 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003160:	4b36      	ldr	r3, [pc, #216]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a35      	ldr	r2, [pc, #212]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800316a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800316c:	f7fd f894 	bl	8000298 <HAL_GetTick>
 8003170:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003172:	e009      	b.n	8003188 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003174:	f7fd f890 	bl	8000298 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d902      	bls.n	8003188 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	73fb      	strb	r3, [r7, #15]
        break;
 8003186:	e005      	b.n	8003194 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003188:	4b2c      	ldr	r3, [pc, #176]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ef      	bne.n	8003174 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d14a      	bne.n	8003230 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d111      	bne.n	80031c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031a0:	4b26      	ldr	r3, [pc, #152]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6892      	ldr	r2, [r2, #8]
 80031b0:	0211      	lsls	r1, r2, #8
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68d2      	ldr	r2, [r2, #12]
 80031b6:	0912      	lsrs	r2, r2, #4
 80031b8:	0452      	lsls	r2, r2, #17
 80031ba:	430a      	orrs	r2, r1
 80031bc:	491f      	ldr	r1, [pc, #124]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	614b      	str	r3, [r1, #20]
 80031c2:	e011      	b.n	80031e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031c4:	4b1d      	ldr	r3, [pc, #116]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6892      	ldr	r2, [r2, #8]
 80031d4:	0211      	lsls	r1, r2, #8
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6912      	ldr	r2, [r2, #16]
 80031da:	0852      	lsrs	r2, r2, #1
 80031dc:	3a01      	subs	r2, #1
 80031de:	0652      	lsls	r2, r2, #25
 80031e0:	430a      	orrs	r2, r1
 80031e2:	4916      	ldr	r1, [pc, #88]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031e8:	4b14      	ldr	r3, [pc, #80]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a13      	ldr	r2, [pc, #76]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f4:	f7fd f850 	bl	8000298 <HAL_GetTick>
 80031f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031fa:	e009      	b.n	8003210 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031fc:	f7fd f84c 	bl	8000298 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d902      	bls.n	8003210 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	73fb      	strb	r3, [r7, #15]
          break;
 800320e:	e005      	b.n	800321c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0ef      	beq.n	80031fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003222:	4b06      	ldr	r3, [pc, #24]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	4904      	ldr	r1, [pc, #16]	; (800323c <RCCEx_PLLSAI2_Config+0x1b8>)
 800322c:	4313      	orrs	r3, r2
 800322e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003230:	7bfb      	ldrb	r3, [r7, #15]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40021000 	.word	0x40021000

08003240 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003240:	b084      	sub	sp, #16
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	f107 001c 	add.w	r0, r7, #28
 800324e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f001 f9ce 	bl	8004600 <USB_CoreReset>
 8003264:	4603      	mov	r3, r0
 8003266:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	639a      	str	r2, [r3, #56]	; 0x38
 800327a:	e005      	b.n	8003288 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003288:	7bfb      	ldrb	r3, [r7, #15]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003294:	b004      	add	sp, #16
 8003296:	4770      	bx	lr

08003298 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	4613      	mov	r3, r2
 80032a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d165      	bne.n	8003378 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	4a3e      	ldr	r2, [pc, #248]	; (80033a8 <USB_SetTurnaroundTime+0x110>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d906      	bls.n	80032c2 <USB_SetTurnaroundTime+0x2a>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4a3d      	ldr	r2, [pc, #244]	; (80033ac <USB_SetTurnaroundTime+0x114>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d202      	bcs.n	80032c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80032bc:	230f      	movs	r3, #15
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	e05c      	b.n	800337c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	4a39      	ldr	r2, [pc, #228]	; (80033ac <USB_SetTurnaroundTime+0x114>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d306      	bcc.n	80032d8 <USB_SetTurnaroundTime+0x40>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4a38      	ldr	r2, [pc, #224]	; (80033b0 <USB_SetTurnaroundTime+0x118>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d202      	bcs.n	80032d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80032d2:	230e      	movs	r3, #14
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	e051      	b.n	800337c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4a35      	ldr	r2, [pc, #212]	; (80033b0 <USB_SetTurnaroundTime+0x118>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d306      	bcc.n	80032ee <USB_SetTurnaroundTime+0x56>
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4a34      	ldr	r2, [pc, #208]	; (80033b4 <USB_SetTurnaroundTime+0x11c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d202      	bcs.n	80032ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80032e8:	230d      	movs	r3, #13
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	e046      	b.n	800337c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	4a30      	ldr	r2, [pc, #192]	; (80033b4 <USB_SetTurnaroundTime+0x11c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d306      	bcc.n	8003304 <USB_SetTurnaroundTime+0x6c>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	4a2f      	ldr	r2, [pc, #188]	; (80033b8 <USB_SetTurnaroundTime+0x120>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d802      	bhi.n	8003304 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80032fe:	230c      	movs	r3, #12
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	e03b      	b.n	800337c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4a2c      	ldr	r2, [pc, #176]	; (80033b8 <USB_SetTurnaroundTime+0x120>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d906      	bls.n	800331a <USB_SetTurnaroundTime+0x82>
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4a2b      	ldr	r2, [pc, #172]	; (80033bc <USB_SetTurnaroundTime+0x124>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d802      	bhi.n	800331a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003314:	230b      	movs	r3, #11
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	e030      	b.n	800337c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4a27      	ldr	r2, [pc, #156]	; (80033bc <USB_SetTurnaroundTime+0x124>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d906      	bls.n	8003330 <USB_SetTurnaroundTime+0x98>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	4a26      	ldr	r2, [pc, #152]	; (80033c0 <USB_SetTurnaroundTime+0x128>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d802      	bhi.n	8003330 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800332a:	230a      	movs	r3, #10
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	e025      	b.n	800337c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4a23      	ldr	r2, [pc, #140]	; (80033c0 <USB_SetTurnaroundTime+0x128>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d906      	bls.n	8003346 <USB_SetTurnaroundTime+0xae>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4a22      	ldr	r2, [pc, #136]	; (80033c4 <USB_SetTurnaroundTime+0x12c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d202      	bcs.n	8003346 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003340:	2309      	movs	r3, #9
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	e01a      	b.n	800337c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	4a1e      	ldr	r2, [pc, #120]	; (80033c4 <USB_SetTurnaroundTime+0x12c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d306      	bcc.n	800335c <USB_SetTurnaroundTime+0xc4>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <USB_SetTurnaroundTime+0x130>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d802      	bhi.n	800335c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003356:	2308      	movs	r3, #8
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	e00f      	b.n	800337c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4a1a      	ldr	r2, [pc, #104]	; (80033c8 <USB_SetTurnaroundTime+0x130>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d906      	bls.n	8003372 <USB_SetTurnaroundTime+0xda>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4a19      	ldr	r2, [pc, #100]	; (80033cc <USB_SetTurnaroundTime+0x134>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d202      	bcs.n	8003372 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800336c:	2307      	movs	r3, #7
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	e004      	b.n	800337c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003372:	2306      	movs	r3, #6
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	e001      	b.n	800337c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003378:	2309      	movs	r3, #9
 800337a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	029b      	lsls	r3, r3, #10
 8003390:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003394:	431a      	orrs	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	371c      	adds	r7, #28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	00d8acbf 	.word	0x00d8acbf
 80033ac:	00e4e1c0 	.word	0x00e4e1c0
 80033b0:	00f42400 	.word	0x00f42400
 80033b4:	01067380 	.word	0x01067380
 80033b8:	011a499f 	.word	0x011a499f
 80033bc:	01312cff 	.word	0x01312cff
 80033c0:	014ca43f 	.word	0x014ca43f
 80033c4:	016e3600 	.word	0x016e3600
 80033c8:	01a6ab1f 	.word	0x01a6ab1f
 80033cc:	01e84800 	.word	0x01e84800

080033d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f043 0201 	orr.w	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f023 0201 	bic.w	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d106      	bne.n	8003440 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	e00b      	b.n	8003458 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	60da      	str	r2, [r3, #12]
 8003452:	e001      	b.n	8003458 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e003      	b.n	8003460 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003458:	2032      	movs	r0, #50	; 0x32
 800345a:	f7fc ff29 	bl	80002b0 <HAL_Delay>

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003468:	b084      	sub	sp, #16
 800346a:	b580      	push	{r7, lr}
 800346c:	b086      	sub	sp, #24
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	e009      	b.n	800349c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	3340      	adds	r3, #64	; 0x40
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	2200      	movs	r2, #0
 8003494:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	3301      	adds	r3, #1
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2b0e      	cmp	r3, #14
 80034a0:	d9f2      	bls.n	8003488 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80034a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d11c      	bne.n	80034e2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034b6:	f043 0302 	orr.w	r3, r3, #2
 80034ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e005      	b.n	80034ee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80034f4:	461a      	mov	r2, r3
 80034f6:	2300      	movs	r3, #0
 80034f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003500:	4619      	mov	r1, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003508:	461a      	mov	r2, r3
 800350a:	680b      	ldr	r3, [r1, #0]
 800350c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800350e:	2103      	movs	r1, #3
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f93d 	bl	8003790 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003516:	2110      	movs	r1, #16
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f8f1 	bl	8003700 <USB_FlushTxFifo>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f90f 	bl	800374c <USB_FlushRxFifo>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353e:	461a      	mov	r2, r3
 8003540:	2300      	movs	r3, #0
 8003542:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800354a:	461a      	mov	r2, r3
 800354c:	2300      	movs	r3, #0
 800354e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003556:	461a      	mov	r2, r3
 8003558:	2300      	movs	r3, #0
 800355a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	e043      	b.n	80035ea <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003574:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003578:	d118      	bne.n	80035ac <USB_DevInit+0x144>
    {
      if (i == 0U)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10a      	bne.n	8003596 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	461a      	mov	r2, r3
 800358e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	e013      	b.n	80035be <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a2:	461a      	mov	r2, r3
 80035a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e008      	b.n	80035be <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b8:	461a      	mov	r2, r3
 80035ba:	2300      	movs	r3, #0
 80035bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ca:	461a      	mov	r2, r3
 80035cc:	2300      	movs	r3, #0
 80035ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035dc:	461a      	mov	r2, r3
 80035de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	3301      	adds	r3, #1
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d3b7      	bcc.n	8003562 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	e043      	b.n	8003680 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800360a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800360e:	d118      	bne.n	8003642 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003622:	461a      	mov	r2, r3
 8003624:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	e013      	b.n	8003654 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003638:	461a      	mov	r2, r3
 800363a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	e008      	b.n	8003654 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364e:	461a      	mov	r2, r3
 8003650:	2300      	movs	r3, #0
 8003652:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003660:	461a      	mov	r2, r3
 8003662:	2300      	movs	r3, #0
 8003664:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003672:	461a      	mov	r2, r3
 8003674:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003678:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	3301      	adds	r3, #1
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	429a      	cmp	r2, r3
 8003686:	d3b7      	bcc.n	80035f8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800369a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80036a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f043 0210 	orr.w	r2, r3, #16
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	4b10      	ldr	r3, [pc, #64]	; (80036fc <USB_DevInit+0x294>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80036c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f043 0208 	orr.w	r2, r3, #8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80036d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d107      	bne.n	80036ea <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036e2:	f043 0304 	orr.w	r3, r3, #4
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036f6:	b004      	add	sp, #16
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	803c3800 	.word	0x803c3800

08003700 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	019b      	lsls	r3, r3, #6
 8003712:	f043 0220 	orr.w	r2, r3, #32
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3301      	adds	r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4a09      	ldr	r2, [pc, #36]	; (8003748 <USB_FlushTxFifo+0x48>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d901      	bls.n	800372c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e006      	b.n	800373a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b20      	cmp	r3, #32
 8003736:	d0f0      	beq.n	800371a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	00030d40 	.word	0x00030d40

0800374c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2210      	movs	r2, #16
 800375c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	3301      	adds	r3, #1
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4a09      	ldr	r2, [pc, #36]	; (800378c <USB_FlushRxFifo+0x40>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e006      	b.n	800377e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b10      	cmp	r3, #16
 800377a:	d0f0      	beq.n	800375e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	00030d40 	.word	0x00030d40

08003790 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	68f9      	ldr	r1, [r7, #12]
 80037ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037b0:	4313      	orrs	r3, r2
 80037b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b087      	sub	sp, #28
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0306 	and.w	r3, r3, #6
 80037da:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d002      	beq.n	80037e8 <USB_GetDevSpeed+0x26>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b06      	cmp	r3, #6
 80037e6:	d102      	bne.n	80037ee <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80037e8:	2302      	movs	r3, #2
 80037ea:	75fb      	strb	r3, [r7, #23]
 80037ec:	e001      	b.n	80037f2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80037ee:	230f      	movs	r3, #15
 80037f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	785b      	ldrb	r3, [r3, #1]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d13a      	bne.n	8003892 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003822:	69da      	ldr	r2, [r3, #28]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	2101      	movs	r1, #1
 800382e:	fa01 f303 	lsl.w	r3, r1, r3
 8003832:	b29b      	uxth	r3, r3
 8003834:	68f9      	ldr	r1, [r7, #12]
 8003836:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800383a:	4313      	orrs	r3, r2
 800383c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d155      	bne.n	8003900 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	78db      	ldrb	r3, [r3, #3]
 800386e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003870:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	059b      	lsls	r3, r3, #22
 8003876:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003878:	4313      	orrs	r3, r2
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	0151      	lsls	r1, r2, #5
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	440a      	add	r2, r1
 8003882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	e036      	b.n	8003900 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003898:	69da      	ldr	r2, [r3, #28]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	2101      	movs	r1, #1
 80038a4:	fa01 f303 	lsl.w	r3, r1, r3
 80038a8:	041b      	lsls	r3, r3, #16
 80038aa:	68f9      	ldr	r1, [r7, #12]
 80038ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d11a      	bne.n	8003900 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	78db      	ldrb	r3, [r3, #3]
 80038e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80038e6:	430b      	orrs	r3, r1
 80038e8:	4313      	orrs	r3, r2
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	0151      	lsls	r1, r2, #5
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	440a      	add	r2, r1
 80038f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
	...

08003910 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	785b      	ldrb	r3, [r3, #1]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d161      	bne.n	80039f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800393e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003942:	d11f      	bne.n	8003984 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	0151      	lsls	r1, r2, #5
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	440a      	add	r2, r1
 800395a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800395e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003962:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	0151      	lsls	r1, r2, #5
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	440a      	add	r2, r1
 800397a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800397e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003982:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	2101      	movs	r1, #1
 8003996:	fa01 f303 	lsl.w	r3, r1, r3
 800399a:	b29b      	uxth	r3, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	68f9      	ldr	r1, [r7, #12]
 80039a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039a4:	4013      	ands	r3, r2
 80039a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ae:	69da      	ldr	r2, [r3, #28]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	2101      	movs	r1, #1
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	b29b      	uxth	r3, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	68f9      	ldr	r1, [r7, #12]
 80039c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039c8:	4013      	ands	r3, r2
 80039ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	0159      	lsls	r1, r3, #5
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	440b      	add	r3, r1
 80039e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e6:	4619      	mov	r1, r3
 80039e8:	4b35      	ldr	r3, [pc, #212]	; (8003ac0 <USB_DeactivateEndpoint+0x1b0>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]
 80039ee:	e060      	b.n	8003ab2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a06:	d11f      	bne.n	8003a48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	0151      	lsls	r1, r2, #5
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	440a      	add	r2, r1
 8003a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	0151      	lsls	r1, r2, #5
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	440a      	add	r2, r1
 8003a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	2101      	movs	r1, #1
 8003a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5e:	041b      	lsls	r3, r3, #16
 8003a60:	43db      	mvns	r3, r3
 8003a62:	68f9      	ldr	r1, [r7, #12]
 8003a64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a68:	4013      	ands	r3, r2
 8003a6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a72:	69da      	ldr	r2, [r3, #28]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a82:	041b      	lsls	r3, r3, #16
 8003a84:	43db      	mvns	r3, r3
 8003a86:	68f9      	ldr	r1, [r7, #12]
 8003a88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	0159      	lsls	r1, r3, #5
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	440b      	add	r3, r1
 8003aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <USB_DeactivateEndpoint+0x1b4>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	ec337800 	.word	0xec337800
 8003ac4:	eff37800 	.word	0xeff37800

08003ac8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	785b      	ldrb	r3, [r3, #1]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	f040 810a 	bne.w	8003cfa <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d132      	bne.n	8003b54 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	0151      	lsls	r1, r2, #5
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	440a      	add	r2, r1
 8003b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	0151      	lsls	r1, r2, #5
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	440a      	add	r2, r1
 8003b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	0151      	lsls	r1, r2, #5
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	440a      	add	r2, r1
 8003b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b4c:	0cdb      	lsrs	r3, r3, #19
 8003b4e:	04db      	lsls	r3, r3, #19
 8003b50:	6113      	str	r3, [r2, #16]
 8003b52:	e074      	b.n	8003c3e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	0151      	lsls	r1, r2, #5
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	440a      	add	r2, r1
 8003b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b6e:	0cdb      	lsrs	r3, r3, #19
 8003b70:	04db      	lsls	r3, r3, #19
 8003b72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	0151      	lsls	r1, r2, #5
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	440a      	add	r2, r1
 8003b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6959      	ldr	r1, [r3, #20]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	440b      	add	r3, r1
 8003bb0:	1e59      	subs	r1, r3, #1
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bba:	04d9      	lsls	r1, r3, #19
 8003bbc:	4baf      	ldr	r3, [pc, #700]	; (8003e7c <USB_EPStartXfer+0x3b4>)
 8003bbe:	400b      	ands	r3, r1
 8003bc0:	6939      	ldr	r1, [r7, #16]
 8003bc2:	0148      	lsls	r0, r1, #5
 8003bc4:	6979      	ldr	r1, [r7, #20]
 8003bc6:	4401      	add	r1, r0
 8003bc8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be6:	6939      	ldr	r1, [r7, #16]
 8003be8:	0148      	lsls	r0, r1, #5
 8003bea:	6979      	ldr	r1, [r7, #20]
 8003bec:	4401      	add	r1, r0
 8003bee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	78db      	ldrb	r3, [r3, #3]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d11f      	bne.n	8003c3e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	0151      	lsls	r1, r2, #5
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	440a      	add	r2, r1
 8003c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003c1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	0151      	lsls	r1, r2, #5
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	440a      	add	r2, r1
 8003c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c3c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	0151      	lsls	r1, r2, #5
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	440a      	add	r2, r1
 8003c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c5c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	78db      	ldrb	r3, [r3, #3]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d015      	beq.n	8003c92 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8100 	beq.w	8003e70 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	2101      	movs	r1, #1
 8003c82:	fa01 f303 	lsl.w	r3, r1, r3
 8003c86:	6979      	ldr	r1, [r7, #20]
 8003c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	634b      	str	r3, [r1, #52]	; 0x34
 8003c90:	e0ee      	b.n	8003e70 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d110      	bne.n	8003cc4 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	0151      	lsls	r1, r2, #5
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	440a      	add	r2, r1
 8003cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e00f      	b.n	8003ce4 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	0151      	lsls	r1, r2, #5
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	440a      	add	r2, r1
 8003cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	68d9      	ldr	r1, [r3, #12]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f9e2 	bl	80040bc <USB_WritePacket>
 8003cf8:	e0ba      	b.n	8003e70 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	0151      	lsls	r1, r2, #5
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	440a      	add	r2, r1
 8003d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d14:	0cdb      	lsrs	r3, r3, #19
 8003d16:	04db      	lsls	r3, r3, #19
 8003d18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	0151      	lsls	r1, r2, #5
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	440a      	add	r2, r1
 8003d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d3c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d123      	bne.n	8003d8e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5c:	6939      	ldr	r1, [r7, #16]
 8003d5e:	0148      	lsls	r0, r1, #5
 8003d60:	6979      	ldr	r1, [r7, #20]
 8003d62:	4401      	add	r1, r0
 8003d64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	0151      	lsls	r1, r2, #5
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	440a      	add	r2, r1
 8003d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d8a:	6113      	str	r3, [r2, #16]
 8003d8c:	e033      	b.n	8003df6 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	4413      	add	r3, r2
 8003d98:	1e5a      	subs	r2, r3, #1
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da2:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	89fb      	ldrh	r3, [r7, #14]
 8003db4:	04d9      	lsls	r1, r3, #19
 8003db6:	4b31      	ldr	r3, [pc, #196]	; (8003e7c <USB_EPStartXfer+0x3b4>)
 8003db8:	400b      	ands	r3, r1
 8003dba:	6939      	ldr	r1, [r7, #16]
 8003dbc:	0148      	lsls	r0, r1, #5
 8003dbe:	6979      	ldr	r1, [r7, #20]
 8003dc0:	4401      	add	r1, r0
 8003dc2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	89f9      	ldrh	r1, [r7, #14]
 8003dde:	fb01 f303 	mul.w	r3, r1, r3
 8003de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de6:	6939      	ldr	r1, [r7, #16]
 8003de8:	0148      	lsls	r0, r1, #5
 8003dea:	6979      	ldr	r1, [r7, #20]
 8003dec:	4401      	add	r1, r0
 8003dee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003df2:	4313      	orrs	r3, r2
 8003df4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	78db      	ldrb	r3, [r3, #3]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d128      	bne.n	8003e50 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d110      	bne.n	8003e30 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	0151      	lsls	r1, r2, #5
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	440a      	add	r2, r1
 8003e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	e00f      	b.n	8003e50 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	0151      	lsls	r1, r2, #5
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	440a      	add	r2, r1
 8003e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	0151      	lsls	r1, r2, #5
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	440a      	add	r2, r1
 8003e66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	1ff80000 	.word	0x1ff80000

08003e80 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	785b      	ldrb	r3, [r3, #1]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	f040 80ab 	bne.w	8003ff4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d132      	bne.n	8003f0c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	0151      	lsls	r1, r2, #5
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	440a      	add	r2, r1
 8003ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ec4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ec8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ee8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	0151      	lsls	r1, r2, #5
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	440a      	add	r2, r1
 8003f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f04:	0cdb      	lsrs	r3, r3, #19
 8003f06:	04db      	lsls	r3, r3, #19
 8003f08:	6113      	str	r3, [r2, #16]
 8003f0a:	e04e      	b.n	8003faa <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	0151      	lsls	r1, r2, #5
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	440a      	add	r2, r1
 8003f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f26:	0cdb      	lsrs	r3, r3, #19
 8003f28:	04db      	lsls	r3, r3, #19
 8003f2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	0151      	lsls	r1, r2, #5
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	440a      	add	r2, r1
 8003f42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f4e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d903      	bls.n	8003f64 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	0151      	lsls	r1, r2, #5
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	440a      	add	r2, r1
 8003f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	0148      	lsls	r0, r1, #5
 8003f9e:	68f9      	ldr	r1, [r7, #12]
 8003fa0:	4401      	add	r1, r0
 8003fa2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	0151      	lsls	r1, r2, #5
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	440a      	add	r2, r1
 8003fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fc8:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d06d      	beq.n	80040ae <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe8:	68f9      	ldr	r1, [r7, #12]
 8003fea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	634b      	str	r3, [r1, #52]	; 0x34
 8003ff2:	e05c      	b.n	80040ae <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	0151      	lsls	r1, r2, #5
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	440a      	add	r2, r1
 800400a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800400e:	0cdb      	lsrs	r3, r3, #19
 8004010:	04db      	lsls	r3, r3, #19
 8004012:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	0151      	lsls	r1, r2, #5
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	440a      	add	r2, r1
 800402a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800402e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004032:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004036:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004062:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004066:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	0148      	lsls	r0, r1, #5
 8004082:	68f9      	ldr	r1, [r7, #12]
 8004084:	4401      	add	r1, r0
 8004086:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800408a:	4313      	orrs	r3, r2
 800408c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	0151      	lsls	r1, r2, #5
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	440a      	add	r2, r1
 80040a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80040bc:	b480      	push	{r7}
 80040be:	b089      	sub	sp, #36	; 0x24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	4611      	mov	r1, r2
 80040c8:	461a      	mov	r2, r3
 80040ca:	460b      	mov	r3, r1
 80040cc:	71fb      	strb	r3, [r7, #7]
 80040ce:	4613      	mov	r3, r2
 80040d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80040da:	88bb      	ldrh	r3, [r7, #4]
 80040dc:	3303      	adds	r3, #3
 80040de:	089b      	lsrs	r3, r3, #2
 80040e0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80040e2:	2300      	movs	r3, #0
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	e00f      	b.n	8004108 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	031a      	lsls	r2, r3, #12
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f4:	461a      	mov	r2, r3
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6013      	str	r3, [r2, #0]
    pSrc++;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	3304      	adds	r3, #4
 8004100:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	3301      	adds	r3, #1
 8004106:	61bb      	str	r3, [r7, #24]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	429a      	cmp	r2, r3
 800410e:	d3eb      	bcc.n	80040e8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3724      	adds	r7, #36	; 0x24
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800411e:	b480      	push	{r7}
 8004120:	b089      	sub	sp, #36	; 0x24
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	4613      	mov	r3, r2
 800412a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	3303      	adds	r3, #3
 8004138:	089b      	lsrs	r3, r3, #2
 800413a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800413c:	2300      	movs	r3, #0
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	e00b      	b.n	800415a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	601a      	str	r2, [r3, #0]
    pDest++;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	3304      	adds	r3, #4
 8004152:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	3301      	adds	r3, #1
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	429a      	cmp	r2, r3
 8004160:	d3ef      	bcc.n	8004142 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004162:	69fb      	ldr	r3, [r7, #28]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3724      	adds	r7, #36	; 0x24
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	785b      	ldrb	r3, [r3, #1]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d12c      	bne.n	80041e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	db12      	blt.n	80041c4 <USB_EPSetStall+0x54>
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00f      	beq.n	80041c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	0151      	lsls	r1, r2, #5
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	440a      	add	r2, r1
 80041ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	0151      	lsls	r1, r2, #5
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	440a      	add	r2, r1
 80041da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	e02b      	b.n	800423e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	db12      	blt.n	800421e <USB_EPSetStall+0xae>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00f      	beq.n	800421e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	0151      	lsls	r1, r2, #5
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	440a      	add	r2, r1
 8004214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004218:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800421c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	0151      	lsls	r1, r2, #5
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	440a      	add	r2, r1
 8004234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004238:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800423c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	785b      	ldrb	r3, [r3, #1]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d128      	bne.n	80042ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	0151      	lsls	r1, r2, #5
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	440a      	add	r2, r1
 800427e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004282:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004286:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	78db      	ldrb	r3, [r3, #3]
 800428c:	2b03      	cmp	r3, #3
 800428e:	d003      	beq.n	8004298 <USB_EPClearStall+0x4c>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	78db      	ldrb	r3, [r3, #3]
 8004294:	2b02      	cmp	r3, #2
 8004296:	d138      	bne.n	800430a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	e027      	b.n	800430a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	0151      	lsls	r1, r2, #5
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	440a      	add	r2, r1
 80042d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	78db      	ldrb	r3, [r3, #3]
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d003      	beq.n	80042ea <USB_EPClearStall+0x9e>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	78db      	ldrb	r3, [r3, #3]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d10f      	bne.n	800430a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	0151      	lsls	r1, r2, #5
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	440a      	add	r2, r1
 8004300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004308:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004336:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800433a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800434c:	68f9      	ldr	r1, [r7, #12]
 800434e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800437e:	f023 0303 	bic.w	r3, r3, #3
 8004382:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004392:	f023 0302 	bic.w	r3, r3, #2
 8004396:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b085      	sub	sp, #20
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043c0:	f023 0303 	bic.w	r3, r3, #3
 80043c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043d4:	f043 0302 	orr.w	r3, r3, #2
 80043d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4013      	ands	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004400:	68fb      	ldr	r3, [r7, #12]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800440e:	b480      	push	{r7}
 8004410:	b085      	sub	sp, #20
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	4013      	ands	r3, r2
 8004430:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	0c1b      	lsrs	r3, r3, #16
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004442:	b480      	push	{r7}
 8004444:	b085      	sub	sp, #20
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	4013      	ands	r3, r2
 8004464:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	b29b      	uxth	r3, r3
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	460b      	mov	r3, r1
 8004480:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	4013      	ands	r3, r2
 80044a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80044a4:	68bb      	ldr	r3, [r7, #8]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b087      	sub	sp, #28
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	460b      	mov	r3, r1
 80044bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	fa22 f303 	lsr.w	r3, r2, r3
 80044e2:	01db      	lsls	r3, r3, #7
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4013      	ands	r3, r2
 80044fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004500:	68bb      	ldr	r3, [r7, #8]
}
 8004502:	4618      	mov	r0, r3
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f003 0301 	and.w	r3, r3, #1
}
 800451e:	4618      	mov	r0, r3
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800452a:	b480      	push	{r7}
 800452c:	b085      	sub	sp, #20
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004544:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004548:	f023 0307 	bic.w	r3, r3, #7
 800454c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800455c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004560:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	333c      	adds	r3, #60	; 0x3c
 8004582:	3304      	adds	r3, #4
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4a1c      	ldr	r2, [pc, #112]	; (80045fc <USB_EP0_OutStart+0x8c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d90a      	bls.n	80045a6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800459c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045a0:	d101      	bne.n	80045a6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e024      	b.n	80045f0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ac:	461a      	mov	r2, r3
 80045ae:	2300      	movs	r3, #0
 80045b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045d4:	f043 0318 	orr.w	r3, r3, #24
 80045d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80045ec:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	4f54300a 	.word	0x4f54300a

08004600 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3301      	adds	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4a13      	ldr	r2, [pc, #76]	; (8004664 <USB_CoreReset+0x64>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e01b      	b.n	8004656 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	daf2      	bge.n	800460c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f043 0201 	orr.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3301      	adds	r3, #1
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4a09      	ldr	r2, [pc, #36]	; (8004664 <USB_CoreReset+0x64>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d901      	bls.n	8004648 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e006      	b.n	8004656 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d0f0      	beq.n	8004636 <USB_CoreReset+0x36>

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	00030d40 	.word	0x00030d40

08004668 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004674:	2010      	movs	r0, #16
 8004676:	f002 f9df 	bl	8006a38 <USBD_static_malloc>
 800467a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d105      	bne.n	800468e <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800468a:	2302      	movs	r3, #2
 800468c:	e01b      	b.n	80046c6 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	7c1b      	ldrb	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d103      	bne.n	80046a6 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2207      	movs	r2, #7
 80046a2:	875a      	strh	r2, [r3, #58]	; 0x3a
 80046a4:	e002      	b.n	80046ac <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	220a      	movs	r2, #10
 80046aa:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80046ac:	2304      	movs	r3, #4
 80046ae:	2203      	movs	r2, #3
 80046b0:	2181      	movs	r1, #129	; 0x81
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f001 ffc0 	bl	8006638 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	460b      	mov	r3, r1
 80046d8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80046da:	2181      	movs	r1, #129	; 0x81
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f001 ffe9 	bl	80066b4 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d009      	beq.n	800470c <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046fe:	4618      	mov	r0, r3
 8004700:	f002 f9a8 	bl	8006a54 <USBD_static_free>
    pdev->pClassData = NULL;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004728:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004738:	2303      	movs	r3, #3
 800473a:	e0e8      	b.n	800490e <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004744:	2b00      	cmp	r3, #0
 8004746:	d046      	beq.n	80047d6 <USBD_HID_Setup+0xbe>
 8004748:	2b20      	cmp	r3, #32
 800474a:	f040 80d8 	bne.w	80048fe <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	785b      	ldrb	r3, [r3, #1]
 8004752:	3b02      	subs	r3, #2
 8004754:	2b09      	cmp	r3, #9
 8004756:	d836      	bhi.n	80047c6 <USBD_HID_Setup+0xae>
 8004758:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <USBD_HID_Setup+0x48>)
 800475a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475e:	bf00      	nop
 8004760:	080047b7 	.word	0x080047b7
 8004764:	08004797 	.word	0x08004797
 8004768:	080047c7 	.word	0x080047c7
 800476c:	080047c7 	.word	0x080047c7
 8004770:	080047c7 	.word	0x080047c7
 8004774:	080047c7 	.word	0x080047c7
 8004778:	080047c7 	.word	0x080047c7
 800477c:	080047c7 	.word	0x080047c7
 8004780:	080047a5 	.word	0x080047a5
 8004784:	08004789 	.word	0x08004789
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	885b      	ldrh	r3, [r3, #2]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	461a      	mov	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	601a      	str	r2, [r3, #0]
          break;
 8004794:	e01e      	b.n	80047d4 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	4619      	mov	r1, r3
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f001 fa4c 	bl	8005c3a <USBD_CtlSendData>
          break;
 80047a2:	e017      	b.n	80047d4 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	885b      	ldrh	r3, [r3, #2]
 80047a8:	0a1b      	lsrs	r3, r3, #8
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	461a      	mov	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	605a      	str	r2, [r3, #4]
          break;
 80047b4:	e00e      	b.n	80047d4 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3304      	adds	r3, #4
 80047ba:	2201      	movs	r2, #1
 80047bc:	4619      	mov	r1, r3
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f001 fa3b 	bl	8005c3a <USBD_CtlSendData>
          break;
 80047c4:	e006      	b.n	80047d4 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80047c6:	6839      	ldr	r1, [r7, #0]
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f001 f9c5 	bl	8005b58 <USBD_CtlError>
          ret = USBD_FAIL;
 80047ce:	2303      	movs	r3, #3
 80047d0:	75fb      	strb	r3, [r7, #23]
          break;
 80047d2:	bf00      	nop
      }
      break;
 80047d4:	e09a      	b.n	800490c <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	785b      	ldrb	r3, [r3, #1]
 80047da:	2b0b      	cmp	r3, #11
 80047dc:	f200 8086 	bhi.w	80048ec <USBD_HID_Setup+0x1d4>
 80047e0:	a201      	add	r2, pc, #4	; (adr r2, 80047e8 <USBD_HID_Setup+0xd0>)
 80047e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e6:	bf00      	nop
 80047e8:	08004819 	.word	0x08004819
 80047ec:	080048fb 	.word	0x080048fb
 80047f0:	080048ed 	.word	0x080048ed
 80047f4:	080048ed 	.word	0x080048ed
 80047f8:	080048ed 	.word	0x080048ed
 80047fc:	080048ed 	.word	0x080048ed
 8004800:	08004843 	.word	0x08004843
 8004804:	080048ed 	.word	0x080048ed
 8004808:	080048ed 	.word	0x080048ed
 800480c:	080048ed 	.word	0x080048ed
 8004810:	0800489b 	.word	0x0800489b
 8004814:	080048c5 	.word	0x080048c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b03      	cmp	r3, #3
 8004822:	d107      	bne.n	8004834 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004824:	f107 030a 	add.w	r3, r7, #10
 8004828:	2202      	movs	r2, #2
 800482a:	4619      	mov	r1, r3
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f001 fa04 	bl	8005c3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004832:	e063      	b.n	80048fc <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004834:	6839      	ldr	r1, [r7, #0]
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f001 f98e 	bl	8005b58 <USBD_CtlError>
            ret = USBD_FAIL;
 800483c:	2303      	movs	r3, #3
 800483e:	75fb      	strb	r3, [r7, #23]
          break;
 8004840:	e05c      	b.n	80048fc <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	885b      	ldrh	r3, [r3, #2]
 8004846:	0a1b      	lsrs	r3, r3, #8
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b22      	cmp	r3, #34	; 0x22
 800484c:	d108      	bne.n	8004860 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	88db      	ldrh	r3, [r3, #6]
 8004852:	2b4a      	cmp	r3, #74	; 0x4a
 8004854:	bf28      	it	cs
 8004856:	234a      	movcs	r3, #74	; 0x4a
 8004858:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800485a:	4b2f      	ldr	r3, [pc, #188]	; (8004918 <USBD_HID_Setup+0x200>)
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	e015      	b.n	800488c <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	885b      	ldrh	r3, [r3, #2]
 8004864:	0a1b      	lsrs	r3, r3, #8
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b21      	cmp	r3, #33	; 0x21
 800486a:	d108      	bne.n	800487e <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800486c:	4b2b      	ldr	r3, [pc, #172]	; (800491c <USBD_HID_Setup+0x204>)
 800486e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	88db      	ldrh	r3, [r3, #6]
 8004874:	2b09      	cmp	r3, #9
 8004876:	bf28      	it	cs
 8004878:	2309      	movcs	r3, #9
 800487a:	82bb      	strh	r3, [r7, #20]
 800487c:	e006      	b.n	800488c <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800487e:	6839      	ldr	r1, [r7, #0]
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f001 f969 	bl	8005b58 <USBD_CtlError>
            ret = USBD_FAIL;
 8004886:	2303      	movs	r3, #3
 8004888:	75fb      	strb	r3, [r7, #23]
            break;
 800488a:	e037      	b.n	80048fc <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800488c:	8abb      	ldrh	r3, [r7, #20]
 800488e:	461a      	mov	r2, r3
 8004890:	6939      	ldr	r1, [r7, #16]
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f001 f9d1 	bl	8005c3a <USBD_CtlSendData>
          break;
 8004898:	e030      	b.n	80048fc <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d107      	bne.n	80048b6 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3308      	adds	r3, #8
 80048aa:	2201      	movs	r2, #1
 80048ac:	4619      	mov	r1, r3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f001 f9c3 	bl	8005c3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80048b4:	e022      	b.n	80048fc <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80048b6:	6839      	ldr	r1, [r7, #0]
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f001 f94d 	bl	8005b58 <USBD_CtlError>
            ret = USBD_FAIL;
 80048be:	2303      	movs	r3, #3
 80048c0:	75fb      	strb	r3, [r7, #23]
          break;
 80048c2:	e01b      	b.n	80048fc <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b03      	cmp	r3, #3
 80048ce:	d106      	bne.n	80048de <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	885b      	ldrh	r3, [r3, #2]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	461a      	mov	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80048dc:	e00e      	b.n	80048fc <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80048de:	6839      	ldr	r1, [r7, #0]
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f001 f939 	bl	8005b58 <USBD_CtlError>
            ret = USBD_FAIL;
 80048e6:	2303      	movs	r3, #3
 80048e8:	75fb      	strb	r3, [r7, #23]
          break;
 80048ea:	e007      	b.n	80048fc <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80048ec:	6839      	ldr	r1, [r7, #0]
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f001 f932 	bl	8005b58 <USBD_CtlError>
          ret = USBD_FAIL;
 80048f4:	2303      	movs	r3, #3
 80048f6:	75fb      	strb	r3, [r7, #23]
          break;
 80048f8:	e000      	b.n	80048fc <USBD_HID_Setup+0x1e4>
          break;
 80048fa:	bf00      	nop
      }
      break;
 80048fc:	e006      	b.n	800490c <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80048fe:	6839      	ldr	r1, [r7, #0]
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f001 f929 	bl	8005b58 <USBD_CtlError>
      ret = USBD_FAIL;
 8004906:	2303      	movs	r3, #3
 8004908:	75fb      	strb	r3, [r7, #23]
      break;
 800490a:	bf00      	nop
  }

  return (uint8_t)ret;
 800490c:	7dfb      	ldrb	r3, [r7, #23]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	200000c4 	.word	0x200000c4
 800491c:	200000ac 	.word	0x200000ac

08004920 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	4613      	mov	r3, r2
 800492c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004934:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 800493c:	2303      	movs	r3, #3
 800493e:	e013      	b.n	8004968 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b03      	cmp	r3, #3
 800494a:	d10c      	bne.n	8004966 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	7b1b      	ldrb	r3, [r3, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d108      	bne.n	8004966 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2201      	movs	r2, #1
 8004958:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	2181      	movs	r1, #129	; 0x81
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f001 ffab 	bl	80068bc <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2222      	movs	r2, #34	; 0x22
 800497c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800497e:	4b03      	ldr	r3, [pc, #12]	; (800498c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004980:	4618      	mov	r0, r3
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	20000040 	.word	0x20000040

08004990 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2222      	movs	r2, #34	; 0x22
 800499c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800499e:	4b03      	ldr	r3, [pc, #12]	; (80049ac <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	20000064 	.word	0x20000064

080049b0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2222      	movs	r2, #34	; 0x22
 80049bc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80049be:	4b03      	ldr	r3, [pc, #12]	; (80049cc <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	20000088 	.word	0x20000088

080049d0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049e2:	2200      	movs	r2, #0
 80049e4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	220a      	movs	r2, #10
 8004a00:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004a02:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	200000b8 	.word	0x200000b8

08004a14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e01f      	b.n	8004a6c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	79fa      	ldrb	r2, [r7, #7]
 8004a5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f001 fd6b 	bl	800653c <USBD_LL_Init>
 8004a66:	4603      	mov	r3, r0
 8004a68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e016      	b.n	8004aba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00b      	beq.n	8004ab8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	f107 020e 	add.w	r2, r7, #14
 8004aac:	4610      	mov	r0, r2
 8004aae:	4798      	blx	r3
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f001 fd82 	bl	80065d4 <USBD_LL_Start>
 8004ad0:	4603      	mov	r3, r0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004afc:	2303      	movs	r3, #3
 8004afe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	78fa      	ldrb	r2, [r7, #3]
 8004b14:	4611      	mov	r1, r2
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	4798      	blx	r3
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d007      	beq.n	8004b4e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	78fa      	ldrb	r2, [r7, #3]
 8004b48:	4611      	mov	r1, r2
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	4798      	blx	r3
  }

  return USBD_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b68:	6839      	ldr	r1, [r7, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 ffba 	bl	8005ae4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004b7e:	461a      	mov	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004b8c:	f003 031f 	and.w	r3, r3, #31
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d01a      	beq.n	8004bca <USBD_LL_SetupStage+0x72>
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d822      	bhi.n	8004bde <USBD_LL_SetupStage+0x86>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <USBD_LL_SetupStage+0x4a>
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d00a      	beq.n	8004bb6 <USBD_LL_SetupStage+0x5e>
 8004ba0:	e01d      	b.n	8004bde <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004ba8:	4619      	mov	r1, r3
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fa62 	bl	8005074 <USBD_StdDevReq>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb4:	e020      	b.n	8004bf8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fac6 	bl	8005150 <USBD_StdItfReq>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc8:	e016      	b.n	8004bf8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fb05 	bl	80051e2 <USBD_StdEPReq>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	73fb      	strb	r3, [r7, #15]
      break;
 8004bdc:	e00c      	b.n	8004bf8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004be4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	4619      	mov	r1, r3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f001 fd97 	bl	8006720 <USBD_LL_StallEP>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8004bf6:	bf00      	nop
  }

  return ret;
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b086      	sub	sp, #24
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	607a      	str	r2, [r7, #4]
 8004c0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004c10:	7afb      	ldrb	r3, [r7, #11]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d138      	bne.n	8004c88 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004c1c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d14a      	bne.n	8004cbe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d913      	bls.n	8004c5c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	1ad2      	subs	r2, r2, r3
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	bf28      	it	cs
 8004c4e:	4613      	movcs	r3, r2
 8004c50:	461a      	mov	r2, r3
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f001 f81c 	bl	8005c92 <USBD_CtlContinueRx>
 8004c5a:	e030      	b.n	8004cbe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d10b      	bne.n	8004c80 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f001 f817 	bl	8005cb4 <USBD_CtlSendStatus>
 8004c86:	e01a      	b.n	8004cbe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d114      	bne.n	8004cbe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00e      	beq.n	8004cbe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	7afa      	ldrb	r2, [r7, #11]
 8004caa:	4611      	mov	r1, r2
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	4798      	blx	r3
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004cb4:	7dfb      	ldrb	r3, [r7, #23]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004cba:	7dfb      	ldrb	r3, [r7, #23]
 8004cbc:	e000      	b.n	8004cc0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004cd6:	7afb      	ldrb	r3, [r7, #11]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d16b      	bne.n	8004db4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	3314      	adds	r3, #20
 8004ce0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d156      	bne.n	8004d9a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d914      	bls.n	8004d22 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	1ad2      	subs	r2, r2, r3
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 ffae 	bl	8005c70 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d14:	2300      	movs	r3, #0
 8004d16:	2200      	movs	r2, #0
 8004d18:	2100      	movs	r1, #0
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f001 fe06 	bl	800692c <USBD_LL_PrepareReceive>
 8004d20:	e03b      	b.n	8004d9a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d11c      	bne.n	8004d68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d316      	bcc.n	8004d68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d20f      	bcs.n	8004d68 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 ff8f 	bl	8005c70 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2100      	movs	r1, #0
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f001 fde3 	bl	800692c <USBD_LL_PrepareReceive>
 8004d66:	e018      	b.n	8004d9a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d10b      	bne.n	8004d8c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d8c:	2180      	movs	r1, #128	; 0x80
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f001 fcc6 	bl	8006720 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 ffa0 	bl	8005cda <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d122      	bne.n	8004dea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7ff fe98 	bl	8004ada <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004db2:	e01a      	b.n	8004dea <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d114      	bne.n	8004dea <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00e      	beq.n	8004dea <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	7afa      	ldrb	r2, [r7, #11]
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	4798      	blx	r3
 8004ddc:	4603      	mov	r3, r0
 8004dde:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
 8004de8:	e000      	b.n	8004dec <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e02f      	b.n	8004e88 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00f      	beq.n	8004e52 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d009      	beq.n	8004e52 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6852      	ldr	r2, [r2, #4]
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e52:	2340      	movs	r3, #64	; 0x40
 8004e54:	2200      	movs	r2, #0
 8004e56:	2100      	movs	r1, #0
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f001 fbed 	bl	8006638 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2240      	movs	r2, #64	; 0x40
 8004e6a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e6e:	2340      	movs	r3, #64	; 0x40
 8004e70:	2200      	movs	r2, #0
 8004e72:	2180      	movs	r1, #128	; 0x80
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f001 fbdf 	bl	8006638 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2240      	movs	r2, #64	; 0x40
 8004e84:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	78fa      	ldrb	r2, [r7, #3]
 8004ea0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2204      	movs	r2, #4
 8004eca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d106      	bne.n	8004efe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e012      	b.n	8004f48 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d10b      	bne.n	8004f46 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e014      	b.n	8004f94 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d10d      	bne.n	8004f92 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	78fa      	ldrb	r2, [r7, #3]
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e014      	b.n	8004fe0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d10d      	bne.n	8004fde <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	78fa      	ldrb	r2, [r7, #3]
 8004fd8:	4611      	mov	r1, r2
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b082      	sub	sp, #8
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d009      	beq.n	800502c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6852      	ldr	r2, [r2, #4]
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	4611      	mov	r1, r2
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	4798      	blx	r3
  }

  return USBD_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005036:	b480      	push	{r7}
 8005038:	b087      	sub	sp, #28
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	3301      	adds	r3, #1
 800504c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005054:	8a3b      	ldrh	r3, [r7, #16]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	b21a      	sxth	r2, r3
 800505a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800505e:	4313      	orrs	r3, r2
 8005060:	b21b      	sxth	r3, r3
 8005062:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005064:	89fb      	ldrh	r3, [r7, #14]
}
 8005066:	4618      	mov	r0, r3
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800508a:	2b40      	cmp	r3, #64	; 0x40
 800508c:	d005      	beq.n	800509a <USBD_StdDevReq+0x26>
 800508e:	2b40      	cmp	r3, #64	; 0x40
 8005090:	d853      	bhi.n	800513a <USBD_StdDevReq+0xc6>
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00b      	beq.n	80050ae <USBD_StdDevReq+0x3a>
 8005096:	2b20      	cmp	r3, #32
 8005098:	d14f      	bne.n	800513a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	6839      	ldr	r1, [r7, #0]
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	4798      	blx	r3
 80050a8:	4603      	mov	r3, r0
 80050aa:	73fb      	strb	r3, [r7, #15]
      break;
 80050ac:	e04a      	b.n	8005144 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	785b      	ldrb	r3, [r3, #1]
 80050b2:	2b09      	cmp	r3, #9
 80050b4:	d83b      	bhi.n	800512e <USBD_StdDevReq+0xba>
 80050b6:	a201      	add	r2, pc, #4	; (adr r2, 80050bc <USBD_StdDevReq+0x48>)
 80050b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050bc:	08005111 	.word	0x08005111
 80050c0:	08005125 	.word	0x08005125
 80050c4:	0800512f 	.word	0x0800512f
 80050c8:	0800511b 	.word	0x0800511b
 80050cc:	0800512f 	.word	0x0800512f
 80050d0:	080050ef 	.word	0x080050ef
 80050d4:	080050e5 	.word	0x080050e5
 80050d8:	0800512f 	.word	0x0800512f
 80050dc:	08005107 	.word	0x08005107
 80050e0:	080050f9 	.word	0x080050f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80050e4:	6839      	ldr	r1, [r7, #0]
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f9de 	bl	80054a8 <USBD_GetDescriptor>
          break;
 80050ec:	e024      	b.n	8005138 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80050ee:	6839      	ldr	r1, [r7, #0]
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 fb6d 	bl	80057d0 <USBD_SetAddress>
          break;
 80050f6:	e01f      	b.n	8005138 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80050f8:	6839      	ldr	r1, [r7, #0]
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fbac 	bl	8005858 <USBD_SetConfig>
 8005100:	4603      	mov	r3, r0
 8005102:	73fb      	strb	r3, [r7, #15]
          break;
 8005104:	e018      	b.n	8005138 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005106:	6839      	ldr	r1, [r7, #0]
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 fc4b 	bl	80059a4 <USBD_GetConfig>
          break;
 800510e:	e013      	b.n	8005138 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005110:	6839      	ldr	r1, [r7, #0]
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fc7c 	bl	8005a10 <USBD_GetStatus>
          break;
 8005118:	e00e      	b.n	8005138 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800511a:	6839      	ldr	r1, [r7, #0]
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fcab 	bl	8005a78 <USBD_SetFeature>
          break;
 8005122:	e009      	b.n	8005138 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005124:	6839      	ldr	r1, [r7, #0]
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fcba 	bl	8005aa0 <USBD_ClrFeature>
          break;
 800512c:	e004      	b.n	8005138 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800512e:	6839      	ldr	r1, [r7, #0]
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fd11 	bl	8005b58 <USBD_CtlError>
          break;
 8005136:	bf00      	nop
      }
      break;
 8005138:	e004      	b.n	8005144 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800513a:	6839      	ldr	r1, [r7, #0]
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fd0b 	bl	8005b58 <USBD_CtlError>
      break;
 8005142:	bf00      	nop
  }

  return ret;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop

08005150 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005166:	2b40      	cmp	r3, #64	; 0x40
 8005168:	d005      	beq.n	8005176 <USBD_StdItfReq+0x26>
 800516a:	2b40      	cmp	r3, #64	; 0x40
 800516c:	d82f      	bhi.n	80051ce <USBD_StdItfReq+0x7e>
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <USBD_StdItfReq+0x26>
 8005172:	2b20      	cmp	r3, #32
 8005174:	d12b      	bne.n	80051ce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800517c:	b2db      	uxtb	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	2b02      	cmp	r3, #2
 8005182:	d81d      	bhi.n	80051c0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	889b      	ldrh	r3, [r3, #4]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b01      	cmp	r3, #1
 800518c:	d813      	bhi.n	80051b6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	6839      	ldr	r1, [r7, #0]
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	4798      	blx	r3
 800519c:	4603      	mov	r3, r0
 800519e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	88db      	ldrh	r3, [r3, #6]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d110      	bne.n	80051ca <USBD_StdItfReq+0x7a>
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10d      	bne.n	80051ca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fd80 	bl	8005cb4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80051b4:	e009      	b.n	80051ca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80051b6:	6839      	ldr	r1, [r7, #0]
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fccd 	bl	8005b58 <USBD_CtlError>
          break;
 80051be:	e004      	b.n	80051ca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80051c0:	6839      	ldr	r1, [r7, #0]
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fcc8 	bl	8005b58 <USBD_CtlError>
          break;
 80051c8:	e000      	b.n	80051cc <USBD_StdItfReq+0x7c>
          break;
 80051ca:	bf00      	nop
      }
      break;
 80051cc:	e004      	b.n	80051d8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80051ce:	6839      	ldr	r1, [r7, #0]
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fcc1 	bl	8005b58 <USBD_CtlError>
      break;
 80051d6:	bf00      	nop
  }

  return ret;
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	889b      	ldrh	r3, [r3, #4]
 80051f4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80051fe:	2b40      	cmp	r3, #64	; 0x40
 8005200:	d007      	beq.n	8005212 <USBD_StdEPReq+0x30>
 8005202:	2b40      	cmp	r3, #64	; 0x40
 8005204:	f200 8145 	bhi.w	8005492 <USBD_StdEPReq+0x2b0>
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00c      	beq.n	8005226 <USBD_StdEPReq+0x44>
 800520c:	2b20      	cmp	r3, #32
 800520e:	f040 8140 	bne.w	8005492 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	6839      	ldr	r1, [r7, #0]
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	4798      	blx	r3
 8005220:	4603      	mov	r3, r0
 8005222:	73fb      	strb	r3, [r7, #15]
      break;
 8005224:	e13a      	b.n	800549c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	785b      	ldrb	r3, [r3, #1]
 800522a:	2b03      	cmp	r3, #3
 800522c:	d007      	beq.n	800523e <USBD_StdEPReq+0x5c>
 800522e:	2b03      	cmp	r3, #3
 8005230:	f300 8129 	bgt.w	8005486 <USBD_StdEPReq+0x2a4>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d07f      	beq.n	8005338 <USBD_StdEPReq+0x156>
 8005238:	2b01      	cmp	r3, #1
 800523a:	d03c      	beq.n	80052b6 <USBD_StdEPReq+0xd4>
 800523c:	e123      	b.n	8005486 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d002      	beq.n	8005250 <USBD_StdEPReq+0x6e>
 800524a:	2b03      	cmp	r3, #3
 800524c:	d016      	beq.n	800527c <USBD_StdEPReq+0x9a>
 800524e:	e02c      	b.n	80052aa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005250:	7bbb      	ldrb	r3, [r7, #14]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00d      	beq.n	8005272 <USBD_StdEPReq+0x90>
 8005256:	7bbb      	ldrb	r3, [r7, #14]
 8005258:	2b80      	cmp	r3, #128	; 0x80
 800525a:	d00a      	beq.n	8005272 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800525c:	7bbb      	ldrb	r3, [r7, #14]
 800525e:	4619      	mov	r1, r3
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f001 fa5d 	bl	8006720 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005266:	2180      	movs	r1, #128	; 0x80
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f001 fa59 	bl	8006720 <USBD_LL_StallEP>
 800526e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005270:	e020      	b.n	80052b4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005272:	6839      	ldr	r1, [r7, #0]
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fc6f 	bl	8005b58 <USBD_CtlError>
              break;
 800527a:	e01b      	b.n	80052b4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	885b      	ldrh	r3, [r3, #2]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10e      	bne.n	80052a2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005284:	7bbb      	ldrb	r3, [r7, #14]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00b      	beq.n	80052a2 <USBD_StdEPReq+0xc0>
 800528a:	7bbb      	ldrb	r3, [r7, #14]
 800528c:	2b80      	cmp	r3, #128	; 0x80
 800528e:	d008      	beq.n	80052a2 <USBD_StdEPReq+0xc0>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	88db      	ldrh	r3, [r3, #6]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d104      	bne.n	80052a2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005298:	7bbb      	ldrb	r3, [r7, #14]
 800529a:	4619      	mov	r1, r3
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f001 fa3f 	bl	8006720 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fd06 	bl	8005cb4 <USBD_CtlSendStatus>

              break;
 80052a8:	e004      	b.n	80052b4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80052aa:	6839      	ldr	r1, [r7, #0]
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fc53 	bl	8005b58 <USBD_CtlError>
              break;
 80052b2:	bf00      	nop
          }
          break;
 80052b4:	e0ec      	b.n	8005490 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d002      	beq.n	80052c8 <USBD_StdEPReq+0xe6>
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	d016      	beq.n	80052f4 <USBD_StdEPReq+0x112>
 80052c6:	e030      	b.n	800532a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052c8:	7bbb      	ldrb	r3, [r7, #14]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00d      	beq.n	80052ea <USBD_StdEPReq+0x108>
 80052ce:	7bbb      	ldrb	r3, [r7, #14]
 80052d0:	2b80      	cmp	r3, #128	; 0x80
 80052d2:	d00a      	beq.n	80052ea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80052d4:	7bbb      	ldrb	r3, [r7, #14]
 80052d6:	4619      	mov	r1, r3
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f001 fa21 	bl	8006720 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80052de:	2180      	movs	r1, #128	; 0x80
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f001 fa1d 	bl	8006720 <USBD_LL_StallEP>
 80052e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80052e8:	e025      	b.n	8005336 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80052ea:	6839      	ldr	r1, [r7, #0]
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fc33 	bl	8005b58 <USBD_CtlError>
              break;
 80052f2:	e020      	b.n	8005336 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	885b      	ldrh	r3, [r3, #2]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d11b      	bne.n	8005334 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80052fc:	7bbb      	ldrb	r3, [r7, #14]
 80052fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005306:	7bbb      	ldrb	r3, [r7, #14]
 8005308:	4619      	mov	r1, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f001 fa3e 	bl	800678c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fccf 	bl	8005cb4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	6839      	ldr	r1, [r7, #0]
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	4798      	blx	r3
 8005324:	4603      	mov	r3, r0
 8005326:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005328:	e004      	b.n	8005334 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800532a:	6839      	ldr	r1, [r7, #0]
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fc13 	bl	8005b58 <USBD_CtlError>
              break;
 8005332:	e000      	b.n	8005336 <USBD_StdEPReq+0x154>
              break;
 8005334:	bf00      	nop
          }
          break;
 8005336:	e0ab      	b.n	8005490 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d002      	beq.n	800534a <USBD_StdEPReq+0x168>
 8005344:	2b03      	cmp	r3, #3
 8005346:	d032      	beq.n	80053ae <USBD_StdEPReq+0x1cc>
 8005348:	e097      	b.n	800547a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800534a:	7bbb      	ldrb	r3, [r7, #14]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <USBD_StdEPReq+0x17e>
 8005350:	7bbb      	ldrb	r3, [r7, #14]
 8005352:	2b80      	cmp	r3, #128	; 0x80
 8005354:	d004      	beq.n	8005360 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005356:	6839      	ldr	r1, [r7, #0]
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fbfd 	bl	8005b58 <USBD_CtlError>
                break;
 800535e:	e091      	b.n	8005484 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005364:	2b00      	cmp	r3, #0
 8005366:	da0b      	bge.n	8005380 <USBD_StdEPReq+0x19e>
 8005368:	7bbb      	ldrb	r3, [r7, #14]
 800536a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	3310      	adds	r3, #16
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	4413      	add	r3, r2
 800537c:	3304      	adds	r3, #4
 800537e:	e00b      	b.n	8005398 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005380:	7bbb      	ldrb	r3, [r7, #14]
 8005382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	4413      	add	r3, r2
 8005396:	3304      	adds	r3, #4
 8005398:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2202      	movs	r2, #2
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fc47 	bl	8005c3a <USBD_CtlSendData>
              break;
 80053ac:	e06a      	b.n	8005484 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80053ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	da11      	bge.n	80053da <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80053b6:	7bbb      	ldrb	r3, [r7, #14]
 80053b8:	f003 020f 	and.w	r2, r3, #15
 80053bc:	6879      	ldr	r1, [r7, #4]
 80053be:	4613      	mov	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	440b      	add	r3, r1
 80053c8:	3324      	adds	r3, #36	; 0x24
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d117      	bne.n	8005400 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fbc0 	bl	8005b58 <USBD_CtlError>
                  break;
 80053d8:	e054      	b.n	8005484 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80053da:	7bbb      	ldrb	r3, [r7, #14]
 80053dc:	f003 020f 	and.w	r2, r3, #15
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d104      	bne.n	8005400 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fbad 	bl	8005b58 <USBD_CtlError>
                  break;
 80053fe:	e041      	b.n	8005484 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005404:	2b00      	cmp	r3, #0
 8005406:	da0b      	bge.n	8005420 <USBD_StdEPReq+0x23e>
 8005408:	7bbb      	ldrb	r3, [r7, #14]
 800540a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	3310      	adds	r3, #16
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	4413      	add	r3, r2
 800541c:	3304      	adds	r3, #4
 800541e:	e00b      	b.n	8005438 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005420:	7bbb      	ldrb	r3, [r7, #14]
 8005422:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	4413      	add	r3, r2
 8005436:	3304      	adds	r3, #4
 8005438:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800543a:	7bbb      	ldrb	r3, [r7, #14]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <USBD_StdEPReq+0x264>
 8005440:	7bbb      	ldrb	r3, [r7, #14]
 8005442:	2b80      	cmp	r3, #128	; 0x80
 8005444:	d103      	bne.n	800544e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	e00e      	b.n	800546c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800544e:	7bbb      	ldrb	r3, [r7, #14]
 8005450:	4619      	mov	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f001 f9d0 	bl	80067f8 <USBD_LL_IsStallEP>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2201      	movs	r2, #1
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	e002      	b.n	800546c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2202      	movs	r2, #2
 8005470:	4619      	mov	r1, r3
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fbe1 	bl	8005c3a <USBD_CtlSendData>
              break;
 8005478:	e004      	b.n	8005484 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800547a:	6839      	ldr	r1, [r7, #0]
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fb6b 	bl	8005b58 <USBD_CtlError>
              break;
 8005482:	bf00      	nop
          }
          break;
 8005484:	e004      	b.n	8005490 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fb65 	bl	8005b58 <USBD_CtlError>
          break;
 800548e:	bf00      	nop
      }
      break;
 8005490:	e004      	b.n	800549c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fb5f 	bl	8005b58 <USBD_CtlError>
      break;
 800549a:	bf00      	nop
  }

  return ret;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	885b      	ldrh	r3, [r3, #2]
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	2b0e      	cmp	r3, #14
 80054ca:	f200 8152 	bhi.w	8005772 <USBD_GetDescriptor+0x2ca>
 80054ce:	a201      	add	r2, pc, #4	; (adr r2, 80054d4 <USBD_GetDescriptor+0x2c>)
 80054d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d4:	08005545 	.word	0x08005545
 80054d8:	0800555d 	.word	0x0800555d
 80054dc:	0800559d 	.word	0x0800559d
 80054e0:	08005773 	.word	0x08005773
 80054e4:	08005773 	.word	0x08005773
 80054e8:	08005713 	.word	0x08005713
 80054ec:	0800573f 	.word	0x0800573f
 80054f0:	08005773 	.word	0x08005773
 80054f4:	08005773 	.word	0x08005773
 80054f8:	08005773 	.word	0x08005773
 80054fc:	08005773 	.word	0x08005773
 8005500:	08005773 	.word	0x08005773
 8005504:	08005773 	.word	0x08005773
 8005508:	08005773 	.word	0x08005773
 800550c:	08005511 	.word	0x08005511
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00b      	beq.n	8005534 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	7c12      	ldrb	r2, [r2, #16]
 8005528:	f107 0108 	add.w	r1, r7, #8
 800552c:	4610      	mov	r0, r2
 800552e:	4798      	blx	r3
 8005530:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005532:	e126      	b.n	8005782 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005534:	6839      	ldr	r1, [r7, #0]
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fb0e 	bl	8005b58 <USBD_CtlError>
        err++;
 800553c:	7afb      	ldrb	r3, [r7, #11]
 800553e:	3301      	adds	r3, #1
 8005540:	72fb      	strb	r3, [r7, #11]
      break;
 8005542:	e11e      	b.n	8005782 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	7c12      	ldrb	r2, [r2, #16]
 8005550:	f107 0108 	add.w	r1, r7, #8
 8005554:	4610      	mov	r0, r2
 8005556:	4798      	blx	r3
 8005558:	60f8      	str	r0, [r7, #12]
      break;
 800555a:	e112      	b.n	8005782 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	7c1b      	ldrb	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10d      	bne.n	8005580 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	f107 0208 	add.w	r2, r7, #8
 8005570:	4610      	mov	r0, r2
 8005572:	4798      	blx	r3
 8005574:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3301      	adds	r3, #1
 800557a:	2202      	movs	r2, #2
 800557c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800557e:	e100      	b.n	8005782 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	f107 0208 	add.w	r2, r7, #8
 800558c:	4610      	mov	r0, r2
 800558e:	4798      	blx	r3
 8005590:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3301      	adds	r3, #1
 8005596:	2202      	movs	r2, #2
 8005598:	701a      	strb	r2, [r3, #0]
      break;
 800559a:	e0f2      	b.n	8005782 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	885b      	ldrh	r3, [r3, #2]
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b05      	cmp	r3, #5
 80055a4:	f200 80ac 	bhi.w	8005700 <USBD_GetDescriptor+0x258>
 80055a8:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <USBD_GetDescriptor+0x108>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	080055c9 	.word	0x080055c9
 80055b4:	080055fd 	.word	0x080055fd
 80055b8:	08005631 	.word	0x08005631
 80055bc:	08005665 	.word	0x08005665
 80055c0:	08005699 	.word	0x08005699
 80055c4:	080056cd 	.word	0x080056cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00b      	beq.n	80055ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	7c12      	ldrb	r2, [r2, #16]
 80055e0:	f107 0108 	add.w	r1, r7, #8
 80055e4:	4610      	mov	r0, r2
 80055e6:	4798      	blx	r3
 80055e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055ea:	e091      	b.n	8005710 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fab2 	bl	8005b58 <USBD_CtlError>
            err++;
 80055f4:	7afb      	ldrb	r3, [r7, #11]
 80055f6:	3301      	adds	r3, #1
 80055f8:	72fb      	strb	r3, [r7, #11]
          break;
 80055fa:	e089      	b.n	8005710 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00b      	beq.n	8005620 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	7c12      	ldrb	r2, [r2, #16]
 8005614:	f107 0108 	add.w	r1, r7, #8
 8005618:	4610      	mov	r0, r2
 800561a:	4798      	blx	r3
 800561c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800561e:	e077      	b.n	8005710 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa98 	bl	8005b58 <USBD_CtlError>
            err++;
 8005628:	7afb      	ldrb	r3, [r7, #11]
 800562a:	3301      	adds	r3, #1
 800562c:	72fb      	strb	r3, [r7, #11]
          break;
 800562e:	e06f      	b.n	8005710 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00b      	beq.n	8005654 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	7c12      	ldrb	r2, [r2, #16]
 8005648:	f107 0108 	add.w	r1, r7, #8
 800564c:	4610      	mov	r0, r2
 800564e:	4798      	blx	r3
 8005650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005652:	e05d      	b.n	8005710 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa7e 	bl	8005b58 <USBD_CtlError>
            err++;
 800565c:	7afb      	ldrb	r3, [r7, #11]
 800565e:	3301      	adds	r3, #1
 8005660:	72fb      	strb	r3, [r7, #11]
          break;
 8005662:	e055      	b.n	8005710 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00b      	beq.n	8005688 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	7c12      	ldrb	r2, [r2, #16]
 800567c:	f107 0108 	add.w	r1, r7, #8
 8005680:	4610      	mov	r0, r2
 8005682:	4798      	blx	r3
 8005684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005686:	e043      	b.n	8005710 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fa64 	bl	8005b58 <USBD_CtlError>
            err++;
 8005690:	7afb      	ldrb	r3, [r7, #11]
 8005692:	3301      	adds	r3, #1
 8005694:	72fb      	strb	r3, [r7, #11]
          break;
 8005696:	e03b      	b.n	8005710 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00b      	beq.n	80056bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	7c12      	ldrb	r2, [r2, #16]
 80056b0:	f107 0108 	add.w	r1, r7, #8
 80056b4:	4610      	mov	r0, r2
 80056b6:	4798      	blx	r3
 80056b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056ba:	e029      	b.n	8005710 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fa4a 	bl	8005b58 <USBD_CtlError>
            err++;
 80056c4:	7afb      	ldrb	r3, [r7, #11]
 80056c6:	3301      	adds	r3, #1
 80056c8:	72fb      	strb	r3, [r7, #11]
          break;
 80056ca:	e021      	b.n	8005710 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00b      	beq.n	80056f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	7c12      	ldrb	r2, [r2, #16]
 80056e4:	f107 0108 	add.w	r1, r7, #8
 80056e8:	4610      	mov	r0, r2
 80056ea:	4798      	blx	r3
 80056ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056ee:	e00f      	b.n	8005710 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fa30 	bl	8005b58 <USBD_CtlError>
            err++;
 80056f8:	7afb      	ldrb	r3, [r7, #11]
 80056fa:	3301      	adds	r3, #1
 80056fc:	72fb      	strb	r3, [r7, #11]
          break;
 80056fe:	e007      	b.n	8005710 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005700:	6839      	ldr	r1, [r7, #0]
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fa28 	bl	8005b58 <USBD_CtlError>
          err++;
 8005708:	7afb      	ldrb	r3, [r7, #11]
 800570a:	3301      	adds	r3, #1
 800570c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800570e:	bf00      	nop
      }
      break;
 8005710:	e037      	b.n	8005782 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	7c1b      	ldrb	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d109      	bne.n	800572e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005722:	f107 0208 	add.w	r2, r7, #8
 8005726:	4610      	mov	r0, r2
 8005728:	4798      	blx	r3
 800572a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800572c:	e029      	b.n	8005782 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fa11 	bl	8005b58 <USBD_CtlError>
        err++;
 8005736:	7afb      	ldrb	r3, [r7, #11]
 8005738:	3301      	adds	r3, #1
 800573a:	72fb      	strb	r3, [r7, #11]
      break;
 800573c:	e021      	b.n	8005782 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	7c1b      	ldrb	r3, [r3, #16]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10d      	bne.n	8005762 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	f107 0208 	add.w	r2, r7, #8
 8005752:	4610      	mov	r0, r2
 8005754:	4798      	blx	r3
 8005756:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3301      	adds	r3, #1
 800575c:	2207      	movs	r2, #7
 800575e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005760:	e00f      	b.n	8005782 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f9f7 	bl	8005b58 <USBD_CtlError>
        err++;
 800576a:	7afb      	ldrb	r3, [r7, #11]
 800576c:	3301      	adds	r3, #1
 800576e:	72fb      	strb	r3, [r7, #11]
      break;
 8005770:	e007      	b.n	8005782 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8005772:	6839      	ldr	r1, [r7, #0]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f9ef 	bl	8005b58 <USBD_CtlError>
      err++;
 800577a:	7afb      	ldrb	r3, [r7, #11]
 800577c:	3301      	adds	r3, #1
 800577e:	72fb      	strb	r3, [r7, #11]
      break;
 8005780:	bf00      	nop
  }

  if (err != 0U)
 8005782:	7afb      	ldrb	r3, [r7, #11]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d11e      	bne.n	80057c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	88db      	ldrh	r3, [r3, #6]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d016      	beq.n	80057be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8005790:	893b      	ldrh	r3, [r7, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00e      	beq.n	80057b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	88da      	ldrh	r2, [r3, #6]
 800579a:	893b      	ldrh	r3, [r7, #8]
 800579c:	4293      	cmp	r3, r2
 800579e:	bf28      	it	cs
 80057a0:	4613      	movcs	r3, r2
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80057a6:	893b      	ldrh	r3, [r7, #8]
 80057a8:	461a      	mov	r2, r3
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fa44 	bl	8005c3a <USBD_CtlSendData>
 80057b2:	e009      	b.n	80057c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80057b4:	6839      	ldr	r1, [r7, #0]
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f9ce 	bl	8005b58 <USBD_CtlError>
 80057bc:	e004      	b.n	80057c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fa78 	bl	8005cb4 <USBD_CtlSendStatus>
 80057c4:	e000      	b.n	80057c8 <USBD_GetDescriptor+0x320>
    return;
 80057c6:	bf00      	nop
  }
}
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop

080057d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	889b      	ldrh	r3, [r3, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d131      	bne.n	8005846 <USBD_SetAddress+0x76>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	88db      	ldrh	r3, [r3, #6]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d12d      	bne.n	8005846 <USBD_SetAddress+0x76>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	885b      	ldrh	r3, [r3, #2]
 80057ee:	2b7f      	cmp	r3, #127	; 0x7f
 80057f0:	d829      	bhi.n	8005846 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	885b      	ldrh	r3, [r3, #2]
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b03      	cmp	r3, #3
 8005808:	d104      	bne.n	8005814 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f9a3 	bl	8005b58 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005812:	e01d      	b.n	8005850 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	7bfa      	ldrb	r2, [r7, #15]
 8005818:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800581c:	7bfb      	ldrb	r3, [r7, #15]
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f001 f815 	bl	8006850 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fa44 	bl	8005cb4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d004      	beq.n	800583c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2202      	movs	r2, #2
 8005836:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800583a:	e009      	b.n	8005850 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005844:	e004      	b.n	8005850 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005846:	6839      	ldr	r1, [r7, #0]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f985 	bl	8005b58 <USBD_CtlError>
  }
}
 800584e:	bf00      	nop
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	885b      	ldrh	r3, [r3, #2]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	4b4c      	ldr	r3, [pc, #304]	; (80059a0 <USBD_SetConfig+0x148>)
 800586e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005870:	4b4b      	ldr	r3, [pc, #300]	; (80059a0 <USBD_SetConfig+0x148>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d905      	bls.n	8005884 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f96c 	bl	8005b58 <USBD_CtlError>
    return USBD_FAIL;
 8005880:	2303      	movs	r3, #3
 8005882:	e088      	b.n	8005996 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d002      	beq.n	8005896 <USBD_SetConfig+0x3e>
 8005890:	2b03      	cmp	r3, #3
 8005892:	d025      	beq.n	80058e0 <USBD_SetConfig+0x88>
 8005894:	e071      	b.n	800597a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005896:	4b42      	ldr	r3, [pc, #264]	; (80059a0 <USBD_SetConfig+0x148>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d01c      	beq.n	80058d8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800589e:	4b40      	ldr	r3, [pc, #256]	; (80059a0 <USBD_SetConfig+0x148>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80058a8:	4b3d      	ldr	r3, [pc, #244]	; (80059a0 <USBD_SetConfig+0x148>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff f91e 	bl	8004af0 <USBD_SetClassConfig>
 80058b4:	4603      	mov	r3, r0
 80058b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d004      	beq.n	80058c8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80058be:	6839      	ldr	r1, [r7, #0]
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f949 	bl	8005b58 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80058c6:	e065      	b.n	8005994 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f9f3 	bl	8005cb4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2203      	movs	r2, #3
 80058d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80058d6:	e05d      	b.n	8005994 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f9eb 	bl	8005cb4 <USBD_CtlSendStatus>
      break;
 80058de:	e059      	b.n	8005994 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80058e0:	4b2f      	ldr	r3, [pc, #188]	; (80059a0 <USBD_SetConfig+0x148>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d112      	bne.n	800590e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80058f0:	4b2b      	ldr	r3, [pc, #172]	; (80059a0 <USBD_SetConfig+0x148>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	461a      	mov	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80058fa:	4b29      	ldr	r3, [pc, #164]	; (80059a0 <USBD_SetConfig+0x148>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7ff f911 	bl	8004b28 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f9d4 	bl	8005cb4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800590c:	e042      	b.n	8005994 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800590e:	4b24      	ldr	r3, [pc, #144]	; (80059a0 <USBD_SetConfig+0x148>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	429a      	cmp	r2, r3
 800591a:	d02a      	beq.n	8005972 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff f8ff 	bl	8004b28 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800592a:	4b1d      	ldr	r3, [pc, #116]	; (80059a0 <USBD_SetConfig+0x148>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005934:	4b1a      	ldr	r3, [pc, #104]	; (80059a0 <USBD_SetConfig+0x148>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff f8d8 	bl	8004af0 <USBD_SetClassConfig>
 8005940:	4603      	mov	r3, r0
 8005942:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00f      	beq.n	800596a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f903 	bl	8005b58 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff f8e4 	bl	8004b28 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005968:	e014      	b.n	8005994 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f9a2 	bl	8005cb4 <USBD_CtlSendStatus>
      break;
 8005970:	e010      	b.n	8005994 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f99e 	bl	8005cb4 <USBD_CtlSendStatus>
      break;
 8005978:	e00c      	b.n	8005994 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f8eb 	bl	8005b58 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005982:	4b07      	ldr	r3, [pc, #28]	; (80059a0 <USBD_SetConfig+0x148>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff f8cd 	bl	8004b28 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800598e:	2303      	movs	r3, #3
 8005990:	73fb      	strb	r3, [r7, #15]
      break;
 8005992:	bf00      	nop
  }

  return ret;
 8005994:	7bfb      	ldrb	r3, [r7, #15]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000190 	.word	0x20000190

080059a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	88db      	ldrh	r3, [r3, #6]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d004      	beq.n	80059c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f8cd 	bl	8005b58 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80059be:	e023      	b.n	8005a08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	dc02      	bgt.n	80059d2 <USBD_GetConfig+0x2e>
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	dc03      	bgt.n	80059d8 <USBD_GetConfig+0x34>
 80059d0:	e015      	b.n	80059fe <USBD_GetConfig+0x5a>
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d00b      	beq.n	80059ee <USBD_GetConfig+0x4a>
 80059d6:	e012      	b.n	80059fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3308      	adds	r3, #8
 80059e2:	2201      	movs	r2, #1
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f927 	bl	8005c3a <USBD_CtlSendData>
        break;
 80059ec:	e00c      	b.n	8005a08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3304      	adds	r3, #4
 80059f2:	2201      	movs	r2, #1
 80059f4:	4619      	mov	r1, r3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f91f 	bl	8005c3a <USBD_CtlSendData>
        break;
 80059fc:	e004      	b.n	8005a08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f8a9 	bl	8005b58 <USBD_CtlError>
        break;
 8005a06:	bf00      	nop
}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d81e      	bhi.n	8005a66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	88db      	ldrh	r3, [r3, #6]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d004      	beq.n	8005a3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005a30:	6839      	ldr	r1, [r7, #0]
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f890 	bl	8005b58 <USBD_CtlError>
        break;
 8005a38:	e01a      	b.n	8005a70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f043 0202 	orr.w	r2, r3, #2
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	330c      	adds	r3, #12
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f8eb 	bl	8005c3a <USBD_CtlSendData>
      break;
 8005a64:	e004      	b.n	8005a70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005a66:	6839      	ldr	r1, [r7, #0]
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f875 	bl	8005b58 <USBD_CtlError>
      break;
 8005a6e:	bf00      	nop
  }
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	885b      	ldrh	r3, [r3, #2]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d106      	bne.n	8005a98 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f90e 	bl	8005cb4 <USBD_CtlSendStatus>
  }
}
 8005a98:	bf00      	nop
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d80b      	bhi.n	8005ad0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	885b      	ldrh	r3, [r3, #2]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d10c      	bne.n	8005ada <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f8f3 	bl	8005cb4 <USBD_CtlSendStatus>
      }
      break;
 8005ace:	e004      	b.n	8005ada <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005ad0:	6839      	ldr	r1, [r7, #0]
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f840 	bl	8005b58 <USBD_CtlError>
      break;
 8005ad8:	e000      	b.n	8005adc <USBD_ClrFeature+0x3c>
      break;
 8005ada:	bf00      	nop
  }
}
 8005adc:	bf00      	nop
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	781a      	ldrb	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3301      	adds	r3, #1
 8005afe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	781a      	ldrb	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f7ff fa91 	bl	8005036 <SWAPBYTE>
 8005b14:	4603      	mov	r3, r0
 8005b16:	461a      	mov	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3301      	adds	r3, #1
 8005b26:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f7ff fa84 	bl	8005036 <SWAPBYTE>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	461a      	mov	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff fa77 	bl	8005036 <SWAPBYTE>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	80da      	strh	r2, [r3, #6]
}
 8005b50:	bf00      	nop
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b62:	2180      	movs	r1, #128	; 0x80
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fddb 	bl	8006720 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fdd7 	bl	8006720 <USBD_LL_StallEP>
}
 8005b72:	bf00      	nop
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b086      	sub	sp, #24
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d036      	beq.n	8005bfe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005b94:	6938      	ldr	r0, [r7, #16]
 8005b96:	f000 f836 	bl	8005c06 <USBD_GetLen>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	4413      	add	r3, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	7812      	ldrb	r2, [r2, #0]
 8005bb2:	701a      	strb	r2, [r3, #0]
  idx++;
 8005bb4:	7dfb      	ldrb	r3, [r7, #23]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005bba:	7dfb      	ldrb	r3, [r7, #23]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	701a      	strb	r2, [r3, #0]
  idx++;
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005bca:	e013      	b.n	8005bf4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	7812      	ldrb	r2, [r2, #0]
 8005bd6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	613b      	str	r3, [r7, #16]
    idx++;
 8005bde:	7dfb      	ldrb	r3, [r7, #23]
 8005be0:	3301      	adds	r3, #1
 8005be2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	4413      	add	r3, r2
 8005bea:	2200      	movs	r2, #0
 8005bec:	701a      	strb	r2, [r3, #0]
    idx++;
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1e7      	bne.n	8005bcc <USBD_GetString+0x52>
 8005bfc:	e000      	b.n	8005c00 <USBD_GetString+0x86>
    return;
 8005bfe:	bf00      	nop
  }
}
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b085      	sub	sp, #20
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005c16:	e005      	b.n	8005c24 <USBD_GetLen+0x1e>
  {
    len++;
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	3301      	adds	r3, #1
 8005c22:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f5      	bne.n	8005c18 <USBD_GetLen+0x12>
  }

  return len;
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2202      	movs	r2, #2
 8005c4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	2100      	movs	r1, #0
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 fe2b 	bl	80068bc <USBD_LL_Transmit>

  return USBD_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	2100      	movs	r1, #0
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 fe1a 	bl	80068bc <USBD_LL_Transmit>

  return USBD_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b084      	sub	sp, #16
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 fe41 	bl	800692c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2204      	movs	r2, #4
 8005cc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2100      	movs	r1, #0
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fdf6 	bl	80068bc <USBD_LL_Transmit>

  return USBD_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2205      	movs	r2, #5
 8005ce6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cea:	2300      	movs	r3, #0
 8005cec:	2200      	movs	r2, #0
 8005cee:	2100      	movs	r1, #0
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fe1b 	bl	800692c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d04:	f7fa fa60 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d08:	f000 f832 	bl	8005d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d0c:	f000 f8c2 	bl	8005e94 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005d10:	f000 f880 	bl	8005e14 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8005d14:	f000 fa58 	bl	80061c8 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(button_flag == 1){
 8005d18:	4b12      	ldr	r3, [pc, #72]	; (8005d64 <main+0x64>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d1fb      	bne.n	8005d18 <main+0x18>
		  mousehid.button = 1;
 8005d20:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <main+0x68>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	701a      	strb	r2, [r3, #0]
	  	  if (USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid)) != USBD_OK){
 8005d26:	2204      	movs	r2, #4
 8005d28:	490f      	ldr	r1, [pc, #60]	; (8005d68 <main+0x68>)
 8005d2a:	4810      	ldr	r0, [pc, #64]	; (8005d6c <main+0x6c>)
 8005d2c:	f7fe fdf8 	bl	8004920 <USBD_HID_SendReport>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <main+0x3a>
	  		  Error_Handler();
 8005d36:	f000 f949 	bl	8005fcc <Error_Handler>
	  	  }
	  	  HAL_Delay (50);
 8005d3a:	2032      	movs	r0, #50	; 0x32
 8005d3c:	f7fa fab8 	bl	80002b0 <HAL_Delay>
	  	  mousehid.button = 0;
 8005d40:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <main+0x68>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	701a      	strb	r2, [r3, #0]
	  	  if (USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid)) != USBD_OK){
 8005d46:	2204      	movs	r2, #4
 8005d48:	4907      	ldr	r1, [pc, #28]	; (8005d68 <main+0x68>)
 8005d4a:	4808      	ldr	r0, [pc, #32]	; (8005d6c <main+0x6c>)
 8005d4c:	f7fe fde8 	bl	8004920 <USBD_HID_SendReport>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <main+0x5a>
			  Error_Handler();
 8005d56:	f000 f939 	bl	8005fcc <Error_Handler>
	  	  }
	  	  button_flag =0;
 8005d5a:	4b02      	ldr	r3, [pc, #8]	; (8005d64 <main+0x64>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	701a      	strb	r2, [r3, #0]
	  if(button_flag == 1){
 8005d60:	e7da      	b.n	8005d18 <main+0x18>
 8005d62:	bf00      	nop
 8005d64:	20000198 	.word	0x20000198
 8005d68:	20000194 	.word	0x20000194
 8005d6c:	20000200 	.word	0x20000200

08005d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b096      	sub	sp, #88	; 0x58
 8005d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d76:	f107 0314 	add.w	r3, r7, #20
 8005d7a:	2244      	movs	r2, #68	; 0x44
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 ffe8 	bl	8006d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d84:	463b      	mov	r3, r7
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	605a      	str	r2, [r3, #4]
 8005d8c:	609a      	str	r2, [r3, #8]
 8005d8e:	60da      	str	r2, [r3, #12]
 8005d90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005d92:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005d96:	f7fb ff71 	bl	8001c7c <HAL_PWREx_ControlVoltageScaling>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005da0:	f000 f914 	bl	8005fcc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005da4:	2310      	movs	r3, #16
 8005da6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005da8:	2301      	movs	r3, #1
 8005daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005db0:	2360      	movs	r3, #96	; 0x60
 8005db2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005db4:	2302      	movs	r3, #2
 8005db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005db8:	2301      	movs	r3, #1
 8005dba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8005dc0:	2328      	movs	r3, #40	; 0x28
 8005dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005dc4:	2307      	movs	r3, #7
 8005dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005dcc:	2302      	movs	r3, #2
 8005dce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005dd0:	f107 0314 	add.w	r3, r7, #20
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fb ffb7 	bl	8001d48 <HAL_RCC_OscConfig>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8005de0:	f000 f8f4 	bl	8005fcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005de4:	230f      	movs	r3, #15
 8005de6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005de8:	2303      	movs	r3, #3
 8005dea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005df4:	2300      	movs	r3, #0
 8005df6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005df8:	463b      	mov	r3, r7
 8005dfa:	2104      	movs	r1, #4
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fc fb89 	bl	8002514 <HAL_RCC_ClockConfig>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8005e08:	f000 f8e0 	bl	8005fcc <Error_Handler>
  }
}
 8005e0c:	bf00      	nop
 8005e0e:	3758      	adds	r7, #88	; 0x58
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005e18:	4b1b      	ldr	r3, [pc, #108]	; (8005e88 <MX_I2C1_Init+0x74>)
 8005e1a:	4a1c      	ldr	r2, [pc, #112]	; (8005e8c <MX_I2C1_Init+0x78>)
 8005e1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8005e1e:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <MX_I2C1_Init+0x74>)
 8005e20:	4a1b      	ldr	r2, [pc, #108]	; (8005e90 <MX_I2C1_Init+0x7c>)
 8005e22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005e24:	4b18      	ldr	r3, [pc, #96]	; (8005e88 <MX_I2C1_Init+0x74>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005e2a:	4b17      	ldr	r3, [pc, #92]	; (8005e88 <MX_I2C1_Init+0x74>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005e30:	4b15      	ldr	r3, [pc, #84]	; (8005e88 <MX_I2C1_Init+0x74>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <MX_I2C1_Init+0x74>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005e3c:	4b12      	ldr	r3, [pc, #72]	; (8005e88 <MX_I2C1_Init+0x74>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005e42:	4b11      	ldr	r3, [pc, #68]	; (8005e88 <MX_I2C1_Init+0x74>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005e48:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <MX_I2C1_Init+0x74>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005e4e:	480e      	ldr	r0, [pc, #56]	; (8005e88 <MX_I2C1_Init+0x74>)
 8005e50:	f7fa fd58 	bl	8000904 <HAL_I2C_Init>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005e5a:	f000 f8b7 	bl	8005fcc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005e5e:	2100      	movs	r1, #0
 8005e60:	4809      	ldr	r0, [pc, #36]	; (8005e88 <MX_I2C1_Init+0x74>)
 8005e62:	f7fa fdde 	bl	8000a22 <HAL_I2CEx_ConfigAnalogFilter>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005e6c:	f000 f8ae 	bl	8005fcc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005e70:	2100      	movs	r1, #0
 8005e72:	4805      	ldr	r0, [pc, #20]	; (8005e88 <MX_I2C1_Init+0x74>)
 8005e74:	f7fa fe20 	bl	8000ab8 <HAL_I2CEx_ConfigDigitalFilter>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005e7e:	f000 f8a5 	bl	8005fcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005e82:	bf00      	nop
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	200001b4 	.word	0x200001b4
 8005e8c:	40005400 	.word	0x40005400
 8005e90:	10909cec 	.word	0x10909cec

08005e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08a      	sub	sp, #40	; 0x28
 8005e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e9a:	f107 0314 	add.w	r3, r7, #20
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	605a      	str	r2, [r3, #4]
 8005ea4:	609a      	str	r2, [r3, #8]
 8005ea6:	60da      	str	r2, [r3, #12]
 8005ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005eaa:	4b38      	ldr	r3, [pc, #224]	; (8005f8c <MX_GPIO_Init+0xf8>)
 8005eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eae:	4a37      	ldr	r2, [pc, #220]	; (8005f8c <MX_GPIO_Init+0xf8>)
 8005eb0:	f043 0310 	orr.w	r3, r3, #16
 8005eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005eb6:	4b35      	ldr	r3, [pc, #212]	; (8005f8c <MX_GPIO_Init+0xf8>)
 8005eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eba:	f003 0310 	and.w	r3, r3, #16
 8005ebe:	613b      	str	r3, [r7, #16]
 8005ec0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ec2:	4b32      	ldr	r3, [pc, #200]	; (8005f8c <MX_GPIO_Init+0xf8>)
 8005ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec6:	4a31      	ldr	r2, [pc, #196]	; (8005f8c <MX_GPIO_Init+0xf8>)
 8005ec8:	f043 0304 	orr.w	r3, r3, #4
 8005ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ece:	4b2f      	ldr	r3, [pc, #188]	; (8005f8c <MX_GPIO_Init+0xf8>)
 8005ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eda:	4b2c      	ldr	r3, [pc, #176]	; (8005f8c <MX_GPIO_Init+0xf8>)
 8005edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ede:	4a2b      	ldr	r2, [pc, #172]	; (8005f8c <MX_GPIO_Init+0xf8>)
 8005ee0:	f043 0302 	orr.w	r3, r3, #2
 8005ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ee6:	4b29      	ldr	r3, [pc, #164]	; (8005f8c <MX_GPIO_Init+0xf8>)
 8005ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	60bb      	str	r3, [r7, #8]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ef2:	4b26      	ldr	r3, [pc, #152]	; (8005f8c <MX_GPIO_Init+0xf8>)
 8005ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef6:	4a25      	ldr	r2, [pc, #148]	; (8005f8c <MX_GPIO_Init+0xf8>)
 8005ef8:	f043 0301 	orr.w	r3, r3, #1
 8005efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005efe:	4b23      	ldr	r3, [pc, #140]	; (8005f8c <MX_GPIO_Init+0xf8>)
 8005f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	607b      	str	r3, [r7, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	2108      	movs	r1, #8
 8005f0e:	4820      	ldr	r0, [pc, #128]	; (8005f90 <MX_GPIO_Init+0xfc>)
 8005f10:	f7fa fcae 	bl	8000870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005f14:	2200      	movs	r2, #0
 8005f16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f1a:	481e      	ldr	r0, [pc, #120]	; (8005f94 <MX_GPIO_Init+0x100>)
 8005f1c:	f7fa fca8 	bl	8000870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_ERROR_Pin */
  GPIO_InitStruct.Pin = LED_ERROR_Pin;
 8005f20:	2308      	movs	r3, #8
 8005f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f24:	2301      	movs	r3, #1
 8005f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_ERROR_GPIO_Port, &GPIO_InitStruct);
 8005f30:	f107 0314 	add.w	r3, r7, #20
 8005f34:	4619      	mov	r1, r3
 8005f36:	4816      	ldr	r0, [pc, #88]	; (8005f90 <MX_GPIO_Init+0xfc>)
 8005f38:	f7fa faf0 	bl	800051c <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSHBUTTON_Pin */
  GPIO_InitStruct.Pin = PUSHBUTTON_Pin;
 8005f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005f42:	4b15      	ldr	r3, [pc, #84]	; (8005f98 <MX_GPIO_Init+0x104>)
 8005f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 8005f4a:	f107 0314 	add.w	r3, r7, #20
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4812      	ldr	r0, [pc, #72]	; (8005f9c <MX_GPIO_Init+0x108>)
 8005f52:	f7fa fae3 	bl	800051c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005f56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f60:	2300      	movs	r3, #0
 8005f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f64:	2300      	movs	r3, #0
 8005f66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005f68:	f107 0314 	add.w	r3, r7, #20
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4809      	ldr	r0, [pc, #36]	; (8005f94 <MX_GPIO_Init+0x100>)
 8005f70:	f7fa fad4 	bl	800051c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005f74:	2200      	movs	r2, #0
 8005f76:	2100      	movs	r1, #0
 8005f78:	2028      	movs	r0, #40	; 0x28
 8005f7a:	f7fa fa98 	bl	80004ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005f7e:	2028      	movs	r0, #40	; 0x28
 8005f80:	f7fa fab1 	bl	80004e6 <HAL_NVIC_EnableIRQ>

}
 8005f84:	bf00      	nop
 8005f86:	3728      	adds	r7, #40	; 0x28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	48001000 	.word	0x48001000
 8005f94:	48000400 	.word	0x48000400
 8005f98:	10110000 	.word	0x10110000
 8005f9c:	48000800 	.word	0x48000800

08005fa0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	80fb      	strh	r3, [r7, #6]
//	if (GPIO_Pin == PUSHBUTTON_Pin)
//	{
		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005faa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fae:	4805      	ldr	r0, [pc, #20]	; (8005fc4 <HAL_GPIO_EXTI_Callback+0x24>)
 8005fb0:	f7fa fc76 	bl	80008a0 <HAL_GPIO_TogglePin>
		 button_flag = 1;
 8005fb4:	4b04      	ldr	r3, [pc, #16]	; (8005fc8 <HAL_GPIO_EXTI_Callback+0x28>)
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	701a      	strb	r2, [r3, #0]
//	}
}
 8005fba:	bf00      	nop
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	48000400 	.word	0x48000400
 8005fc8:	20000198 	.word	0x20000198

08005fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2108      	movs	r1, #8
 8005fd4:	4803      	ldr	r0, [pc, #12]	; (8005fe4 <Error_Handler+0x18>)
 8005fd6:	f7fa fc4b 	bl	8000870 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005fda:	b672      	cpsid	i
}
 8005fdc:	bf00      	nop
  __disable_irq();
  __BKPT();
 8005fde:	be00      	bkpt	0x0000
  while (1)
 8005fe0:	e7fe      	b.n	8005fe0 <Error_Handler+0x14>
 8005fe2:	bf00      	nop
 8005fe4:	48001000 	.word	0x48001000

08005fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fee:	4b0f      	ldr	r3, [pc, #60]	; (800602c <HAL_MspInit+0x44>)
 8005ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff2:	4a0e      	ldr	r2, [pc, #56]	; (800602c <HAL_MspInit+0x44>)
 8005ff4:	f043 0301 	orr.w	r3, r3, #1
 8005ff8:	6613      	str	r3, [r2, #96]	; 0x60
 8005ffa:	4b0c      	ldr	r3, [pc, #48]	; (800602c <HAL_MspInit+0x44>)
 8005ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	607b      	str	r3, [r7, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006006:	4b09      	ldr	r3, [pc, #36]	; (800602c <HAL_MspInit+0x44>)
 8006008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600a:	4a08      	ldr	r2, [pc, #32]	; (800602c <HAL_MspInit+0x44>)
 800600c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006010:	6593      	str	r3, [r2, #88]	; 0x58
 8006012:	4b06      	ldr	r3, [pc, #24]	; (800602c <HAL_MspInit+0x44>)
 8006014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601a:	603b      	str	r3, [r7, #0]
 800601c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	40021000 	.word	0x40021000

08006030 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b0ac      	sub	sp, #176	; 0xb0
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006038:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	605a      	str	r2, [r3, #4]
 8006042:	609a      	str	r2, [r3, #8]
 8006044:	60da      	str	r2, [r3, #12]
 8006046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006048:	f107 0314 	add.w	r3, r7, #20
 800604c:	2288      	movs	r2, #136	; 0x88
 800604e:	2100      	movs	r1, #0
 8006050:	4618      	mov	r0, r3
 8006052:	f000 fe7f 	bl	8006d54 <memset>
  if(hi2c->Instance==I2C1)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a21      	ldr	r2, [pc, #132]	; (80060e0 <HAL_I2C_MspInit+0xb0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d13a      	bne.n	80060d6 <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006060:	2340      	movs	r3, #64	; 0x40
 8006062:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006064:	2300      	movs	r3, #0
 8006066:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006068:	f107 0314 	add.w	r3, r7, #20
 800606c:	4618      	mov	r0, r3
 800606e:	f7fc fc2b 	bl	80028c8 <HAL_RCCEx_PeriphCLKConfig>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006078:	f7ff ffa8 	bl	8005fcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800607c:	4b19      	ldr	r3, [pc, #100]	; (80060e4 <HAL_I2C_MspInit+0xb4>)
 800607e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006080:	4a18      	ldr	r2, [pc, #96]	; (80060e4 <HAL_I2C_MspInit+0xb4>)
 8006082:	f043 0302 	orr.w	r3, r3, #2
 8006086:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006088:	4b16      	ldr	r3, [pc, #88]	; (80060e4 <HAL_I2C_MspInit+0xb4>)
 800608a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006094:	23c0      	movs	r3, #192	; 0xc0
 8006096:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800609a:	2312      	movs	r3, #18
 800609c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060a0:	2300      	movs	r3, #0
 80060a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060a6:	2303      	movs	r3, #3
 80060a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80060ac:	2304      	movs	r3, #4
 80060ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80060b6:	4619      	mov	r1, r3
 80060b8:	480b      	ldr	r0, [pc, #44]	; (80060e8 <HAL_I2C_MspInit+0xb8>)
 80060ba:	f7fa fa2f 	bl	800051c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80060be:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <HAL_I2C_MspInit+0xb4>)
 80060c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c2:	4a08      	ldr	r2, [pc, #32]	; (80060e4 <HAL_I2C_MspInit+0xb4>)
 80060c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060c8:	6593      	str	r3, [r2, #88]	; 0x58
 80060ca:	4b06      	ldr	r3, [pc, #24]	; (80060e4 <HAL_I2C_MspInit+0xb4>)
 80060cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80060d6:	bf00      	nop
 80060d8:	37b0      	adds	r7, #176	; 0xb0
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	40005400 	.word	0x40005400
 80060e4:	40021000 	.word	0x40021000
 80060e8:	48000400 	.word	0x48000400

080060ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80060f0:	e7fe      	b.n	80060f0 <NMI_Handler+0x4>

080060f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060f2:	b480      	push	{r7}
 80060f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80060f6:	e7fe      	b.n	80060f6 <HardFault_Handler+0x4>

080060f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80060fc:	e7fe      	b.n	80060fc <MemManage_Handler+0x4>

080060fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80060fe:	b480      	push	{r7}
 8006100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006102:	e7fe      	b.n	8006102 <BusFault_Handler+0x4>

08006104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006108:	e7fe      	b.n	8006108 <UsageFault_Handler+0x4>

0800610a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800610a:	b480      	push	{r7}
 800610c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800610e:	bf00      	nop
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006118:	b480      	push	{r7}
 800611a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800611c:	bf00      	nop
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006126:	b480      	push	{r7}
 8006128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800612a:	bf00      	nop
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006138:	f7fa f89a 	bl	8000270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800613c:	bf00      	nop
 800613e:	bd80      	pop	{r7, pc}

08006140 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006144:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006148:	f7fa fbc4 	bl	80008d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800614c:	bf00      	nop
 800614e:	bd80      	pop	{r7, pc}

08006150 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006154:	4802      	ldr	r0, [pc, #8]	; (8006160 <OTG_FS_IRQHandler+0x10>)
 8006156:	f7fa fe4e 	bl	8000df6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800615a:	bf00      	nop
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	200004d0 	.word	0x200004d0

08006164 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006168:	4b15      	ldr	r3, [pc, #84]	; (80061c0 <SystemInit+0x5c>)
 800616a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616e:	4a14      	ldr	r2, [pc, #80]	; (80061c0 <SystemInit+0x5c>)
 8006170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006178:	4b12      	ldr	r3, [pc, #72]	; (80061c4 <SystemInit+0x60>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a11      	ldr	r2, [pc, #68]	; (80061c4 <SystemInit+0x60>)
 800617e:	f043 0301 	orr.w	r3, r3, #1
 8006182:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006184:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <SystemInit+0x60>)
 8006186:	2200      	movs	r2, #0
 8006188:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800618a:	4b0e      	ldr	r3, [pc, #56]	; (80061c4 <SystemInit+0x60>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a0d      	ldr	r2, [pc, #52]	; (80061c4 <SystemInit+0x60>)
 8006190:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006194:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006198:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <SystemInit+0x60>)
 800619c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061a0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80061a2:	4b08      	ldr	r3, [pc, #32]	; (80061c4 <SystemInit+0x60>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a07      	ldr	r2, [pc, #28]	; (80061c4 <SystemInit+0x60>)
 80061a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80061ae:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <SystemInit+0x60>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	619a      	str	r2, [r3, #24]
}
 80061b4:	bf00      	nop
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	e000ed00 	.word	0xe000ed00
 80061c4:	40021000 	.word	0x40021000

080061c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80061cc:	2200      	movs	r2, #0
 80061ce:	490e      	ldr	r1, [pc, #56]	; (8006208 <MX_USB_DEVICE_Init+0x40>)
 80061d0:	480e      	ldr	r0, [pc, #56]	; (800620c <MX_USB_DEVICE_Init+0x44>)
 80061d2:	f7fe fc1f 	bl	8004a14 <USBD_Init>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80061dc:	f7ff fef6 	bl	8005fcc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80061e0:	490b      	ldr	r1, [pc, #44]	; (8006210 <MX_USB_DEVICE_Init+0x48>)
 80061e2:	480a      	ldr	r0, [pc, #40]	; (800620c <MX_USB_DEVICE_Init+0x44>)
 80061e4:	f7fe fc46 	bl	8004a74 <USBD_RegisterClass>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80061ee:	f7ff feed 	bl	8005fcc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80061f2:	4806      	ldr	r0, [pc, #24]	; (800620c <MX_USB_DEVICE_Init+0x44>)
 80061f4:	f7fe fc65 	bl	8004ac2 <USBD_Start>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80061fe:	f7ff fee5 	bl	8005fcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006202:	bf00      	nop
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000114 	.word	0x20000114
 800620c:	20000200 	.word	0x20000200
 8006210:	20000008 	.word	0x20000008

08006214 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b0ac      	sub	sp, #176	; 0xb0
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800621c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	605a      	str	r2, [r3, #4]
 8006226:	609a      	str	r2, [r3, #8]
 8006228:	60da      	str	r2, [r3, #12]
 800622a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800622c:	f107 0314 	add.w	r3, r7, #20
 8006230:	2288      	movs	r2, #136	; 0x88
 8006232:	2100      	movs	r1, #0
 8006234:	4618      	mov	r0, r3
 8006236:	f000 fd8d 	bl	8006d54 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006242:	d173      	bne.n	800632c <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006248:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800624a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800624e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8006252:	2301      	movs	r3, #1
 8006254:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8006256:	2301      	movs	r3, #1
 8006258:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800625a:	2318      	movs	r3, #24
 800625c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800625e:	2307      	movs	r3, #7
 8006260:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8006262:	2302      	movs	r3, #2
 8006264:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8006266:	2302      	movs	r3, #2
 8006268:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800626a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800626e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006270:	f107 0314 	add.w	r3, r7, #20
 8006274:	4618      	mov	r0, r3
 8006276:	f7fc fb27 	bl	80028c8 <HAL_RCCEx_PeriphCLKConfig>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8006280:	f7ff fea4 	bl	8005fcc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006284:	4b2b      	ldr	r3, [pc, #172]	; (8006334 <HAL_PCD_MspInit+0x120>)
 8006286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006288:	4a2a      	ldr	r2, [pc, #168]	; (8006334 <HAL_PCD_MspInit+0x120>)
 800628a:	f043 0301 	orr.w	r3, r3, #1
 800628e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006290:	4b28      	ldr	r3, [pc, #160]	; (8006334 <HAL_PCD_MspInit+0x120>)
 8006292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	613b      	str	r3, [r7, #16]
 800629a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800629c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80062a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062a4:	2302      	movs	r3, #2
 80062a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062aa:	2300      	movs	r3, #0
 80062ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062b0:	2303      	movs	r3, #3
 80062b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80062b6:	230a      	movs	r3, #10
 80062b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80062c0:	4619      	mov	r1, r3
 80062c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062c6:	f7fa f929 	bl	800051c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80062ca:	4b1a      	ldr	r3, [pc, #104]	; (8006334 <HAL_PCD_MspInit+0x120>)
 80062cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ce:	4a19      	ldr	r2, [pc, #100]	; (8006334 <HAL_PCD_MspInit+0x120>)
 80062d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062d6:	4b17      	ldr	r3, [pc, #92]	; (8006334 <HAL_PCD_MspInit+0x120>)
 80062d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062e2:	4b14      	ldr	r3, [pc, #80]	; (8006334 <HAL_PCD_MspInit+0x120>)
 80062e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d114      	bne.n	8006318 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ee:	4b11      	ldr	r3, [pc, #68]	; (8006334 <HAL_PCD_MspInit+0x120>)
 80062f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f2:	4a10      	ldr	r2, [pc, #64]	; (8006334 <HAL_PCD_MspInit+0x120>)
 80062f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f8:	6593      	str	r3, [r2, #88]	; 0x58
 80062fa:	4b0e      	ldr	r3, [pc, #56]	; (8006334 <HAL_PCD_MspInit+0x120>)
 80062fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006302:	60bb      	str	r3, [r7, #8]
 8006304:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8006306:	f7fb fd0f 	bl	8001d28 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800630a:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <HAL_PCD_MspInit+0x120>)
 800630c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800630e:	4a09      	ldr	r2, [pc, #36]	; (8006334 <HAL_PCD_MspInit+0x120>)
 8006310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006314:	6593      	str	r3, [r2, #88]	; 0x58
 8006316:	e001      	b.n	800631c <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8006318:	f7fb fd06 	bl	8001d28 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800631c:	2200      	movs	r2, #0
 800631e:	2100      	movs	r1, #0
 8006320:	2043      	movs	r0, #67	; 0x43
 8006322:	f7fa f8c4 	bl	80004ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006326:	2043      	movs	r0, #67	; 0x43
 8006328:	f7fa f8dd 	bl	80004e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800632c:	bf00      	nop
 800632e:	37b0      	adds	r7, #176	; 0xb0
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	40021000 	.word	0x40021000

08006338 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800634c:	4619      	mov	r1, r3
 800634e:	4610      	mov	r0, r2
 8006350:	f7fe fc02 	bl	8004b58 <USBD_LL_SetupStage>
}
 8006354:	bf00      	nop
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800636e:	78fa      	ldrb	r2, [r7, #3]
 8006370:	6879      	ldr	r1, [r7, #4]
 8006372:	4613      	mov	r3, r2
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	1a9b      	subs	r3, r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	440b      	add	r3, r1
 800637c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	4619      	mov	r1, r3
 8006386:	f7fe fc3c 	bl	8004c02 <USBD_LL_DataOutStage>
}
 800638a:	bf00      	nop
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80063a4:	78fa      	ldrb	r2, [r7, #3]
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	4613      	mov	r3, r2
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	1a9b      	subs	r3, r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	440b      	add	r3, r1
 80063b2:	3348      	adds	r3, #72	; 0x48
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	4619      	mov	r1, r3
 80063ba:	f7fe fc85 	bl	8004cc8 <USBD_LL_DataInStage>
}
 80063be:	bf00      	nop
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe fd99 	bl	8004f0c <USBD_LL_SOF>
}
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80063ea:	2301      	movs	r3, #1
 80063ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d001      	beq.n	80063fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80063f6:	f7ff fde9 	bl	8005fcc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006400:	7bfa      	ldrb	r2, [r7, #15]
 8006402:	4611      	mov	r1, r2
 8006404:	4618      	mov	r0, r3
 8006406:	f7fe fd43 	bl	8004e90 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006410:	4618      	mov	r0, r3
 8006412:	f7fe fcef 	bl	8004df4 <USBD_LL_Reset>
}
 8006416:	bf00      	nop
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800643a:	f043 0301 	orr.w	r3, r3, #1
 800643e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006446:	4618      	mov	r0, r3
 8006448:	f7fe fd32 	bl	8004eb0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d005      	beq.n	8006460 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006454:	4b04      	ldr	r3, [pc, #16]	; (8006468 <HAL_PCD_SuspendCallback+0x48>)
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	4a03      	ldr	r2, [pc, #12]	; (8006468 <HAL_PCD_SuspendCallback+0x48>)
 800645a:	f043 0306 	orr.w	r3, r3, #6
 800645e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	e000ed00 	.word	0xe000ed00

0800646c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6812      	ldr	r2, [r2, #0]
 8006482:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006486:	f023 0301 	bic.w	r3, r3, #1
 800648a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d007      	beq.n	80064a4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006494:	4b08      	ldr	r3, [pc, #32]	; (80064b8 <HAL_PCD_ResumeCallback+0x4c>)
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	4a07      	ldr	r2, [pc, #28]	; (80064b8 <HAL_PCD_ResumeCallback+0x4c>)
 800649a:	f023 0306 	bic.w	r3, r3, #6
 800649e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80064a0:	f000 fae2 	bl	8006a68 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fe fd16 	bl	8004edc <USBD_LL_Resume>
}
 80064b0:	bf00      	nop
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	e000ed00 	.word	0xe000ed00

080064bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064ce:	78fa      	ldrb	r2, [r7, #3]
 80064d0:	4611      	mov	r1, r2
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fe fd62 	bl	8004f9c <USBD_LL_IsoOUTIncomplete>
}
 80064d8:	bf00      	nop
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064f2:	78fa      	ldrb	r2, [r7, #3]
 80064f4:	4611      	mov	r1, r2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fe fd2a 	bl	8004f50 <USBD_LL_IsoINIncomplete>
}
 80064fc:	bf00      	nop
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe fd68 	bl	8004fe8 <USBD_LL_DevConnected>
}
 8006518:	bf00      	nop
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe fd65 	bl	8004ffe <USBD_LL_DevDisconnected>
}
 8006534:	bf00      	nop
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d13c      	bne.n	80065c6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800654c:	4a20      	ldr	r2, [pc, #128]	; (80065d0 <USBD_LL_Init+0x94>)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a1e      	ldr	r2, [pc, #120]	; (80065d0 <USBD_LL_Init+0x94>)
 8006558:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800655c:	4b1c      	ldr	r3, [pc, #112]	; (80065d0 <USBD_LL_Init+0x94>)
 800655e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006562:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006564:	4b1a      	ldr	r3, [pc, #104]	; (80065d0 <USBD_LL_Init+0x94>)
 8006566:	2206      	movs	r2, #6
 8006568:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800656a:	4b19      	ldr	r3, [pc, #100]	; (80065d0 <USBD_LL_Init+0x94>)
 800656c:	2202      	movs	r2, #2
 800656e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006570:	4b17      	ldr	r3, [pc, #92]	; (80065d0 <USBD_LL_Init+0x94>)
 8006572:	2202      	movs	r2, #2
 8006574:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006576:	4b16      	ldr	r3, [pc, #88]	; (80065d0 <USBD_LL_Init+0x94>)
 8006578:	2200      	movs	r2, #0
 800657a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800657c:	4b14      	ldr	r3, [pc, #80]	; (80065d0 <USBD_LL_Init+0x94>)
 800657e:	2200      	movs	r2, #0
 8006580:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006582:	4b13      	ldr	r3, [pc, #76]	; (80065d0 <USBD_LL_Init+0x94>)
 8006584:	2200      	movs	r2, #0
 8006586:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006588:	4b11      	ldr	r3, [pc, #68]	; (80065d0 <USBD_LL_Init+0x94>)
 800658a:	2200      	movs	r2, #0
 800658c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800658e:	4b10      	ldr	r3, [pc, #64]	; (80065d0 <USBD_LL_Init+0x94>)
 8006590:	2200      	movs	r2, #0
 8006592:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006594:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <USBD_LL_Init+0x94>)
 8006596:	2200      	movs	r2, #0
 8006598:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800659a:	480d      	ldr	r0, [pc, #52]	; (80065d0 <USBD_LL_Init+0x94>)
 800659c:	f7fa fad8 	bl	8000b50 <HAL_PCD_Init>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80065a6:	f7ff fd11 	bl	8005fcc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80065aa:	2180      	movs	r1, #128	; 0x80
 80065ac:	4808      	ldr	r0, [pc, #32]	; (80065d0 <USBD_LL_Init+0x94>)
 80065ae:	f7fb fb22 	bl	8001bf6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80065b2:	2240      	movs	r2, #64	; 0x40
 80065b4:	2100      	movs	r1, #0
 80065b6:	4806      	ldr	r0, [pc, #24]	; (80065d0 <USBD_LL_Init+0x94>)
 80065b8:	f7fb fad6 	bl	8001b68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80065bc:	2280      	movs	r2, #128	; 0x80
 80065be:	2101      	movs	r1, #1
 80065c0:	4803      	ldr	r0, [pc, #12]	; (80065d0 <USBD_LL_Init+0x94>)
 80065c2:	f7fb fad1 	bl	8001b68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	200004d0 	.word	0x200004d0

080065d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fa fbd4 	bl	8000d98 <HAL_PCD_Start>
 80065f0:	4603      	mov	r3, r0
 80065f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80065f4:	7bbb      	ldrb	r3, [r7, #14]
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d816      	bhi.n	8006628 <USBD_LL_Start+0x54>
 80065fa:	a201      	add	r2, pc, #4	; (adr r2, 8006600 <USBD_LL_Start+0x2c>)
 80065fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006600:	08006611 	.word	0x08006611
 8006604:	08006617 	.word	0x08006617
 8006608:	0800661d 	.word	0x0800661d
 800660c:	08006623 	.word	0x08006623
    case HAL_OK :
      usb_status = USBD_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	73fb      	strb	r3, [r7, #15]
    break;
 8006614:	e00b      	b.n	800662e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006616:	2303      	movs	r3, #3
 8006618:	73fb      	strb	r3, [r7, #15]
    break;
 800661a:	e008      	b.n	800662e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800661c:	2301      	movs	r3, #1
 800661e:	73fb      	strb	r3, [r7, #15]
    break;
 8006620:	e005      	b.n	800662e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006622:	2303      	movs	r3, #3
 8006624:	73fb      	strb	r3, [r7, #15]
    break;
 8006626:	e002      	b.n	800662e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006628:	2303      	movs	r3, #3
 800662a:	73fb      	strb	r3, [r7, #15]
    break;
 800662c:	bf00      	nop
  }
  return usb_status;
 800662e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	4608      	mov	r0, r1
 8006642:	4611      	mov	r1, r2
 8006644:	461a      	mov	r2, r3
 8006646:	4603      	mov	r3, r0
 8006648:	70fb      	strb	r3, [r7, #3]
 800664a:	460b      	mov	r3, r1
 800664c:	70bb      	strb	r3, [r7, #2]
 800664e:	4613      	mov	r3, r2
 8006650:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006660:	78bb      	ldrb	r3, [r7, #2]
 8006662:	883a      	ldrh	r2, [r7, #0]
 8006664:	78f9      	ldrb	r1, [r7, #3]
 8006666:	f7fa ff8f 	bl	8001588 <HAL_PCD_EP_Open>
 800666a:	4603      	mov	r3, r0
 800666c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800666e:	7bbb      	ldrb	r3, [r7, #14]
 8006670:	2b03      	cmp	r3, #3
 8006672:	d817      	bhi.n	80066a4 <USBD_LL_OpenEP+0x6c>
 8006674:	a201      	add	r2, pc, #4	; (adr r2, 800667c <USBD_LL_OpenEP+0x44>)
 8006676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667a:	bf00      	nop
 800667c:	0800668d 	.word	0x0800668d
 8006680:	08006693 	.word	0x08006693
 8006684:	08006699 	.word	0x08006699
 8006688:	0800669f 	.word	0x0800669f
    case HAL_OK :
      usb_status = USBD_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	73fb      	strb	r3, [r7, #15]
    break;
 8006690:	e00b      	b.n	80066aa <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006692:	2303      	movs	r3, #3
 8006694:	73fb      	strb	r3, [r7, #15]
    break;
 8006696:	e008      	b.n	80066aa <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006698:	2301      	movs	r3, #1
 800669a:	73fb      	strb	r3, [r7, #15]
    break;
 800669c:	e005      	b.n	80066aa <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800669e:	2303      	movs	r3, #3
 80066a0:	73fb      	strb	r3, [r7, #15]
    break;
 80066a2:	e002      	b.n	80066aa <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80066a4:	2303      	movs	r3, #3
 80066a6:	73fb      	strb	r3, [r7, #15]
    break;
 80066a8:	bf00      	nop
  }
  return usb_status;
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066ce:	78fa      	ldrb	r2, [r7, #3]
 80066d0:	4611      	mov	r1, r2
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fa ffc0 	bl	8001658 <HAL_PCD_EP_Close>
 80066d8:	4603      	mov	r3, r0
 80066da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d816      	bhi.n	8006710 <USBD_LL_CloseEP+0x5c>
 80066e2:	a201      	add	r2, pc, #4	; (adr r2, 80066e8 <USBD_LL_CloseEP+0x34>)
 80066e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e8:	080066f9 	.word	0x080066f9
 80066ec:	080066ff 	.word	0x080066ff
 80066f0:	08006705 	.word	0x08006705
 80066f4:	0800670b 	.word	0x0800670b
    case HAL_OK :
      usb_status = USBD_OK;
 80066f8:	2300      	movs	r3, #0
 80066fa:	73fb      	strb	r3, [r7, #15]
    break;
 80066fc:	e00b      	b.n	8006716 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80066fe:	2303      	movs	r3, #3
 8006700:	73fb      	strb	r3, [r7, #15]
    break;
 8006702:	e008      	b.n	8006716 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006704:	2301      	movs	r3, #1
 8006706:	73fb      	strb	r3, [r7, #15]
    break;
 8006708:	e005      	b.n	8006716 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800670a:	2303      	movs	r3, #3
 800670c:	73fb      	strb	r3, [r7, #15]
    break;
 800670e:	e002      	b.n	8006716 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006710:	2303      	movs	r3, #3
 8006712:	73fb      	strb	r3, [r7, #15]
    break;
 8006714:	bf00      	nop
  }
  return usb_status;
 8006716:	7bfb      	ldrb	r3, [r7, #15]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	460b      	mov	r3, r1
 800672a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800673a:	78fa      	ldrb	r2, [r7, #3]
 800673c:	4611      	mov	r1, r2
 800673e:	4618      	mov	r0, r3
 8006740:	f7fb f84f 	bl	80017e2 <HAL_PCD_EP_SetStall>
 8006744:	4603      	mov	r3, r0
 8006746:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006748:	7bbb      	ldrb	r3, [r7, #14]
 800674a:	2b03      	cmp	r3, #3
 800674c:	d816      	bhi.n	800677c <USBD_LL_StallEP+0x5c>
 800674e:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <USBD_LL_StallEP+0x34>)
 8006750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006754:	08006765 	.word	0x08006765
 8006758:	0800676b 	.word	0x0800676b
 800675c:	08006771 	.word	0x08006771
 8006760:	08006777 	.word	0x08006777
    case HAL_OK :
      usb_status = USBD_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	73fb      	strb	r3, [r7, #15]
    break;
 8006768:	e00b      	b.n	8006782 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800676a:	2303      	movs	r3, #3
 800676c:	73fb      	strb	r3, [r7, #15]
    break;
 800676e:	e008      	b.n	8006782 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006770:	2301      	movs	r3, #1
 8006772:	73fb      	strb	r3, [r7, #15]
    break;
 8006774:	e005      	b.n	8006782 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006776:	2303      	movs	r3, #3
 8006778:	73fb      	strb	r3, [r7, #15]
    break;
 800677a:	e002      	b.n	8006782 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800677c:	2303      	movs	r3, #3
 800677e:	73fb      	strb	r3, [r7, #15]
    break;
 8006780:	bf00      	nop
  }
  return usb_status;
 8006782:	7bfb      	ldrb	r3, [r7, #15]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80067a6:	78fa      	ldrb	r2, [r7, #3]
 80067a8:	4611      	mov	r1, r2
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fb f87b 	bl	80018a6 <HAL_PCD_EP_ClrStall>
 80067b0:	4603      	mov	r3, r0
 80067b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d816      	bhi.n	80067e8 <USBD_LL_ClearStallEP+0x5c>
 80067ba:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <USBD_LL_ClearStallEP+0x34>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	080067d1 	.word	0x080067d1
 80067c4:	080067d7 	.word	0x080067d7
 80067c8:	080067dd 	.word	0x080067dd
 80067cc:	080067e3 	.word	0x080067e3
    case HAL_OK :
      usb_status = USBD_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	73fb      	strb	r3, [r7, #15]
    break;
 80067d4:	e00b      	b.n	80067ee <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80067d6:	2303      	movs	r3, #3
 80067d8:	73fb      	strb	r3, [r7, #15]
    break;
 80067da:	e008      	b.n	80067ee <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80067dc:	2301      	movs	r3, #1
 80067de:	73fb      	strb	r3, [r7, #15]
    break;
 80067e0:	e005      	b.n	80067ee <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80067e2:	2303      	movs	r3, #3
 80067e4:	73fb      	strb	r3, [r7, #15]
    break;
 80067e6:	e002      	b.n	80067ee <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80067e8:	2303      	movs	r3, #3
 80067ea:	73fb      	strb	r3, [r7, #15]
    break;
 80067ec:	bf00      	nop
  }
  return usb_status;
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800680a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800680c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006810:	2b00      	cmp	r3, #0
 8006812:	da0b      	bge.n	800682c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800681a:	68f9      	ldr	r1, [r7, #12]
 800681c:	4613      	mov	r3, r2
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	1a9b      	subs	r3, r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	440b      	add	r3, r1
 8006826:	333e      	adds	r3, #62	; 0x3e
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	e00b      	b.n	8006844 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006832:	68f9      	ldr	r1, [r7, #12]
 8006834:	4613      	mov	r3, r2
 8006836:	00db      	lsls	r3, r3, #3
 8006838:	1a9b      	subs	r3, r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	440b      	add	r3, r1
 800683e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006842:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800686a:	78fa      	ldrb	r2, [r7, #3]
 800686c:	4611      	mov	r1, r2
 800686e:	4618      	mov	r0, r3
 8006870:	f7fa fe65 	bl	800153e <HAL_PCD_SetAddress>
 8006874:	4603      	mov	r3, r0
 8006876:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006878:	7bbb      	ldrb	r3, [r7, #14]
 800687a:	2b03      	cmp	r3, #3
 800687c:	d816      	bhi.n	80068ac <USBD_LL_SetUSBAddress+0x5c>
 800687e:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <USBD_LL_SetUSBAddress+0x34>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	08006895 	.word	0x08006895
 8006888:	0800689b 	.word	0x0800689b
 800688c:	080068a1 	.word	0x080068a1
 8006890:	080068a7 	.word	0x080068a7
    case HAL_OK :
      usb_status = USBD_OK;
 8006894:	2300      	movs	r3, #0
 8006896:	73fb      	strb	r3, [r7, #15]
    break;
 8006898:	e00b      	b.n	80068b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800689a:	2303      	movs	r3, #3
 800689c:	73fb      	strb	r3, [r7, #15]
    break;
 800689e:	e008      	b.n	80068b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80068a0:	2301      	movs	r3, #1
 80068a2:	73fb      	strb	r3, [r7, #15]
    break;
 80068a4:	e005      	b.n	80068b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80068a6:	2303      	movs	r3, #3
 80068a8:	73fb      	strb	r3, [r7, #15]
    break;
 80068aa:	e002      	b.n	80068b2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80068ac:	2303      	movs	r3, #3
 80068ae:	73fb      	strb	r3, [r7, #15]
    break;
 80068b0:	bf00      	nop
  }
  return usb_status;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	607a      	str	r2, [r7, #4]
 80068c6:	603b      	str	r3, [r7, #0]
 80068c8:	460b      	mov	r3, r1
 80068ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80068da:	7af9      	ldrb	r1, [r7, #11]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	f7fa ff42 	bl	8001768 <HAL_PCD_EP_Transmit>
 80068e4:	4603      	mov	r3, r0
 80068e6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80068e8:	7dbb      	ldrb	r3, [r7, #22]
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d816      	bhi.n	800691c <USBD_LL_Transmit+0x60>
 80068ee:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <USBD_LL_Transmit+0x38>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	08006905 	.word	0x08006905
 80068f8:	0800690b 	.word	0x0800690b
 80068fc:	08006911 	.word	0x08006911
 8006900:	08006917 	.word	0x08006917
    case HAL_OK :
      usb_status = USBD_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	75fb      	strb	r3, [r7, #23]
    break;
 8006908:	e00b      	b.n	8006922 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800690a:	2303      	movs	r3, #3
 800690c:	75fb      	strb	r3, [r7, #23]
    break;
 800690e:	e008      	b.n	8006922 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006910:	2301      	movs	r3, #1
 8006912:	75fb      	strb	r3, [r7, #23]
    break;
 8006914:	e005      	b.n	8006922 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006916:	2303      	movs	r3, #3
 8006918:	75fb      	strb	r3, [r7, #23]
    break;
 800691a:	e002      	b.n	8006922 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800691c:	2303      	movs	r3, #3
 800691e:	75fb      	strb	r3, [r7, #23]
    break;
 8006920:	bf00      	nop
  }
  return usb_status;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	607a      	str	r2, [r7, #4]
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	460b      	mov	r3, r1
 800693a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800694a:	7af9      	ldrb	r1, [r7, #11]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	f7fa fecc 	bl	80016ec <HAL_PCD_EP_Receive>
 8006954:	4603      	mov	r3, r0
 8006956:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8006958:	7dbb      	ldrb	r3, [r7, #22]
 800695a:	2b03      	cmp	r3, #3
 800695c:	d816      	bhi.n	800698c <USBD_LL_PrepareReceive+0x60>
 800695e:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <USBD_LL_PrepareReceive+0x38>)
 8006960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006964:	08006975 	.word	0x08006975
 8006968:	0800697b 	.word	0x0800697b
 800696c:	08006981 	.word	0x08006981
 8006970:	08006987 	.word	0x08006987
    case HAL_OK :
      usb_status = USBD_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	75fb      	strb	r3, [r7, #23]
    break;
 8006978:	e00b      	b.n	8006992 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800697a:	2303      	movs	r3, #3
 800697c:	75fb      	strb	r3, [r7, #23]
    break;
 800697e:	e008      	b.n	8006992 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006980:	2301      	movs	r3, #1
 8006982:	75fb      	strb	r3, [r7, #23]
    break;
 8006984:	e005      	b.n	8006992 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006986:	2303      	movs	r3, #3
 8006988:	75fb      	strb	r3, [r7, #23]
    break;
 800698a:	e002      	b.n	8006992 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800698c:	2303      	movs	r3, #3
 800698e:	75fb      	strb	r3, [r7, #23]
    break;
 8006990:	bf00      	nop
  }
  return usb_status;
 8006992:	7dfb      	ldrb	r3, [r7, #23]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <HAL_PCDEx_LPM_Callback+0x18>
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d01f      	beq.n	80069f2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80069b2:	e03b      	b.n	8006a2c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d007      	beq.n	80069cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80069bc:	f000 f854 	bl	8006a68 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80069c0:	4b1c      	ldr	r3, [pc, #112]	; (8006a34 <HAL_PCDEx_LPM_Callback+0x98>)
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	4a1b      	ldr	r2, [pc, #108]	; (8006a34 <HAL_PCDEx_LPM_Callback+0x98>)
 80069c6:	f023 0306 	bic.w	r3, r3, #6
 80069ca:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6812      	ldr	r2, [r2, #0]
 80069da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069de:	f023 0301 	bic.w	r3, r3, #1
 80069e2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe fa76 	bl	8004edc <USBD_LL_Resume>
    break;
 80069f0:	e01c      	b.n	8006a2c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6812      	ldr	r2, [r2, #0]
 8006a00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a04:	f043 0301 	orr.w	r3, r3, #1
 8006a08:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fe fa4d 	bl	8004eb0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a1e:	4b05      	ldr	r3, [pc, #20]	; (8006a34 <HAL_PCDEx_LPM_Callback+0x98>)
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	4a04      	ldr	r2, [pc, #16]	; (8006a34 <HAL_PCDEx_LPM_Callback+0x98>)
 8006a24:	f043 0306 	orr.w	r3, r3, #6
 8006a28:	6113      	str	r3, [r2, #16]
    break;
 8006a2a:	bf00      	nop
}
 8006a2c:	bf00      	nop
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	e000ed00 	.word	0xe000ed00

08006a38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006a40:	4b03      	ldr	r3, [pc, #12]	; (8006a50 <USBD_static_malloc+0x18>)
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	2000019c 	.word	0x2000019c

08006a54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]

}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8006a6c:	f7ff f980 	bl	8005d70 <SystemClock_Config>
}
 8006a70:	bf00      	nop
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	6039      	str	r1, [r7, #0]
 8006a7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2212      	movs	r2, #18
 8006a84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006a86:	4b03      	ldr	r3, [pc, #12]	; (8006a94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	20000134 	.word	0x20000134

08006a98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	6039      	str	r1, [r7, #0]
 8006aa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	2204      	movs	r2, #4
 8006aa8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006aaa:	4b03      	ldr	r3, [pc, #12]	; (8006ab8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	20000154 	.word	0x20000154

08006abc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	6039      	str	r1, [r7, #0]
 8006ac6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d105      	bne.n	8006ada <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	4907      	ldr	r1, [pc, #28]	; (8006af0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ad2:	4808      	ldr	r0, [pc, #32]	; (8006af4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ad4:	f7ff f851 	bl	8005b7a <USBD_GetString>
 8006ad8:	e004      	b.n	8006ae4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	4904      	ldr	r1, [pc, #16]	; (8006af0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ade:	4805      	ldr	r0, [pc, #20]	; (8006af4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ae0:	f7ff f84b 	bl	8005b7a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ae4:	4b02      	ldr	r3, [pc, #8]	; (8006af0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	200008d8 	.word	0x200008d8
 8006af4:	08006d7c 	.word	0x08006d7c

08006af8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	4603      	mov	r3, r0
 8006b00:	6039      	str	r1, [r7, #0]
 8006b02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	4904      	ldr	r1, [pc, #16]	; (8006b18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006b08:	4804      	ldr	r0, [pc, #16]	; (8006b1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006b0a:	f7ff f836 	bl	8005b7a <USBD_GetString>
  return USBD_StrDesc;
 8006b0e:	4b02      	ldr	r3, [pc, #8]	; (8006b18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	200008d8 	.word	0x200008d8
 8006b1c:	08006d94 	.word	0x08006d94

08006b20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	4603      	mov	r3, r0
 8006b28:	6039      	str	r1, [r7, #0]
 8006b2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	221a      	movs	r2, #26
 8006b30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b32:	f000 f855 	bl	8006be0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b36:	4b02      	ldr	r3, [pc, #8]	; (8006b40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	20000158 	.word	0x20000158

08006b44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	6039      	str	r1, [r7, #0]
 8006b4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006b50:	79fb      	ldrb	r3, [r7, #7]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d105      	bne.n	8006b62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	4907      	ldr	r1, [pc, #28]	; (8006b78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b5a:	4808      	ldr	r0, [pc, #32]	; (8006b7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b5c:	f7ff f80d 	bl	8005b7a <USBD_GetString>
 8006b60:	e004      	b.n	8006b6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	4904      	ldr	r1, [pc, #16]	; (8006b78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b66:	4805      	ldr	r0, [pc, #20]	; (8006b7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b68:	f7ff f807 	bl	8005b7a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b6c:	4b02      	ldr	r3, [pc, #8]	; (8006b78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	200008d8 	.word	0x200008d8
 8006b7c:	08006da8 	.word	0x08006da8

08006b80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	4603      	mov	r3, r0
 8006b88:	6039      	str	r1, [r7, #0]
 8006b8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d105      	bne.n	8006b9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	4907      	ldr	r1, [pc, #28]	; (8006bb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b96:	4808      	ldr	r0, [pc, #32]	; (8006bb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b98:	f7fe ffef 	bl	8005b7a <USBD_GetString>
 8006b9c:	e004      	b.n	8006ba8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	4904      	ldr	r1, [pc, #16]	; (8006bb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ba2:	4805      	ldr	r0, [pc, #20]	; (8006bb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ba4:	f7fe ffe9 	bl	8005b7a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ba8:	4b02      	ldr	r3, [pc, #8]	; (8006bb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	200008d8 	.word	0x200008d8
 8006bb8:	08006db4 	.word	0x08006db4

08006bbc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	6039      	str	r1, [r7, #0]
 8006bc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	220c      	movs	r2, #12
 8006bcc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006bce:	4b03      	ldr	r3, [pc, #12]	; (8006bdc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	20000148 	.word	0x20000148

08006be0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006be6:	4b0f      	ldr	r3, [pc, #60]	; (8006c24 <Get_SerialNum+0x44>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006bec:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <Get_SerialNum+0x48>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006bf2:	4b0e      	ldr	r3, [pc, #56]	; (8006c2c <Get_SerialNum+0x4c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d009      	beq.n	8006c1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006c06:	2208      	movs	r2, #8
 8006c08:	4909      	ldr	r1, [pc, #36]	; (8006c30 <Get_SerialNum+0x50>)
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 f814 	bl	8006c38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006c10:	2204      	movs	r2, #4
 8006c12:	4908      	ldr	r1, [pc, #32]	; (8006c34 <Get_SerialNum+0x54>)
 8006c14:	68b8      	ldr	r0, [r7, #8]
 8006c16:	f000 f80f 	bl	8006c38 <IntToUnicode>
  }
}
 8006c1a:	bf00      	nop
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	1fff7590 	.word	0x1fff7590
 8006c28:	1fff7594 	.word	0x1fff7594
 8006c2c:	1fff7598 	.word	0x1fff7598
 8006c30:	2000015a 	.word	0x2000015a
 8006c34:	2000016a 	.word	0x2000016a

08006c38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	4613      	mov	r3, r2
 8006c44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	75fb      	strb	r3, [r7, #23]
 8006c4e:	e027      	b.n	8006ca0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	0f1b      	lsrs	r3, r3, #28
 8006c54:	2b09      	cmp	r3, #9
 8006c56:	d80b      	bhi.n	8006c70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	0f1b      	lsrs	r3, r3, #28
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	4619      	mov	r1, r3
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	440b      	add	r3, r1
 8006c68:	3230      	adds	r2, #48	; 0x30
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	e00a      	b.n	8006c86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	0f1b      	lsrs	r3, r3, #28
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	440b      	add	r3, r1
 8006c80:	3237      	adds	r2, #55	; 0x37
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	011b      	lsls	r3, r3, #4
 8006c8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	3301      	adds	r3, #1
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	4413      	add	r3, r2
 8006c96:	2200      	movs	r2, #0
 8006c98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	75fb      	strb	r3, [r7, #23]
 8006ca0:	7dfa      	ldrb	r2, [r7, #23]
 8006ca2:	79fb      	ldrb	r3, [r7, #7]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d3d3      	bcc.n	8006c50 <IntToUnicode+0x18>
  }
}
 8006ca8:	bf00      	nop
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
	...

08006cb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006cf0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006cbc:	f7ff fa52 	bl	8006164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006cc0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006cc2:	e003      	b.n	8006ccc <LoopCopyDataInit>

08006cc4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006cc4:	4b0b      	ldr	r3, [pc, #44]	; (8006cf4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006cc6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006cc8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006cca:	3104      	adds	r1, #4

08006ccc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006ccc:	480a      	ldr	r0, [pc, #40]	; (8006cf8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006cce:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <LoopForever+0xe>)
	adds	r2, r0, r1
 8006cd0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006cd2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006cd4:	d3f6      	bcc.n	8006cc4 <CopyDataInit>
	ldr	r2, =_sbss
 8006cd6:	4a0a      	ldr	r2, [pc, #40]	; (8006d00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006cd8:	e002      	b.n	8006ce0 <LoopFillZerobss>

08006cda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006cda:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006cdc:	f842 3b04 	str.w	r3, [r2], #4

08006ce0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006ce0:	4b08      	ldr	r3, [pc, #32]	; (8006d04 <LoopForever+0x16>)
	cmp	r2, r3
 8006ce2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006ce4:	d3f9      	bcc.n	8006cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006ce6:	f000 f811 	bl	8006d0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006cea:	f7ff f809 	bl	8005d00 <main>

08006cee <LoopForever>:

LoopForever:
    b LoopForever
 8006cee:	e7fe      	b.n	8006cee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006cf0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006cf4:	08006e0c 	.word	0x08006e0c
	ldr	r0, =_sdata
 8006cf8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006cfc:	20000174 	.word	0x20000174
	ldr	r2, =_sbss
 8006d00:	20000174 	.word	0x20000174
	ldr	r3, = _ebss
 8006d04:	20000ad8 	.word	0x20000ad8

08006d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006d08:	e7fe      	b.n	8006d08 <ADC1_2_IRQHandler>
	...

08006d0c <__libc_init_array>:
 8006d0c:	b570      	push	{r4, r5, r6, lr}
 8006d0e:	4d0d      	ldr	r5, [pc, #52]	; (8006d44 <__libc_init_array+0x38>)
 8006d10:	4c0d      	ldr	r4, [pc, #52]	; (8006d48 <__libc_init_array+0x3c>)
 8006d12:	1b64      	subs	r4, r4, r5
 8006d14:	10a4      	asrs	r4, r4, #2
 8006d16:	2600      	movs	r6, #0
 8006d18:	42a6      	cmp	r6, r4
 8006d1a:	d109      	bne.n	8006d30 <__libc_init_array+0x24>
 8006d1c:	4d0b      	ldr	r5, [pc, #44]	; (8006d4c <__libc_init_array+0x40>)
 8006d1e:	4c0c      	ldr	r4, [pc, #48]	; (8006d50 <__libc_init_array+0x44>)
 8006d20:	f000 f820 	bl	8006d64 <_init>
 8006d24:	1b64      	subs	r4, r4, r5
 8006d26:	10a4      	asrs	r4, r4, #2
 8006d28:	2600      	movs	r6, #0
 8006d2a:	42a6      	cmp	r6, r4
 8006d2c:	d105      	bne.n	8006d3a <__libc_init_array+0x2e>
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}
 8006d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d34:	4798      	blx	r3
 8006d36:	3601      	adds	r6, #1
 8006d38:	e7ee      	b.n	8006d18 <__libc_init_array+0xc>
 8006d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3e:	4798      	blx	r3
 8006d40:	3601      	adds	r6, #1
 8006d42:	e7f2      	b.n	8006d2a <__libc_init_array+0x1e>
 8006d44:	08006e04 	.word	0x08006e04
 8006d48:	08006e04 	.word	0x08006e04
 8006d4c:	08006e04 	.word	0x08006e04
 8006d50:	08006e08 	.word	0x08006e08

08006d54 <memset>:
 8006d54:	4402      	add	r2, r0
 8006d56:	4603      	mov	r3, r0
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d100      	bne.n	8006d5e <memset+0xa>
 8006d5c:	4770      	bx	lr
 8006d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d62:	e7f9      	b.n	8006d58 <memset+0x4>

08006d64 <_init>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	bf00      	nop
 8006d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6a:	bc08      	pop	{r3}
 8006d6c:	469e      	mov	lr, r3
 8006d6e:	4770      	bx	lr

08006d70 <_fini>:
 8006d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d72:	bf00      	nop
 8006d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d76:	bc08      	pop	{r3}
 8006d78:	469e      	mov	lr, r3
 8006d7a:	4770      	bx	lr
