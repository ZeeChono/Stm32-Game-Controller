
2021-11-07-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a014  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800a1a4  0800a1a4  0001a1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a27c  0800a27c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a27c  0800a27c  0001a27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a284  0800a284  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a284  0800a284  0001a284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a288  0800a288  0001a288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800a28c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b98  2000020c  0800a498  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000da4  0800a498  00020da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d80  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000437d  00000000  00000000  00043fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  00048340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001828  00000000  00000000  00049d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b1ad  00000000  00000000  0004b538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc3e  00000000  00000000  000766e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa3ef  00000000  00000000  00094323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018e712  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000707c  00000000  00000000  0018e768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a18c 	.word	0x0800a18c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	0800a18c 	.word	0x0800a18c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800057e:	2300      	movs	r3, #0
 8000580:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000582:	2003      	movs	r0, #3
 8000584:	f000 f960 	bl	8000848 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000588:	2000      	movs	r0, #0
 800058a:	f000 f80d 	bl	80005a8 <HAL_InitTick>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d002      	beq.n	800059a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000594:	2301      	movs	r3, #1
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	e001      	b.n	800059e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800059a:	f008 fa13 	bl	80089c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800059e:	79fb      	ldrb	r3, [r7, #7]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005b0:	2300      	movs	r3, #0
 80005b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005b4:	4b17      	ldr	r3, [pc, #92]	; (8000614 <HAL_InitTick+0x6c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d023      	beq.n	8000604 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_InitTick+0x70>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <HAL_InitTick+0x6c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f96d 	bl	80008b2 <HAL_SYSTICK_Config>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d10f      	bne.n	80005fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b0f      	cmp	r3, #15
 80005e2:	d809      	bhi.n	80005f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e4:	2200      	movs	r2, #0
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ec:	f000 f937 	bl	800085e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005f0:	4a0a      	ldr	r2, [pc, #40]	; (800061c <HAL_InitTick+0x74>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	e007      	b.n	8000608 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005f8:	2301      	movs	r3, #1
 80005fa:	73fb      	strb	r3, [r7, #15]
 80005fc:	e004      	b.n	8000608 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	e001      	b.n	8000608 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000608:	7bfb      	ldrb	r3, [r7, #15]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000004 	.word	0x20000004
 8000618:	20000144 	.word	0x20000144
 800061c:	20000000 	.word	0x20000000

08000620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_IncTick+0x20>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x24>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4413      	add	r3, r2
 8000630:	4a04      	ldr	r2, [pc, #16]	; (8000644 <HAL_IncTick+0x24>)
 8000632:	6013      	str	r3, [r2, #0]
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000004 	.word	0x20000004
 8000644:	20000258 	.word	0x20000258

08000648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return uwTick;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <HAL_GetTick+0x14>)
 800064e:	681b      	ldr	r3, [r3, #0]
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000258 	.word	0x20000258

08000660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000668:	f7ff ffee 	bl	8000648 <HAL_GetTick>
 800066c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000678:	d005      	beq.n	8000686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_Delay+0x44>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	4413      	add	r3, r2
 8000684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000686:	bf00      	nop
 8000688:	f7ff ffde 	bl	8000648 <HAL_GetTick>
 800068c:	4602      	mov	r2, r0
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	429a      	cmp	r2, r3
 8000696:	d8f7      	bhi.n	8000688 <HAL_Delay+0x28>
  {
  }
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000004 	.word	0x20000004

080006a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c4:	4013      	ands	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006da:	4a04      	ldr	r2, [pc, #16]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	60d3      	str	r3, [r2, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <__NVIC_GetPriorityGrouping+0x18>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	f003 0307 	and.w	r3, r3, #7
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db0b      	blt.n	8000736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f003 021f 	and.w	r2, r3, #31
 8000724:	4907      	ldr	r1, [pc, #28]	; (8000744 <__NVIC_EnableIRQ+0x38>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	095b      	lsrs	r3, r3, #5
 800072c:	2001      	movs	r0, #1
 800072e:	fa00 f202 	lsl.w	r2, r0, r2
 8000732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e100 	.word	0xe000e100

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db0a      	blt.n	8000772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	490c      	ldr	r1, [pc, #48]	; (8000794 <__NVIC_SetPriority+0x4c>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	440b      	add	r3, r1
 800076c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000770:	e00a      	b.n	8000788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4908      	ldr	r1, [pc, #32]	; (8000798 <__NVIC_SetPriority+0x50>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	3b04      	subs	r3, #4
 8000780:	0112      	lsls	r2, r2, #4
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	440b      	add	r3, r1
 8000786:	761a      	strb	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf28      	it	cs
 80007ba:	2304      	movcs	r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d902      	bls.n	80007cc <NVIC_EncodePriority+0x30>
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	e000      	b.n	80007ce <NVIC_EncodePriority+0x32>
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43da      	mvns	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e4:	f04f 31ff 	mov.w	r1, #4294967295
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43d9      	mvns	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	4313      	orrs	r3, r2
         );
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	; 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000814:	d301      	bcc.n	800081a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000816:	2301      	movs	r3, #1
 8000818:	e00f      	b.n	800083a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081a:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <SysTick_Config+0x40>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000822:	210f      	movs	r1, #15
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	f7ff ff8e 	bl	8000748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <SysTick_Config+0x40>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <SysTick_Config+0x40>)
 8000834:	2207      	movs	r2, #7
 8000836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	e000e010 	.word	0xe000e010

08000848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ff29 	bl	80006a8 <__NVIC_SetPriorityGrouping>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b086      	sub	sp, #24
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000870:	f7ff ff3e 	bl	80006f0 <__NVIC_GetPriorityGrouping>
 8000874:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	68b9      	ldr	r1, [r7, #8]
 800087a:	6978      	ldr	r0, [r7, #20]
 800087c:	f7ff ff8e 	bl	800079c <NVIC_EncodePriority>
 8000880:	4602      	mov	r2, r0
 8000882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff5d 	bl	8000748 <__NVIC_SetPriority>
}
 800088e:	bf00      	nop
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff31 	bl	800070c <__NVIC_EnableIRQ>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ffa2 	bl	8000804 <SysTick_Config>
 80008c0:	4603      	mov	r3, r0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b087      	sub	sp, #28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008da:	e17f      	b.n	8000bdc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	2101      	movs	r1, #1
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	fa01 f303 	lsl.w	r3, r1, r3
 80008e8:	4013      	ands	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f000 8171 	beq.w	8000bd6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d00b      	beq.n	8000914 <HAL_GPIO_Init+0x48>
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	2b02      	cmp	r3, #2
 8000902:	d007      	beq.n	8000914 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000908:	2b11      	cmp	r3, #17
 800090a:	d003      	beq.n	8000914 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b12      	cmp	r3, #18
 8000912:	d130      	bne.n	8000976 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	2203      	movs	r2, #3
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	4013      	ands	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	68da      	ldr	r2, [r3, #12]
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	4313      	orrs	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800094a:	2201      	movs	r2, #1
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43db      	mvns	r3, r3
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4013      	ands	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	091b      	lsrs	r3, r3, #4
 8000960:	f003 0201 	and.w	r2, r3, #1
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f003 0303 	and.w	r3, r3, #3
 800097e:	2b03      	cmp	r3, #3
 8000980:	d118      	bne.n	80009b4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000986:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000988:	2201      	movs	r2, #1
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	08db      	lsrs	r3, r3, #3
 800099e:	f003 0201 	and.w	r2, r3, #1
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	2203      	movs	r2, #3
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	689a      	ldr	r2, [r3, #8]
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4313      	orrs	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d003      	beq.n	80009f4 <HAL_GPIO_Init+0x128>
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2b12      	cmp	r3, #18
 80009f2:	d123      	bne.n	8000a3c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	08da      	lsrs	r2, r3, #3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3208      	adds	r2, #8
 80009fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	f003 0307 	and.w	r3, r3, #7
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	691a      	ldr	r2, [r3, #16]
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	08da      	lsrs	r2, r3, #3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3208      	adds	r2, #8
 8000a36:	6939      	ldr	r1, [r7, #16]
 8000a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	2203      	movs	r2, #3
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 0203 	and.w	r2, r3, #3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	f000 80ac 	beq.w	8000bd6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b5f      	ldr	r3, [pc, #380]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	4a5e      	ldr	r2, [pc, #376]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8a:	4b5c      	ldr	r3, [pc, #368]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a96:	4a5a      	ldr	r2, [pc, #360]	; (8000c00 <HAL_GPIO_Init+0x334>)
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	089b      	lsrs	r3, r3, #2
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	f003 0303 	and.w	r3, r3, #3
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	220f      	movs	r2, #15
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ac0:	d025      	beq.n	8000b0e <HAL_GPIO_Init+0x242>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a4f      	ldr	r2, [pc, #316]	; (8000c04 <HAL_GPIO_Init+0x338>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d01f      	beq.n	8000b0a <HAL_GPIO_Init+0x23e>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a4e      	ldr	r2, [pc, #312]	; (8000c08 <HAL_GPIO_Init+0x33c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d019      	beq.n	8000b06 <HAL_GPIO_Init+0x23a>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a4d      	ldr	r2, [pc, #308]	; (8000c0c <HAL_GPIO_Init+0x340>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d013      	beq.n	8000b02 <HAL_GPIO_Init+0x236>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a4c      	ldr	r2, [pc, #304]	; (8000c10 <HAL_GPIO_Init+0x344>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d00d      	beq.n	8000afe <HAL_GPIO_Init+0x232>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a4b      	ldr	r2, [pc, #300]	; (8000c14 <HAL_GPIO_Init+0x348>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d007      	beq.n	8000afa <HAL_GPIO_Init+0x22e>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a4a      	ldr	r2, [pc, #296]	; (8000c18 <HAL_GPIO_Init+0x34c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d101      	bne.n	8000af6 <HAL_GPIO_Init+0x22a>
 8000af2:	2306      	movs	r3, #6
 8000af4:	e00c      	b.n	8000b10 <HAL_GPIO_Init+0x244>
 8000af6:	2307      	movs	r3, #7
 8000af8:	e00a      	b.n	8000b10 <HAL_GPIO_Init+0x244>
 8000afa:	2305      	movs	r3, #5
 8000afc:	e008      	b.n	8000b10 <HAL_GPIO_Init+0x244>
 8000afe:	2304      	movs	r3, #4
 8000b00:	e006      	b.n	8000b10 <HAL_GPIO_Init+0x244>
 8000b02:	2303      	movs	r3, #3
 8000b04:	e004      	b.n	8000b10 <HAL_GPIO_Init+0x244>
 8000b06:	2302      	movs	r3, #2
 8000b08:	e002      	b.n	8000b10 <HAL_GPIO_Init+0x244>
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e000      	b.n	8000b10 <HAL_GPIO_Init+0x244>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	f002 0203 	and.w	r2, r2, #3
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	4093      	lsls	r3, r2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b20:	4937      	ldr	r1, [pc, #220]	; (8000c00 <HAL_GPIO_Init+0x334>)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	3302      	adds	r3, #2
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b2e:	4b3b      	ldr	r3, [pc, #236]	; (8000c1c <HAL_GPIO_Init+0x350>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b52:	4a32      	ldr	r2, [pc, #200]	; (8000c1c <HAL_GPIO_Init+0x350>)
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b58:	4b30      	ldr	r3, [pc, #192]	; (8000c1c <HAL_GPIO_Init+0x350>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b7c:	4a27      	ldr	r2, [pc, #156]	; (8000c1c <HAL_GPIO_Init+0x350>)
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b82:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <HAL_GPIO_Init+0x350>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ba6:	4a1d      	ldr	r2, [pc, #116]	; (8000c1c <HAL_GPIO_Init+0x350>)
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <HAL_GPIO_Init+0x350>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bd0:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <HAL_GPIO_Init+0x350>)
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa22 f303 	lsr.w	r3, r2, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f47f ae78 	bne.w	80008dc <HAL_GPIO_Init+0x10>
  }
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	371c      	adds	r7, #28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010000 	.word	0x40010000
 8000c04:	48000400 	.word	0x48000400
 8000c08:	48000800 	.word	0x48000800
 8000c0c:	48000c00 	.word	0x48000c00
 8000c10:	48001000 	.word	0x48001000
 8000c14:	48001400 	.word	0x48001400
 8000c18:	48001800 	.word	0x48001800
 8000c1c:	40010400 	.word	0x40010400

08000c20 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000c2e:	e0cd      	b.n	8000dcc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000c30:	2201      	movs	r2, #1
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 80c0 	beq.w	8000dc6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000c46:	4a68      	ldr	r2, [pc, #416]	; (8000de8 <HAL_GPIO_DeInit+0x1c8>)
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	089b      	lsrs	r3, r3, #2
 8000c4c:	3302      	adds	r3, #2
 8000c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c52:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	220f      	movs	r2, #15
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c6e:	d025      	beq.n	8000cbc <HAL_GPIO_DeInit+0x9c>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a5e      	ldr	r2, [pc, #376]	; (8000dec <HAL_GPIO_DeInit+0x1cc>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d01f      	beq.n	8000cb8 <HAL_GPIO_DeInit+0x98>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a5d      	ldr	r2, [pc, #372]	; (8000df0 <HAL_GPIO_DeInit+0x1d0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d019      	beq.n	8000cb4 <HAL_GPIO_DeInit+0x94>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a5c      	ldr	r2, [pc, #368]	; (8000df4 <HAL_GPIO_DeInit+0x1d4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d013      	beq.n	8000cb0 <HAL_GPIO_DeInit+0x90>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a5b      	ldr	r2, [pc, #364]	; (8000df8 <HAL_GPIO_DeInit+0x1d8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d00d      	beq.n	8000cac <HAL_GPIO_DeInit+0x8c>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a5a      	ldr	r2, [pc, #360]	; (8000dfc <HAL_GPIO_DeInit+0x1dc>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d007      	beq.n	8000ca8 <HAL_GPIO_DeInit+0x88>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a59      	ldr	r2, [pc, #356]	; (8000e00 <HAL_GPIO_DeInit+0x1e0>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d101      	bne.n	8000ca4 <HAL_GPIO_DeInit+0x84>
 8000ca0:	2306      	movs	r3, #6
 8000ca2:	e00c      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	e00a      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000ca8:	2305      	movs	r3, #5
 8000caa:	e008      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000cac:	2304      	movs	r3, #4
 8000cae:	e006      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e004      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	e002      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e000      	b.n	8000cbe <HAL_GPIO_DeInit+0x9e>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	f002 0203 	and.w	r2, r2, #3
 8000cc4:	0092      	lsls	r2, r2, #2
 8000cc6:	4093      	lsls	r3, r2
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d132      	bne.n	8000d34 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000cce:	4b4d      	ldr	r3, [pc, #308]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	494b      	ldr	r1, [pc, #300]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8000cdc:	4b49      	ldr	r3, [pc, #292]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	4947      	ldr	r1, [pc, #284]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8000cea:	4b46      	ldr	r3, [pc, #280]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	4944      	ldr	r1, [pc, #272]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8000cf8:	4b42      	ldr	r3, [pc, #264]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	4940      	ldr	r1, [pc, #256]	; (8000e04 <HAL_GPIO_DeInit+0x1e4>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	220f      	movs	r2, #15
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000d16:	4a34      	ldr	r2, [pc, #208]	; (8000de8 <HAL_GPIO_DeInit+0x1c8>)
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	43da      	mvns	r2, r3
 8000d26:	4830      	ldr	r0, [pc, #192]	; (8000de8 <HAL_GPIO_DeInit+0x1c8>)
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	3302      	adds	r3, #2
 8000d30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	08da      	lsrs	r2, r3, #3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3208      	adds	r2, #8
 8000d50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	08d2      	lsrs	r2, r2, #3
 8000d68:	4019      	ands	r1, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3208      	adds	r2, #8
 8000d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2103      	movs	r1, #3
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	401a      	ands	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	fa01 f303 	lsl.w	r3, r1, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	401a      	ands	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2103      	movs	r1, #3
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	401a      	ands	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db6:	2101      	movs	r1, #1
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f47f af2b 	bne.w	8000c30 <HAL_GPIO_DeInit+0x10>
  }
}
 8000dda:	bf00      	nop
 8000ddc:	bf00      	nop
 8000dde:	371c      	adds	r7, #28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	40010000 	.word	0x40010000
 8000dec:	48000400 	.word	0x48000400
 8000df0:	48000800 	.word	0x48000800
 8000df4:	48000c00 	.word	0x48000c00
 8000df8:	48001000 	.word	0x48001000
 8000dfc:	48001400 	.word	0x48001400
 8000e00:	48001800 	.word	0x48001800
 8000e04:	40010400 	.word	0x40010400

08000e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	807b      	strh	r3, [r7, #2]
 8000e14:	4613      	mov	r3, r2
 8000e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e18:	787b      	ldrb	r3, [r7, #1]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e1e:	887a      	ldrh	r2, [r7, #2]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e24:	e002      	b.n	8000e2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e26:	887a      	ldrh	r2, [r7, #2]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	88fb      	ldrh	r3, [r7, #6]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d006      	beq.n	8000e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f007 fbbc 	bl	80085d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40010400 	.word	0x40010400

08000e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e081      	b.n	8000f7e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d106      	bne.n	8000e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f007 fdbc 	bl	8008a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2224      	movs	r2, #36	; 0x24
 8000e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 0201 	bic.w	r2, r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000eb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ec8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d107      	bne.n	8000ee2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	e006      	b.n	8000ef0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000eee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d104      	bne.n	8000f02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	6812      	ldr	r2, [r2, #0]
 8000f0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	ea42 0103 	orr.w	r1, r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	021a      	lsls	r2, r3, #8
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69d9      	ldr	r1, [r3, #28]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a1a      	ldr	r2, [r3, #32]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 0201 	orr.w	r2, r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2220      	movs	r2, #32
 8000f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e021      	b.n	8000fdc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2224      	movs	r2, #36	; 0x24
 8000f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0201 	bic.w	r2, r2, #1
 8000fae:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f007 fd89 	bl	8008ac8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	4608      	mov	r0, r1
 8000fee:	4611      	mov	r1, r2
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	817b      	strh	r3, [r7, #10]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	813b      	strh	r3, [r7, #8]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b20      	cmp	r3, #32
 8001008:	f040 80f9 	bne.w	80011fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <HAL_I2C_Mem_Write+0x34>
 8001012:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001014:	2b00      	cmp	r3, #0
 8001016:	d105      	bne.n	8001024 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e0ed      	b.n	8001200 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800102a:	2b01      	cmp	r3, #1
 800102c:	d101      	bne.n	8001032 <HAL_I2C_Mem_Write+0x4e>
 800102e:	2302      	movs	r3, #2
 8001030:	e0e6      	b.n	8001200 <HAL_I2C_Mem_Write+0x21c>
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2201      	movs	r2, #1
 8001036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800103a:	f7ff fb05 	bl	8000648 <HAL_GetTick>
 800103e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2319      	movs	r3, #25
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 fac3 	bl	80015d8 <I2C_WaitOnFlagUntilTimeout>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e0d1      	b.n	8001200 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2221      	movs	r2, #33	; 0x21
 8001060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2240      	movs	r2, #64	; 0x40
 8001068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2200      	movs	r2, #0
 8001070:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6a3a      	ldr	r2, [r7, #32]
 8001076:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800107c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2200      	movs	r2, #0
 8001082:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001084:	88f8      	ldrh	r0, [r7, #6]
 8001086:	893a      	ldrh	r2, [r7, #8]
 8001088:	8979      	ldrh	r1, [r7, #10]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	4603      	mov	r3, r0
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f9d3 	bl	8001440 <I2C_RequestMemoryWrite>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e0a9      	b.n	8001200 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	2bff      	cmp	r3, #255	; 0xff
 80010b4:	d90e      	bls.n	80010d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	22ff      	movs	r2, #255	; 0xff
 80010ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	8979      	ldrh	r1, [r7, #10]
 80010c4:	2300      	movs	r3, #0
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f000 fba5 	bl	800181c <I2C_TransferConfig>
 80010d2:	e00f      	b.n	80010f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010d8:	b29a      	uxth	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	8979      	ldrh	r1, [r7, #10]
 80010e6:	2300      	movs	r3, #0
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f000 fb94 	bl	800181c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f000 faad 	bl	8001658 <I2C_WaitOnTXISFlagUntilTimeout>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e07b      	b.n	8001200 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	781a      	ldrb	r2, [r3, #0]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001122:	b29b      	uxth	r3, r3
 8001124:	3b01      	subs	r3, #1
 8001126:	b29a      	uxth	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001130:	3b01      	subs	r3, #1
 8001132:	b29a      	uxth	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800113c:	b29b      	uxth	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d034      	beq.n	80011ac <HAL_I2C_Mem_Write+0x1c8>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001146:	2b00      	cmp	r3, #0
 8001148:	d130      	bne.n	80011ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001150:	2200      	movs	r2, #0
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f000 fa3f 	bl	80015d8 <I2C_WaitOnFlagUntilTimeout>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e04d      	b.n	8001200 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001168:	b29b      	uxth	r3, r3
 800116a:	2bff      	cmp	r3, #255	; 0xff
 800116c:	d90e      	bls.n	800118c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	22ff      	movs	r2, #255	; 0xff
 8001172:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001178:	b2da      	uxtb	r2, r3
 800117a:	8979      	ldrh	r1, [r7, #10]
 800117c:	2300      	movs	r3, #0
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f000 fb49 	bl	800181c <I2C_TransferConfig>
 800118a:	e00f      	b.n	80011ac <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001190:	b29a      	uxth	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800119a:	b2da      	uxtb	r2, r3
 800119c:	8979      	ldrh	r1, [r7, #10]
 800119e:	2300      	movs	r3, #0
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f000 fb38 	bl	800181c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d19e      	bne.n	80010f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f000 fa8c 	bl	80016d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e01a      	b.n	8001200 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2220      	movs	r2, #32
 80011d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6859      	ldr	r1, [r3, #4]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_I2C_Mem_Write+0x224>)
 80011de:	400b      	ands	r3, r1
 80011e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2220      	movs	r2, #32
 80011e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e000      	b.n	8001200 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80011fe:	2302      	movs	r3, #2
  }
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	fe00e800 	.word	0xfe00e800

0800120c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af02      	add	r7, sp, #8
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	4608      	mov	r0, r1
 8001216:	4611      	mov	r1, r2
 8001218:	461a      	mov	r2, r3
 800121a:	4603      	mov	r3, r0
 800121c:	817b      	strh	r3, [r7, #10]
 800121e:	460b      	mov	r3, r1
 8001220:	813b      	strh	r3, [r7, #8]
 8001222:	4613      	mov	r3, r2
 8001224:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b20      	cmp	r3, #32
 8001230:	f040 80fd 	bne.w	800142e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <HAL_I2C_Mem_Read+0x34>
 800123a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800123c:	2b00      	cmp	r3, #0
 800123e:	d105      	bne.n	800124c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001246:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e0f1      	b.n	8001430 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001252:	2b01      	cmp	r3, #1
 8001254:	d101      	bne.n	800125a <HAL_I2C_Mem_Read+0x4e>
 8001256:	2302      	movs	r3, #2
 8001258:	e0ea      	b.n	8001430 <HAL_I2C_Mem_Read+0x224>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001262:	f7ff f9f1 	bl	8000648 <HAL_GetTick>
 8001266:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2319      	movs	r3, #25
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 f9af 	bl	80015d8 <I2C_WaitOnFlagUntilTimeout>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e0d5      	b.n	8001430 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2222      	movs	r2, #34	; 0x22
 8001288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2240      	movs	r2, #64	; 0x40
 8001290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2200      	movs	r2, #0
 8001298:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6a3a      	ldr	r2, [r7, #32]
 800129e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80012a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012ac:	88f8      	ldrh	r0, [r7, #6]
 80012ae:	893a      	ldrh	r2, [r7, #8]
 80012b0:	8979      	ldrh	r1, [r7, #10]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	4603      	mov	r3, r0
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f000 f913 	bl	80014e8 <I2C_RequestMemoryRead>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e0ad      	b.n	8001430 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012d8:	b29b      	uxth	r3, r3
 80012da:	2bff      	cmp	r3, #255	; 0xff
 80012dc:	d90e      	bls.n	80012fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	22ff      	movs	r2, #255	; 0xff
 80012e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	8979      	ldrh	r1, [r7, #10]
 80012ec:	4b52      	ldr	r3, [pc, #328]	; (8001438 <HAL_I2C_Mem_Read+0x22c>)
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f000 fa91 	bl	800181c <I2C_TransferConfig>
 80012fa:	e00f      	b.n	800131c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001300:	b29a      	uxth	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800130a:	b2da      	uxtb	r2, r3
 800130c:	8979      	ldrh	r1, [r7, #10]
 800130e:	4b4a      	ldr	r3, [pc, #296]	; (8001438 <HAL_I2C_Mem_Read+0x22c>)
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 fa80 	bl	800181c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001322:	2200      	movs	r2, #0
 8001324:	2104      	movs	r1, #4
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 f956 	bl	80015d8 <I2C_WaitOnFlagUntilTimeout>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e07c      	b.n	8001430 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001352:	3b01      	subs	r3, #1
 8001354:	b29a      	uxth	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800135e:	b29b      	uxth	r3, r3
 8001360:	3b01      	subs	r3, #1
 8001362:	b29a      	uxth	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800136c:	b29b      	uxth	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d034      	beq.n	80013dc <HAL_I2C_Mem_Read+0x1d0>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001376:	2b00      	cmp	r3, #0
 8001378:	d130      	bne.n	80013dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001380:	2200      	movs	r2, #0
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f000 f927 	bl	80015d8 <I2C_WaitOnFlagUntilTimeout>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e04d      	b.n	8001430 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001398:	b29b      	uxth	r3, r3
 800139a:	2bff      	cmp	r3, #255	; 0xff
 800139c:	d90e      	bls.n	80013bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	22ff      	movs	r2, #255	; 0xff
 80013a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	8979      	ldrh	r1, [r7, #10]
 80013ac:	2300      	movs	r3, #0
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f000 fa31 	bl	800181c <I2C_TransferConfig>
 80013ba:	e00f      	b.n	80013dc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	8979      	ldrh	r1, [r7, #10]
 80013ce:	2300      	movs	r3, #0
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 fa20 	bl	800181c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d19a      	bne.n	800131c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f000 f974 	bl	80016d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e01a      	b.n	8001430 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2220      	movs	r2, #32
 8001400:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6859      	ldr	r1, [r3, #4]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <HAL_I2C_Mem_Read+0x230>)
 800140e:	400b      	ands	r3, r1
 8001410:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2220      	movs	r2, #32
 8001416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800142e:	2302      	movs	r3, #2
  }
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	80002400 	.word	0x80002400
 800143c:	fe00e800 	.word	0xfe00e800

08001440 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af02      	add	r7, sp, #8
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	4608      	mov	r0, r1
 800144a:	4611      	mov	r1, r2
 800144c:	461a      	mov	r2, r3
 800144e:	4603      	mov	r3, r0
 8001450:	817b      	strh	r3, [r7, #10]
 8001452:	460b      	mov	r3, r1
 8001454:	813b      	strh	r3, [r7, #8]
 8001456:	4613      	mov	r3, r2
 8001458:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	8979      	ldrh	r1, [r7, #10]
 8001460:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <I2C_RequestMemoryWrite+0xa4>)
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f000 f9d7 	bl	800181c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	69b9      	ldr	r1, [r7, #24]
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f000 f8f0 	bl	8001658 <I2C_WaitOnTXISFlagUntilTimeout>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e02c      	b.n	80014dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d105      	bne.n	8001494 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001488:	893b      	ldrh	r3, [r7, #8]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
 8001492:	e015      	b.n	80014c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001494:	893b      	ldrh	r3, [r7, #8]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	b2da      	uxtb	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	69b9      	ldr	r1, [r7, #24]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 f8d6 	bl	8001658 <I2C_WaitOnTXISFlagUntilTimeout>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e012      	b.n	80014dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014b6:	893b      	ldrh	r3, [r7, #8]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	2200      	movs	r2, #0
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 f884 	bl	80015d8 <I2C_WaitOnFlagUntilTimeout>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	80002000 	.word	0x80002000

080014e8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	4608      	mov	r0, r1
 80014f2:	4611      	mov	r1, r2
 80014f4:	461a      	mov	r2, r3
 80014f6:	4603      	mov	r3, r0
 80014f8:	817b      	strh	r3, [r7, #10]
 80014fa:	460b      	mov	r3, r1
 80014fc:	813b      	strh	r3, [r7, #8]
 80014fe:	4613      	mov	r3, r2
 8001500:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	8979      	ldrh	r1, [r7, #10]
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <I2C_RequestMemoryRead+0xa4>)
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2300      	movs	r3, #0
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 f984 	bl	800181c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	69b9      	ldr	r1, [r7, #24]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 f89d 	bl	8001658 <I2C_WaitOnTXISFlagUntilTimeout>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e02c      	b.n	8001582 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d105      	bne.n	800153a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800152e:	893b      	ldrh	r3, [r7, #8]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
 8001538:	e015      	b.n	8001566 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800153a:	893b      	ldrh	r3, [r7, #8]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	b29b      	uxth	r3, r3
 8001540:	b2da      	uxtb	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	69b9      	ldr	r1, [r7, #24]
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f883 	bl	8001658 <I2C_WaitOnTXISFlagUntilTimeout>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e012      	b.n	8001582 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800155c:	893b      	ldrh	r3, [r7, #8]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	2200      	movs	r2, #0
 800156e:	2140      	movs	r1, #64	; 0x40
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 f831 	bl	80015d8 <I2C_WaitOnFlagUntilTimeout>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	80002000 	.word	0x80002000

08001590 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d103      	bne.n	80015ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d007      	beq.n	80015cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	699a      	ldr	r2, [r3, #24]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0201 	orr.w	r2, r2, #1
 80015ca:	619a      	str	r2, [r3, #24]
  }
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	4613      	mov	r3, r2
 80015e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015e8:	e022      	b.n	8001630 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d01e      	beq.n	8001630 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015f2:	f7ff f829 	bl	8000648 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d302      	bcc.n	8001608 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d113      	bne.n	8001630 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160c:	f043 0220 	orr.w	r2, r3, #32
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2220      	movs	r2, #32
 8001618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e00f      	b.n	8001650 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	699a      	ldr	r2, [r3, #24]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	4013      	ands	r3, r2
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	429a      	cmp	r2, r3
 800163e:	bf0c      	ite	eq
 8001640:	2301      	moveq	r3, #1
 8001642:	2300      	movne	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	461a      	mov	r2, r3
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	429a      	cmp	r2, r3
 800164c:	d0cd      	beq.n	80015ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001664:	e02c      	b.n	80016c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f000 f870 	bl	8001750 <I2C_IsAcknowledgeFailed>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e02a      	b.n	80016d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001680:	d01e      	beq.n	80016c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001682:	f7fe ffe1 	bl	8000648 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	429a      	cmp	r2, r3
 8001690:	d302      	bcc.n	8001698 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d113      	bne.n	80016c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	f043 0220 	orr.w	r2, r3, #32
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2220      	movs	r2, #32
 80016a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e007      	b.n	80016d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d1cb      	bne.n	8001666 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016e4:	e028      	b.n	8001738 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f830 	bl	8001750 <I2C_IsAcknowledgeFailed>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e026      	b.n	8001748 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016fa:	f7fe ffa5 	bl	8000648 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	429a      	cmp	r2, r3
 8001708:	d302      	bcc.n	8001710 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d113      	bne.n	8001738 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001714:	f043 0220 	orr.w	r2, r3, #32
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2220      	movs	r2, #32
 8001720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e007      	b.n	8001748 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	f003 0320 	and.w	r3, r3, #32
 8001742:	2b20      	cmp	r3, #32
 8001744:	d1cf      	bne.n	80016e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b10      	cmp	r3, #16
 8001768:	d151      	bne.n	800180e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800176a:	e022      	b.n	80017b2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001772:	d01e      	beq.n	80017b2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001774:	f7fe ff68 	bl	8000648 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	429a      	cmp	r2, r3
 8001782:	d302      	bcc.n	800178a <I2C_IsAcknowledgeFailed+0x3a>
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d113      	bne.n	80017b2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f043 0220 	orr.w	r2, r3, #32
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2220      	movs	r2, #32
 800179a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e02e      	b.n	8001810 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0320 	and.w	r3, r3, #32
 80017bc:	2b20      	cmp	r3, #32
 80017be:	d1d5      	bne.n	800176c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2210      	movs	r2, #16
 80017c6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2220      	movs	r2, #32
 80017ce:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f7ff fedd 	bl	8001590 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6859      	ldr	r1, [r3, #4]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <I2C_IsAcknowledgeFailed+0xc8>)
 80017e2:	400b      	ands	r3, r1
 80017e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f043 0204 	orr.w	r2, r3, #4
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2220      	movs	r2, #32
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	fe00e800 	.word	0xfe00e800

0800181c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	460b      	mov	r3, r1
 8001828:	817b      	strh	r3, [r7, #10]
 800182a:	4613      	mov	r3, r2
 800182c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	0d5b      	lsrs	r3, r3, #21
 8001838:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800183c:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <I2C_TransferConfig+0x58>)
 800183e:	430b      	orrs	r3, r1
 8001840:	43db      	mvns	r3, r3
 8001842:	ea02 0103 	and.w	r1, r2, r3
 8001846:	897b      	ldrh	r3, [r7, #10]
 8001848:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800184c:	7a7b      	ldrb	r3, [r7, #9]
 800184e:	041b      	lsls	r3, r3, #16
 8001850:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	431a      	orrs	r2, r3
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	431a      	orrs	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	03ff63ff 	.word	0x03ff63ff

08001878 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b20      	cmp	r3, #32
 800188c:	d138      	bne.n	8001900 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001898:	2302      	movs	r3, #2
 800189a:	e032      	b.n	8001902 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2224      	movs	r2, #36	; 0x24
 80018a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0201 	bic.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6819      	ldr	r1, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2220      	movs	r2, #32
 80018f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	e000      	b.n	8001902 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001900:	2302      	movs	r3, #2
  }
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800190e:	b480      	push	{r7}
 8001910:	b085      	sub	sp, #20
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b20      	cmp	r3, #32
 8001922:	d139      	bne.n	8001998 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800192e:	2302      	movs	r3, #2
 8001930:	e033      	b.n	800199a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2224      	movs	r2, #36	; 0x24
 800193e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0201 	bic.w	r2, r2, #1
 8001950:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001960:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2220      	movs	r2, #32
 8001988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	e000      	b.n	800199a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001998:	2302      	movs	r3, #2
  }
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a8:	b08f      	sub	sp, #60	; 0x3c
 80019aa:	af0a      	add	r7, sp, #40	; 0x28
 80019ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e116      	b.n	8001be6 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f007 f9fe 	bl	8008dd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2203      	movs	r2, #3
 80019dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fdd5 	bl	80055a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	687e      	ldr	r6, [r7, #4]
 8001a04:	466d      	mov	r5, sp
 8001a06:	f106 0410 	add.w	r4, r6, #16
 8001a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a16:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a1a:	1d33      	adds	r3, r6, #4
 8001a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a1e:	6838      	ldr	r0, [r7, #0]
 8001a20:	f003 fce7 	bl	80053f2 <USB_CoreInit>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d005      	beq.n	8001a36 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e0d7      	b.n	8001be6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 fdc3 	bl	80055c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	e04a      	b.n	8001ade <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	333d      	adds	r3, #61	; 0x3d
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a5c:	7bfa      	ldrb	r2, [r7, #15]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	1a9b      	subs	r3, r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	333c      	adds	r3, #60	; 0x3c
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a70:	7bfa      	ldrb	r2, [r7, #15]
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	b298      	uxth	r0, r3
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	3342      	adds	r3, #66	; 0x42
 8001a84:	4602      	mov	r2, r0
 8001a86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a88:	7bfa      	ldrb	r2, [r7, #15]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	1a9b      	subs	r3, r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	333f      	adds	r3, #63	; 0x3f
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3344      	adds	r3, #68	; 0x44
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	1a9b      	subs	r3, r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	3348      	adds	r3, #72	; 0x48
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3350      	adds	r3, #80	; 0x50
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	3301      	adds	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	7bfa      	ldrb	r2, [r7, #15]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d3af      	bcc.n	8001a48 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]
 8001aec:	e044      	b.n	8001b78 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aee:	7bfa      	ldrb	r2, [r7, #15]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	1a9b      	subs	r3, r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b30:	7bfa      	ldrb	r2, [r7, #15]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b46:	7bfa      	ldrb	r2, [r7, #15]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	1a9b      	subs	r3, r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	3301      	adds	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	7bfa      	ldrb	r2, [r7, #15]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d3b5      	bcc.n	8001aee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	687e      	ldr	r6, [r7, #4]
 8001b8a:	466d      	mov	r5, sp
 8001b8c:	f106 0410 	add.w	r4, r6, #16
 8001b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ba0:	1d33      	adds	r3, r6, #4
 8001ba2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ba4:	6838      	ldr	r0, [r7, #0]
 8001ba6:	f003 fd39 	bl	800561c <USB_DevInit>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e014      	b.n	8001be6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d102      	bne.n	8001bda <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 ff49 	bl	8002a6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f004 fcbb 	bl	800655a <USB_DevDisconnect>

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_PCD_Start+0x1c>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e01c      	b.n	8001c44 <HAL_PCD_Start+0x56>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d105      	bne.n	8001c26 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 fcaa 	bl	8005584 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f004 fc6f 	bl	8006518 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b08d      	sub	sp, #52	; 0x34
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 fd2d 	bl	80066c2 <USB_GetMode>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f040 838f 	bne.w	800238e <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 fc91 	bl	800659c <USB_ReadInterrupts>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 8385 	beq.w	800238c <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f004 fc88 	bl	800659c <USB_ReadInterrupts>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d107      	bne.n	8001ca6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695a      	ldr	r2, [r3, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f002 0202 	and.w	r2, r2, #2
 8001ca4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f004 fc76 	bl	800659c <USB_ReadInterrupts>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d161      	bne.n	8001d7e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	699a      	ldr	r2, [r3, #24]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0210 	bic.w	r2, r2, #16
 8001cc8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	f003 020f 	and.w	r2, r3, #15
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	0c5b      	lsrs	r3, r3, #17
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d124      	bne.n	8001d40 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d035      	beq.n	8001d6e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	6a38      	ldr	r0, [r7, #32]
 8001d16:	f004 fadc 	bl	80062d2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d26:	441a      	add	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	699a      	ldr	r2, [r3, #24]
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d38:	441a      	add	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	619a      	str	r2, [r3, #24]
 8001d3e:	e016      	b.n	8001d6e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	0c5b      	lsrs	r3, r3, #17
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	2b06      	cmp	r3, #6
 8001d4a:	d110      	bne.n	8001d6e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d52:	2208      	movs	r2, #8
 8001d54:	4619      	mov	r1, r3
 8001d56:	6a38      	ldr	r0, [r7, #32]
 8001d58:	f004 fabb 	bl	80062d2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	699a      	ldr	r2, [r3, #24]
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d68:	441a      	add	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0210 	orr.w	r2, r2, #16
 8001d7c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 fc0a 	bl	800659c <USB_ReadInterrupts>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d92:	d16e      	bne.n	8001e72 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f004 fc10 	bl	80065c2 <USB_ReadDevAllOutEpInterrupt>
 8001da2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001da4:	e062      	b.n	8001e6c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d057      	beq.n	8001e60 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 fc35 	bl	800662a <USB_ReadDevOutEPInterrupt>
 8001dc0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00c      	beq.n	8001de6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2301      	movs	r3, #1
 8001ddc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001dde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fd69 	bl	80028b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00c      	beq.n	8001e0a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	015a      	lsls	r2, r3, #5
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	2308      	movs	r3, #8
 8001e00:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fda5 	bl	8002954 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e20:	461a      	mov	r2, r3
 8001e22:	2310      	movs	r3, #16
 8001e24:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	015a      	lsls	r2, r3, #5
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2320      	movs	r3, #32
 8001e40:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d009      	beq.n	8001e60 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e5e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	3301      	adds	r3, #1
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e68:	085b      	lsrs	r3, r3, #1
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d199      	bne.n	8001da6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f004 fb90 	bl	800659c <USB_ReadInterrupts>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e86:	f040 8087 	bne.w	8001f98 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f004 fbb1 	bl	80065f6 <USB_ReadDevAllInEpInterrupt>
 8001e94:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001e9a:	e07a      	b.n	8001f92 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d06f      	beq.n	8001f86 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f004 fbd8 	bl	8006666 <USB_ReadDevInEPInterrupt>
 8001eb6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d020      	beq.n	8001f04 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	2201      	movs	r2, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69f9      	ldr	r1, [r7, #28]
 8001ede:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	4619      	mov	r1, r3
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f007 f827 	bl	8008f52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d008      	beq.n	8001f20 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	015a      	lsls	r2, r3, #5
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d008      	beq.n	8001f3c <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f36:	461a      	mov	r2, r3
 8001f38:	2310      	movs	r3, #16
 8001f3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f52:	461a      	mov	r2, r3
 8001f54:	2340      	movs	r3, #64	; 0x40
 8001f56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d008      	beq.n	8001f74 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f6e:	461a      	mov	r2, r3
 8001f70:	2302      	movs	r3, #2
 8001f72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 fc11 	bl	80027a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	3301      	adds	r3, #1
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	085b      	lsrs	r3, r3, #1
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d181      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f004 fafd 	bl	800659c <USB_ReadInterrupts>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fac:	d122      	bne.n	8001ff4 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d108      	bne.n	8001fde <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f007 fac0 	bl	800955c <HAL_PCDEx_LPM_Callback>
 8001fdc:	e002      	b.n	8001fe4 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f007 f824 	bl	800902c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ff2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f004 facf 	bl	800659c <USB_ReadInterrupts>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002008:	d112      	bne.n	8002030 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b01      	cmp	r3, #1
 8002018:	d102      	bne.n	8002020 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f006 ffe0 	bl	8008fe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800202e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f004 fab1 	bl	800659c <USB_ReadInterrupts>
 800203a:	4603      	mov	r3, r0
 800203c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002044:	d121      	bne.n	800208a <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695a      	ldr	r2, [r3, #20]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002054:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d111      	bne.n	8002084 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	f003 020f 	and.w	r2, r3, #15
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800207a:	2101      	movs	r1, #1
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f007 fa6d 	bl	800955c <HAL_PCDEx_LPM_Callback>
 8002082:	e002      	b.n	800208a <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f006 ffab 	bl	8008fe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f004 fa84 	bl	800659c <USB_ReadInterrupts>
 8002094:	4603      	mov	r3, r0
 8002096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800209a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800209e:	f040 80c5 	bne.w	800222c <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020b0:	f023 0301 	bic.w	r3, r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2110      	movs	r1, #16
 80020bc:	4618      	mov	r0, r3
 80020be:	f003 fbf9 	bl	80058b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c2:	2300      	movs	r3, #0
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c6:	e056      	b.n	8002176 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d4:	461a      	mov	r2, r3
 80020d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80020dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ec:	0151      	lsls	r1, r2, #5
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	440a      	add	r2, r1
 80020f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020fa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80020fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	4413      	add	r3, r2
 8002104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800210c:	0151      	lsls	r1, r2, #5
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	440a      	add	r2, r1
 8002112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002116:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800211a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	4413      	add	r3, r2
 8002124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002128:	461a      	mov	r2, r3
 800212a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800212e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	4413      	add	r3, r2
 8002138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002140:	0151      	lsls	r1, r2, #5
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	440a      	add	r2, r1
 8002146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800214a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800214e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	4413      	add	r3, r2
 8002158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002160:	0151      	lsls	r1, r2, #5
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	440a      	add	r2, r1
 8002166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800216a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800216e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002172:	3301      	adds	r3, #1
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800217c:	429a      	cmp	r2, r3
 800217e:	d3a3      	bcc.n	80020c8 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800218e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002192:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	2b00      	cmp	r3, #0
 800219a:	d016      	beq.n	80021ca <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021ac:	f043 030b 	orr.w	r3, r3, #11
 80021b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021bc:	69fa      	ldr	r2, [r7, #28]
 80021be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021c2:	f043 030b 	orr.w	r3, r3, #11
 80021c6:	6453      	str	r3, [r2, #68]	; 0x44
 80021c8:	e015      	b.n	80021f6 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021dc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80021e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021f0:	f043 030b 	orr.w	r3, r3, #11
 80021f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002204:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002208:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f004 fa84 	bl	8006724 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800222a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f004 f9b3 	bl	800659c <USB_ReadInterrupts>
 8002236:	4603      	mov	r3, r0
 8002238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800223c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002240:	d124      	bne.n	800228c <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f004 fa49 	bl	80066de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f003 fb90 	bl	8005976 <USB_GetDevSpeed>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681c      	ldr	r4, [r3, #0]
 8002262:	f001 f9ef 	bl	8003644 <HAL_RCC_GetHCLKFreq>
 8002266:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	4620      	mov	r0, r4
 8002272:	f003 f8eb 	bl	800544c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f006 fe93 	bl	8008fa2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695a      	ldr	r2, [r3, #20]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800228a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f004 f983 	bl	800659c <USB_ReadInterrupts>
 8002296:	4603      	mov	r3, r0
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b08      	cmp	r3, #8
 800229e:	d10a      	bne.n	80022b6 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f006 fe70 	bl	8008f86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f002 0208 	and.w	r2, r2, #8
 80022b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f004 f96e 	bl	800659c <USB_ReadInterrupts>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022ca:	d10f      	bne.n	80022ec <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4619      	mov	r1, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f006 fee2 	bl	80090a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f004 f953 	bl	800659c <USB_ReadInterrupts>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002300:	d10f      	bne.n	8002322 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	b2db      	uxtb	r3, r3
 800230a:	4619      	mov	r1, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f006 feb5 	bl	800907c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f004 f938 	bl	800659c <USB_ReadInterrupts>
 800232c:	4603      	mov	r3, r0
 800232e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002336:	d10a      	bne.n	800234e <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f006 fec3 	bl	80090c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800234c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f004 f922 	bl	800659c <USB_ReadInterrupts>
 8002358:	4603      	mov	r3, r0
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b04      	cmp	r3, #4
 8002360:	d115      	bne.n	800238e <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f006 feb3 	bl	80090e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	430a      	orrs	r2, r1
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	e000      	b.n	800238e <HAL_PCD_IRQHandler+0x742>
      return;
 800238c:	bf00      	nop
    }
  }
}
 800238e:	3734      	adds	r7, #52	; 0x34
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}

08002394 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_PCD_SetAddress+0x1a>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e013      	b.n	80023d6 <HAL_PCD_SetAddress+0x42>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	4611      	mov	r1, r2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f004 f880 	bl	80064cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	4608      	mov	r0, r1
 80023e8:	4611      	mov	r1, r2
 80023ea:	461a      	mov	r2, r3
 80023ec:	4603      	mov	r3, r0
 80023ee:	70fb      	strb	r3, [r7, #3]
 80023f0:	460b      	mov	r3, r1
 80023f2:	803b      	strh	r3, [r7, #0]
 80023f4:	4613      	mov	r3, r2
 80023f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002400:	2b00      	cmp	r3, #0
 8002402:	da0f      	bge.n	8002424 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	f003 020f 	and.w	r2, r3, #15
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	3338      	adds	r3, #56	; 0x38
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	3304      	adds	r3, #4
 800241a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	705a      	strb	r2, [r3, #1]
 8002422:	e00f      	b.n	8002444 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	f003 020f 	and.w	r2, r3, #15
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	3304      	adds	r3, #4
 800243c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	b2da      	uxtb	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002450:	883a      	ldrh	r2, [r7, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	78ba      	ldrb	r2, [r7, #2]
 800245a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	785b      	ldrb	r3, [r3, #1]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d004      	beq.n	800246e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800246e:	78bb      	ldrb	r3, [r7, #2]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d102      	bne.n	800247a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_PCD_EP_Open+0xaa>
 8002484:	2302      	movs	r3, #2
 8002486:	e00e      	b.n	80024a6 <HAL_PCD_EP_Open+0xc8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68f9      	ldr	r1, [r7, #12]
 8002496:	4618      	mov	r0, r3
 8002498:	f003 fa8c 	bl	80059b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80024a4:	7afb      	ldrb	r3, [r7, #11]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	460b      	mov	r3, r1
 80024b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	da0f      	bge.n	80024e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	f003 020f 	and.w	r2, r3, #15
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	3338      	adds	r3, #56	; 0x38
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	3304      	adds	r3, #4
 80024d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	705a      	strb	r2, [r3, #1]
 80024e0:	e00f      	b.n	8002502 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	f003 020f 	and.w	r2, r3, #15
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	3304      	adds	r3, #4
 80024fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	b2da      	uxtb	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_PCD_EP_Close+0x6e>
 8002518:	2302      	movs	r3, #2
 800251a:	e00e      	b.n	800253a <HAL_PCD_EP_Close+0x8c>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68f9      	ldr	r1, [r7, #12]
 800252a:	4618      	mov	r0, r3
 800252c:	f003 faca 	bl	8005ac4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	460b      	mov	r3, r1
 8002550:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002552:	7afb      	ldrb	r3, [r7, #11]
 8002554:	f003 020f 	and.w	r2, r3, #15
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2200      	movs	r2, #0
 800257c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2200      	movs	r2, #0
 8002582:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002584:	7afb      	ldrb	r3, [r7, #11]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	b2da      	uxtb	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002590:	7afb      	ldrb	r3, [r7, #11]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6979      	ldr	r1, [r7, #20]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f003 fd47 	bl	8006034 <USB_EP0StartXfer>
 80025a6:	e005      	b.n	80025b4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6979      	ldr	r1, [r7, #20]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 fb64 	bl	8005c7c <USB_EPStartXfer>
  }

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	460b      	mov	r3, r1
 80025cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025ce:	7afb      	ldrb	r3, [r7, #11]
 80025d0:	f003 020f 	and.w	r2, r3, #15
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	3338      	adds	r3, #56	; 0x38
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4413      	add	r3, r2
 80025e2:	3304      	adds	r3, #4
 80025e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2201      	movs	r2, #1
 80025fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025fe:	7afb      	ldrb	r3, [r7, #11]
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	b2da      	uxtb	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800260a:	7afb      	ldrb	r3, [r7, #11]
 800260c:	f003 030f 	and.w	r3, r3, #15
 8002610:	2b00      	cmp	r3, #0
 8002612:	d106      	bne.n	8002622 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6979      	ldr	r1, [r7, #20]
 800261a:	4618      	mov	r0, r3
 800261c:	f003 fd0a 	bl	8006034 <USB_EP0StartXfer>
 8002620:	e005      	b.n	800262e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6979      	ldr	r1, [r7, #20]
 8002628:	4618      	mov	r0, r3
 800262a:	f003 fb27 	bl	8005c7c <USB_EPStartXfer>
  }

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	f003 020f 	and.w	r2, r3, #15
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	429a      	cmp	r2, r3
 8002650:	d901      	bls.n	8002656 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e04e      	b.n	80026f4 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002656:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800265a:	2b00      	cmp	r3, #0
 800265c:	da0f      	bge.n	800267e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	f003 020f 	and.w	r2, r3, #15
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	3338      	adds	r3, #56	; 0x38
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	3304      	adds	r3, #4
 8002674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	705a      	strb	r2, [r3, #1]
 800267c:	e00d      	b.n	800269a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	4413      	add	r3, r2
 8002690:	3304      	adds	r3, #4
 8002692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_PCD_EP_SetStall+0x82>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e01c      	b.n	80026f4 <HAL_PCD_EP_SetStall+0xbc>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68f9      	ldr	r1, [r7, #12]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f003 fe2b 	bl	8006324 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d108      	bne.n	80026ea <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026e2:	4619      	mov	r1, r3
 80026e4:	4610      	mov	r0, r2
 80026e6:	f004 f81d 	bl	8006724 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	f003 020f 	and.w	r2, r3, #15
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	429a      	cmp	r2, r3
 8002714:	d901      	bls.n	800271a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e042      	b.n	80027a0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800271a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800271e:	2b00      	cmp	r3, #0
 8002720:	da0f      	bge.n	8002742 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002722:	78fb      	ldrb	r3, [r7, #3]
 8002724:	f003 020f 	and.w	r2, r3, #15
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	3338      	adds	r3, #56	; 0x38
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	3304      	adds	r3, #4
 8002738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	705a      	strb	r2, [r3, #1]
 8002740:	e00f      	b.n	8002762 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	f003 020f 	and.w	r2, r3, #15
 8002748:	4613      	mov	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	4413      	add	r3, r2
 8002758:	3304      	adds	r3, #4
 800275a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	b2da      	uxtb	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_PCD_EP_ClrStall+0x86>
 800277e:	2302      	movs	r3, #2
 8002780:	e00e      	b.n	80027a0 <HAL_PCD_EP_ClrStall+0xa4>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68f9      	ldr	r1, [r7, #12]
 8002790:	4618      	mov	r0, r3
 8002792:	f003 fe35 	bl	8006400 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	3338      	adds	r3, #56	; 0x38
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	4413      	add	r3, r2
 80027cc:	3304      	adds	r3, #4
 80027ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	699a      	ldr	r2, [r3, #24]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d901      	bls.n	80027e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e067      	b.n	80028b0 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d902      	bls.n	80027fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	3303      	adds	r3, #3
 8002800:	089b      	lsrs	r3, r3, #2
 8002802:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002804:	e026      	b.n	8002854 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	429a      	cmp	r2, r3
 800281a:	d902      	bls.n	8002822 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3303      	adds	r3, #3
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	68d9      	ldr	r1, [r3, #12]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	b29b      	uxth	r3, r3
 8002836:	6978      	ldr	r0, [r7, #20]
 8002838:	f003 fd1a 	bl	8006270 <USB_WritePacket>

    ep->xfer_buff  += len;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	441a      	add	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	699a      	ldr	r2, [r3, #24]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	441a      	add	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	b29b      	uxth	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	429a      	cmp	r2, r3
 8002868:	d809      	bhi.n	800287e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002872:	429a      	cmp	r2, r3
 8002874:	d203      	bcs.n	800287e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1c3      	bne.n	8002806 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	429a      	cmp	r2, r3
 8002888:	d811      	bhi.n	80028ae <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	2201      	movs	r2, #1
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800289e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	6939      	ldr	r1, [r7, #16]
 80028a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028aa:	4013      	ands	r3, r2
 80028ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3720      	adds	r7, #32
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	333c      	adds	r3, #60	; 0x3c
 80028d0:	3304      	adds	r3, #4
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4a19      	ldr	r2, [pc, #100]	; (8002950 <PCD_EP_OutXfrComplete_int+0x98>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d124      	bne.n	8002938 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002904:	461a      	mov	r2, r3
 8002906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800290a:	6093      	str	r3, [r2, #8]
 800290c:	e01a      	b.n	8002944 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002924:	461a      	mov	r2, r3
 8002926:	2320      	movs	r3, #32
 8002928:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	4619      	mov	r1, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f006 faf3 	bl	8008f1c <HAL_PCD_DataOutStageCallback>
 8002936:	e005      	b.n	8002944 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	4619      	mov	r1, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f006 faec 	bl	8008f1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	4f54310a 	.word	0x4f54310a

08002954 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	333c      	adds	r3, #60	; 0x3c
 800296c:	3304      	adds	r3, #4
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4413      	add	r3, r2
 800297a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4a0c      	ldr	r2, [pc, #48]	; (80029b8 <PCD_EP_OutSetupPacket_int+0x64>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d90e      	bls.n	80029a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002990:	2b00      	cmp	r3, #0
 8002992:	d009      	beq.n	80029a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a0:	461a      	mov	r2, r3
 80029a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f006 faa5 	bl	8008ef8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	4f54300a 	.word	0x4f54300a

080029bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70fb      	strb	r3, [r7, #3]
 80029c8:	4613      	mov	r3, r2
 80029ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d107      	bne.n	80029ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80029da:	883b      	ldrh	r3, [r7, #0]
 80029dc:	0419      	lsls	r1, r3, #16
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28
 80029e8:	e028      	b.n	8002a3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	0c1b      	lsrs	r3, r3, #16
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	4413      	add	r3, r2
 80029f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029f8:	2300      	movs	r3, #0
 80029fa:	73fb      	strb	r3, [r7, #15]
 80029fc:	e00d      	b.n	8002a1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	3340      	adds	r3, #64	; 0x40
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	0c1b      	lsrs	r3, r3, #16
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	4413      	add	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	3301      	adds	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d3ec      	bcc.n	80029fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a24:	883b      	ldrh	r3, [r7, #0]
 8002a26:	0418      	lsls	r0, r3, #16
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6819      	ldr	r1, [r3, #0]
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	4302      	orrs	r2, r0
 8002a34:	3340      	adds	r3, #64	; 0x40
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	f043 0303 	orr.w	r3, r3, #3
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <HAL_PWREx_GetVoltageRange+0x18>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40007000 	.word	0x40007000

08002ad0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ade:	d130      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ae0:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aec:	d038      	beq.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002af6:	4a1e      	ldr	r2, [pc, #120]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002afc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2232      	movs	r2, #50	; 0x32
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0c9b      	lsrs	r3, r3, #18
 8002b10:	3301      	adds	r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b14:	e002      	b.n	8002b1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b1c:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b28:	d102      	bne.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f2      	bne.n	8002b16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b30:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3c:	d110      	bne.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e00f      	b.n	8002b62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4e:	d007      	beq.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b58:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40007000 	.word	0x40007000
 8002b74:	20000144 	.word	0x20000144
 8002b78:	431bde83 	.word	0x431bde83

08002b7c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8a:	6053      	str	r3, [r2, #4]
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40007000 	.word	0x40007000

08002b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e3d4      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bae:	4ba1      	ldr	r3, [pc, #644]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb8:	4b9e      	ldr	r3, [pc, #632]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80e4 	beq.w	8002d98 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <HAL_RCC_OscConfig+0x4a>
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	2b0c      	cmp	r3, #12
 8002bda:	f040 808b 	bne.w	8002cf4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	f040 8087 	bne.w	8002cf4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002be6:	4b93      	ldr	r3, [pc, #588]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <HAL_RCC_OscConfig+0x62>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e3ac      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1a      	ldr	r2, [r3, #32]
 8002c02:	4b8c      	ldr	r3, [pc, #560]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d004      	beq.n	8002c18 <HAL_RCC_OscConfig+0x7c>
 8002c0e:	4b89      	ldr	r3, [pc, #548]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c16:	e005      	b.n	8002c24 <HAL_RCC_OscConfig+0x88>
 8002c18:	4b86      	ldr	r3, [pc, #536]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d223      	bcs.n	8002c70 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fd41 	bl	80036b4 <RCC_SetFlashLatencyFromMSIRange>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e38d      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c3c:	4b7d      	ldr	r3, [pc, #500]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a7c      	ldr	r2, [pc, #496]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002c42:	f043 0308 	orr.w	r3, r3, #8
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	4b7a      	ldr	r3, [pc, #488]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	4977      	ldr	r1, [pc, #476]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c5a:	4b76      	ldr	r3, [pc, #472]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	4972      	ldr	r1, [pc, #456]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	604b      	str	r3, [r1, #4]
 8002c6e:	e025      	b.n	8002cbc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c70:	4b70      	ldr	r3, [pc, #448]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a6f      	ldr	r2, [pc, #444]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002c76:	f043 0308 	orr.w	r3, r3, #8
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b6d      	ldr	r3, [pc, #436]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	496a      	ldr	r1, [pc, #424]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c8e:	4b69      	ldr	r3, [pc, #420]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	4965      	ldr	r1, [pc, #404]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d109      	bne.n	8002cbc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 fd01 	bl	80036b4 <RCC_SetFlashLatencyFromMSIRange>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e34d      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cbc:	f000 fc36 	bl	800352c <HAL_RCC_GetSysClockFreq>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4b5c      	ldr	r3, [pc, #368]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	495a      	ldr	r1, [pc, #360]	; (8002e38 <HAL_RCC_OscConfig+0x29c>)
 8002cce:	5ccb      	ldrb	r3, [r1, r3]
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd8:	4a58      	ldr	r2, [pc, #352]	; (8002e3c <HAL_RCC_OscConfig+0x2a0>)
 8002cda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cdc:	4b58      	ldr	r3, [pc, #352]	; (8002e40 <HAL_RCC_OscConfig+0x2a4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fd fc61 	bl	80005a8 <HAL_InitTick>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d052      	beq.n	8002d96 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	e331      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d032      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cfc:	4b4d      	ldr	r3, [pc, #308]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a4c      	ldr	r2, [pc, #304]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d08:	f7fd fc9e 	bl	8000648 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d10:	f7fd fc9a 	bl	8000648 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e31a      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d22:	4b44      	ldr	r3, [pc, #272]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d2e:	4b41      	ldr	r3, [pc, #260]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a40      	ldr	r2, [pc, #256]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002d34:	f043 0308 	orr.w	r3, r3, #8
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	4b3e      	ldr	r3, [pc, #248]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	493b      	ldr	r1, [pc, #236]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d4c:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	4936      	ldr	r1, [pc, #216]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
 8002d60:	e01a      	b.n	8002d98 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d62:	4b34      	ldr	r3, [pc, #208]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a33      	ldr	r2, [pc, #204]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d6e:	f7fd fc6b 	bl	8000648 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d76:	f7fd fc67 	bl	8000648 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e2e7      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d88:	4b2a      	ldr	r3, [pc, #168]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f0      	bne.n	8002d76 <HAL_RCC_OscConfig+0x1da>
 8002d94:	e000      	b.n	8002d98 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d96:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d074      	beq.n	8002e8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d005      	beq.n	8002db6 <HAL_RCC_OscConfig+0x21a>
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	d10e      	bne.n	8002dce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d10b      	bne.n	8002dce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db6:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d064      	beq.n	8002e8c <HAL_RCC_OscConfig+0x2f0>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d160      	bne.n	8002e8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e2c4      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd6:	d106      	bne.n	8002de6 <HAL_RCC_OscConfig+0x24a>
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a15      	ldr	r2, [pc, #84]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	e01d      	b.n	8002e22 <HAL_RCC_OscConfig+0x286>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dee:	d10c      	bne.n	8002e0a <HAL_RCC_OscConfig+0x26e>
 8002df0:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0f      	ldr	r2, [pc, #60]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002df6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0c      	ldr	r2, [pc, #48]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	e00b      	b.n	8002e22 <HAL_RCC_OscConfig+0x286>
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a06      	ldr	r2, [pc, #24]	; (8002e34 <HAL_RCC_OscConfig+0x298>)
 8002e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e20:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d01c      	beq.n	8002e64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2a:	f7fd fc0d 	bl	8000648 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e30:	e011      	b.n	8002e56 <HAL_RCC_OscConfig+0x2ba>
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000
 8002e38:	0800a200 	.word	0x0800a200
 8002e3c:	20000144 	.word	0x20000144
 8002e40:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e44:	f7fd fc00 	bl	8000648 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e280      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e56:	4baf      	ldr	r3, [pc, #700]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x2a8>
 8002e62:	e014      	b.n	8002e8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fd fbf0 	bl	8000648 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7fd fbec 	bl	8000648 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e26c      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e7e:	4ba5      	ldr	r3, [pc, #660]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x2d0>
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d060      	beq.n	8002f5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_OscConfig+0x310>
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	d119      	bne.n	8002eda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d116      	bne.n	8002eda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eac:	4b99      	ldr	r3, [pc, #612]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x328>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e249      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec4:	4b93      	ldr	r3, [pc, #588]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	061b      	lsls	r3, r3, #24
 8002ed2:	4990      	ldr	r1, [pc, #576]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ed8:	e040      	b.n	8002f5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d023      	beq.n	8002f2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee2:	4b8c      	ldr	r3, [pc, #560]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a8b      	ldr	r2, [pc, #556]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eee:	f7fd fbab 	bl	8000648 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef6:	f7fd fba7 	bl	8000648 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e227      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f08:	4b82      	ldr	r3, [pc, #520]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f14:	4b7f      	ldr	r3, [pc, #508]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	061b      	lsls	r3, r3, #24
 8002f22:	497c      	ldr	r1, [pc, #496]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
 8002f28:	e018      	b.n	8002f5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f2a:	4b7a      	ldr	r3, [pc, #488]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a79      	ldr	r2, [pc, #484]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7fd fb87 	bl	8000648 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f3e:	f7fd fb83 	bl	8000648 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e203      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f50:	4b70      	ldr	r3, [pc, #448]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f0      	bne.n	8002f3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d03c      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01c      	beq.n	8002faa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f70:	4b68      	ldr	r3, [pc, #416]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f76:	4a67      	ldr	r2, [pc, #412]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7fd fb62 	bl	8000648 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f88:	f7fd fb5e 	bl	8000648 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e1de      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f9a:	4b5e      	ldr	r3, [pc, #376]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0ef      	beq.n	8002f88 <HAL_RCC_OscConfig+0x3ec>
 8002fa8:	e01b      	b.n	8002fe2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002faa:	4b5a      	ldr	r3, [pc, #360]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb0:	4a58      	ldr	r2, [pc, #352]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fba:	f7fd fb45 	bl	8000648 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc2:	f7fd fb41 	bl	8000648 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e1c1      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fd4:	4b4f      	ldr	r3, [pc, #316]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1ef      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80a6 	beq.w	800313c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ff4:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10d      	bne.n	800301c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003000:	4b44      	ldr	r3, [pc, #272]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	4a43      	ldr	r2, [pc, #268]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8003006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300a:	6593      	str	r3, [r2, #88]	; 0x58
 800300c:	4b41      	ldr	r3, [pc, #260]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003018:	2301      	movs	r3, #1
 800301a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301c:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <HAL_RCC_OscConfig+0x57c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d118      	bne.n	800305a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003028:	4b3b      	ldr	r3, [pc, #236]	; (8003118 <HAL_RCC_OscConfig+0x57c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a3a      	ldr	r2, [pc, #232]	; (8003118 <HAL_RCC_OscConfig+0x57c>)
 800302e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003032:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003034:	f7fd fb08 	bl	8000648 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303c:	f7fd fb04 	bl	8000648 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e184      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800304e:	4b32      	ldr	r3, [pc, #200]	; (8003118 <HAL_RCC_OscConfig+0x57c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d108      	bne.n	8003074 <HAL_RCC_OscConfig+0x4d8>
 8003062:	4b2c      	ldr	r3, [pc, #176]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003068:	4a2a      	ldr	r2, [pc, #168]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003072:	e024      	b.n	80030be <HAL_RCC_OscConfig+0x522>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b05      	cmp	r3, #5
 800307a:	d110      	bne.n	800309e <HAL_RCC_OscConfig+0x502>
 800307c:	4b25      	ldr	r3, [pc, #148]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003082:	4a24      	ldr	r2, [pc, #144]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8003084:	f043 0304 	orr.w	r3, r3, #4
 8003088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800308c:	4b21      	ldr	r3, [pc, #132]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	4a20      	ldr	r2, [pc, #128]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800309c:	e00f      	b.n	80030be <HAL_RCC_OscConfig+0x522>
 800309e:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a4:	4a1b      	ldr	r2, [pc, #108]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030ae:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	4a17      	ldr	r2, [pc, #92]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 80030b6:	f023 0304 	bic.w	r3, r3, #4
 80030ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d016      	beq.n	80030f4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c6:	f7fd fabf 	bl	8000648 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030cc:	e00a      	b.n	80030e4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ce:	f7fd fabb 	bl	8000648 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030dc:	4293      	cmp	r3, r2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e139      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <HAL_RCC_OscConfig+0x578>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0ed      	beq.n	80030ce <HAL_RCC_OscConfig+0x532>
 80030f2:	e01a      	b.n	800312a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fd faa8 	bl	8000648 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030fa:	e00f      	b.n	800311c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fc:	f7fd faa4 	bl	8000648 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	; 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d906      	bls.n	800311c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e122      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800311c:	4b90      	ldr	r3, [pc, #576]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 800311e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1e8      	bne.n	80030fc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800312a:	7ffb      	ldrb	r3, [r7, #31]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d105      	bne.n	800313c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003130:	4b8b      	ldr	r3, [pc, #556]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	4a8a      	ldr	r2, [pc, #552]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 8003136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800313a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8108 	beq.w	8003356 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	2b02      	cmp	r3, #2
 800314c:	f040 80d0 	bne.w	80032f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003150:	4b83      	ldr	r3, [pc, #524]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f003 0203 	and.w	r2, r3, #3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	429a      	cmp	r2, r3
 8003162:	d130      	bne.n	80031c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	3b01      	subs	r3, #1
 8003170:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d127      	bne.n	80031c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003180:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d11f      	bne.n	80031c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003190:	2a07      	cmp	r2, #7
 8003192:	bf14      	ite	ne
 8003194:	2201      	movne	r2, #1
 8003196:	2200      	moveq	r2, #0
 8003198:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800319a:	4293      	cmp	r3, r2
 800319c:	d113      	bne.n	80031c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	085b      	lsrs	r3, r3, #1
 80031aa:	3b01      	subs	r3, #1
 80031ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d109      	bne.n	80031c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	3b01      	subs	r3, #1
 80031c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d06e      	beq.n	80032a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2b0c      	cmp	r3, #12
 80031ca:	d069      	beq.n	80032a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031cc:	4b64      	ldr	r3, [pc, #400]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d105      	bne.n	80031e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031d8:	4b61      	ldr	r3, [pc, #388]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0b7      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031e8:	4b5d      	ldr	r3, [pc, #372]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a5c      	ldr	r2, [pc, #368]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 80031ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031f4:	f7fd fa28 	bl	8000648 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fc:	f7fd fa24 	bl	8000648 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e0a4      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800320e:	4b54      	ldr	r3, [pc, #336]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800321a:	4b51      	ldr	r3, [pc, #324]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	4b51      	ldr	r3, [pc, #324]	; (8003364 <HAL_RCC_OscConfig+0x7c8>)
 8003220:	4013      	ands	r3, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800322a:	3a01      	subs	r2, #1
 800322c:	0112      	lsls	r2, r2, #4
 800322e:	4311      	orrs	r1, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003234:	0212      	lsls	r2, r2, #8
 8003236:	4311      	orrs	r1, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800323c:	0852      	lsrs	r2, r2, #1
 800323e:	3a01      	subs	r2, #1
 8003240:	0552      	lsls	r2, r2, #21
 8003242:	4311      	orrs	r1, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003248:	0852      	lsrs	r2, r2, #1
 800324a:	3a01      	subs	r2, #1
 800324c:	0652      	lsls	r2, r2, #25
 800324e:	4311      	orrs	r1, r2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003254:	0912      	lsrs	r2, r2, #4
 8003256:	0452      	lsls	r2, r2, #17
 8003258:	430a      	orrs	r2, r1
 800325a:	4941      	ldr	r1, [pc, #260]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 800325c:	4313      	orrs	r3, r2
 800325e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003260:	4b3f      	ldr	r3, [pc, #252]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a3e      	ldr	r2, [pc, #248]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 8003266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800326a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800326c:	4b3c      	ldr	r3, [pc, #240]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4a3b      	ldr	r2, [pc, #236]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 8003272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003276:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003278:	f7fd f9e6 	bl	8000648 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003280:	f7fd f9e2 	bl	8000648 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e062      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003292:	4b33      	ldr	r3, [pc, #204]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800329e:	e05a      	b.n	8003356 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e059      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a4:	4b2e      	ldr	r3, [pc, #184]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d152      	bne.n	8003356 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032b0:	4b2b      	ldr	r3, [pc, #172]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a2a      	ldr	r2, [pc, #168]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 80032b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032bc:	4b28      	ldr	r3, [pc, #160]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4a27      	ldr	r2, [pc, #156]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 80032c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032c8:	f7fd f9be 	bl	8000648 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fd f9ba 	bl	8000648 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e03a      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e2:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x734>
 80032ee:	e032      	b.n	8003356 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2b0c      	cmp	r3, #12
 80032f4:	d02d      	beq.n	8003352 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f6:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a19      	ldr	r2, [pc, #100]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 80032fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003300:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003302:	4b17      	ldr	r3, [pc, #92]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d105      	bne.n	800331a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800330e:	4b14      	ldr	r3, [pc, #80]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	4a13      	ldr	r2, [pc, #76]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 8003314:	f023 0303 	bic.w	r3, r3, #3
 8003318:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800331a:	4b11      	ldr	r3, [pc, #68]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	4a10      	ldr	r2, [pc, #64]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 8003320:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003328:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7fd f98d 	bl	8000648 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003332:	f7fd f989 	bl	8000648 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e009      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_RCC_OscConfig+0x7c4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f0      	bne.n	8003332 <HAL_RCC_OscConfig+0x796>
 8003350:	e001      	b.n	8003356 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3720      	adds	r7, #32
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000
 8003364:	f99d808c 	.word	0xf99d808c

08003368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0c8      	b.n	800350e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800337c:	4b66      	ldr	r3, [pc, #408]	; (8003518 <HAL_RCC_ClockConfig+0x1b0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d910      	bls.n	80033ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338a:	4b63      	ldr	r3, [pc, #396]	; (8003518 <HAL_RCC_ClockConfig+0x1b0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 0207 	bic.w	r2, r3, #7
 8003392:	4961      	ldr	r1, [pc, #388]	; (8003518 <HAL_RCC_ClockConfig+0x1b0>)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339a:	4b5f      	ldr	r3, [pc, #380]	; (8003518 <HAL_RCC_ClockConfig+0x1b0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0b0      	b.n	800350e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d04c      	beq.n	8003452 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d107      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c0:	4b56      	ldr	r3, [pc, #344]	; (800351c <HAL_RCC_ClockConfig+0x1b4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d121      	bne.n	8003410 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e09e      	b.n	800350e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d107      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d8:	4b50      	ldr	r3, [pc, #320]	; (800351c <HAL_RCC_ClockConfig+0x1b4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d115      	bne.n	8003410 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e092      	b.n	800350e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d107      	bne.n	8003400 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033f0:	4b4a      	ldr	r3, [pc, #296]	; (800351c <HAL_RCC_ClockConfig+0x1b4>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e086      	b.n	800350e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003400:	4b46      	ldr	r3, [pc, #280]	; (800351c <HAL_RCC_ClockConfig+0x1b4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e07e      	b.n	800350e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003410:	4b42      	ldr	r3, [pc, #264]	; (800351c <HAL_RCC_ClockConfig+0x1b4>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f023 0203 	bic.w	r2, r3, #3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	493f      	ldr	r1, [pc, #252]	; (800351c <HAL_RCC_ClockConfig+0x1b4>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003422:	f7fd f911 	bl	8000648 <HAL_GetTick>
 8003426:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003428:	e00a      	b.n	8003440 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342a:	f7fd f90d 	bl	8000648 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e066      	b.n	800350e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003440:	4b36      	ldr	r3, [pc, #216]	; (800351c <HAL_RCC_ClockConfig+0x1b4>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 020c 	and.w	r2, r3, #12
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	429a      	cmp	r2, r3
 8003450:	d1eb      	bne.n	800342a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800345e:	4b2f      	ldr	r3, [pc, #188]	; (800351c <HAL_RCC_ClockConfig+0x1b4>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	492c      	ldr	r1, [pc, #176]	; (800351c <HAL_RCC_ClockConfig+0x1b4>)
 800346c:	4313      	orrs	r3, r2
 800346e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003470:	4b29      	ldr	r3, [pc, #164]	; (8003518 <HAL_RCC_ClockConfig+0x1b0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d210      	bcs.n	80034a0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b26      	ldr	r3, [pc, #152]	; (8003518 <HAL_RCC_ClockConfig+0x1b0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 0207 	bic.w	r2, r3, #7
 8003486:	4924      	ldr	r1, [pc, #144]	; (8003518 <HAL_RCC_ClockConfig+0x1b0>)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	4b22      	ldr	r3, [pc, #136]	; (8003518 <HAL_RCC_ClockConfig+0x1b0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e036      	b.n	800350e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ac:	4b1b      	ldr	r3, [pc, #108]	; (800351c <HAL_RCC_ClockConfig+0x1b4>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4918      	ldr	r1, [pc, #96]	; (800351c <HAL_RCC_ClockConfig+0x1b4>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ca:	4b14      	ldr	r3, [pc, #80]	; (800351c <HAL_RCC_ClockConfig+0x1b4>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4910      	ldr	r1, [pc, #64]	; (800351c <HAL_RCC_ClockConfig+0x1b4>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034de:	f000 f825 	bl	800352c <HAL_RCC_GetSysClockFreq>
 80034e2:	4602      	mov	r2, r0
 80034e4:	4b0d      	ldr	r3, [pc, #52]	; (800351c <HAL_RCC_ClockConfig+0x1b4>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	091b      	lsrs	r3, r3, #4
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	490c      	ldr	r1, [pc, #48]	; (8003520 <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	5ccb      	ldrb	r3, [r1, r3]
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	fa22 f303 	lsr.w	r3, r2, r3
 80034fa:	4a0a      	ldr	r2, [pc, #40]	; (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034fe:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <HAL_RCC_ClockConfig+0x1c0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd f850 	bl	80005a8 <HAL_InitTick>
 8003508:	4603      	mov	r3, r0
 800350a:	72fb      	strb	r3, [r7, #11]

  return status;
 800350c:	7afb      	ldrb	r3, [r7, #11]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40022000 	.word	0x40022000
 800351c:	40021000 	.word	0x40021000
 8003520:	0800a200 	.word	0x0800a200
 8003524:	20000144 	.word	0x20000144
 8003528:	20000000 	.word	0x20000000

0800352c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	; 0x24
 8003530:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800353a:	4b3e      	ldr	r3, [pc, #248]	; (8003634 <HAL_RCC_GetSysClockFreq+0x108>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003544:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <HAL_RCC_GetSysClockFreq+0x108>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x34>
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	2b0c      	cmp	r3, #12
 8003558:	d121      	bne.n	800359e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d11e      	bne.n	800359e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003560:	4b34      	ldr	r3, [pc, #208]	; (8003634 <HAL_RCC_GetSysClockFreq+0x108>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b00      	cmp	r3, #0
 800356a:	d107      	bne.n	800357c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800356c:	4b31      	ldr	r3, [pc, #196]	; (8003634 <HAL_RCC_GetSysClockFreq+0x108>)
 800356e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003572:	0a1b      	lsrs	r3, r3, #8
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	e005      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800357c:	4b2d      	ldr	r3, [pc, #180]	; (8003634 <HAL_RCC_GetSysClockFreq+0x108>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003588:	4a2b      	ldr	r2, [pc, #172]	; (8003638 <HAL_RCC_GetSysClockFreq+0x10c>)
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003590:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10d      	bne.n	80035b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d102      	bne.n	80035aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035a4:	4b25      	ldr	r3, [pc, #148]	; (800363c <HAL_RCC_GetSysClockFreq+0x110>)
 80035a6:	61bb      	str	r3, [r7, #24]
 80035a8:	e004      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035b0:	4b23      	ldr	r3, [pc, #140]	; (8003640 <HAL_RCC_GetSysClockFreq+0x114>)
 80035b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	d134      	bne.n	8003624 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035ba:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <HAL_RCC_GetSysClockFreq+0x108>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d003      	beq.n	80035d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d003      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0xac>
 80035d0:	e005      	b.n	80035de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035d2:	4b1a      	ldr	r3, [pc, #104]	; (800363c <HAL_RCC_GetSysClockFreq+0x110>)
 80035d4:	617b      	str	r3, [r7, #20]
      break;
 80035d6:	e005      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_RCC_GetSysClockFreq+0x114>)
 80035da:	617b      	str	r3, [r7, #20]
      break;
 80035dc:	e002      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	617b      	str	r3, [r7, #20]
      break;
 80035e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035e4:	4b13      	ldr	r3, [pc, #76]	; (8003634 <HAL_RCC_GetSysClockFreq+0x108>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	3301      	adds	r3, #1
 80035f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035f2:	4b10      	ldr	r3, [pc, #64]	; (8003634 <HAL_RCC_GetSysClockFreq+0x108>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	fb02 f203 	mul.w	r2, r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800360a:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <HAL_RCC_GetSysClockFreq+0x108>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	0e5b      	lsrs	r3, r3, #25
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	3301      	adds	r3, #1
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003622:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003624:	69bb      	ldr	r3, [r7, #24]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3724      	adds	r7, #36	; 0x24
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000
 8003638:	0800a218 	.word	0x0800a218
 800363c:	00f42400 	.word	0x00f42400
 8003640:	007a1200 	.word	0x007a1200

08003644 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003648:	4b03      	ldr	r3, [pc, #12]	; (8003658 <HAL_RCC_GetHCLKFreq+0x14>)
 800364a:	681b      	ldr	r3, [r3, #0]
}
 800364c:	4618      	mov	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000144 	.word	0x20000144

0800365c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003660:	f7ff fff0 	bl	8003644 <HAL_RCC_GetHCLKFreq>
 8003664:	4602      	mov	r2, r0
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	4904      	ldr	r1, [pc, #16]	; (8003684 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003672:	5ccb      	ldrb	r3, [r1, r3]
 8003674:	f003 031f 	and.w	r3, r3, #31
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800367c:	4618      	mov	r0, r3
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40021000 	.word	0x40021000
 8003684:	0800a210 	.word	0x0800a210

08003688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800368c:	f7ff ffda 	bl	8003644 <HAL_RCC_GetHCLKFreq>
 8003690:	4602      	mov	r2, r0
 8003692:	4b06      	ldr	r3, [pc, #24]	; (80036ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	0adb      	lsrs	r3, r3, #11
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	4904      	ldr	r1, [pc, #16]	; (80036b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800369e:	5ccb      	ldrb	r3, [r1, r3]
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000
 80036b0:	0800a210 	.word	0x0800a210

080036b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036c0:	4b2a      	ldr	r3, [pc, #168]	; (800376c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036cc:	f7ff f9f2 	bl	8002ab4 <HAL_PWREx_GetVoltageRange>
 80036d0:	6178      	str	r0, [r7, #20]
 80036d2:	e014      	b.n	80036fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036d4:	4b25      	ldr	r3, [pc, #148]	; (800376c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	4a24      	ldr	r2, [pc, #144]	; (800376c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036de:	6593      	str	r3, [r2, #88]	; 0x58
 80036e0:	4b22      	ldr	r3, [pc, #136]	; (800376c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036ec:	f7ff f9e2 	bl	8002ab4 <HAL_PWREx_GetVoltageRange>
 80036f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036f2:	4b1e      	ldr	r3, [pc, #120]	; (800376c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	4a1d      	ldr	r2, [pc, #116]	; (800376c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003704:	d10b      	bne.n	800371e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b80      	cmp	r3, #128	; 0x80
 800370a:	d919      	bls.n	8003740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2ba0      	cmp	r3, #160	; 0xa0
 8003710:	d902      	bls.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003712:	2302      	movs	r3, #2
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	e013      	b.n	8003740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003718:	2301      	movs	r3, #1
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	e010      	b.n	8003740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b80      	cmp	r3, #128	; 0x80
 8003722:	d902      	bls.n	800372a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003724:	2303      	movs	r3, #3
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	e00a      	b.n	8003740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b80      	cmp	r3, #128	; 0x80
 800372e:	d102      	bne.n	8003736 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003730:	2302      	movs	r3, #2
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	e004      	b.n	8003740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b70      	cmp	r3, #112	; 0x70
 800373a:	d101      	bne.n	8003740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800373c:	2301      	movs	r3, #1
 800373e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f023 0207 	bic.w	r2, r3, #7
 8003748:	4909      	ldr	r1, [pc, #36]	; (8003770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003750:	4b07      	ldr	r3, [pc, #28]	; (8003770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	429a      	cmp	r2, r3
 800375c:	d001      	beq.n	8003762 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40021000 	.word	0x40021000
 8003770:	40022000 	.word	0x40022000

08003774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800377c:	2300      	movs	r3, #0
 800377e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003780:	2300      	movs	r3, #0
 8003782:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800378c:	2b00      	cmp	r3, #0
 800378e:	d041      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003794:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003798:	d02a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800379a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800379e:	d824      	bhi.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037a4:	d008      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037aa:	d81e      	bhi.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b4:	d010      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037b6:	e018      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037b8:	4b86      	ldr	r3, [pc, #536]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4a85      	ldr	r2, [pc, #532]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037c4:	e015      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3304      	adds	r3, #4
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fabb 	bl	8003d48 <RCCEx_PLLSAI1_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037d6:	e00c      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3320      	adds	r3, #32
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fba6 	bl	8003f30 <RCCEx_PLLSAI2_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037e8:	e003      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	74fb      	strb	r3, [r7, #19]
      break;
 80037ee:	e000      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80037f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037f2:	7cfb      	ldrb	r3, [r7, #19]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10b      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037f8:	4b76      	ldr	r3, [pc, #472]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003806:	4973      	ldr	r1, [pc, #460]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800380e:	e001      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d041      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003824:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003828:	d02a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800382a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800382e:	d824      	bhi.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003834:	d008      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003836:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800383a:	d81e      	bhi.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003844:	d010      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003846:	e018      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003848:	4b62      	ldr	r3, [pc, #392]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a61      	ldr	r2, [pc, #388]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003852:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003854:	e015      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3304      	adds	r3, #4
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fa73 	bl	8003d48 <RCCEx_PLLSAI1_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003866:	e00c      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3320      	adds	r3, #32
 800386c:	2100      	movs	r1, #0
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fb5e 	bl	8003f30 <RCCEx_PLLSAI2_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003878:	e003      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	74fb      	strb	r3, [r7, #19]
      break;
 800387e:	e000      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003882:	7cfb      	ldrb	r3, [r7, #19]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10b      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003888:	4b52      	ldr	r3, [pc, #328]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003896:	494f      	ldr	r1, [pc, #316]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800389e:	e001      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a0:	7cfb      	ldrb	r3, [r7, #19]
 80038a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80a0 	beq.w	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b2:	2300      	movs	r3, #0
 80038b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038b6:	4b47      	ldr	r3, [pc, #284]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80038c6:	2300      	movs	r3, #0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00d      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038cc:	4b41      	ldr	r3, [pc, #260]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	4a40      	ldr	r2, [pc, #256]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d6:	6593      	str	r3, [r2, #88]	; 0x58
 80038d8:	4b3e      	ldr	r3, [pc, #248]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e4:	2301      	movs	r3, #1
 80038e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038e8:	4b3b      	ldr	r3, [pc, #236]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a3a      	ldr	r2, [pc, #232]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038f4:	f7fc fea8 	bl	8000648 <HAL_GetTick>
 80038f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038fa:	e009      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fc:	f7fc fea4 	bl	8000648 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d902      	bls.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	74fb      	strb	r3, [r7, #19]
        break;
 800390e:	e005      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003910:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0ef      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d15c      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003922:	4b2c      	ldr	r3, [pc, #176]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01f      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	429a      	cmp	r2, r3
 800393e:	d019      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003940:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800394a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800394c:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800394e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003952:	4a20      	ldr	r2, [pc, #128]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800395c:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003962:	4a1c      	ldr	r2, [pc, #112]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800396c:	4a19      	ldr	r2, [pc, #100]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d016      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397e:	f7fc fe63 	bl	8000648 <HAL_GetTick>
 8003982:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003984:	e00b      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003986:	f7fc fe5f 	bl	8000648 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	f241 3288 	movw	r2, #5000	; 0x1388
 8003994:	4293      	cmp	r3, r2
 8003996:	d902      	bls.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	74fb      	strb	r3, [r7, #19]
            break;
 800399c:	e006      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800399e:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0ec      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80039ac:	7cfb      	ldrb	r3, [r7, #19]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10c      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c2:	4904      	ldr	r1, [pc, #16]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039ca:	e009      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039cc:	7cfb      	ldrb	r3, [r7, #19]
 80039ce:	74bb      	strb	r3, [r7, #18]
 80039d0:	e006      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039dc:	7cfb      	ldrb	r3, [r7, #19]
 80039de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039e0:	7c7b      	ldrb	r3, [r7, #17]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d105      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e6:	4b9e      	ldr	r3, [pc, #632]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	4a9d      	ldr	r2, [pc, #628]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039fe:	4b98      	ldr	r3, [pc, #608]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a04:	f023 0203 	bic.w	r2, r3, #3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	4994      	ldr	r1, [pc, #592]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a20:	4b8f      	ldr	r3, [pc, #572]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a26:	f023 020c 	bic.w	r2, r3, #12
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2e:	498c      	ldr	r1, [pc, #560]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a42:	4b87      	ldr	r3, [pc, #540]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	4983      	ldr	r1, [pc, #524]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a64:	4b7e      	ldr	r3, [pc, #504]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	497b      	ldr	r1, [pc, #492]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a86:	4b76      	ldr	r3, [pc, #472]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a94:	4972      	ldr	r1, [pc, #456]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aa8:	4b6d      	ldr	r3, [pc, #436]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab6:	496a      	ldr	r1, [pc, #424]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aca:	4b65      	ldr	r3, [pc, #404]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	4961      	ldr	r1, [pc, #388]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003aec:	4b5c      	ldr	r3, [pc, #368]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afa:	4959      	ldr	r1, [pc, #356]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b0e:	4b54      	ldr	r3, [pc, #336]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1c:	4950      	ldr	r1, [pc, #320]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b30:	4b4b      	ldr	r3, [pc, #300]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3e:	4948      	ldr	r1, [pc, #288]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b52:	4b43      	ldr	r3, [pc, #268]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b60:	493f      	ldr	r1, [pc, #252]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d028      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b74:	4b3a      	ldr	r3, [pc, #232]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b82:	4937      	ldr	r1, [pc, #220]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b92:	d106      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b94:	4b32      	ldr	r3, [pc, #200]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4a31      	ldr	r2, [pc, #196]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b9e:	60d3      	str	r3, [r2, #12]
 8003ba0:	e011      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003baa:	d10c      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f8c8 	bl	8003d48 <RCCEx_PLLSAI1_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bbc:	7cfb      	ldrb	r3, [r7, #19]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003bc2:	7cfb      	ldrb	r3, [r7, #19]
 8003bc4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d028      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bd2:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be0:	491f      	ldr	r1, [pc, #124]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bf0:	d106      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bf2:	4b1b      	ldr	r3, [pc, #108]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	4a1a      	ldr	r2, [pc, #104]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bfc:	60d3      	str	r3, [r2, #12]
 8003bfe:	e011      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	2101      	movs	r1, #1
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 f899 	bl	8003d48 <RCCEx_PLLSAI1_Config>
 8003c16:	4603      	mov	r3, r0
 8003c18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c20:	7cfb      	ldrb	r3, [r7, #19]
 8003c22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d02b      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3e:	4908      	ldr	r1, [pc, #32]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c4e:	d109      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4a02      	ldr	r2, [pc, #8]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c5a:	60d3      	str	r3, [r2, #12]
 8003c5c:	e014      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3304      	adds	r3, #4
 8003c72:	2101      	movs	r1, #1
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 f867 	bl	8003d48 <RCCEx_PLLSAI1_Config>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c7e:	7cfb      	ldrb	r3, [r7, #19]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
 8003c86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d02f      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c94:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ca2:	4928      	ldr	r1, [pc, #160]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cb2:	d10d      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	2102      	movs	r1, #2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 f844 	bl	8003d48 <RCCEx_PLLSAI1_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d014      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003cca:	7cfb      	ldrb	r3, [r7, #19]
 8003ccc:	74bb      	strb	r3, [r7, #18]
 8003cce:	e011      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3320      	adds	r3, #32
 8003cde:	2102      	movs	r1, #2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 f925 	bl	8003f30 <RCCEx_PLLSAI2_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cea:	7cfb      	ldrb	r3, [r7, #19]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003cf0:	7cfb      	ldrb	r3, [r7, #19]
 8003cf2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d00:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d0e:	490d      	ldr	r1, [pc, #52]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00b      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d22:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d32:	4904      	ldr	r1, [pc, #16]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40021000 	.word	0x40021000

08003d48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d56:	4b75      	ldr	r3, [pc, #468]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d018      	beq.n	8003d94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d62:	4b72      	ldr	r3, [pc, #456]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0203 	and.w	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d10d      	bne.n	8003d8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
       ||
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d7a:	4b6c      	ldr	r3, [pc, #432]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	091b      	lsrs	r3, r3, #4
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
       ||
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d047      	beq.n	8003e1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
 8003d92:	e044      	b.n	8003e1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d018      	beq.n	8003dce <RCCEx_PLLSAI1_Config+0x86>
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d825      	bhi.n	8003dec <RCCEx_PLLSAI1_Config+0xa4>
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d002      	beq.n	8003daa <RCCEx_PLLSAI1_Config+0x62>
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d009      	beq.n	8003dbc <RCCEx_PLLSAI1_Config+0x74>
 8003da8:	e020      	b.n	8003dec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003daa:	4b60      	ldr	r3, [pc, #384]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d11d      	bne.n	8003df2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dba:	e01a      	b.n	8003df2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dbc:	4b5b      	ldr	r3, [pc, #364]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d116      	bne.n	8003df6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dcc:	e013      	b.n	8003df6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dce:	4b57      	ldr	r3, [pc, #348]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10f      	bne.n	8003dfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dda:	4b54      	ldr	r3, [pc, #336]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dea:	e006      	b.n	8003dfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
      break;
 8003df0:	e004      	b.n	8003dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003df2:	bf00      	nop
 8003df4:	e002      	b.n	8003dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003df6:	bf00      	nop
 8003df8:	e000      	b.n	8003dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10d      	bne.n	8003e1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e02:	4b4a      	ldr	r3, [pc, #296]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6819      	ldr	r1, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	430b      	orrs	r3, r1
 8003e18:	4944      	ldr	r1, [pc, #272]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d17d      	bne.n	8003f20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e24:	4b41      	ldr	r3, [pc, #260]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a40      	ldr	r2, [pc, #256]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e30:	f7fc fc0a 	bl	8000648 <HAL_GetTick>
 8003e34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e36:	e009      	b.n	8003e4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e38:	f7fc fc06 	bl	8000648 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d902      	bls.n	8003e4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	73fb      	strb	r3, [r7, #15]
        break;
 8003e4a:	e005      	b.n	8003e58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e4c:	4b37      	ldr	r3, [pc, #220]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1ef      	bne.n	8003e38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d160      	bne.n	8003f20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d111      	bne.n	8003e88 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e64:	4b31      	ldr	r3, [pc, #196]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6892      	ldr	r2, [r2, #8]
 8003e74:	0211      	lsls	r1, r2, #8
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68d2      	ldr	r2, [r2, #12]
 8003e7a:	0912      	lsrs	r2, r2, #4
 8003e7c:	0452      	lsls	r2, r2, #17
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	492a      	ldr	r1, [pc, #168]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	610b      	str	r3, [r1, #16]
 8003e86:	e027      	b.n	8003ed8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d112      	bne.n	8003eb4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e8e:	4b27      	ldr	r3, [pc, #156]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6892      	ldr	r2, [r2, #8]
 8003e9e:	0211      	lsls	r1, r2, #8
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6912      	ldr	r2, [r2, #16]
 8003ea4:	0852      	lsrs	r2, r2, #1
 8003ea6:	3a01      	subs	r2, #1
 8003ea8:	0552      	lsls	r2, r2, #21
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	491f      	ldr	r1, [pc, #124]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	610b      	str	r3, [r1, #16]
 8003eb2:	e011      	b.n	8003ed8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ebc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6892      	ldr	r2, [r2, #8]
 8003ec4:	0211      	lsls	r1, r2, #8
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6952      	ldr	r2, [r2, #20]
 8003eca:	0852      	lsrs	r2, r2, #1
 8003ecc:	3a01      	subs	r2, #1
 8003ece:	0652      	lsls	r2, r2, #25
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	4916      	ldr	r1, [pc, #88]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ed8:	4b14      	ldr	r3, [pc, #80]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a13      	ldr	r2, [pc, #76]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ede:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ee2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee4:	f7fc fbb0 	bl	8000648 <HAL_GetTick>
 8003ee8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eea:	e009      	b.n	8003f00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eec:	f7fc fbac 	bl	8000648 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d902      	bls.n	8003f00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	73fb      	strb	r3, [r7, #15]
          break;
 8003efe:	e005      	b.n	8003f0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f00:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ef      	beq.n	8003eec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	4904      	ldr	r1, [pc, #16]	; (8003f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40021000 	.word	0x40021000

08003f30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f3e:	4b6a      	ldr	r3, [pc, #424]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d018      	beq.n	8003f7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f4a:	4b67      	ldr	r3, [pc, #412]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0203 	and.w	r2, r3, #3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d10d      	bne.n	8003f76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
       ||
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f62:	4b61      	ldr	r3, [pc, #388]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	091b      	lsrs	r3, r3, #4
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
       ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d047      	beq.n	8004006 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	73fb      	strb	r3, [r7, #15]
 8003f7a:	e044      	b.n	8004006 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d018      	beq.n	8003fb6 <RCCEx_PLLSAI2_Config+0x86>
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d825      	bhi.n	8003fd4 <RCCEx_PLLSAI2_Config+0xa4>
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d002      	beq.n	8003f92 <RCCEx_PLLSAI2_Config+0x62>
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d009      	beq.n	8003fa4 <RCCEx_PLLSAI2_Config+0x74>
 8003f90:	e020      	b.n	8003fd4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f92:	4b55      	ldr	r3, [pc, #340]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d11d      	bne.n	8003fda <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa2:	e01a      	b.n	8003fda <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fa4:	4b50      	ldr	r3, [pc, #320]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d116      	bne.n	8003fde <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb4:	e013      	b.n	8003fde <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fb6:	4b4c      	ldr	r3, [pc, #304]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10f      	bne.n	8003fe2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fc2:	4b49      	ldr	r3, [pc, #292]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d109      	bne.n	8003fe2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fd2:	e006      	b.n	8003fe2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd8:	e004      	b.n	8003fe4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e002      	b.n	8003fe4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e000      	b.n	8003fe4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fe2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10d      	bne.n	8004006 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fea:	4b3f      	ldr	r3, [pc, #252]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6819      	ldr	r1, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	430b      	orrs	r3, r1
 8004000:	4939      	ldr	r1, [pc, #228]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004002:	4313      	orrs	r3, r2
 8004004:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d167      	bne.n	80040dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800400c:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a35      	ldr	r2, [pc, #212]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004018:	f7fc fb16 	bl	8000648 <HAL_GetTick>
 800401c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800401e:	e009      	b.n	8004034 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004020:	f7fc fb12 	bl	8000648 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d902      	bls.n	8004034 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	73fb      	strb	r3, [r7, #15]
        break;
 8004032:	e005      	b.n	8004040 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004034:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1ef      	bne.n	8004020 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d14a      	bne.n	80040dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d111      	bne.n	8004070 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800404c:	4b26      	ldr	r3, [pc, #152]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6892      	ldr	r2, [r2, #8]
 800405c:	0211      	lsls	r1, r2, #8
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68d2      	ldr	r2, [r2, #12]
 8004062:	0912      	lsrs	r2, r2, #4
 8004064:	0452      	lsls	r2, r2, #17
 8004066:	430a      	orrs	r2, r1
 8004068:	491f      	ldr	r1, [pc, #124]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800406a:	4313      	orrs	r3, r2
 800406c:	614b      	str	r3, [r1, #20]
 800406e:	e011      	b.n	8004094 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004070:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004078:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6892      	ldr	r2, [r2, #8]
 8004080:	0211      	lsls	r1, r2, #8
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6912      	ldr	r2, [r2, #16]
 8004086:	0852      	lsrs	r2, r2, #1
 8004088:	3a01      	subs	r2, #1
 800408a:	0652      	lsls	r2, r2, #25
 800408c:	430a      	orrs	r2, r1
 800408e:	4916      	ldr	r1, [pc, #88]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004090:	4313      	orrs	r3, r2
 8004092:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004094:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a13      	ldr	r2, [pc, #76]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800409a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a0:	f7fc fad2 	bl	8000648 <HAL_GetTick>
 80040a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040a6:	e009      	b.n	80040bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040a8:	f7fc face 	bl	8000648 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d902      	bls.n	80040bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	73fb      	strb	r3, [r7, #15]
          break;
 80040ba:	e005      	b.n	80040c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040bc:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0ef      	beq.n	80040a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	4904      	ldr	r1, [pc, #16]	; (80040e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000

080040ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e049      	b.n	8004192 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f004 fcfc 	bl	8008b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3304      	adds	r3, #4
 8004128:	4619      	mov	r1, r3
 800412a:	4610      	mov	r0, r2
 800412c:	f000 fab4 	bl	8004698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d001      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e04f      	b.n	8004254 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a23      	ldr	r2, [pc, #140]	; (8004260 <HAL_TIM_Base_Start_IT+0xc4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d01d      	beq.n	8004212 <HAL_TIM_Base_Start_IT+0x76>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041de:	d018      	beq.n	8004212 <HAL_TIM_Base_Start_IT+0x76>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1f      	ldr	r2, [pc, #124]	; (8004264 <HAL_TIM_Base_Start_IT+0xc8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <HAL_TIM_Base_Start_IT+0x76>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1e      	ldr	r2, [pc, #120]	; (8004268 <HAL_TIM_Base_Start_IT+0xcc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00e      	beq.n	8004212 <HAL_TIM_Base_Start_IT+0x76>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1c      	ldr	r2, [pc, #112]	; (800426c <HAL_TIM_Base_Start_IT+0xd0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d009      	beq.n	8004212 <HAL_TIM_Base_Start_IT+0x76>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <HAL_TIM_Base_Start_IT+0xd4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d004      	beq.n	8004212 <HAL_TIM_Base_Start_IT+0x76>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a19      	ldr	r2, [pc, #100]	; (8004274 <HAL_TIM_Base_Start_IT+0xd8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d115      	bne.n	800423e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	4b17      	ldr	r3, [pc, #92]	; (8004278 <HAL_TIM_Base_Start_IT+0xdc>)
 800421a:	4013      	ands	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b06      	cmp	r3, #6
 8004222:	d015      	beq.n	8004250 <HAL_TIM_Base_Start_IT+0xb4>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422a:	d011      	beq.n	8004250 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423c:	e008      	b.n	8004250 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0201 	orr.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	e000      	b.n	8004252 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004250:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	40012c00 	.word	0x40012c00
 8004264:	40000400 	.word	0x40000400
 8004268:	40000800 	.word	0x40000800
 800426c:	40000c00 	.word	0x40000c00
 8004270:	40013400 	.word	0x40013400
 8004274:	40014000 	.word	0x40014000
 8004278:	00010007 	.word	0x00010007

0800427c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b02      	cmp	r3, #2
 8004290:	d122      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b02      	cmp	r3, #2
 800429e:	d11b      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0202 	mvn.w	r2, #2
 80042a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f9cb 	bl	800465a <HAL_TIM_IC_CaptureCallback>
 80042c4:	e005      	b.n	80042d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f9bd 	bl	8004646 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f9ce 	bl	800466e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d122      	bne.n	800432c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d11b      	bne.n	800432c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0204 	mvn.w	r2, #4
 80042fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f9a1 	bl	800465a <HAL_TIM_IC_CaptureCallback>
 8004318:	e005      	b.n	8004326 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f993 	bl	8004646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f9a4 	bl	800466e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b08      	cmp	r3, #8
 8004338:	d122      	bne.n	8004380 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b08      	cmp	r3, #8
 8004346:	d11b      	bne.n	8004380 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0208 	mvn.w	r2, #8
 8004350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2204      	movs	r2, #4
 8004356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f977 	bl	800465a <HAL_TIM_IC_CaptureCallback>
 800436c:	e005      	b.n	800437a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f969 	bl	8004646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f97a 	bl	800466e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b10      	cmp	r3, #16
 800438c:	d122      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b10      	cmp	r3, #16
 800439a:	d11b      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0210 	mvn.w	r2, #16
 80043a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2208      	movs	r2, #8
 80043aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f94d 	bl	800465a <HAL_TIM_IC_CaptureCallback>
 80043c0:	e005      	b.n	80043ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f93f 	bl	8004646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f950 	bl	800466e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d10e      	bne.n	8004400 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d107      	bne.n	8004400 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0201 	mvn.w	r2, #1
 80043f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f004 f8fe 	bl	80085fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440a:	2b80      	cmp	r3, #128	; 0x80
 800440c:	d10e      	bne.n	800442c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004418:	2b80      	cmp	r3, #128	; 0x80
 800441a:	d107      	bne.n	800442c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fafc 	bl	8004a24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443a:	d10e      	bne.n	800445a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004446:	2b80      	cmp	r3, #128	; 0x80
 8004448:	d107      	bne.n	800445a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 faef 	bl	8004a38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004464:	2b40      	cmp	r3, #64	; 0x40
 8004466:	d10e      	bne.n	8004486 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	d107      	bne.n	8004486 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800447e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f8fe 	bl	8004682 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b20      	cmp	r3, #32
 8004492:	d10e      	bne.n	80044b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d107      	bne.n	80044b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f06f 0220 	mvn.w	r2, #32
 80044aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 faaf 	bl	8004a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <HAL_TIM_ConfigClockSource+0x18>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e0b5      	b.n	800463e <HAL_TIM_ConfigClockSource+0x184>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2202      	movs	r2, #2
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044f4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044fc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800450e:	d03e      	beq.n	800458e <HAL_TIM_ConfigClockSource+0xd4>
 8004510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004514:	f200 8087 	bhi.w	8004626 <HAL_TIM_ConfigClockSource+0x16c>
 8004518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800451c:	f000 8085 	beq.w	800462a <HAL_TIM_ConfigClockSource+0x170>
 8004520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004524:	d87f      	bhi.n	8004626 <HAL_TIM_ConfigClockSource+0x16c>
 8004526:	2b70      	cmp	r3, #112	; 0x70
 8004528:	d01a      	beq.n	8004560 <HAL_TIM_ConfigClockSource+0xa6>
 800452a:	2b70      	cmp	r3, #112	; 0x70
 800452c:	d87b      	bhi.n	8004626 <HAL_TIM_ConfigClockSource+0x16c>
 800452e:	2b60      	cmp	r3, #96	; 0x60
 8004530:	d050      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0x11a>
 8004532:	2b60      	cmp	r3, #96	; 0x60
 8004534:	d877      	bhi.n	8004626 <HAL_TIM_ConfigClockSource+0x16c>
 8004536:	2b50      	cmp	r3, #80	; 0x50
 8004538:	d03c      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0xfa>
 800453a:	2b50      	cmp	r3, #80	; 0x50
 800453c:	d873      	bhi.n	8004626 <HAL_TIM_ConfigClockSource+0x16c>
 800453e:	2b40      	cmp	r3, #64	; 0x40
 8004540:	d058      	beq.n	80045f4 <HAL_TIM_ConfigClockSource+0x13a>
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	d86f      	bhi.n	8004626 <HAL_TIM_ConfigClockSource+0x16c>
 8004546:	2b30      	cmp	r3, #48	; 0x30
 8004548:	d064      	beq.n	8004614 <HAL_TIM_ConfigClockSource+0x15a>
 800454a:	2b30      	cmp	r3, #48	; 0x30
 800454c:	d86b      	bhi.n	8004626 <HAL_TIM_ConfigClockSource+0x16c>
 800454e:	2b20      	cmp	r3, #32
 8004550:	d060      	beq.n	8004614 <HAL_TIM_ConfigClockSource+0x15a>
 8004552:	2b20      	cmp	r3, #32
 8004554:	d867      	bhi.n	8004626 <HAL_TIM_ConfigClockSource+0x16c>
 8004556:	2b00      	cmp	r3, #0
 8004558:	d05c      	beq.n	8004614 <HAL_TIM_ConfigClockSource+0x15a>
 800455a:	2b10      	cmp	r3, #16
 800455c:	d05a      	beq.n	8004614 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800455e:	e062      	b.n	8004626 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	6899      	ldr	r1, [r3, #8]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f000 f9a6 	bl	80048c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004582:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	609a      	str	r2, [r3, #8]
      break;
 800458c:	e04e      	b.n	800462c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	6899      	ldr	r1, [r3, #8]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f000 f98f 	bl	80048c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045b0:	609a      	str	r2, [r3, #8]
      break;
 80045b2:	e03b      	b.n	800462c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	6859      	ldr	r1, [r3, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	461a      	mov	r2, r3
 80045c2:	f000 f903 	bl	80047cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2150      	movs	r1, #80	; 0x50
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 f95c 	bl	800488a <TIM_ITRx_SetConfig>
      break;
 80045d2:	e02b      	b.n	800462c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	6859      	ldr	r1, [r3, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	461a      	mov	r2, r3
 80045e2:	f000 f922 	bl	800482a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2160      	movs	r1, #96	; 0x60
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 f94c 	bl	800488a <TIM_ITRx_SetConfig>
      break;
 80045f2:	e01b      	b.n	800462c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	6859      	ldr	r1, [r3, #4]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	461a      	mov	r2, r3
 8004602:	f000 f8e3 	bl	80047cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2140      	movs	r1, #64	; 0x40
 800460c:	4618      	mov	r0, r3
 800460e:	f000 f93c 	bl	800488a <TIM_ITRx_SetConfig>
      break;
 8004612:	e00b      	b.n	800462c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f000 f933 	bl	800488a <TIM_ITRx_SetConfig>
        break;
 8004624:	e002      	b.n	800462c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004626:	bf00      	nop
 8004628:	e000      	b.n	800462c <HAL_TIM_ConfigClockSource+0x172>
      break;
 800462a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
	...

08004698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a40      	ldr	r2, [pc, #256]	; (80047ac <TIM_Base_SetConfig+0x114>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d013      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b6:	d00f      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a3d      	ldr	r2, [pc, #244]	; (80047b0 <TIM_Base_SetConfig+0x118>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00b      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a3c      	ldr	r2, [pc, #240]	; (80047b4 <TIM_Base_SetConfig+0x11c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d007      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a3b      	ldr	r2, [pc, #236]	; (80047b8 <TIM_Base_SetConfig+0x120>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d003      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a3a      	ldr	r2, [pc, #232]	; (80047bc <TIM_Base_SetConfig+0x124>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d108      	bne.n	80046ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a2f      	ldr	r2, [pc, #188]	; (80047ac <TIM_Base_SetConfig+0x114>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d01f      	beq.n	8004732 <TIM_Base_SetConfig+0x9a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f8:	d01b      	beq.n	8004732 <TIM_Base_SetConfig+0x9a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a2c      	ldr	r2, [pc, #176]	; (80047b0 <TIM_Base_SetConfig+0x118>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d017      	beq.n	8004732 <TIM_Base_SetConfig+0x9a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a2b      	ldr	r2, [pc, #172]	; (80047b4 <TIM_Base_SetConfig+0x11c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d013      	beq.n	8004732 <TIM_Base_SetConfig+0x9a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a2a      	ldr	r2, [pc, #168]	; (80047b8 <TIM_Base_SetConfig+0x120>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00f      	beq.n	8004732 <TIM_Base_SetConfig+0x9a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a29      	ldr	r2, [pc, #164]	; (80047bc <TIM_Base_SetConfig+0x124>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00b      	beq.n	8004732 <TIM_Base_SetConfig+0x9a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a28      	ldr	r2, [pc, #160]	; (80047c0 <TIM_Base_SetConfig+0x128>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d007      	beq.n	8004732 <TIM_Base_SetConfig+0x9a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a27      	ldr	r2, [pc, #156]	; (80047c4 <TIM_Base_SetConfig+0x12c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d003      	beq.n	8004732 <TIM_Base_SetConfig+0x9a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a26      	ldr	r2, [pc, #152]	; (80047c8 <TIM_Base_SetConfig+0x130>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d108      	bne.n	8004744 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a10      	ldr	r2, [pc, #64]	; (80047ac <TIM_Base_SetConfig+0x114>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00f      	beq.n	8004790 <TIM_Base_SetConfig+0xf8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a12      	ldr	r2, [pc, #72]	; (80047bc <TIM_Base_SetConfig+0x124>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d00b      	beq.n	8004790 <TIM_Base_SetConfig+0xf8>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a11      	ldr	r2, [pc, #68]	; (80047c0 <TIM_Base_SetConfig+0x128>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d007      	beq.n	8004790 <TIM_Base_SetConfig+0xf8>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a10      	ldr	r2, [pc, #64]	; (80047c4 <TIM_Base_SetConfig+0x12c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d003      	beq.n	8004790 <TIM_Base_SetConfig+0xf8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a0f      	ldr	r2, [pc, #60]	; (80047c8 <TIM_Base_SetConfig+0x130>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d103      	bne.n	8004798 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	615a      	str	r2, [r3, #20]
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800
 80047b8:	40000c00 	.word	0x40000c00
 80047bc:	40013400 	.word	0x40013400
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800

080047cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f023 0201 	bic.w	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f023 030a 	bic.w	r3, r3, #10
 8004808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	621a      	str	r2, [r3, #32]
}
 800481e:	bf00      	nop
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800482a:	b480      	push	{r7}
 800482c:	b087      	sub	sp, #28
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f023 0210 	bic.w	r2, r3, #16
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	031b      	lsls	r3, r3, #12
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004866:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	621a      	str	r2, [r3, #32]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800488a:	b480      	push	{r7}
 800488c:	b085      	sub	sp, #20
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f043 0307 	orr.w	r3, r3, #7
 80048ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	609a      	str	r2, [r3, #8]
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	021a      	lsls	r2, r3, #8
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	609a      	str	r2, [r3, #8]
}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004914:	2302      	movs	r3, #2
 8004916:	e068      	b.n	80049ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a2e      	ldr	r2, [pc, #184]	; (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a2d      	ldr	r2, [pc, #180]	; (80049fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d108      	bne.n	800495e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004952:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004964:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1e      	ldr	r2, [pc, #120]	; (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01d      	beq.n	80049be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498a:	d018      	beq.n	80049be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1b      	ldr	r2, [pc, #108]	; (8004a00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1a      	ldr	r2, [pc, #104]	; (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00e      	beq.n	80049be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a18      	ldr	r2, [pc, #96]	; (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d009      	beq.n	80049be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a13      	ldr	r2, [pc, #76]	; (80049fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d004      	beq.n	80049be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a14      	ldr	r2, [pc, #80]	; (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d10c      	bne.n	80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	40013400 	.word	0x40013400
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40000c00 	.word	0x40000c00
 8004a0c:	40014000 	.word	0x40014000

08004a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e040      	b.n	8004ae0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f004 f872 	bl	8008b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2224      	movs	r2, #36	; 0x24
 8004a78:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0201 	bic.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f8c0 	bl	8004c10 <UART_SetConfig>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e022      	b.n	8004ae0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fb3e 	bl	8005124 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ac6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 fbc5 	bl	8005268 <UART_CheckIdleState>
 8004ade:	4603      	mov	r3, r0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	; 0x28
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	f040 8082 	bne.w	8004c06 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_UART_Transmit+0x26>
 8004b08:	88fb      	ldrh	r3, [r7, #6]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e07a      	b.n	8004c08 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_UART_Transmit+0x38>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e073      	b.n	8004c08 <HAL_UART_Transmit+0x120>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2221      	movs	r2, #33	; 0x21
 8004b34:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b36:	f7fb fd87 	bl	8000648 <HAL_GetTick>
 8004b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	88fa      	ldrh	r2, [r7, #6]
 8004b40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	88fa      	ldrh	r2, [r7, #6]
 8004b48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b54:	d108      	bne.n	8004b68 <HAL_UART_Transmit+0x80>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d104      	bne.n	8004b68 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	e003      	b.n	8004b70 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004b78:	e02d      	b.n	8004bd6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2200      	movs	r2, #0
 8004b82:	2180      	movs	r1, #128	; 0x80
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 fbb8 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e039      	b.n	8004c08 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10b      	bne.n	8004bb2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	881a      	ldrh	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba6:	b292      	uxth	r2, r2
 8004ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	3302      	adds	r3, #2
 8004bae:	61bb      	str	r3, [r7, #24]
 8004bb0:	e008      	b.n	8004bc4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	781a      	ldrb	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	b292      	uxth	r2, r2
 8004bbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1cb      	bne.n	8004b7a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2200      	movs	r2, #0
 8004bea:	2140      	movs	r1, #64	; 0x40
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fb84 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e005      	b.n	8004c08 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e000      	b.n	8004c08 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004c06:	2302      	movs	r3, #2
  }
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3720      	adds	r7, #32
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c10:	b5b0      	push	{r4, r5, r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4bad      	ldr	r3, [pc, #692]	; (8004ef0 <UART_SetConfig+0x2e0>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	69f9      	ldr	r1, [r7, #28]
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4aa2      	ldr	r2, [pc, #648]	; (8004ef4 <UART_SetConfig+0x2e4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a99      	ldr	r2, [pc, #612]	; (8004ef8 <UART_SetConfig+0x2e8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d121      	bne.n	8004cda <UART_SetConfig+0xca>
 8004c96:	4b99      	ldr	r3, [pc, #612]	; (8004efc <UART_SetConfig+0x2ec>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9c:	f003 0303 	and.w	r3, r3, #3
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d817      	bhi.n	8004cd4 <UART_SetConfig+0xc4>
 8004ca4:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <UART_SetConfig+0x9c>)
 8004ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004caa:	bf00      	nop
 8004cac:	08004cbd 	.word	0x08004cbd
 8004cb0:	08004cc9 	.word	0x08004cc9
 8004cb4:	08004cc3 	.word	0x08004cc3
 8004cb8:	08004ccf 	.word	0x08004ccf
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	76fb      	strb	r3, [r7, #27]
 8004cc0:	e0e7      	b.n	8004e92 <UART_SetConfig+0x282>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	76fb      	strb	r3, [r7, #27]
 8004cc6:	e0e4      	b.n	8004e92 <UART_SetConfig+0x282>
 8004cc8:	2304      	movs	r3, #4
 8004cca:	76fb      	strb	r3, [r7, #27]
 8004ccc:	e0e1      	b.n	8004e92 <UART_SetConfig+0x282>
 8004cce:	2308      	movs	r3, #8
 8004cd0:	76fb      	strb	r3, [r7, #27]
 8004cd2:	e0de      	b.n	8004e92 <UART_SetConfig+0x282>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	76fb      	strb	r3, [r7, #27]
 8004cd8:	e0db      	b.n	8004e92 <UART_SetConfig+0x282>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a88      	ldr	r2, [pc, #544]	; (8004f00 <UART_SetConfig+0x2f0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d132      	bne.n	8004d4a <UART_SetConfig+0x13a>
 8004ce4:	4b85      	ldr	r3, [pc, #532]	; (8004efc <UART_SetConfig+0x2ec>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	f003 030c 	and.w	r3, r3, #12
 8004cee:	2b0c      	cmp	r3, #12
 8004cf0:	d828      	bhi.n	8004d44 <UART_SetConfig+0x134>
 8004cf2:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <UART_SetConfig+0xe8>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	08004d2d 	.word	0x08004d2d
 8004cfc:	08004d45 	.word	0x08004d45
 8004d00:	08004d45 	.word	0x08004d45
 8004d04:	08004d45 	.word	0x08004d45
 8004d08:	08004d39 	.word	0x08004d39
 8004d0c:	08004d45 	.word	0x08004d45
 8004d10:	08004d45 	.word	0x08004d45
 8004d14:	08004d45 	.word	0x08004d45
 8004d18:	08004d33 	.word	0x08004d33
 8004d1c:	08004d45 	.word	0x08004d45
 8004d20:	08004d45 	.word	0x08004d45
 8004d24:	08004d45 	.word	0x08004d45
 8004d28:	08004d3f 	.word	0x08004d3f
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	76fb      	strb	r3, [r7, #27]
 8004d30:	e0af      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d32:	2302      	movs	r3, #2
 8004d34:	76fb      	strb	r3, [r7, #27]
 8004d36:	e0ac      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d38:	2304      	movs	r3, #4
 8004d3a:	76fb      	strb	r3, [r7, #27]
 8004d3c:	e0a9      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d3e:	2308      	movs	r3, #8
 8004d40:	76fb      	strb	r3, [r7, #27]
 8004d42:	e0a6      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d44:	2310      	movs	r3, #16
 8004d46:	76fb      	strb	r3, [r7, #27]
 8004d48:	e0a3      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a6d      	ldr	r2, [pc, #436]	; (8004f04 <UART_SetConfig+0x2f4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d120      	bne.n	8004d96 <UART_SetConfig+0x186>
 8004d54:	4b69      	ldr	r3, [pc, #420]	; (8004efc <UART_SetConfig+0x2ec>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d5e:	2b30      	cmp	r3, #48	; 0x30
 8004d60:	d013      	beq.n	8004d8a <UART_SetConfig+0x17a>
 8004d62:	2b30      	cmp	r3, #48	; 0x30
 8004d64:	d814      	bhi.n	8004d90 <UART_SetConfig+0x180>
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d009      	beq.n	8004d7e <UART_SetConfig+0x16e>
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d810      	bhi.n	8004d90 <UART_SetConfig+0x180>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <UART_SetConfig+0x168>
 8004d72:	2b10      	cmp	r3, #16
 8004d74:	d006      	beq.n	8004d84 <UART_SetConfig+0x174>
 8004d76:	e00b      	b.n	8004d90 <UART_SetConfig+0x180>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	76fb      	strb	r3, [r7, #27]
 8004d7c:	e089      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d7e:	2302      	movs	r3, #2
 8004d80:	76fb      	strb	r3, [r7, #27]
 8004d82:	e086      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d84:	2304      	movs	r3, #4
 8004d86:	76fb      	strb	r3, [r7, #27]
 8004d88:	e083      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d8a:	2308      	movs	r3, #8
 8004d8c:	76fb      	strb	r3, [r7, #27]
 8004d8e:	e080      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d90:	2310      	movs	r3, #16
 8004d92:	76fb      	strb	r3, [r7, #27]
 8004d94:	e07d      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a5b      	ldr	r2, [pc, #364]	; (8004f08 <UART_SetConfig+0x2f8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d120      	bne.n	8004de2 <UART_SetConfig+0x1d2>
 8004da0:	4b56      	ldr	r3, [pc, #344]	; (8004efc <UART_SetConfig+0x2ec>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004daa:	2bc0      	cmp	r3, #192	; 0xc0
 8004dac:	d013      	beq.n	8004dd6 <UART_SetConfig+0x1c6>
 8004dae:	2bc0      	cmp	r3, #192	; 0xc0
 8004db0:	d814      	bhi.n	8004ddc <UART_SetConfig+0x1cc>
 8004db2:	2b80      	cmp	r3, #128	; 0x80
 8004db4:	d009      	beq.n	8004dca <UART_SetConfig+0x1ba>
 8004db6:	2b80      	cmp	r3, #128	; 0x80
 8004db8:	d810      	bhi.n	8004ddc <UART_SetConfig+0x1cc>
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <UART_SetConfig+0x1b4>
 8004dbe:	2b40      	cmp	r3, #64	; 0x40
 8004dc0:	d006      	beq.n	8004dd0 <UART_SetConfig+0x1c0>
 8004dc2:	e00b      	b.n	8004ddc <UART_SetConfig+0x1cc>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	76fb      	strb	r3, [r7, #27]
 8004dc8:	e063      	b.n	8004e92 <UART_SetConfig+0x282>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	76fb      	strb	r3, [r7, #27]
 8004dce:	e060      	b.n	8004e92 <UART_SetConfig+0x282>
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	76fb      	strb	r3, [r7, #27]
 8004dd4:	e05d      	b.n	8004e92 <UART_SetConfig+0x282>
 8004dd6:	2308      	movs	r3, #8
 8004dd8:	76fb      	strb	r3, [r7, #27]
 8004dda:	e05a      	b.n	8004e92 <UART_SetConfig+0x282>
 8004ddc:	2310      	movs	r3, #16
 8004dde:	76fb      	strb	r3, [r7, #27]
 8004de0:	e057      	b.n	8004e92 <UART_SetConfig+0x282>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a49      	ldr	r2, [pc, #292]	; (8004f0c <UART_SetConfig+0x2fc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d125      	bne.n	8004e38 <UART_SetConfig+0x228>
 8004dec:	4b43      	ldr	r3, [pc, #268]	; (8004efc <UART_SetConfig+0x2ec>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dfa:	d017      	beq.n	8004e2c <UART_SetConfig+0x21c>
 8004dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e00:	d817      	bhi.n	8004e32 <UART_SetConfig+0x222>
 8004e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e06:	d00b      	beq.n	8004e20 <UART_SetConfig+0x210>
 8004e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e0c:	d811      	bhi.n	8004e32 <UART_SetConfig+0x222>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <UART_SetConfig+0x20a>
 8004e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e16:	d006      	beq.n	8004e26 <UART_SetConfig+0x216>
 8004e18:	e00b      	b.n	8004e32 <UART_SetConfig+0x222>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	76fb      	strb	r3, [r7, #27]
 8004e1e:	e038      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e20:	2302      	movs	r3, #2
 8004e22:	76fb      	strb	r3, [r7, #27]
 8004e24:	e035      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e26:	2304      	movs	r3, #4
 8004e28:	76fb      	strb	r3, [r7, #27]
 8004e2a:	e032      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e2c:	2308      	movs	r3, #8
 8004e2e:	76fb      	strb	r3, [r7, #27]
 8004e30:	e02f      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e32:	2310      	movs	r3, #16
 8004e34:	76fb      	strb	r3, [r7, #27]
 8004e36:	e02c      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ef4 <UART_SetConfig+0x2e4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d125      	bne.n	8004e8e <UART_SetConfig+0x27e>
 8004e42:	4b2e      	ldr	r3, [pc, #184]	; (8004efc <UART_SetConfig+0x2ec>)
 8004e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e50:	d017      	beq.n	8004e82 <UART_SetConfig+0x272>
 8004e52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e56:	d817      	bhi.n	8004e88 <UART_SetConfig+0x278>
 8004e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e5c:	d00b      	beq.n	8004e76 <UART_SetConfig+0x266>
 8004e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e62:	d811      	bhi.n	8004e88 <UART_SetConfig+0x278>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <UART_SetConfig+0x260>
 8004e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6c:	d006      	beq.n	8004e7c <UART_SetConfig+0x26c>
 8004e6e:	e00b      	b.n	8004e88 <UART_SetConfig+0x278>
 8004e70:	2300      	movs	r3, #0
 8004e72:	76fb      	strb	r3, [r7, #27]
 8004e74:	e00d      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e76:	2302      	movs	r3, #2
 8004e78:	76fb      	strb	r3, [r7, #27]
 8004e7a:	e00a      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	76fb      	strb	r3, [r7, #27]
 8004e80:	e007      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e82:	2308      	movs	r3, #8
 8004e84:	76fb      	strb	r3, [r7, #27]
 8004e86:	e004      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	76fb      	strb	r3, [r7, #27]
 8004e8c:	e001      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e8e:	2310      	movs	r3, #16
 8004e90:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a17      	ldr	r2, [pc, #92]	; (8004ef4 <UART_SetConfig+0x2e4>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	f040 8087 	bne.w	8004fac <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e9e:	7efb      	ldrb	r3, [r7, #27]
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d837      	bhi.n	8004f14 <UART_SetConfig+0x304>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <UART_SetConfig+0x29c>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004ed1 	.word	0x08004ed1
 8004eb0:	08004f15 	.word	0x08004f15
 8004eb4:	08004ed9 	.word	0x08004ed9
 8004eb8:	08004f15 	.word	0x08004f15
 8004ebc:	08004edf 	.word	0x08004edf
 8004ec0:	08004f15 	.word	0x08004f15
 8004ec4:	08004f15 	.word	0x08004f15
 8004ec8:	08004f15 	.word	0x08004f15
 8004ecc:	08004ee7 	.word	0x08004ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed0:	f7fe fbc4 	bl	800365c <HAL_RCC_GetPCLK1Freq>
 8004ed4:	6178      	str	r0, [r7, #20]
        break;
 8004ed6:	e022      	b.n	8004f1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ed8:	4b0d      	ldr	r3, [pc, #52]	; (8004f10 <UART_SetConfig+0x300>)
 8004eda:	617b      	str	r3, [r7, #20]
        break;
 8004edc:	e01f      	b.n	8004f1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ede:	f7fe fb25 	bl	800352c <HAL_RCC_GetSysClockFreq>
 8004ee2:	6178      	str	r0, [r7, #20]
        break;
 8004ee4:	e01b      	b.n	8004f1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eea:	617b      	str	r3, [r7, #20]
        break;
 8004eec:	e017      	b.n	8004f1e <UART_SetConfig+0x30e>
 8004eee:	bf00      	nop
 8004ef0:	efff69f3 	.word	0xefff69f3
 8004ef4:	40008000 	.word	0x40008000
 8004ef8:	40013800 	.word	0x40013800
 8004efc:	40021000 	.word	0x40021000
 8004f00:	40004400 	.word	0x40004400
 8004f04:	40004800 	.word	0x40004800
 8004f08:	40004c00 	.word	0x40004c00
 8004f0c:	40005000 	.word	0x40005000
 8004f10:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	76bb      	strb	r3, [r7, #26]
        break;
 8004f1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80f1 	beq.w	8005108 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	4413      	add	r3, r2
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d305      	bcc.n	8004f42 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d902      	bls.n	8004f48 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	76bb      	strb	r3, [r7, #26]
 8004f46:	e0df      	b.n	8005108 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f04f 0100 	mov.w	r1, #0
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	020b      	lsls	r3, r1, #8
 8004f5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f5e:	0202      	lsls	r2, r0, #8
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	6849      	ldr	r1, [r1, #4]
 8004f64:	0849      	lsrs	r1, r1, #1
 8004f66:	4608      	mov	r0, r1
 8004f68:	f04f 0100 	mov.w	r1, #0
 8004f6c:	1814      	adds	r4, r2, r0
 8004f6e:	eb43 0501 	adc.w	r5, r3, r1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	4629      	mov	r1, r5
 8004f80:	f7fb f97e 	bl	8000280 <__aeabi_uldivmod>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4613      	mov	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f92:	d308      	bcc.n	8004fa6 <UART_SetConfig+0x396>
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9a:	d204      	bcs.n	8004fa6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	60da      	str	r2, [r3, #12]
 8004fa4:	e0b0      	b.n	8005108 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	76bb      	strb	r3, [r7, #26]
 8004faa:	e0ad      	b.n	8005108 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb4:	d15c      	bne.n	8005070 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004fb6:	7efb      	ldrb	r3, [r7, #27]
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d828      	bhi.n	800500e <UART_SetConfig+0x3fe>
 8004fbc:	a201      	add	r2, pc, #4	; (adr r2, 8004fc4 <UART_SetConfig+0x3b4>)
 8004fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	08004ff1 	.word	0x08004ff1
 8004fcc:	08004ff9 	.word	0x08004ff9
 8004fd0:	0800500f 	.word	0x0800500f
 8004fd4:	08004fff 	.word	0x08004fff
 8004fd8:	0800500f 	.word	0x0800500f
 8004fdc:	0800500f 	.word	0x0800500f
 8004fe0:	0800500f 	.word	0x0800500f
 8004fe4:	08005007 	.word	0x08005007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe8:	f7fe fb38 	bl	800365c <HAL_RCC_GetPCLK1Freq>
 8004fec:	6178      	str	r0, [r7, #20]
        break;
 8004fee:	e013      	b.n	8005018 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff0:	f7fe fb4a 	bl	8003688 <HAL_RCC_GetPCLK2Freq>
 8004ff4:	6178      	str	r0, [r7, #20]
        break;
 8004ff6:	e00f      	b.n	8005018 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff8:	4b49      	ldr	r3, [pc, #292]	; (8005120 <UART_SetConfig+0x510>)
 8004ffa:	617b      	str	r3, [r7, #20]
        break;
 8004ffc:	e00c      	b.n	8005018 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ffe:	f7fe fa95 	bl	800352c <HAL_RCC_GetSysClockFreq>
 8005002:	6178      	str	r0, [r7, #20]
        break;
 8005004:	e008      	b.n	8005018 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500a:	617b      	str	r3, [r7, #20]
        break;
 800500c:	e004      	b.n	8005018 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	76bb      	strb	r3, [r7, #26]
        break;
 8005016:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d074      	beq.n	8005108 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	005a      	lsls	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	085b      	lsrs	r3, r3, #1
 8005028:	441a      	add	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005032:	b29b      	uxth	r3, r3
 8005034:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2b0f      	cmp	r3, #15
 800503a:	d916      	bls.n	800506a <UART_SetConfig+0x45a>
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005042:	d212      	bcs.n	800506a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f023 030f 	bic.w	r3, r3, #15
 800504c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	085b      	lsrs	r3, r3, #1
 8005052:	b29b      	uxth	r3, r3
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	b29a      	uxth	r2, r3
 800505a:	89fb      	ldrh	r3, [r7, #14]
 800505c:	4313      	orrs	r3, r2
 800505e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	89fa      	ldrh	r2, [r7, #14]
 8005066:	60da      	str	r2, [r3, #12]
 8005068:	e04e      	b.n	8005108 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	76bb      	strb	r3, [r7, #26]
 800506e:	e04b      	b.n	8005108 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005070:	7efb      	ldrb	r3, [r7, #27]
 8005072:	2b08      	cmp	r3, #8
 8005074:	d827      	bhi.n	80050c6 <UART_SetConfig+0x4b6>
 8005076:	a201      	add	r2, pc, #4	; (adr r2, 800507c <UART_SetConfig+0x46c>)
 8005078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507c:	080050a1 	.word	0x080050a1
 8005080:	080050a9 	.word	0x080050a9
 8005084:	080050b1 	.word	0x080050b1
 8005088:	080050c7 	.word	0x080050c7
 800508c:	080050b7 	.word	0x080050b7
 8005090:	080050c7 	.word	0x080050c7
 8005094:	080050c7 	.word	0x080050c7
 8005098:	080050c7 	.word	0x080050c7
 800509c:	080050bf 	.word	0x080050bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a0:	f7fe fadc 	bl	800365c <HAL_RCC_GetPCLK1Freq>
 80050a4:	6178      	str	r0, [r7, #20]
        break;
 80050a6:	e013      	b.n	80050d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050a8:	f7fe faee 	bl	8003688 <HAL_RCC_GetPCLK2Freq>
 80050ac:	6178      	str	r0, [r7, #20]
        break;
 80050ae:	e00f      	b.n	80050d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b0:	4b1b      	ldr	r3, [pc, #108]	; (8005120 <UART_SetConfig+0x510>)
 80050b2:	617b      	str	r3, [r7, #20]
        break;
 80050b4:	e00c      	b.n	80050d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050b6:	f7fe fa39 	bl	800352c <HAL_RCC_GetSysClockFreq>
 80050ba:	6178      	str	r0, [r7, #20]
        break;
 80050bc:	e008      	b.n	80050d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050c2:	617b      	str	r3, [r7, #20]
        break;
 80050c4:	e004      	b.n	80050d0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	76bb      	strb	r3, [r7, #26]
        break;
 80050ce:	bf00      	nop
    }

    if (pclk != 0U)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d018      	beq.n	8005108 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	085a      	lsrs	r2, r3, #1
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	441a      	add	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b0f      	cmp	r3, #15
 80050f0:	d908      	bls.n	8005104 <UART_SetConfig+0x4f4>
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f8:	d204      	bcs.n	8005104 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	60da      	str	r2, [r3, #12]
 8005102:	e001      	b.n	8005108 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005114:	7ebb      	ldrb	r3, [r7, #26]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3720      	adds	r7, #32
 800511a:	46bd      	mov	sp, r7
 800511c:	bdb0      	pop	{r4, r5, r7, pc}
 800511e:	bf00      	nop
 8005120:	00f42400 	.word	0x00f42400

08005124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01a      	beq.n	800523a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005222:	d10a      	bne.n	800523a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	605a      	str	r2, [r3, #4]
  }
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af02      	add	r7, sp, #8
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005278:	f7fb f9e6 	bl	8000648 <HAL_GetTick>
 800527c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b08      	cmp	r3, #8
 800528a:	d10e      	bne.n	80052aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800528c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f82d 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e023      	b.n	80052f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d10e      	bne.n	80052d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f817 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e00d      	b.n	80052f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b084      	sub	sp, #16
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	603b      	str	r3, [r7, #0]
 8005306:	4613      	mov	r3, r2
 8005308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530a:	e05e      	b.n	80053ca <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d05a      	beq.n	80053ca <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005314:	f7fb f998 	bl	8000648 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	429a      	cmp	r2, r3
 8005322:	d302      	bcc.n	800532a <UART_WaitOnFlagUntilTimeout+0x30>
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d11b      	bne.n	8005362 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005338:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0201 	bic.w	r2, r2, #1
 8005348:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2220      	movs	r2, #32
 8005354:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e043      	b.n	80053ea <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d02c      	beq.n	80053ca <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800537a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800537e:	d124      	bne.n	80053ca <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005388:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005398:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0201 	bic.w	r2, r2, #1
 80053a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2220      	movs	r2, #32
 80053ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e00f      	b.n	80053ea <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4013      	ands	r3, r2
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	bf0c      	ite	eq
 80053da:	2301      	moveq	r3, #1
 80053dc:	2300      	movne	r3, #0
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d091      	beq.n	800530c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053f2:	b084      	sub	sp, #16
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	f107 001c 	add.w	r0, r7, #28
 8005400:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f001 f9cf 	bl	80067b4 <USB_CoreReset>
 8005416:	4603      	mov	r3, r0
 8005418:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800541a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d106      	bne.n	800542e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	639a      	str	r2, [r3, #56]	; 0x38
 800542c:	e005      	b.n	800543a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800543a:	7bfb      	ldrb	r3, [r7, #15]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005446:	b004      	add	sp, #16
 8005448:	4770      	bx	lr
	...

0800544c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	4613      	mov	r3, r2
 8005458:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800545a:	79fb      	ldrb	r3, [r7, #7]
 800545c:	2b02      	cmp	r3, #2
 800545e:	d165      	bne.n	800552c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4a3e      	ldr	r2, [pc, #248]	; (800555c <USB_SetTurnaroundTime+0x110>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d906      	bls.n	8005476 <USB_SetTurnaroundTime+0x2a>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4a3d      	ldr	r2, [pc, #244]	; (8005560 <USB_SetTurnaroundTime+0x114>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d202      	bcs.n	8005476 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005470:	230f      	movs	r3, #15
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	e05c      	b.n	8005530 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	4a39      	ldr	r2, [pc, #228]	; (8005560 <USB_SetTurnaroundTime+0x114>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d306      	bcc.n	800548c <USB_SetTurnaroundTime+0x40>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	4a38      	ldr	r2, [pc, #224]	; (8005564 <USB_SetTurnaroundTime+0x118>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d202      	bcs.n	800548c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005486:	230e      	movs	r3, #14
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	e051      	b.n	8005530 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4a35      	ldr	r2, [pc, #212]	; (8005564 <USB_SetTurnaroundTime+0x118>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d306      	bcc.n	80054a2 <USB_SetTurnaroundTime+0x56>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4a34      	ldr	r2, [pc, #208]	; (8005568 <USB_SetTurnaroundTime+0x11c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d202      	bcs.n	80054a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800549c:	230d      	movs	r3, #13
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e046      	b.n	8005530 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	4a30      	ldr	r2, [pc, #192]	; (8005568 <USB_SetTurnaroundTime+0x11c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d306      	bcc.n	80054b8 <USB_SetTurnaroundTime+0x6c>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4a2f      	ldr	r2, [pc, #188]	; (800556c <USB_SetTurnaroundTime+0x120>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d802      	bhi.n	80054b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054b2:	230c      	movs	r3, #12
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	e03b      	b.n	8005530 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4a2c      	ldr	r2, [pc, #176]	; (800556c <USB_SetTurnaroundTime+0x120>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d906      	bls.n	80054ce <USB_SetTurnaroundTime+0x82>
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4a2b      	ldr	r2, [pc, #172]	; (8005570 <USB_SetTurnaroundTime+0x124>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d802      	bhi.n	80054ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054c8:	230b      	movs	r3, #11
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	e030      	b.n	8005530 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	4a27      	ldr	r2, [pc, #156]	; (8005570 <USB_SetTurnaroundTime+0x124>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d906      	bls.n	80054e4 <USB_SetTurnaroundTime+0x98>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4a26      	ldr	r2, [pc, #152]	; (8005574 <USB_SetTurnaroundTime+0x128>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d802      	bhi.n	80054e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054de:	230a      	movs	r3, #10
 80054e0:	617b      	str	r3, [r7, #20]
 80054e2:	e025      	b.n	8005530 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4a23      	ldr	r2, [pc, #140]	; (8005574 <USB_SetTurnaroundTime+0x128>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d906      	bls.n	80054fa <USB_SetTurnaroundTime+0xae>
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4a22      	ldr	r2, [pc, #136]	; (8005578 <USB_SetTurnaroundTime+0x12c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d202      	bcs.n	80054fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054f4:	2309      	movs	r3, #9
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	e01a      	b.n	8005530 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	4a1e      	ldr	r2, [pc, #120]	; (8005578 <USB_SetTurnaroundTime+0x12c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d306      	bcc.n	8005510 <USB_SetTurnaroundTime+0xc4>
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4a1d      	ldr	r2, [pc, #116]	; (800557c <USB_SetTurnaroundTime+0x130>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d802      	bhi.n	8005510 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800550a:	2308      	movs	r3, #8
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	e00f      	b.n	8005530 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4a1a      	ldr	r2, [pc, #104]	; (800557c <USB_SetTurnaroundTime+0x130>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d906      	bls.n	8005526 <USB_SetTurnaroundTime+0xda>
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4a19      	ldr	r2, [pc, #100]	; (8005580 <USB_SetTurnaroundTime+0x134>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d202      	bcs.n	8005526 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005520:	2307      	movs	r3, #7
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	e004      	b.n	8005530 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005526:	2306      	movs	r3, #6
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	e001      	b.n	8005530 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800552c:	2309      	movs	r3, #9
 800552e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	029b      	lsls	r3, r3, #10
 8005544:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005548:	431a      	orrs	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	371c      	adds	r7, #28
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	00d8acbf 	.word	0x00d8acbf
 8005560:	00e4e1c0 	.word	0x00e4e1c0
 8005564:	00f42400 	.word	0x00f42400
 8005568:	01067380 	.word	0x01067380
 800556c:	011a499f 	.word	0x011a499f
 8005570:	01312cff 	.word	0x01312cff
 8005574:	014ca43f 	.word	0x014ca43f
 8005578:	016e3600 	.word	0x016e3600
 800557c:	01a6ab1f 	.word	0x01a6ab1f
 8005580:	01e84800 	.word	0x01e84800

08005584 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f043 0201 	orr.w	r2, r3, #1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f023 0201 	bic.w	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d106      	bne.n	80055f4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	60da      	str	r2, [r3, #12]
 80055f2:	e00b      	b.n	800560c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80055f4:	78fb      	ldrb	r3, [r7, #3]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	60da      	str	r2, [r3, #12]
 8005606:	e001      	b.n	800560c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e003      	b.n	8005614 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800560c:	2032      	movs	r0, #50	; 0x32
 800560e:	f7fb f827 	bl	8000660 <HAL_Delay>

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800561c:	b084      	sub	sp, #16
 800561e:	b580      	push	{r7, lr}
 8005620:	b086      	sub	sp, #24
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800562a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800562e:	2300      	movs	r3, #0
 8005630:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005636:	2300      	movs	r3, #0
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	e009      	b.n	8005650 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	3340      	adds	r3, #64	; 0x40
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	2200      	movs	r2, #0
 8005648:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	3301      	adds	r3, #1
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	2b0e      	cmp	r3, #14
 8005654:	d9f2      	bls.n	800563c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d11c      	bne.n	8005696 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800566a:	f043 0302 	orr.w	r3, r3, #2
 800566e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	e005      	b.n	80056a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056a8:	461a      	mov	r2, r3
 80056aa:	2300      	movs	r3, #0
 80056ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b4:	4619      	mov	r1, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056bc:	461a      	mov	r2, r3
 80056be:	680b      	ldr	r3, [r1, #0]
 80056c0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056c2:	2103      	movs	r1, #3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f93d 	bl	8005944 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056ca:	2110      	movs	r1, #16
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f8f1 	bl	80058b4 <USB_FlushTxFifo>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f90f 	bl	8005900 <USB_FlushRxFifo>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f2:	461a      	mov	r2, r3
 80056f4:	2300      	movs	r3, #0
 80056f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fe:	461a      	mov	r2, r3
 8005700:	2300      	movs	r3, #0
 8005702:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570a:	461a      	mov	r2, r3
 800570c:	2300      	movs	r3, #0
 800570e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005710:	2300      	movs	r3, #0
 8005712:	613b      	str	r3, [r7, #16]
 8005714:	e043      	b.n	800579e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005728:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800572c:	d118      	bne.n	8005760 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005740:	461a      	mov	r2, r3
 8005742:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	e013      	b.n	8005772 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005756:	461a      	mov	r2, r3
 8005758:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	e008      	b.n	8005772 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576c:	461a      	mov	r2, r3
 800576e:	2300      	movs	r3, #0
 8005770:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577e:	461a      	mov	r2, r3
 8005780:	2300      	movs	r3, #0
 8005782:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005790:	461a      	mov	r2, r3
 8005792:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005796:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	3301      	adds	r3, #1
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d3b7      	bcc.n	8005716 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057a6:	2300      	movs	r3, #0
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	e043      	b.n	8005834 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057c2:	d118      	bne.n	80057f6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10a      	bne.n	80057e0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d6:	461a      	mov	r2, r3
 80057d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	e013      	b.n	8005808 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ec:	461a      	mov	r2, r3
 80057ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	e008      	b.n	8005808 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005802:	461a      	mov	r2, r3
 8005804:	2300      	movs	r3, #0
 8005806:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005814:	461a      	mov	r2, r3
 8005816:	2300      	movs	r3, #0
 8005818:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005826:	461a      	mov	r2, r3
 8005828:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800582c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	3301      	adds	r3, #1
 8005832:	613b      	str	r3, [r7, #16]
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	429a      	cmp	r2, r3
 800583a:	d3b7      	bcc.n	80057ac <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800584a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800584e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800585c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	f043 0210 	orr.w	r2, r3, #16
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <USB_DevInit+0x294>)
 8005870:	4313      	orrs	r3, r2
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f043 0208 	orr.w	r2, r3, #8
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588a:	2b01      	cmp	r3, #1
 800588c:	d107      	bne.n	800589e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005896:	f043 0304 	orr.w	r3, r3, #4
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800589e:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058aa:	b004      	add	sp, #16
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	803c3800 	.word	0x803c3800

080058b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	019b      	lsls	r3, r3, #6
 80058c6:	f043 0220 	orr.w	r2, r3, #32
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3301      	adds	r3, #1
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4a09      	ldr	r2, [pc, #36]	; (80058fc <USB_FlushTxFifo+0x48>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d901      	bls.n	80058e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e006      	b.n	80058ee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b20      	cmp	r3, #32
 80058ea:	d0f0      	beq.n	80058ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	00030d40 	.word	0x00030d40

08005900 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2210      	movs	r2, #16
 8005910:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3301      	adds	r3, #1
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4a09      	ldr	r2, [pc, #36]	; (8005940 <USB_FlushRxFifo+0x40>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d901      	bls.n	8005924 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e006      	b.n	8005932 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b10      	cmp	r3, #16
 800592e:	d0f0      	beq.n	8005912 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	00030d40 	.word	0x00030d40

08005944 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	68f9      	ldr	r1, [r7, #12]
 8005960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005964:	4313      	orrs	r3, r2
 8005966:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005976:	b480      	push	{r7}
 8005978:	b087      	sub	sp, #28
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0306 	and.w	r3, r3, #6
 800598e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d002      	beq.n	800599c <USB_GetDevSpeed+0x26>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b06      	cmp	r3, #6
 800599a:	d102      	bne.n	80059a2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800599c:	2302      	movs	r3, #2
 800599e:	75fb      	strb	r3, [r7, #23]
 80059a0:	e001      	b.n	80059a6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80059a2:	230f      	movs	r3, #15
 80059a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d13a      	bne.n	8005a46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	2101      	movs	r1, #1
 80059e2:	fa01 f303 	lsl.w	r3, r1, r3
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	68f9      	ldr	r1, [r7, #12]
 80059ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059ee:	4313      	orrs	r3, r2
 80059f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d155      	bne.n	8005ab4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	78db      	ldrb	r3, [r3, #3]
 8005a22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	059b      	lsls	r3, r3, #22
 8005a2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	e036      	b.n	8005ab4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4c:	69da      	ldr	r2, [r3, #28]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	2101      	movs	r1, #1
 8005a58:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5c:	041b      	lsls	r3, r3, #16
 8005a5e:	68f9      	ldr	r1, [r7, #12]
 8005a60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a64:	4313      	orrs	r3, r2
 8005a66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d11a      	bne.n	8005ab4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	78db      	ldrb	r3, [r3, #3]
 8005a98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	0151      	lsls	r1, r2, #5
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	440a      	add	r2, r1
 8005aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d161      	bne.n	8005ba4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005af6:	d11f      	bne.n	8005b38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	f003 030f 	and.w	r3, r3, #15
 8005b48:	2101      	movs	r1, #1
 8005b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	43db      	mvns	r3, r3
 8005b52:	68f9      	ldr	r1, [r7, #12]
 8005b54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b58:	4013      	ands	r3, r2
 8005b5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	43db      	mvns	r3, r3
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	0159      	lsls	r1, r3, #5
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	440b      	add	r3, r1
 8005b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4b35      	ldr	r3, [pc, #212]	; (8005c74 <USB_DeactivateEndpoint+0x1b0>)
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	600b      	str	r3, [r1, #0]
 8005ba2:	e060      	b.n	8005c66 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bba:	d11f      	bne.n	8005bfc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bda:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	0151      	lsls	r1, r2, #5
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	440a      	add	r2, r1
 8005bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	f003 030f 	and.w	r3, r3, #15
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c12:	041b      	lsls	r3, r3, #16
 8005c14:	43db      	mvns	r3, r3
 8005c16:	68f9      	ldr	r1, [r7, #12]
 8005c18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c26:	69da      	ldr	r2, [r3, #28]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	2101      	movs	r1, #1
 8005c32:	fa01 f303 	lsl.w	r3, r1, r3
 8005c36:	041b      	lsls	r3, r3, #16
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	68f9      	ldr	r1, [r7, #12]
 8005c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c40:	4013      	ands	r3, r2
 8005c42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	0159      	lsls	r1, r3, #5
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	440b      	add	r3, r1
 8005c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <USB_DeactivateEndpoint+0x1b4>)
 8005c62:	4013      	ands	r3, r2
 8005c64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	ec337800 	.word	0xec337800
 8005c78:	eff37800 	.word	0xeff37800

08005c7c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	785b      	ldrb	r3, [r3, #1]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	f040 810a 	bne.w	8005eae <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d132      	bne.n	8005d08 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ce4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	0151      	lsls	r1, r2, #5
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	440a      	add	r2, r1
 8005cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d00:	0cdb      	lsrs	r3, r3, #19
 8005d02:	04db      	lsls	r3, r3, #19
 8005d04:	6113      	str	r3, [r2, #16]
 8005d06:	e074      	b.n	8005df2 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	0151      	lsls	r1, r2, #5
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	440a      	add	r2, r1
 8005d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d22:	0cdb      	lsrs	r3, r3, #19
 8005d24:	04db      	lsls	r3, r3, #19
 8005d26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	0151      	lsls	r1, r2, #5
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	440a      	add	r2, r1
 8005d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d58:	691a      	ldr	r2, [r3, #16]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	6959      	ldr	r1, [r3, #20]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	440b      	add	r3, r1
 8005d64:	1e59      	subs	r1, r3, #1
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d6e:	04d9      	lsls	r1, r3, #19
 8005d70:	4baf      	ldr	r3, [pc, #700]	; (8006030 <USB_EPStartXfer+0x3b4>)
 8005d72:	400b      	ands	r3, r1
 8005d74:	6939      	ldr	r1, [r7, #16]
 8005d76:	0148      	lsls	r0, r1, #5
 8005d78:	6979      	ldr	r1, [r7, #20]
 8005d7a:	4401      	add	r1, r0
 8005d7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d80:	4313      	orrs	r3, r2
 8005d82:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d9a:	6939      	ldr	r1, [r7, #16]
 8005d9c:	0148      	lsls	r0, r1, #5
 8005d9e:	6979      	ldr	r1, [r7, #20]
 8005da0:	4401      	add	r1, r0
 8005da2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005da6:	4313      	orrs	r3, r2
 8005da8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	78db      	ldrb	r3, [r3, #3]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d11f      	bne.n	8005df2 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	0151      	lsls	r1, r2, #5
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	440a      	add	r2, r1
 8005dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dcc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005dd0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005df0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e10:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	78db      	ldrb	r3, [r3, #3]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d015      	beq.n	8005e46 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 8100 	beq.w	8006024 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	2101      	movs	r1, #1
 8005e36:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3a:	6979      	ldr	r1, [r7, #20]
 8005e3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e40:	4313      	orrs	r3, r2
 8005e42:	634b      	str	r3, [r1, #52]	; 0x34
 8005e44:	e0ee      	b.n	8006024 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d110      	bne.n	8005e78 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e00f      	b.n	8005e98 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	0151      	lsls	r1, r2, #5
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	440a      	add	r2, r1
 8005e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e96:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	68d9      	ldr	r1, [r3, #12]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781a      	ldrb	r2, [r3, #0]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f9e2 	bl	8006270 <USB_WritePacket>
 8005eac:	e0ba      	b.n	8006024 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	0151      	lsls	r1, r2, #5
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	440a      	add	r2, r1
 8005ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec8:	0cdb      	lsrs	r3, r3, #19
 8005eca:	04db      	lsls	r3, r3, #19
 8005ecc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005eec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ef0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d123      	bne.n	8005f42 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f10:	6939      	ldr	r1, [r7, #16]
 8005f12:	0148      	lsls	r0, r1, #5
 8005f14:	6979      	ldr	r1, [r7, #20]
 8005f16:	4401      	add	r1, r0
 8005f18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f3e:	6113      	str	r3, [r2, #16]
 8005f40:	e033      	b.n	8005faa <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	695a      	ldr	r2, [r3, #20]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	1e5a      	subs	r2, r3, #1
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f56:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f64:	691a      	ldr	r2, [r3, #16]
 8005f66:	89fb      	ldrh	r3, [r7, #14]
 8005f68:	04d9      	lsls	r1, r3, #19
 8005f6a:	4b31      	ldr	r3, [pc, #196]	; (8006030 <USB_EPStartXfer+0x3b4>)
 8005f6c:	400b      	ands	r3, r1
 8005f6e:	6939      	ldr	r1, [r7, #16]
 8005f70:	0148      	lsls	r0, r1, #5
 8005f72:	6979      	ldr	r1, [r7, #20]
 8005f74:	4401      	add	r1, r0
 8005f76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	89f9      	ldrh	r1, [r7, #14]
 8005f92:	fb01 f303 	mul.w	r3, r1, r3
 8005f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f9a:	6939      	ldr	r1, [r7, #16]
 8005f9c:	0148      	lsls	r0, r1, #5
 8005f9e:	6979      	ldr	r1, [r7, #20]
 8005fa0:	4401      	add	r1, r0
 8005fa2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	78db      	ldrb	r3, [r3, #3]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d128      	bne.n	8006004 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d110      	bne.n	8005fe4 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e00f      	b.n	8006004 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006002:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	440a      	add	r2, r1
 800601a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800601e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006022:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	1ff80000 	.word	0x1ff80000

08006034 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	785b      	ldrb	r3, [r3, #1]
 800604c:	2b01      	cmp	r3, #1
 800604e:	f040 80ab 	bne.w	80061a8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d132      	bne.n	80060c0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	440a      	add	r2, r1
 8006070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006074:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006078:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800607c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	0151      	lsls	r1, r2, #5
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	440a      	add	r2, r1
 8006094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006098:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800609c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	0151      	lsls	r1, r2, #5
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	440a      	add	r2, r1
 80060b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b8:	0cdb      	lsrs	r3, r3, #19
 80060ba:	04db      	lsls	r3, r3, #19
 80060bc:	6113      	str	r3, [r2, #16]
 80060be:	e04e      	b.n	800615e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	0151      	lsls	r1, r2, #5
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	440a      	add	r2, r1
 80060d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060da:	0cdb      	lsrs	r3, r3, #19
 80060dc:	04db      	lsls	r3, r3, #19
 80060de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006102:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	695a      	ldr	r2, [r3, #20]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	429a      	cmp	r2, r3
 800610e:	d903      	bls.n	8006118 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	0151      	lsls	r1, r2, #5
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	440a      	add	r2, r1
 800612e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006132:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006136:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	0148      	lsls	r0, r1, #5
 8006152:	68f9      	ldr	r1, [r7, #12]
 8006154:	4401      	add	r1, r0
 8006156:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800615a:	4313      	orrs	r3, r2
 800615c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	0151      	lsls	r1, r2, #5
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	440a      	add	r2, r1
 8006174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006178:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800617c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d06d      	beq.n	8006262 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	f003 030f 	and.w	r3, r3, #15
 8006196:	2101      	movs	r1, #1
 8006198:	fa01 f303 	lsl.w	r3, r1, r3
 800619c:	68f9      	ldr	r1, [r7, #12]
 800619e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061a2:	4313      	orrs	r3, r2
 80061a4:	634b      	str	r3, [r1, #52]	; 0x34
 80061a6:	e05c      	b.n	8006262 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c2:	0cdb      	lsrs	r3, r3, #19
 80061c4:	04db      	lsls	r3, r3, #19
 80061c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	0151      	lsls	r1, r2, #5
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	440a      	add	r2, r1
 80061de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061ea:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800621a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	0148      	lsls	r0, r1, #5
 8006236:	68f9      	ldr	r1, [r7, #12]
 8006238:	4401      	add	r1, r0
 800623a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800623e:	4313      	orrs	r3, r2
 8006240:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	0151      	lsls	r1, r2, #5
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	440a      	add	r2, r1
 8006258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800625c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006260:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006270:	b480      	push	{r7}
 8006272:	b089      	sub	sp, #36	; 0x24
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	4611      	mov	r1, r2
 800627c:	461a      	mov	r2, r3
 800627e:	460b      	mov	r3, r1
 8006280:	71fb      	strb	r3, [r7, #7]
 8006282:	4613      	mov	r3, r2
 8006284:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800628e:	88bb      	ldrh	r3, [r7, #4]
 8006290:	3303      	adds	r3, #3
 8006292:	089b      	lsrs	r3, r3, #2
 8006294:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006296:	2300      	movs	r3, #0
 8006298:	61bb      	str	r3, [r7, #24]
 800629a:	e00f      	b.n	80062bc <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800629c:	79fb      	ldrb	r3, [r7, #7]
 800629e:	031a      	lsls	r2, r3, #12
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062a8:	461a      	mov	r2, r3
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6013      	str	r3, [r2, #0]
    pSrc++;
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	3304      	adds	r3, #4
 80062b4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	3301      	adds	r3, #1
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d3eb      	bcc.n	800629c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3724      	adds	r7, #36	; 0x24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b089      	sub	sp, #36	; 0x24
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	4613      	mov	r3, r2
 80062de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80062e8:	88fb      	ldrh	r3, [r7, #6]
 80062ea:	3303      	adds	r3, #3
 80062ec:	089b      	lsrs	r3, r3, #2
 80062ee:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80062f0:	2300      	movs	r3, #0
 80062f2:	61bb      	str	r3, [r7, #24]
 80062f4:	e00b      	b.n	800630e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	601a      	str	r2, [r3, #0]
    pDest++;
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	3304      	adds	r3, #4
 8006306:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	3301      	adds	r3, #1
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	429a      	cmp	r2, r3
 8006314:	d3ef      	bcc.n	80062f6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006316:	69fb      	ldr	r3, [r7, #28]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3724      	adds	r7, #36	; 0x24
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d12c      	bne.n	800639a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	db12      	blt.n	8006378 <USB_EPSetStall+0x54>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00f      	beq.n	8006378 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	0151      	lsls	r1, r2, #5
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	440a      	add	r2, r1
 800636e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006372:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006376:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	0151      	lsls	r1, r2, #5
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	440a      	add	r2, r1
 800638e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006392:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	e02b      	b.n	80063f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	db12      	blt.n	80063d2 <USB_EPSetStall+0xae>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00f      	beq.n	80063d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	0151      	lsls	r1, r2, #5
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	440a      	add	r2, r1
 80063c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	0151      	lsls	r1, r2, #5
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	440a      	add	r2, r1
 80063e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	785b      	ldrb	r3, [r3, #1]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d128      	bne.n	800646e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	0151      	lsls	r1, r2, #5
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	440a      	add	r2, r1
 8006432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006436:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800643a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	78db      	ldrb	r3, [r3, #3]
 8006440:	2b03      	cmp	r3, #3
 8006442:	d003      	beq.n	800644c <USB_EPClearStall+0x4c>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	78db      	ldrb	r3, [r3, #3]
 8006448:	2b02      	cmp	r3, #2
 800644a:	d138      	bne.n	80064be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	0151      	lsls	r1, r2, #5
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	440a      	add	r2, r1
 8006462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	e027      	b.n	80064be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	440a      	add	r2, r1
 8006484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006488:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800648c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	78db      	ldrb	r3, [r3, #3]
 8006492:	2b03      	cmp	r3, #3
 8006494:	d003      	beq.n	800649e <USB_EPClearStall+0x9e>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	78db      	ldrb	r3, [r3, #3]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d10f      	bne.n	80064be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	0151      	lsls	r1, r2, #5
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	440a      	add	r2, r1
 80064b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80064ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	011b      	lsls	r3, r3, #4
 80064fc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006500:	68f9      	ldr	r1, [r7, #12]
 8006502:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006506:	4313      	orrs	r3, r2
 8006508:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006532:	f023 0303 	bic.w	r3, r3, #3
 8006536:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006546:	f023 0302 	bic.w	r3, r3, #2
 800654a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800655a:	b480      	push	{r7}
 800655c:	b085      	sub	sp, #20
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006574:	f023 0303 	bic.w	r3, r3, #3
 8006578:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006588:	f043 0302 	orr.w	r3, r3, #2
 800658c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4013      	ands	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065b4:	68fb      	ldr	r3, [r7, #12]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	4013      	ands	r3, r2
 80065e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	0c1b      	lsrs	r3, r3, #16
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	4013      	ands	r3, r2
 8006618:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	b29b      	uxth	r3, r3
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	460b      	mov	r3, r1
 8006634:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	4013      	ands	r3, r2
 8006656:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006658:	68bb      	ldr	r3, [r7, #8]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006666:	b480      	push	{r7}
 8006668:	b087      	sub	sp, #28
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	460b      	mov	r3, r1
 8006670:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006688:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	f003 030f 	and.w	r3, r3, #15
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	fa22 f303 	lsr.w	r3, r2, r3
 8006696:	01db      	lsls	r3, r3, #7
 8006698:	b2db      	uxtb	r3, r3
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4313      	orrs	r3, r2
 800669e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	4013      	ands	r3, r2
 80066b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066b4:	68bb      	ldr	r3, [r7, #8]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	f003 0301 	and.w	r3, r3, #1
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80066fc:	f023 0307 	bic.w	r3, r3, #7
 8006700:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006714:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	333c      	adds	r3, #60	; 0x3c
 8006736:	3304      	adds	r3, #4
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	4a1c      	ldr	r2, [pc, #112]	; (80067b0 <USB_EP0_OutStart+0x8c>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d90a      	bls.n	800675a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006750:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006754:	d101      	bne.n	800675a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	e024      	b.n	80067a4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006760:	461a      	mov	r2, r3
 8006762:	2300      	movs	r3, #0
 8006764:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006774:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006778:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006788:	f043 0318 	orr.w	r3, r3, #24
 800678c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800679c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80067a0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	4f54300a 	.word	0x4f54300a

080067b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3301      	adds	r3, #1
 80067c4:	60fb      	str	r3, [r7, #12]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4a13      	ldr	r2, [pc, #76]	; (8006818 <USB_CoreReset+0x64>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d901      	bls.n	80067d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e01b      	b.n	800680a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	daf2      	bge.n	80067c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f043 0201 	orr.w	r2, r3, #1
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3301      	adds	r3, #1
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4a09      	ldr	r2, [pc, #36]	; (8006818 <USB_CoreReset+0x64>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d901      	bls.n	80067fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e006      	b.n	800680a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b01      	cmp	r3, #1
 8006806:	d0f0      	beq.n	80067ea <USB_CoreReset+0x36>

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	00030d40 	.word	0x00030d40

0800681c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	460b      	mov	r3, r1
 8006826:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006828:	2010      	movs	r0, #16
 800682a:	f002 fee5 	bl	80095f8 <USBD_static_malloc>
 800682e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d105      	bne.n	8006842 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800683e:	2302      	movs	r3, #2
 8006840:	e01b      	b.n	800687a <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	7c1b      	ldrb	r3, [r3, #16]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d103      	bne.n	800685a <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2207      	movs	r2, #7
 8006856:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006858:	e002      	b.n	8006860 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	220a      	movs	r2, #10
 800685e:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006860:	2304      	movs	r3, #4
 8006862:	2203      	movs	r2, #3
 8006864:	2181      	movs	r1, #129	; 0x81
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f002 fcc6 	bl	80091f8 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	460b      	mov	r3, r1
 800688c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800688e:	2181      	movs	r1, #129	; 0x81
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f002 fcef 	bl	8009274 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d009      	beq.n	80068c0 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068b2:	4618      	mov	r0, r3
 80068b4:	f002 feae 	bl	8009614 <USBD_static_free>
    pdev->pClassData = NULL;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068dc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e0e8      	b.n	8006ac2 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d046      	beq.n	800698a <USBD_HID_Setup+0xbe>
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	f040 80d8 	bne.w	8006ab2 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	785b      	ldrb	r3, [r3, #1]
 8006906:	3b02      	subs	r3, #2
 8006908:	2b09      	cmp	r3, #9
 800690a:	d836      	bhi.n	800697a <USBD_HID_Setup+0xae>
 800690c:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <USBD_HID_Setup+0x48>)
 800690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006912:	bf00      	nop
 8006914:	0800696b 	.word	0x0800696b
 8006918:	0800694b 	.word	0x0800694b
 800691c:	0800697b 	.word	0x0800697b
 8006920:	0800697b 	.word	0x0800697b
 8006924:	0800697b 	.word	0x0800697b
 8006928:	0800697b 	.word	0x0800697b
 800692c:	0800697b 	.word	0x0800697b
 8006930:	0800697b 	.word	0x0800697b
 8006934:	08006959 	.word	0x08006959
 8006938:	0800693d 	.word	0x0800693d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	885b      	ldrh	r3, [r3, #2]
 8006940:	b2db      	uxtb	r3, r3
 8006942:	461a      	mov	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	601a      	str	r2, [r3, #0]
          break;
 8006948:	e01e      	b.n	8006988 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2201      	movs	r2, #1
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 fa4c 	bl	8007dee <USBD_CtlSendData>
          break;
 8006956:	e017      	b.n	8006988 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	885b      	ldrh	r3, [r3, #2]
 800695c:	0a1b      	lsrs	r3, r3, #8
 800695e:	b29b      	uxth	r3, r3
 8006960:	b2db      	uxtb	r3, r3
 8006962:	461a      	mov	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	605a      	str	r2, [r3, #4]
          break;
 8006968:	e00e      	b.n	8006988 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3304      	adds	r3, #4
 800696e:	2201      	movs	r2, #1
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 fa3b 	bl	8007dee <USBD_CtlSendData>
          break;
 8006978:	e006      	b.n	8006988 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 f9c5 	bl	8007d0c <USBD_CtlError>
          ret = USBD_FAIL;
 8006982:	2303      	movs	r3, #3
 8006984:	75fb      	strb	r3, [r7, #23]
          break;
 8006986:	bf00      	nop
      }
      break;
 8006988:	e09a      	b.n	8006ac0 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	785b      	ldrb	r3, [r3, #1]
 800698e:	2b0b      	cmp	r3, #11
 8006990:	f200 8086 	bhi.w	8006aa0 <USBD_HID_Setup+0x1d4>
 8006994:	a201      	add	r2, pc, #4	; (adr r2, 800699c <USBD_HID_Setup+0xd0>)
 8006996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699a:	bf00      	nop
 800699c:	080069cd 	.word	0x080069cd
 80069a0:	08006aaf 	.word	0x08006aaf
 80069a4:	08006aa1 	.word	0x08006aa1
 80069a8:	08006aa1 	.word	0x08006aa1
 80069ac:	08006aa1 	.word	0x08006aa1
 80069b0:	08006aa1 	.word	0x08006aa1
 80069b4:	080069f7 	.word	0x080069f7
 80069b8:	08006aa1 	.word	0x08006aa1
 80069bc:	08006aa1 	.word	0x08006aa1
 80069c0:	08006aa1 	.word	0x08006aa1
 80069c4:	08006a4f 	.word	0x08006a4f
 80069c8:	08006a79 	.word	0x08006a79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d107      	bne.n	80069e8 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069d8:	f107 030a 	add.w	r3, r7, #10
 80069dc:	2202      	movs	r2, #2
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 fa04 	bl	8007dee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069e6:	e063      	b.n	8006ab0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 f98e 	bl	8007d0c <USBD_CtlError>
            ret = USBD_FAIL;
 80069f0:	2303      	movs	r3, #3
 80069f2:	75fb      	strb	r3, [r7, #23]
          break;
 80069f4:	e05c      	b.n	8006ab0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	885b      	ldrh	r3, [r3, #2]
 80069fa:	0a1b      	lsrs	r3, r3, #8
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b22      	cmp	r3, #34	; 0x22
 8006a00:	d108      	bne.n	8006a14 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	88db      	ldrh	r3, [r3, #6]
 8006a06:	2b4a      	cmp	r3, #74	; 0x4a
 8006a08:	bf28      	it	cs
 8006a0a:	234a      	movcs	r3, #74	; 0x4a
 8006a0c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006a0e:	4b2f      	ldr	r3, [pc, #188]	; (8006acc <USBD_HID_Setup+0x200>)
 8006a10:	613b      	str	r3, [r7, #16]
 8006a12:	e015      	b.n	8006a40 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	885b      	ldrh	r3, [r3, #2]
 8006a18:	0a1b      	lsrs	r3, r3, #8
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2b21      	cmp	r3, #33	; 0x21
 8006a1e:	d108      	bne.n	8006a32 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8006a20:	4b2b      	ldr	r3, [pc, #172]	; (8006ad0 <USBD_HID_Setup+0x204>)
 8006a22:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	88db      	ldrh	r3, [r3, #6]
 8006a28:	2b09      	cmp	r3, #9
 8006a2a:	bf28      	it	cs
 8006a2c:	2309      	movcs	r3, #9
 8006a2e:	82bb      	strh	r3, [r7, #20]
 8006a30:	e006      	b.n	8006a40 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 f969 	bl	8007d0c <USBD_CtlError>
            ret = USBD_FAIL;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	75fb      	strb	r3, [r7, #23]
            break;
 8006a3e:	e037      	b.n	8006ab0 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a40:	8abb      	ldrh	r3, [r7, #20]
 8006a42:	461a      	mov	r2, r3
 8006a44:	6939      	ldr	r1, [r7, #16]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 f9d1 	bl	8007dee <USBD_CtlSendData>
          break;
 8006a4c:	e030      	b.n	8006ab0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d107      	bne.n	8006a6a <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	2201      	movs	r2, #1
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f001 f9c3 	bl	8007dee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a68:	e022      	b.n	8006ab0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 f94d 	bl	8007d0c <USBD_CtlError>
            ret = USBD_FAIL;
 8006a72:	2303      	movs	r3, #3
 8006a74:	75fb      	strb	r3, [r7, #23]
          break;
 8006a76:	e01b      	b.n	8006ab0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d106      	bne.n	8006a92 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	885b      	ldrh	r3, [r3, #2]
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a90:	e00e      	b.n	8006ab0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 f939 	bl	8007d0c <USBD_CtlError>
            ret = USBD_FAIL;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a9e:	e007      	b.n	8006ab0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f001 f932 	bl	8007d0c <USBD_CtlError>
          ret = USBD_FAIL;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	75fb      	strb	r3, [r7, #23]
          break;
 8006aac:	e000      	b.n	8006ab0 <USBD_HID_Setup+0x1e4>
          break;
 8006aae:	bf00      	nop
      }
      break;
 8006ab0:	e006      	b.n	8006ac0 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 f929 	bl	8007d0c <USBD_CtlError>
      ret = USBD_FAIL;
 8006aba:	2303      	movs	r3, #3
 8006abc:	75fb      	strb	r3, [r7, #23]
      break;
 8006abe:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	200000c4 	.word	0x200000c4
 8006ad0:	200000ac 	.word	0x200000ac

08006ad4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ae8:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e013      	b.n	8006b1c <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d10c      	bne.n	8006b1a <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	7b1b      	ldrb	r3, [r3, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d108      	bne.n	8006b1a <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	2181      	movs	r1, #129	; 0x81
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f002 fcb1 	bl	800947c <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2222      	movs	r2, #34	; 0x22
 8006b30:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8006b32:	4b03      	ldr	r3, [pc, #12]	; (8006b40 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	20000040 	.word	0x20000040

08006b44 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2222      	movs	r2, #34	; 0x22
 8006b50:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8006b52:	4b03      	ldr	r3, [pc, #12]	; (8006b60 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	20000064 	.word	0x20000064

08006b64 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2222      	movs	r2, #34	; 0x22
 8006b70:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8006b72:	4b03      	ldr	r3, [pc, #12]	; (8006b80 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	20000088 	.word	0x20000088

08006b84 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b96:	2200      	movs	r2, #0
 8006b98:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	220a      	movs	r2, #10
 8006bb4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006bb6:	4b03      	ldr	r3, [pc, #12]	; (8006bc4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	200000b8 	.word	0x200000b8

08006bc8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e01f      	b.n	8006c20 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	79fa      	ldrb	r2, [r7, #7]
 8006c12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f002 fa71 	bl	80090fc <USBD_LL_Init>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e016      	b.n	8006c6e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00b      	beq.n	8006c6c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	f107 020e 	add.w	r2, r7, #14
 8006c60:	4610      	mov	r0, r2
 8006c62:	4798      	blx	r3
 8006c64:	4602      	mov	r2, r0
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b082      	sub	sp, #8
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f002 fa88 	bl	8009194 <USBD_LL_Start>
 8006c84:	4603      	mov	r3, r0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b083      	sub	sp, #12
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d009      	beq.n	8006cd2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	78fa      	ldrb	r2, [r7, #3]
 8006cc8:	4611      	mov	r1, r2
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	4798      	blx	r3
 8006cce:	4603      	mov	r3, r0
 8006cd0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	78fa      	ldrb	r2, [r7, #3]
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	4798      	blx	r3
  }

  return USBD_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 ffba 	bl	8007c98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006d32:	461a      	mov	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d40:	f003 031f 	and.w	r3, r3, #31
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d01a      	beq.n	8006d7e <USBD_LL_SetupStage+0x72>
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d822      	bhi.n	8006d92 <USBD_LL_SetupStage+0x86>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d002      	beq.n	8006d56 <USBD_LL_SetupStage+0x4a>
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d00a      	beq.n	8006d6a <USBD_LL_SetupStage+0x5e>
 8006d54:	e01d      	b.n	8006d92 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fa62 	bl	8007228 <USBD_StdDevReq>
 8006d64:	4603      	mov	r3, r0
 8006d66:	73fb      	strb	r3, [r7, #15]
      break;
 8006d68:	e020      	b.n	8006dac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fac6 	bl	8007304 <USBD_StdItfReq>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d7c:	e016      	b.n	8006dac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fb05 	bl	8007396 <USBD_StdEPReq>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d90:	e00c      	b.n	8006dac <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f002 fa9d 	bl	80092e0 <USBD_LL_StallEP>
 8006da6:	4603      	mov	r3, r0
 8006da8:	73fb      	strb	r3, [r7, #15]
      break;
 8006daa:	bf00      	nop
  }

  return ret;
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b086      	sub	sp, #24
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	607a      	str	r2, [r7, #4]
 8006dc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006dc4:	7afb      	ldrb	r3, [r7, #11]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d138      	bne.n	8006e3c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006dd0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dd8:	2b03      	cmp	r3, #3
 8006dda:	d14a      	bne.n	8006e72 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d913      	bls.n	8006e10 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	1ad2      	subs	r2, r2, r3
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	bf28      	it	cs
 8006e02:	4613      	movcs	r3, r2
 8006e04:	461a      	mov	r2, r3
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f001 f81c 	bl	8007e46 <USBD_CtlContinueRx>
 8006e0e:	e030      	b.n	8006e72 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d10b      	bne.n	8006e34 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f001 f817 	bl	8007e68 <USBD_CtlSendStatus>
 8006e3a:	e01a      	b.n	8006e72 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d114      	bne.n	8006e72 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00e      	beq.n	8006e72 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	7afa      	ldrb	r2, [r7, #11]
 8006e5e:	4611      	mov	r1, r2
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	4798      	blx	r3
 8006e64:	4603      	mov	r3, r0
 8006e66:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	e000      	b.n	8006e74 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	460b      	mov	r3, r1
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006e8a:	7afb      	ldrb	r3, [r7, #11]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d16b      	bne.n	8006f68 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3314      	adds	r3, #20
 8006e94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d156      	bne.n	8006f4e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d914      	bls.n	8006ed6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	1ad2      	subs	r2, r2, r3
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 ffae 	bl	8007e24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2200      	movs	r2, #0
 8006ecc:	2100      	movs	r1, #0
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f002 fb0c 	bl	80094ec <USBD_LL_PrepareReceive>
 8006ed4:	e03b      	b.n	8006f4e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	68da      	ldr	r2, [r3, #12]
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d11c      	bne.n	8006f1c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d316      	bcc.n	8006f1c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d20f      	bcs.n	8006f1c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006efc:	2200      	movs	r2, #0
 8006efe:	2100      	movs	r1, #0
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f000 ff8f 	bl	8007e24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f0e:	2300      	movs	r3, #0
 8006f10:	2200      	movs	r2, #0
 8006f12:	2100      	movs	r1, #0
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f002 fae9 	bl	80094ec <USBD_LL_PrepareReceive>
 8006f1a:	e018      	b.n	8006f4e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d10b      	bne.n	8006f40 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f40:	2180      	movs	r1, #128	; 0x80
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f002 f9cc 	bl	80092e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f000 ffa0 	bl	8007e8e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d122      	bne.n	8006f9e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f7ff fe98 	bl	8006c8e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f66:	e01a      	b.n	8006f9e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d114      	bne.n	8006f9e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00e      	beq.n	8006f9e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	7afa      	ldrb	r2, [r7, #11]
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	4798      	blx	r3
 8006f90:	4603      	mov	r3, r0
 8006f92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
 8006f9c:	e000      	b.n	8006fa0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e02f      	b.n	800703c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00f      	beq.n	8007006 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d009      	beq.n	8007006 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6852      	ldr	r2, [r2, #4]
 8006ffe:	b2d2      	uxtb	r2, r2
 8007000:	4611      	mov	r1, r2
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007006:	2340      	movs	r3, #64	; 0x40
 8007008:	2200      	movs	r2, #0
 800700a:	2100      	movs	r1, #0
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f002 f8f3 	bl	80091f8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2240      	movs	r2, #64	; 0x40
 800701e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007022:	2340      	movs	r3, #64	; 0x40
 8007024:	2200      	movs	r2, #0
 8007026:	2180      	movs	r1, #128	; 0x80
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f002 f8e5 	bl	80091f8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2240      	movs	r2, #64	; 0x40
 8007038:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	78fa      	ldrb	r2, [r7, #3]
 8007054:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007072:	b2da      	uxtb	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2204      	movs	r2, #4
 800707e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	d106      	bne.n	80070b2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e012      	b.n	80070fc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d10b      	bne.n	80070fa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d005      	beq.n	80070fa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800711a:	2303      	movs	r3, #3
 800711c:	e014      	b.n	8007148 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b03      	cmp	r3, #3
 8007128:	d10d      	bne.n	8007146 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d007      	beq.n	8007146 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	78fa      	ldrb	r2, [r7, #3]
 8007140:	4611      	mov	r1, r2
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007166:	2303      	movs	r3, #3
 8007168:	e014      	b.n	8007194 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b03      	cmp	r3, #3
 8007174:	d10d      	bne.n	8007192 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	2b00      	cmp	r3, #0
 8007180:	d007      	beq.n	8007192 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	78fa      	ldrb	r2, [r7, #3]
 800718c:	4611      	mov	r1, r2
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d009      	beq.n	80071e0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	6852      	ldr	r2, [r2, #4]
 80071d8:	b2d2      	uxtb	r2, r2
 80071da:	4611      	mov	r1, r2
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
  }

  return USBD_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b087      	sub	sp, #28
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	3301      	adds	r3, #1
 8007200:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007208:	8a3b      	ldrh	r3, [r7, #16]
 800720a:	021b      	lsls	r3, r3, #8
 800720c:	b21a      	sxth	r2, r3
 800720e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007212:	4313      	orrs	r3, r2
 8007214:	b21b      	sxth	r3, r3
 8007216:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007218:	89fb      	ldrh	r3, [r7, #14]
}
 800721a:	4618      	mov	r0, r3
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
	...

08007228 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800723e:	2b40      	cmp	r3, #64	; 0x40
 8007240:	d005      	beq.n	800724e <USBD_StdDevReq+0x26>
 8007242:	2b40      	cmp	r3, #64	; 0x40
 8007244:	d853      	bhi.n	80072ee <USBD_StdDevReq+0xc6>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <USBD_StdDevReq+0x3a>
 800724a:	2b20      	cmp	r3, #32
 800724c:	d14f      	bne.n	80072ee <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	4798      	blx	r3
 800725c:	4603      	mov	r3, r0
 800725e:	73fb      	strb	r3, [r7, #15]
      break;
 8007260:	e04a      	b.n	80072f8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	785b      	ldrb	r3, [r3, #1]
 8007266:	2b09      	cmp	r3, #9
 8007268:	d83b      	bhi.n	80072e2 <USBD_StdDevReq+0xba>
 800726a:	a201      	add	r2, pc, #4	; (adr r2, 8007270 <USBD_StdDevReq+0x48>)
 800726c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007270:	080072c5 	.word	0x080072c5
 8007274:	080072d9 	.word	0x080072d9
 8007278:	080072e3 	.word	0x080072e3
 800727c:	080072cf 	.word	0x080072cf
 8007280:	080072e3 	.word	0x080072e3
 8007284:	080072a3 	.word	0x080072a3
 8007288:	08007299 	.word	0x08007299
 800728c:	080072e3 	.word	0x080072e3
 8007290:	080072bb 	.word	0x080072bb
 8007294:	080072ad 	.word	0x080072ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f9de 	bl	800765c <USBD_GetDescriptor>
          break;
 80072a0:	e024      	b.n	80072ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fb6d 	bl	8007984 <USBD_SetAddress>
          break;
 80072aa:	e01f      	b.n	80072ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fbac 	bl	8007a0c <USBD_SetConfig>
 80072b4:	4603      	mov	r3, r0
 80072b6:	73fb      	strb	r3, [r7, #15]
          break;
 80072b8:	e018      	b.n	80072ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fc4b 	bl	8007b58 <USBD_GetConfig>
          break;
 80072c2:	e013      	b.n	80072ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fc7c 	bl	8007bc4 <USBD_GetStatus>
          break;
 80072cc:	e00e      	b.n	80072ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fcab 	bl	8007c2c <USBD_SetFeature>
          break;
 80072d6:	e009      	b.n	80072ec <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fcba 	bl	8007c54 <USBD_ClrFeature>
          break;
 80072e0:	e004      	b.n	80072ec <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fd11 	bl	8007d0c <USBD_CtlError>
          break;
 80072ea:	bf00      	nop
      }
      break;
 80072ec:	e004      	b.n	80072f8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fd0b 	bl	8007d0c <USBD_CtlError>
      break;
 80072f6:	bf00      	nop
  }

  return ret;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop

08007304 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800731a:	2b40      	cmp	r3, #64	; 0x40
 800731c:	d005      	beq.n	800732a <USBD_StdItfReq+0x26>
 800731e:	2b40      	cmp	r3, #64	; 0x40
 8007320:	d82f      	bhi.n	8007382 <USBD_StdItfReq+0x7e>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <USBD_StdItfReq+0x26>
 8007326:	2b20      	cmp	r3, #32
 8007328:	d12b      	bne.n	8007382 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007330:	b2db      	uxtb	r3, r3
 8007332:	3b01      	subs	r3, #1
 8007334:	2b02      	cmp	r3, #2
 8007336:	d81d      	bhi.n	8007374 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	889b      	ldrh	r3, [r3, #4]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b01      	cmp	r3, #1
 8007340:	d813      	bhi.n	800736a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	4798      	blx	r3
 8007350:	4603      	mov	r3, r0
 8007352:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	88db      	ldrh	r3, [r3, #6]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d110      	bne.n	800737e <USBD_StdItfReq+0x7a>
 800735c:	7bfb      	ldrb	r3, [r7, #15]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10d      	bne.n	800737e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fd80 	bl	8007e68 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007368:	e009      	b.n	800737e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fccd 	bl	8007d0c <USBD_CtlError>
          break;
 8007372:	e004      	b.n	800737e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fcc8 	bl	8007d0c <USBD_CtlError>
          break;
 800737c:	e000      	b.n	8007380 <USBD_StdItfReq+0x7c>
          break;
 800737e:	bf00      	nop
      }
      break;
 8007380:	e004      	b.n	800738c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fcc1 	bl	8007d0c <USBD_CtlError>
      break;
 800738a:	bf00      	nop
  }

  return ret;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	889b      	ldrh	r3, [r3, #4]
 80073a8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073b2:	2b40      	cmp	r3, #64	; 0x40
 80073b4:	d007      	beq.n	80073c6 <USBD_StdEPReq+0x30>
 80073b6:	2b40      	cmp	r3, #64	; 0x40
 80073b8:	f200 8145 	bhi.w	8007646 <USBD_StdEPReq+0x2b0>
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00c      	beq.n	80073da <USBD_StdEPReq+0x44>
 80073c0:	2b20      	cmp	r3, #32
 80073c2:	f040 8140 	bne.w	8007646 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
 80073d4:	4603      	mov	r3, r0
 80073d6:	73fb      	strb	r3, [r7, #15]
      break;
 80073d8:	e13a      	b.n	8007650 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	785b      	ldrb	r3, [r3, #1]
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d007      	beq.n	80073f2 <USBD_StdEPReq+0x5c>
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	f300 8129 	bgt.w	800763a <USBD_StdEPReq+0x2a4>
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d07f      	beq.n	80074ec <USBD_StdEPReq+0x156>
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d03c      	beq.n	800746a <USBD_StdEPReq+0xd4>
 80073f0:	e123      	b.n	800763a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d002      	beq.n	8007404 <USBD_StdEPReq+0x6e>
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d016      	beq.n	8007430 <USBD_StdEPReq+0x9a>
 8007402:	e02c      	b.n	800745e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00d      	beq.n	8007426 <USBD_StdEPReq+0x90>
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	2b80      	cmp	r3, #128	; 0x80
 800740e:	d00a      	beq.n	8007426 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 ff63 	bl	80092e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800741a:	2180      	movs	r1, #128	; 0x80
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 ff5f 	bl	80092e0 <USBD_LL_StallEP>
 8007422:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007424:	e020      	b.n	8007468 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fc6f 	bl	8007d0c <USBD_CtlError>
              break;
 800742e:	e01b      	b.n	8007468 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	885b      	ldrh	r3, [r3, #2]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10e      	bne.n	8007456 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00b      	beq.n	8007456 <USBD_StdEPReq+0xc0>
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b80      	cmp	r3, #128	; 0x80
 8007442:	d008      	beq.n	8007456 <USBD_StdEPReq+0xc0>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	88db      	ldrh	r3, [r3, #6]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d104      	bne.n	8007456 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f001 ff45 	bl	80092e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fd06 	bl	8007e68 <USBD_CtlSendStatus>

              break;
 800745c:	e004      	b.n	8007468 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fc53 	bl	8007d0c <USBD_CtlError>
              break;
 8007466:	bf00      	nop
          }
          break;
 8007468:	e0ec      	b.n	8007644 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d002      	beq.n	800747c <USBD_StdEPReq+0xe6>
 8007476:	2b03      	cmp	r3, #3
 8007478:	d016      	beq.n	80074a8 <USBD_StdEPReq+0x112>
 800747a:	e030      	b.n	80074de <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800747c:	7bbb      	ldrb	r3, [r7, #14]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00d      	beq.n	800749e <USBD_StdEPReq+0x108>
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	2b80      	cmp	r3, #128	; 0x80
 8007486:	d00a      	beq.n	800749e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 ff27 	bl	80092e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007492:	2180      	movs	r1, #128	; 0x80
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f001 ff23 	bl	80092e0 <USBD_LL_StallEP>
 800749a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800749c:	e025      	b.n	80074ea <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fc33 	bl	8007d0c <USBD_CtlError>
              break;
 80074a6:	e020      	b.n	80074ea <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	885b      	ldrh	r3, [r3, #2]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d11b      	bne.n	80074e8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d004      	beq.n	80074c4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f001 ff44 	bl	800934c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fccf 	bl	8007e68 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	4798      	blx	r3
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80074dc:	e004      	b.n	80074e8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fc13 	bl	8007d0c <USBD_CtlError>
              break;
 80074e6:	e000      	b.n	80074ea <USBD_StdEPReq+0x154>
              break;
 80074e8:	bf00      	nop
          }
          break;
 80074ea:	e0ab      	b.n	8007644 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d002      	beq.n	80074fe <USBD_StdEPReq+0x168>
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d032      	beq.n	8007562 <USBD_StdEPReq+0x1cc>
 80074fc:	e097      	b.n	800762e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <USBD_StdEPReq+0x17e>
 8007504:	7bbb      	ldrb	r3, [r7, #14]
 8007506:	2b80      	cmp	r3, #128	; 0x80
 8007508:	d004      	beq.n	8007514 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fbfd 	bl	8007d0c <USBD_CtlError>
                break;
 8007512:	e091      	b.n	8007638 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007514:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007518:	2b00      	cmp	r3, #0
 800751a:	da0b      	bge.n	8007534 <USBD_StdEPReq+0x19e>
 800751c:	7bbb      	ldrb	r3, [r7, #14]
 800751e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	3310      	adds	r3, #16
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	4413      	add	r3, r2
 8007530:	3304      	adds	r3, #4
 8007532:	e00b      	b.n	800754c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007534:	7bbb      	ldrb	r3, [r7, #14]
 8007536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	4413      	add	r3, r2
 800754a:	3304      	adds	r3, #4
 800754c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2200      	movs	r2, #0
 8007552:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2202      	movs	r2, #2
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fc47 	bl	8007dee <USBD_CtlSendData>
              break;
 8007560:	e06a      	b.n	8007638 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007562:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007566:	2b00      	cmp	r3, #0
 8007568:	da11      	bge.n	800758e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	f003 020f 	and.w	r2, r3, #15
 8007570:	6879      	ldr	r1, [r7, #4]
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	440b      	add	r3, r1
 800757c:	3324      	adds	r3, #36	; 0x24
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d117      	bne.n	80075b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fbc0 	bl	8007d0c <USBD_CtlError>
                  break;
 800758c:	e054      	b.n	8007638 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	f003 020f 	and.w	r2, r3, #15
 8007594:	6879      	ldr	r1, [r7, #4]
 8007596:	4613      	mov	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	440b      	add	r3, r1
 80075a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d104      	bne.n	80075b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fbad 	bl	8007d0c <USBD_CtlError>
                  break;
 80075b2:	e041      	b.n	8007638 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	da0b      	bge.n	80075d4 <USBD_StdEPReq+0x23e>
 80075bc:	7bbb      	ldrb	r3, [r7, #14]
 80075be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075c2:	4613      	mov	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	3310      	adds	r3, #16
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	4413      	add	r3, r2
 80075d0:	3304      	adds	r3, #4
 80075d2:	e00b      	b.n	80075ec <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
 80075d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	4413      	add	r3, r2
 80075ea:	3304      	adds	r3, #4
 80075ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075ee:	7bbb      	ldrb	r3, [r7, #14]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <USBD_StdEPReq+0x264>
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	2b80      	cmp	r3, #128	; 0x80
 80075f8:	d103      	bne.n	8007602 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	e00e      	b.n	8007620 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 fed6 	bl	80093b8 <USBD_LL_IsStallEP>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2201      	movs	r2, #1
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	e002      	b.n	8007620 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2202      	movs	r2, #2
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fbe1 	bl	8007dee <USBD_CtlSendData>
              break;
 800762c:	e004      	b.n	8007638 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fb6b 	bl	8007d0c <USBD_CtlError>
              break;
 8007636:	bf00      	nop
          }
          break;
 8007638:	e004      	b.n	8007644 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fb65 	bl	8007d0c <USBD_CtlError>
          break;
 8007642:	bf00      	nop
      }
      break;
 8007644:	e004      	b.n	8007650 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fb5f 	bl	8007d0c <USBD_CtlError>
      break;
 800764e:	bf00      	nop
  }

  return ret;
 8007650:	7bfb      	ldrb	r3, [r7, #15]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
	...

0800765c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	885b      	ldrh	r3, [r3, #2]
 8007676:	0a1b      	lsrs	r3, r3, #8
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	2b0e      	cmp	r3, #14
 800767e:	f200 8152 	bhi.w	8007926 <USBD_GetDescriptor+0x2ca>
 8007682:	a201      	add	r2, pc, #4	; (adr r2, 8007688 <USBD_GetDescriptor+0x2c>)
 8007684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007688:	080076f9 	.word	0x080076f9
 800768c:	08007711 	.word	0x08007711
 8007690:	08007751 	.word	0x08007751
 8007694:	08007927 	.word	0x08007927
 8007698:	08007927 	.word	0x08007927
 800769c:	080078c7 	.word	0x080078c7
 80076a0:	080078f3 	.word	0x080078f3
 80076a4:	08007927 	.word	0x08007927
 80076a8:	08007927 	.word	0x08007927
 80076ac:	08007927 	.word	0x08007927
 80076b0:	08007927 	.word	0x08007927
 80076b4:	08007927 	.word	0x08007927
 80076b8:	08007927 	.word	0x08007927
 80076bc:	08007927 	.word	0x08007927
 80076c0:	080076c5 	.word	0x080076c5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	7c12      	ldrb	r2, [r2, #16]
 80076dc:	f107 0108 	add.w	r1, r7, #8
 80076e0:	4610      	mov	r0, r2
 80076e2:	4798      	blx	r3
 80076e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076e6:	e126      	b.n	8007936 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fb0e 	bl	8007d0c <USBD_CtlError>
        err++;
 80076f0:	7afb      	ldrb	r3, [r7, #11]
 80076f2:	3301      	adds	r3, #1
 80076f4:	72fb      	strb	r3, [r7, #11]
      break;
 80076f6:	e11e      	b.n	8007936 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	7c12      	ldrb	r2, [r2, #16]
 8007704:	f107 0108 	add.w	r1, r7, #8
 8007708:	4610      	mov	r0, r2
 800770a:	4798      	blx	r3
 800770c:	60f8      	str	r0, [r7, #12]
      break;
 800770e:	e112      	b.n	8007936 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	7c1b      	ldrb	r3, [r3, #16]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10d      	bne.n	8007734 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	f107 0208 	add.w	r2, r7, #8
 8007724:	4610      	mov	r0, r2
 8007726:	4798      	blx	r3
 8007728:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3301      	adds	r3, #1
 800772e:	2202      	movs	r2, #2
 8007730:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007732:	e100      	b.n	8007936 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	f107 0208 	add.w	r2, r7, #8
 8007740:	4610      	mov	r0, r2
 8007742:	4798      	blx	r3
 8007744:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3301      	adds	r3, #1
 800774a:	2202      	movs	r2, #2
 800774c:	701a      	strb	r2, [r3, #0]
      break;
 800774e:	e0f2      	b.n	8007936 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	885b      	ldrh	r3, [r3, #2]
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b05      	cmp	r3, #5
 8007758:	f200 80ac 	bhi.w	80078b4 <USBD_GetDescriptor+0x258>
 800775c:	a201      	add	r2, pc, #4	; (adr r2, 8007764 <USBD_GetDescriptor+0x108>)
 800775e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007762:	bf00      	nop
 8007764:	0800777d 	.word	0x0800777d
 8007768:	080077b1 	.word	0x080077b1
 800776c:	080077e5 	.word	0x080077e5
 8007770:	08007819 	.word	0x08007819
 8007774:	0800784d 	.word	0x0800784d
 8007778:	08007881 	.word	0x08007881
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00b      	beq.n	80077a0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	7c12      	ldrb	r2, [r2, #16]
 8007794:	f107 0108 	add.w	r1, r7, #8
 8007798:	4610      	mov	r0, r2
 800779a:	4798      	blx	r3
 800779c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800779e:	e091      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fab2 	bl	8007d0c <USBD_CtlError>
            err++;
 80077a8:	7afb      	ldrb	r3, [r7, #11]
 80077aa:	3301      	adds	r3, #1
 80077ac:	72fb      	strb	r3, [r7, #11]
          break;
 80077ae:	e089      	b.n	80078c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00b      	beq.n	80077d4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	7c12      	ldrb	r2, [r2, #16]
 80077c8:	f107 0108 	add.w	r1, r7, #8
 80077cc:	4610      	mov	r0, r2
 80077ce:	4798      	blx	r3
 80077d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077d2:	e077      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fa98 	bl	8007d0c <USBD_CtlError>
            err++;
 80077dc:	7afb      	ldrb	r3, [r7, #11]
 80077de:	3301      	adds	r3, #1
 80077e0:	72fb      	strb	r3, [r7, #11]
          break;
 80077e2:	e06f      	b.n	80078c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00b      	beq.n	8007808 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	7c12      	ldrb	r2, [r2, #16]
 80077fc:	f107 0108 	add.w	r1, r7, #8
 8007800:	4610      	mov	r0, r2
 8007802:	4798      	blx	r3
 8007804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007806:	e05d      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fa7e 	bl	8007d0c <USBD_CtlError>
            err++;
 8007810:	7afb      	ldrb	r3, [r7, #11]
 8007812:	3301      	adds	r3, #1
 8007814:	72fb      	strb	r3, [r7, #11]
          break;
 8007816:	e055      	b.n	80078c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00b      	beq.n	800783c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	7c12      	ldrb	r2, [r2, #16]
 8007830:	f107 0108 	add.w	r1, r7, #8
 8007834:	4610      	mov	r0, r2
 8007836:	4798      	blx	r3
 8007838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800783a:	e043      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fa64 	bl	8007d0c <USBD_CtlError>
            err++;
 8007844:	7afb      	ldrb	r3, [r7, #11]
 8007846:	3301      	adds	r3, #1
 8007848:	72fb      	strb	r3, [r7, #11]
          break;
 800784a:	e03b      	b.n	80078c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00b      	beq.n	8007870 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	7c12      	ldrb	r2, [r2, #16]
 8007864:	f107 0108 	add.w	r1, r7, #8
 8007868:	4610      	mov	r0, r2
 800786a:	4798      	blx	r3
 800786c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800786e:	e029      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fa4a 	bl	8007d0c <USBD_CtlError>
            err++;
 8007878:	7afb      	ldrb	r3, [r7, #11]
 800787a:	3301      	adds	r3, #1
 800787c:	72fb      	strb	r3, [r7, #11]
          break;
 800787e:	e021      	b.n	80078c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00b      	beq.n	80078a4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	7c12      	ldrb	r2, [r2, #16]
 8007898:	f107 0108 	add.w	r1, r7, #8
 800789c:	4610      	mov	r0, r2
 800789e:	4798      	blx	r3
 80078a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078a2:	e00f      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fa30 	bl	8007d0c <USBD_CtlError>
            err++;
 80078ac:	7afb      	ldrb	r3, [r7, #11]
 80078ae:	3301      	adds	r3, #1
 80078b0:	72fb      	strb	r3, [r7, #11]
          break;
 80078b2:	e007      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fa28 	bl	8007d0c <USBD_CtlError>
          err++;
 80078bc:	7afb      	ldrb	r3, [r7, #11]
 80078be:	3301      	adds	r3, #1
 80078c0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80078c2:	bf00      	nop
      }
      break;
 80078c4:	e037      	b.n	8007936 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	7c1b      	ldrb	r3, [r3, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d109      	bne.n	80078e2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d6:	f107 0208 	add.w	r2, r7, #8
 80078da:	4610      	mov	r0, r2
 80078dc:	4798      	blx	r3
 80078de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078e0:	e029      	b.n	8007936 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fa11 	bl	8007d0c <USBD_CtlError>
        err++;
 80078ea:	7afb      	ldrb	r3, [r7, #11]
 80078ec:	3301      	adds	r3, #1
 80078ee:	72fb      	strb	r3, [r7, #11]
      break;
 80078f0:	e021      	b.n	8007936 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	7c1b      	ldrb	r3, [r3, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10d      	bne.n	8007916 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007902:	f107 0208 	add.w	r2, r7, #8
 8007906:	4610      	mov	r0, r2
 8007908:	4798      	blx	r3
 800790a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3301      	adds	r3, #1
 8007910:	2207      	movs	r2, #7
 8007912:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007914:	e00f      	b.n	8007936 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f9f7 	bl	8007d0c <USBD_CtlError>
        err++;
 800791e:	7afb      	ldrb	r3, [r7, #11]
 8007920:	3301      	adds	r3, #1
 8007922:	72fb      	strb	r3, [r7, #11]
      break;
 8007924:	e007      	b.n	8007936 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f9ef 	bl	8007d0c <USBD_CtlError>
      err++;
 800792e:	7afb      	ldrb	r3, [r7, #11]
 8007930:	3301      	adds	r3, #1
 8007932:	72fb      	strb	r3, [r7, #11]
      break;
 8007934:	bf00      	nop
  }

  if (err != 0U)
 8007936:	7afb      	ldrb	r3, [r7, #11]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d11e      	bne.n	800797a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	88db      	ldrh	r3, [r3, #6]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d016      	beq.n	8007972 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007944:	893b      	ldrh	r3, [r7, #8]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00e      	beq.n	8007968 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	88da      	ldrh	r2, [r3, #6]
 800794e:	893b      	ldrh	r3, [r7, #8]
 8007950:	4293      	cmp	r3, r2
 8007952:	bf28      	it	cs
 8007954:	4613      	movcs	r3, r2
 8007956:	b29b      	uxth	r3, r3
 8007958:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800795a:	893b      	ldrh	r3, [r7, #8]
 800795c:	461a      	mov	r2, r3
 800795e:	68f9      	ldr	r1, [r7, #12]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fa44 	bl	8007dee <USBD_CtlSendData>
 8007966:	e009      	b.n	800797c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f9ce 	bl	8007d0c <USBD_CtlError>
 8007970:	e004      	b.n	800797c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fa78 	bl	8007e68 <USBD_CtlSendStatus>
 8007978:	e000      	b.n	800797c <USBD_GetDescriptor+0x320>
    return;
 800797a:	bf00      	nop
  }
}
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop

08007984 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	889b      	ldrh	r3, [r3, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d131      	bne.n	80079fa <USBD_SetAddress+0x76>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	88db      	ldrh	r3, [r3, #6]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d12d      	bne.n	80079fa <USBD_SetAddress+0x76>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	885b      	ldrh	r3, [r3, #2]
 80079a2:	2b7f      	cmp	r3, #127	; 0x7f
 80079a4:	d829      	bhi.n	80079fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	885b      	ldrh	r3, [r3, #2]
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d104      	bne.n	80079c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f9a3 	bl	8007d0c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079c6:	e01d      	b.n	8007a04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	7bfa      	ldrb	r2, [r7, #15]
 80079cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 fd1b 	bl	8009410 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fa44 	bl	8007e68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d004      	beq.n	80079f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2202      	movs	r2, #2
 80079ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ee:	e009      	b.n	8007a04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f8:	e004      	b.n	8007a04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f985 	bl	8007d0c <USBD_CtlError>
  }
}
 8007a02:	bf00      	nop
 8007a04:	bf00      	nop
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	885b      	ldrh	r3, [r3, #2]
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	4b4c      	ldr	r3, [pc, #304]	; (8007b54 <USBD_SetConfig+0x148>)
 8007a22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a24:	4b4b      	ldr	r3, [pc, #300]	; (8007b54 <USBD_SetConfig+0x148>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d905      	bls.n	8007a38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f96c 	bl	8007d0c <USBD_CtlError>
    return USBD_FAIL;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e088      	b.n	8007b4a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d002      	beq.n	8007a4a <USBD_SetConfig+0x3e>
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d025      	beq.n	8007a94 <USBD_SetConfig+0x88>
 8007a48:	e071      	b.n	8007b2e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a4a:	4b42      	ldr	r3, [pc, #264]	; (8007b54 <USBD_SetConfig+0x148>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d01c      	beq.n	8007a8c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007a52:	4b40      	ldr	r3, [pc, #256]	; (8007b54 <USBD_SetConfig+0x148>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a5c:	4b3d      	ldr	r3, [pc, #244]	; (8007b54 <USBD_SetConfig+0x148>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff f91e 	bl	8006ca4 <USBD_SetClassConfig>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d004      	beq.n	8007a7c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f949 	bl	8007d0c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a7a:	e065      	b.n	8007b48 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f9f3 	bl	8007e68 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2203      	movs	r2, #3
 8007a86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a8a:	e05d      	b.n	8007b48 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f9eb 	bl	8007e68 <USBD_CtlSendStatus>
      break;
 8007a92:	e059      	b.n	8007b48 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a94:	4b2f      	ldr	r3, [pc, #188]	; (8007b54 <USBD_SetConfig+0x148>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d112      	bne.n	8007ac2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007aa4:	4b2b      	ldr	r3, [pc, #172]	; (8007b54 <USBD_SetConfig+0x148>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007aae:	4b29      	ldr	r3, [pc, #164]	; (8007b54 <USBD_SetConfig+0x148>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f7ff f911 	bl	8006cdc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f9d4 	bl	8007e68 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ac0:	e042      	b.n	8007b48 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007ac2:	4b24      	ldr	r3, [pc, #144]	; (8007b54 <USBD_SetConfig+0x148>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d02a      	beq.n	8007b26 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7ff f8ff 	bl	8006cdc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ade:	4b1d      	ldr	r3, [pc, #116]	; (8007b54 <USBD_SetConfig+0x148>)
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ae8:	4b1a      	ldr	r3, [pc, #104]	; (8007b54 <USBD_SetConfig+0x148>)
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7ff f8d8 	bl	8006ca4 <USBD_SetClassConfig>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00f      	beq.n	8007b1e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f903 	bl	8007d0c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7ff f8e4 	bl	8006cdc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b1c:	e014      	b.n	8007b48 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f9a2 	bl	8007e68 <USBD_CtlSendStatus>
      break;
 8007b24:	e010      	b.n	8007b48 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f99e 	bl	8007e68 <USBD_CtlSendStatus>
      break;
 8007b2c:	e00c      	b.n	8007b48 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f8eb 	bl	8007d0c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b36:	4b07      	ldr	r3, [pc, #28]	; (8007b54 <USBD_SetConfig+0x148>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff f8cd 	bl	8006cdc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b42:	2303      	movs	r3, #3
 8007b44:	73fb      	strb	r3, [r7, #15]
      break;
 8007b46:	bf00      	nop
  }

  return ret;
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	20000228 	.word	0x20000228

08007b58 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	88db      	ldrh	r3, [r3, #6]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d004      	beq.n	8007b74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f8cd 	bl	8007d0c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b72:	e023      	b.n	8007bbc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	dc02      	bgt.n	8007b86 <USBD_GetConfig+0x2e>
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	dc03      	bgt.n	8007b8c <USBD_GetConfig+0x34>
 8007b84:	e015      	b.n	8007bb2 <USBD_GetConfig+0x5a>
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	d00b      	beq.n	8007ba2 <USBD_GetConfig+0x4a>
 8007b8a:	e012      	b.n	8007bb2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3308      	adds	r3, #8
 8007b96:	2201      	movs	r2, #1
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f927 	bl	8007dee <USBD_CtlSendData>
        break;
 8007ba0:	e00c      	b.n	8007bbc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f91f 	bl	8007dee <USBD_CtlSendData>
        break;
 8007bb0:	e004      	b.n	8007bbc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f8a9 	bl	8007d0c <USBD_CtlError>
        break;
 8007bba:	bf00      	nop
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d81e      	bhi.n	8007c1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	88db      	ldrh	r3, [r3, #6]
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d004      	beq.n	8007bee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f890 	bl	8007d0c <USBD_CtlError>
        break;
 8007bec:	e01a      	b.n	8007c24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d005      	beq.n	8007c0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f043 0202 	orr.w	r2, r3, #2
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	330c      	adds	r3, #12
 8007c0e:	2202      	movs	r2, #2
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f8eb 	bl	8007dee <USBD_CtlSendData>
      break;
 8007c18:	e004      	b.n	8007c24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f875 	bl	8007d0c <USBD_CtlError>
      break;
 8007c22:	bf00      	nop
  }
}
 8007c24:	bf00      	nop
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	885b      	ldrh	r3, [r3, #2]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d106      	bne.n	8007c4c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f90e 	bl	8007e68 <USBD_CtlSendStatus>
  }
}
 8007c4c:	bf00      	nop
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d80b      	bhi.n	8007c84 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	885b      	ldrh	r3, [r3, #2]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d10c      	bne.n	8007c8e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f8f3 	bl	8007e68 <USBD_CtlSendStatus>
      }
      break;
 8007c82:	e004      	b.n	8007c8e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f840 	bl	8007d0c <USBD_CtlError>
      break;
 8007c8c:	e000      	b.n	8007c90 <USBD_ClrFeature+0x3c>
      break;
 8007c8e:	bf00      	nop
  }
}
 8007c90:	bf00      	nop
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	781a      	ldrb	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	781a      	ldrb	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f7ff fa91 	bl	80071ea <SWAPBYTE>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	461a      	mov	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f7ff fa84 	bl	80071ea <SWAPBYTE>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	3301      	adds	r3, #1
 8007cee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f7ff fa77 	bl	80071ea <SWAPBYTE>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	461a      	mov	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	80da      	strh	r2, [r3, #6]
}
 8007d04:	bf00      	nop
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d16:	2180      	movs	r1, #128	; 0x80
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 fae1 	bl	80092e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d1e:	2100      	movs	r1, #0
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 fadd 	bl	80092e0 <USBD_LL_StallEP>
}
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b086      	sub	sp, #24
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d036      	beq.n	8007db2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007d48:	6938      	ldr	r0, [r7, #16]
 8007d4a:	f000 f836 	bl	8007dba <USBD_GetLen>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	3301      	adds	r3, #1
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d5c:	7dfb      	ldrb	r3, [r7, #23]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	4413      	add	r3, r2
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	7812      	ldrb	r2, [r2, #0]
 8007d66:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	4413      	add	r3, r2
 8007d74:	2203      	movs	r2, #3
 8007d76:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d7e:	e013      	b.n	8007da8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	4413      	add	r3, r2
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	7812      	ldrb	r2, [r2, #0]
 8007d8a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	613b      	str	r3, [r7, #16]
    idx++;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	3301      	adds	r3, #1
 8007d96:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	2200      	movs	r2, #0
 8007da0:	701a      	strb	r2, [r3, #0]
    idx++;
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	3301      	adds	r3, #1
 8007da6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e7      	bne.n	8007d80 <USBD_GetString+0x52>
 8007db0:	e000      	b.n	8007db4 <USBD_GetString+0x86>
    return;
 8007db2:	bf00      	nop
  }
}
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b085      	sub	sp, #20
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007dca:	e005      	b.n	8007dd8 <USBD_GetLen+0x1e>
  {
    len++;
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1f5      	bne.n	8007dcc <USBD_GetLen+0x12>
  }

  return len;
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b084      	sub	sp, #16
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	60b9      	str	r1, [r7, #8]
 8007df8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	2100      	movs	r1, #0
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f001 fb31 	bl	800947c <USBD_LL_Transmit>

  return USBD_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	2100      	movs	r1, #0
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f001 fb20 	bl	800947c <USBD_LL_Transmit>

  return USBD_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	2100      	movs	r1, #0
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f001 fb47 	bl	80094ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2204      	movs	r2, #4
 8007e74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e78:	2300      	movs	r3, #0
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f001 fafc 	bl	800947c <USBD_LL_Transmit>

  return USBD_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2205      	movs	r2, #5
 8007e9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 fb21 	bl	80094ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	4603      	mov	r3, r0
 8007ebc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8007ec2:	2110      	movs	r1, #16
 8007ec4:	20d4      	movs	r0, #212	; 0xd4
 8007ec6:	f000 fceb 	bl	80088a0 <SENSOR_IO_Read>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8007ece:	88fb      	ldrh	r3, [r7, #6]
 8007ed0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8007ed2:	7bbb      	ldrb	r3, [r7, #14]
 8007ed4:	f003 0303 	and.w	r3, r3, #3
 8007ed8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8007eda:	7bba      	ldrb	r2, [r7, #14]
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8007ee2:	7bbb      	ldrb	r3, [r7, #14]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	2110      	movs	r1, #16
 8007ee8:	20d4      	movs	r0, #212	; 0xd4
 8007eea:	f000 fcbf 	bl	800886c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8007eee:	2112      	movs	r1, #18
 8007ef0:	20d4      	movs	r0, #212	; 0xd4
 8007ef2:	f000 fcd5 	bl	80088a0 <SENSOR_IO_Read>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	0a1b      	lsrs	r3, r3, #8
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8007f08:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8007f0a:	7bba      	ldrb	r2, [r7, #14]
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8007f12:	7bbb      	ldrb	r3, [r7, #14]
 8007f14:	461a      	mov	r2, r3
 8007f16:	2112      	movs	r1, #18
 8007f18:	20d4      	movs	r0, #212	; 0xd4
 8007f1a:	f000 fca7 	bl	800886c <SENSOR_IO_Write>
}
 8007f1e:	bf00      	nop
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b082      	sub	sp, #8
 8007f2a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8007f30:	2110      	movs	r1, #16
 8007f32:	20d4      	movs	r0, #212	; 0xd4
 8007f34:	f000 fcb4 	bl	80088a0 <SENSOR_IO_Read>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8007f3c:	79fb      	ldrb	r3, [r7, #7]
 8007f3e:	f003 030f 	and.w	r3, r3, #15
 8007f42:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	461a      	mov	r2, r3
 8007f48:	2110      	movs	r1, #16
 8007f4a:	20d4      	movs	r0, #212	; 0xd4
 8007f4c:	f000 fc8e 	bl	800886c <SENSOR_IO_Write>
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8007f5c:	f000 fc7c 	bl	8008858 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8007f60:	210f      	movs	r1, #15
 8007f62:	20d4      	movs	r0, #212	; 0xd4
 8007f64:	f000 fc9c 	bl	80088a0 <SENSOR_IO_Read>
 8007f68:	4603      	mov	r3, r0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	4603      	mov	r3, r0
 8007f76:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8007f7c:	2115      	movs	r1, #21
 8007f7e:	20d4      	movs	r0, #212	; 0xd4
 8007f80:	f000 fc8e 	bl	80088a0 <SENSOR_IO_Read>
 8007f84:	4603      	mov	r3, r0
 8007f86:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	f023 0310 	bic.w	r3, r3, #16
 8007f8e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8007f90:	88fb      	ldrh	r3, [r7, #6]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	f043 0310 	orr.w	r3, r3, #16
 8007f9c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	2115      	movs	r1, #21
 8007fa4:	20d4      	movs	r0, #212	; 0xd4
 8007fa6:	f000 fc61 	bl	800886c <SENSOR_IO_Write>
}
 8007faa:	bf00      	nop
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b088      	sub	sp, #32
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8007fc4:	f04f 0300 	mov.w	r3, #0
 8007fc8:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8007fca:	2110      	movs	r1, #16
 8007fcc:	20d4      	movs	r0, #212	; 0xd4
 8007fce:	f000 fc67 	bl	80088a0 <SENSOR_IO_Read>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8007fd6:	f107 0208 	add.w	r2, r7, #8
 8007fda:	2306      	movs	r3, #6
 8007fdc:	2128      	movs	r1, #40	; 0x28
 8007fde:	20d4      	movs	r0, #212	; 0xd4
 8007fe0:	f000 fc7c 	bl	80088dc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	77fb      	strb	r3, [r7, #31]
 8007fe8:	e01f      	b.n	800802a <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8007fea:	7ffb      	ldrb	r3, [r7, #31]
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	3301      	adds	r3, #1
 8007ff0:	f107 0220 	add.w	r2, r7, #32
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	021b      	lsls	r3, r3, #8
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	7ffb      	ldrb	r3, [r7, #31]
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	f107 0120 	add.w	r1, r7, #32
 8008008:	440b      	add	r3, r1
 800800a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800800e:	b29b      	uxth	r3, r3
 8008010:	4413      	add	r3, r2
 8008012:	b29a      	uxth	r2, r3
 8008014:	7ffb      	ldrb	r3, [r7, #31]
 8008016:	b212      	sxth	r2, r2
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	f107 0120 	add.w	r1, r7, #32
 800801e:	440b      	add	r3, r1
 8008020:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8008024:	7ffb      	ldrb	r3, [r7, #31]
 8008026:	3301      	adds	r3, #1
 8008028:	77fb      	strb	r3, [r7, #31]
 800802a:	7ffb      	ldrb	r3, [r7, #31]
 800802c:	2b02      	cmp	r3, #2
 800802e:	d9dc      	bls.n	8007fea <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	f003 030c 	and.w	r3, r3, #12
 8008036:	2b0c      	cmp	r3, #12
 8008038:	d828      	bhi.n	800808c <LSM6DSL_AccReadXYZ+0xd8>
 800803a:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <LSM6DSL_AccReadXYZ+0x8c>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	08008075 	.word	0x08008075
 8008044:	0800808d 	.word	0x0800808d
 8008048:	0800808d 	.word	0x0800808d
 800804c:	0800808d 	.word	0x0800808d
 8008050:	08008087 	.word	0x08008087
 8008054:	0800808d 	.word	0x0800808d
 8008058:	0800808d 	.word	0x0800808d
 800805c:	0800808d 	.word	0x0800808d
 8008060:	0800807b 	.word	0x0800807b
 8008064:	0800808d 	.word	0x0800808d
 8008068:	0800808d 	.word	0x0800808d
 800806c:	0800808d 	.word	0x0800808d
 8008070:	08008081 	.word	0x08008081
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8008074:	4b19      	ldr	r3, [pc, #100]	; (80080dc <LSM6DSL_AccReadXYZ+0x128>)
 8008076:	61bb      	str	r3, [r7, #24]
    break;
 8008078:	e008      	b.n	800808c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800807a:	4b19      	ldr	r3, [pc, #100]	; (80080e0 <LSM6DSL_AccReadXYZ+0x12c>)
 800807c:	61bb      	str	r3, [r7, #24]
    break;
 800807e:	e005      	b.n	800808c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8008080:	4b18      	ldr	r3, [pc, #96]	; (80080e4 <LSM6DSL_AccReadXYZ+0x130>)
 8008082:	61bb      	str	r3, [r7, #24]
    break;
 8008084:	e002      	b.n	800808c <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8008086:	4b18      	ldr	r3, [pc, #96]	; (80080e8 <LSM6DSL_AccReadXYZ+0x134>)
 8008088:	61bb      	str	r3, [r7, #24]
    break;    
 800808a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800808c:	2300      	movs	r3, #0
 800808e:	77fb      	strb	r3, [r7, #31]
 8008090:	e01b      	b.n	80080ca <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8008092:	7ffb      	ldrb	r3, [r7, #31]
 8008094:	005b      	lsls	r3, r3, #1
 8008096:	f107 0220 	add.w	r2, r7, #32
 800809a:	4413      	add	r3, r2
 800809c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80080a0:	ee07 3a90 	vmov	s15, r3
 80080a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80080a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80080ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b0:	7ffb      	ldrb	r3, [r7, #31]
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	4413      	add	r3, r2
 80080b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080bc:	ee17 2a90 	vmov	r2, s15
 80080c0:	b212      	sxth	r2, r2
 80080c2:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80080c4:	7ffb      	ldrb	r3, [r7, #31]
 80080c6:	3301      	adds	r3, #1
 80080c8:	77fb      	strb	r3, [r7, #31]
 80080ca:	7ffb      	ldrb	r3, [r7, #31]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d9e0      	bls.n	8008092 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 80080d0:	bf00      	nop
 80080d2:	bf00      	nop
 80080d4:	3720      	adds	r7, #32
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	3d79db23 	.word	0x3d79db23
 80080e0:	3df9db23 	.word	0x3df9db23
 80080e4:	3e79db23 	.word	0x3e79db23
 80080e8:	3ef9db23 	.word	0x3ef9db23

080080ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80080f0:	f7f8 fa42 	bl	8000578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80080f4:	f000 f8a8 	bl	8008248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80080f8:	f000 f9b6 	bl	8008468 <MX_GPIO_Init>
  MX_I2C1_Init();
 80080fc:	f000 f8f6 	bl	80082ec <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8008100:	f000 fe42 	bl	8008d88 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8008104:	f000 f932 	bl	800836c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8008108:	f000 f97e 	bl	8008408 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 800810c:	f000 fc04 	bl	8008918 <BSP_ACCELERO_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8008110:	4844      	ldr	r0, [pc, #272]	; (8008224 <main+0x138>)
 8008112:	f7fc f843 	bl	800419c <HAL_TIM_Base_Start_IT>
  HAL_UART_Init(&huart1);
 8008116:	4844      	ldr	r0, [pc, #272]	; (8008228 <main+0x13c>)
 8008118:	f7fc fc98 	bl	8004a4c <HAL_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  BSP_ACCELERO_AccGetXYZ(acceleroResults);
 800811c:	4843      	ldr	r0, [pc, #268]	; (800822c <main+0x140>)
 800811e:	f000 fc39 	bl	8008994 <BSP_ACCELERO_AccGetXYZ>
	  x = acceleroResults[0];
 8008122:	4b42      	ldr	r3, [pc, #264]	; (800822c <main+0x140>)
 8008124:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008128:	4b41      	ldr	r3, [pc, #260]	; (8008230 <main+0x144>)
 800812a:	801a      	strh	r2, [r3, #0]
	  y = acceleroResults[1];
 800812c:	4b3f      	ldr	r3, [pc, #252]	; (800822c <main+0x140>)
 800812e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008132:	4b40      	ldr	r3, [pc, #256]	; (8008234 <main+0x148>)
 8008134:	801a      	strh	r2, [r3, #0]
//	  else {
//		  mousehid.mouse_y = 0;
//	  }

	/* Absolute algorithm ----------------------------------------*/
	  if (x < -200){
 8008136:	4b3e      	ldr	r3, [pc, #248]	; (8008230 <main+0x144>)
 8008138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800813c:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8008140:	da0d      	bge.n	800815e <main+0x72>
		  mousehid.mouse_x = x/10;
 8008142:	4b3b      	ldr	r3, [pc, #236]	; (8008230 <main+0x144>)
 8008144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008148:	4a3b      	ldr	r2, [pc, #236]	; (8008238 <main+0x14c>)
 800814a:	fb82 1203 	smull	r1, r2, r2, r3
 800814e:	1092      	asrs	r2, r2, #2
 8008150:	17db      	asrs	r3, r3, #31
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	b21b      	sxth	r3, r3
 8008156:	b25a      	sxtb	r2, r3
 8008158:	4b38      	ldr	r3, [pc, #224]	; (800823c <main+0x150>)
 800815a:	705a      	strb	r2, [r3, #1]
 800815c:	e015      	b.n	800818a <main+0x9e>
	  }
	  else if (x > 200){
 800815e:	4b34      	ldr	r3, [pc, #208]	; (8008230 <main+0x144>)
 8008160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008164:	2bc8      	cmp	r3, #200	; 0xc8
 8008166:	dd0d      	ble.n	8008184 <main+0x98>
		  mousehid.mouse_x = x/10;
 8008168:	4b31      	ldr	r3, [pc, #196]	; (8008230 <main+0x144>)
 800816a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800816e:	4a32      	ldr	r2, [pc, #200]	; (8008238 <main+0x14c>)
 8008170:	fb82 1203 	smull	r1, r2, r2, r3
 8008174:	1092      	asrs	r2, r2, #2
 8008176:	17db      	asrs	r3, r3, #31
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	b21b      	sxth	r3, r3
 800817c:	b25a      	sxtb	r2, r3
 800817e:	4b2f      	ldr	r3, [pc, #188]	; (800823c <main+0x150>)
 8008180:	705a      	strb	r2, [r3, #1]
 8008182:	e002      	b.n	800818a <main+0x9e>
	  }
	  else {
		  mousehid.mouse_x = 0;
 8008184:	4b2d      	ldr	r3, [pc, #180]	; (800823c <main+0x150>)
 8008186:	2200      	movs	r2, #0
 8008188:	705a      	strb	r2, [r3, #1]
	  }

	  if (y < -200){
 800818a:	4b2a      	ldr	r3, [pc, #168]	; (8008234 <main+0x148>)
 800818c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008190:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8008194:	da0d      	bge.n	80081b2 <main+0xc6>
		  mousehid.mouse_y = y/10;
 8008196:	4b27      	ldr	r3, [pc, #156]	; (8008234 <main+0x148>)
 8008198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800819c:	4a26      	ldr	r2, [pc, #152]	; (8008238 <main+0x14c>)
 800819e:	fb82 1203 	smull	r1, r2, r2, r3
 80081a2:	1092      	asrs	r2, r2, #2
 80081a4:	17db      	asrs	r3, r3, #31
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	b21b      	sxth	r3, r3
 80081aa:	b25a      	sxtb	r2, r3
 80081ac:	4b23      	ldr	r3, [pc, #140]	; (800823c <main+0x150>)
 80081ae:	709a      	strb	r2, [r3, #2]
 80081b0:	e015      	b.n	80081de <main+0xf2>
	  }
	  else if(y > 200){
 80081b2:	4b20      	ldr	r3, [pc, #128]	; (8008234 <main+0x148>)
 80081b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081b8:	2bc8      	cmp	r3, #200	; 0xc8
 80081ba:	dd0d      	ble.n	80081d8 <main+0xec>
		  mousehid.mouse_y = y/10;
 80081bc:	4b1d      	ldr	r3, [pc, #116]	; (8008234 <main+0x148>)
 80081be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081c2:	4a1d      	ldr	r2, [pc, #116]	; (8008238 <main+0x14c>)
 80081c4:	fb82 1203 	smull	r1, r2, r2, r3
 80081c8:	1092      	asrs	r2, r2, #2
 80081ca:	17db      	asrs	r3, r3, #31
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	b21b      	sxth	r3, r3
 80081d0:	b25a      	sxtb	r2, r3
 80081d2:	4b1a      	ldr	r3, [pc, #104]	; (800823c <main+0x150>)
 80081d4:	709a      	strb	r2, [r3, #2]
 80081d6:	e002      	b.n	80081de <main+0xf2>
	  }
	  else {
		  mousehid.mouse_y = 0;
 80081d8:	4b18      	ldr	r3, [pc, #96]	; (800823c <main+0x150>)
 80081da:	2200      	movs	r2, #0
 80081dc:	709a      	strb	r2, [r3, #2]
//		  mousehid.mouse_x= (newyval)/3;
//	  }
//
//	  else mousehid.mouse_x = 0;

	  if (button_flag==1)
 80081de:	4b18      	ldr	r3, [pc, #96]	; (8008240 <main+0x154>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d115      	bne.n	8008212 <main+0x126>
	  {
	   mousehid.button = 1;
 80081e6:	4b15      	ldr	r3, [pc, #84]	; (800823c <main+0x150>)
 80081e8:	2201      	movs	r2, #1
 80081ea:	701a      	strb	r2, [r3, #0]
	   USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 80081ec:	2204      	movs	r2, #4
 80081ee:	4913      	ldr	r1, [pc, #76]	; (800823c <main+0x150>)
 80081f0:	4814      	ldr	r0, [pc, #80]	; (8008244 <main+0x158>)
 80081f2:	f7fe fc6f 	bl	8006ad4 <USBD_HID_SendReport>
	   HAL_Delay (50);
 80081f6:	2032      	movs	r0, #50	; 0x32
 80081f8:	f7f8 fa32 	bl	8000660 <HAL_Delay>
	   mousehid.button = 0;
 80081fc:	4b0f      	ldr	r3, [pc, #60]	; (800823c <main+0x150>)
 80081fe:	2200      	movs	r2, #0
 8008200:	701a      	strb	r2, [r3, #0]

	   USBD_HID_SendReport(&hUsbDeviceFS,&mousehid, sizeof (mousehid));
 8008202:	2204      	movs	r2, #4
 8008204:	490d      	ldr	r1, [pc, #52]	; (800823c <main+0x150>)
 8008206:	480f      	ldr	r0, [pc, #60]	; (8008244 <main+0x158>)
 8008208:	f7fe fc64 	bl	8006ad4 <USBD_HID_SendReport>
	   button_flag =0;
 800820c:	4b0c      	ldr	r3, [pc, #48]	; (8008240 <main+0x154>)
 800820e:	2200      	movs	r2, #0
 8008210:	701a      	strb	r2, [r3, #0]
	  }
	  USBD_HID_SendReport(&hUsbDeviceFS,&mousehid, sizeof (mousehid));
 8008212:	2204      	movs	r2, #4
 8008214:	4909      	ldr	r1, [pc, #36]	; (800823c <main+0x150>)
 8008216:	480b      	ldr	r0, [pc, #44]	; (8008244 <main+0x158>)
 8008218:	f7fe fc5c 	bl	8006ad4 <USBD_HID_SendReport>

//	  x_prev = x;
//	  y_prev = y;

	  HAL_Delay(100);
 800821c:	2064      	movs	r0, #100	; 0x64
 800821e:	f7f8 fa1f 	bl	8000660 <HAL_Delay>
  {
 8008222:	e77b      	b.n	800811c <main+0x30>
 8008224:	200003a0 	.word	0x200003a0
 8008228:	200002b4 	.word	0x200002b4
 800822c:	2000025c 	.word	0x2000025c
 8008230:	20000262 	.word	0x20000262
 8008234:	2000039c 	.word	0x2000039c
 8008238:	66666667 	.word	0x66666667
 800823c:	2000022c 	.word	0x2000022c
 8008240:	20000230 	.word	0x20000230
 8008244:	200004bc 	.word	0x200004bc

08008248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b096      	sub	sp, #88	; 0x58
 800824c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800824e:	f107 0314 	add.w	r3, r7, #20
 8008252:	2244      	movs	r2, #68	; 0x44
 8008254:	2100      	movs	r1, #0
 8008256:	4618      	mov	r0, r3
 8008258:	f001 fb62 	bl	8009920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800825c:	463b      	mov	r3, r7
 800825e:	2200      	movs	r2, #0
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	605a      	str	r2, [r3, #4]
 8008264:	609a      	str	r2, [r3, #8]
 8008266:	60da      	str	r2, [r3, #12]
 8008268:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800826a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800826e:	f7fa fc2f 	bl	8002ad0 <HAL_PWREx_ControlVoltageScaling>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8008278:	f000 f9f0 	bl	800865c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800827c:	2310      	movs	r3, #16
 800827e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8008280:	2301      	movs	r3, #1
 8008282:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8008284:	2300      	movs	r3, #0
 8008286:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8008288:	2360      	movs	r3, #96	; 0x60
 800828a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800828c:	2302      	movs	r3, #2
 800828e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8008290:	2301      	movs	r3, #1
 8008292:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8008294:	2301      	movs	r3, #1
 8008296:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8008298:	2328      	movs	r3, #40	; 0x28
 800829a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800829c:	2307      	movs	r3, #7
 800829e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80082a0:	2302      	movs	r3, #2
 80082a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80082a4:	2302      	movs	r3, #2
 80082a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80082a8:	f107 0314 	add.w	r3, r7, #20
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fa fc75 	bl	8002b9c <HAL_RCC_OscConfig>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80082b8:	f000 f9d0 	bl	800865c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80082bc:	230f      	movs	r3, #15
 80082be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80082c0:	2303      	movs	r3, #3
 80082c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80082c4:	2300      	movs	r3, #0
 80082c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80082c8:	2300      	movs	r3, #0
 80082ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80082cc:	2300      	movs	r3, #0
 80082ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80082d0:	463b      	mov	r3, r7
 80082d2:	2104      	movs	r1, #4
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fb f847 	bl	8003368 <HAL_RCC_ClockConfig>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80082e0:	f000 f9bc 	bl	800865c <Error_Handler>
  }
}
 80082e4:	bf00      	nop
 80082e6:	3758      	adds	r7, #88	; 0x58
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80082f0:	4b1b      	ldr	r3, [pc, #108]	; (8008360 <MX_I2C1_Init+0x74>)
 80082f2:	4a1c      	ldr	r2, [pc, #112]	; (8008364 <MX_I2C1_Init+0x78>)
 80082f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80082f6:	4b1a      	ldr	r3, [pc, #104]	; (8008360 <MX_I2C1_Init+0x74>)
 80082f8:	4a1b      	ldr	r2, [pc, #108]	; (8008368 <MX_I2C1_Init+0x7c>)
 80082fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80082fc:	4b18      	ldr	r3, [pc, #96]	; (8008360 <MX_I2C1_Init+0x74>)
 80082fe:	2200      	movs	r2, #0
 8008300:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008302:	4b17      	ldr	r3, [pc, #92]	; (8008360 <MX_I2C1_Init+0x74>)
 8008304:	2201      	movs	r2, #1
 8008306:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008308:	4b15      	ldr	r3, [pc, #84]	; (8008360 <MX_I2C1_Init+0x74>)
 800830a:	2200      	movs	r2, #0
 800830c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800830e:	4b14      	ldr	r3, [pc, #80]	; (8008360 <MX_I2C1_Init+0x74>)
 8008310:	2200      	movs	r2, #0
 8008312:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008314:	4b12      	ldr	r3, [pc, #72]	; (8008360 <MX_I2C1_Init+0x74>)
 8008316:	2200      	movs	r2, #0
 8008318:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800831a:	4b11      	ldr	r3, [pc, #68]	; (8008360 <MX_I2C1_Init+0x74>)
 800831c:	2200      	movs	r2, #0
 800831e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008320:	4b0f      	ldr	r3, [pc, #60]	; (8008360 <MX_I2C1_Init+0x74>)
 8008322:	2200      	movs	r2, #0
 8008324:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008326:	480e      	ldr	r0, [pc, #56]	; (8008360 <MX_I2C1_Init+0x74>)
 8008328:	f7f8 fd9e 	bl	8000e68 <HAL_I2C_Init>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8008332:	f000 f993 	bl	800865c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008336:	2100      	movs	r1, #0
 8008338:	4809      	ldr	r0, [pc, #36]	; (8008360 <MX_I2C1_Init+0x74>)
 800833a:	f7f9 fa9d 	bl	8001878 <HAL_I2CEx_ConfigAnalogFilter>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8008344:	f000 f98a 	bl	800865c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008348:	2100      	movs	r1, #0
 800834a:	4805      	ldr	r0, [pc, #20]	; (8008360 <MX_I2C1_Init+0x74>)
 800834c:	f7f9 fadf 	bl	800190e <HAL_I2CEx_ConfigDigitalFilter>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8008356:	f000 f981 	bl	800865c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800835a:	bf00      	nop
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	20000264 	.word	0x20000264
 8008364:	40005400 	.word	0x40005400
 8008368:	10909cec 	.word	0x10909cec

0800836c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008372:	f107 0310 	add.w	r3, r7, #16
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	605a      	str	r2, [r3, #4]
 800837c:	609a      	str	r2, [r3, #8]
 800837e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008380:	1d3b      	adds	r3, r7, #4
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	605a      	str	r2, [r3, #4]
 8008388:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800838a:	4b1d      	ldr	r3, [pc, #116]	; (8008400 <MX_TIM2_Init+0x94>)
 800838c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008390:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008392:	4b1b      	ldr	r3, [pc, #108]	; (8008400 <MX_TIM2_Init+0x94>)
 8008394:	2200      	movs	r2, #0
 8008396:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008398:	4b19      	ldr	r3, [pc, #100]	; (8008400 <MX_TIM2_Init+0x94>)
 800839a:	2200      	movs	r2, #0
 800839c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000000;
 800839e:	4b18      	ldr	r3, [pc, #96]	; (8008400 <MX_TIM2_Init+0x94>)
 80083a0:	4a18      	ldr	r2, [pc, #96]	; (8008404 <MX_TIM2_Init+0x98>)
 80083a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083a4:	4b16      	ldr	r3, [pc, #88]	; (8008400 <MX_TIM2_Init+0x94>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083aa:	4b15      	ldr	r3, [pc, #84]	; (8008400 <MX_TIM2_Init+0x94>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80083b0:	4813      	ldr	r0, [pc, #76]	; (8008400 <MX_TIM2_Init+0x94>)
 80083b2:	f7fb fe9b 	bl	80040ec <HAL_TIM_Base_Init>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80083bc:	f000 f94e 	bl	800865c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80083c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80083c6:	f107 0310 	add.w	r3, r7, #16
 80083ca:	4619      	mov	r1, r3
 80083cc:	480c      	ldr	r0, [pc, #48]	; (8008400 <MX_TIM2_Init+0x94>)
 80083ce:	f7fc f874 	bl	80044ba <HAL_TIM_ConfigClockSource>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80083d8:	f000 f940 	bl	800865c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80083dc:	2320      	movs	r3, #32
 80083de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80083e0:	2300      	movs	r3, #0
 80083e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80083e4:	1d3b      	adds	r3, r7, #4
 80083e6:	4619      	mov	r1, r3
 80083e8:	4805      	ldr	r0, [pc, #20]	; (8008400 <MX_TIM2_Init+0x94>)
 80083ea:	f7fc fa89 	bl	8004900 <HAL_TIMEx_MasterConfigSynchronization>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80083f4:	f000 f932 	bl	800865c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80083f8:	bf00      	nop
 80083fa:	3720      	adds	r7, #32
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	200003a0 	.word	0x200003a0
 8008404:	007a1200 	.word	0x007a1200

08008408 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800840c:	4b14      	ldr	r3, [pc, #80]	; (8008460 <MX_USART1_UART_Init+0x58>)
 800840e:	4a15      	ldr	r2, [pc, #84]	; (8008464 <MX_USART1_UART_Init+0x5c>)
 8008410:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008412:	4b13      	ldr	r3, [pc, #76]	; (8008460 <MX_USART1_UART_Init+0x58>)
 8008414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008418:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800841a:	4b11      	ldr	r3, [pc, #68]	; (8008460 <MX_USART1_UART_Init+0x58>)
 800841c:	2200      	movs	r2, #0
 800841e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008420:	4b0f      	ldr	r3, [pc, #60]	; (8008460 <MX_USART1_UART_Init+0x58>)
 8008422:	2200      	movs	r2, #0
 8008424:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008426:	4b0e      	ldr	r3, [pc, #56]	; (8008460 <MX_USART1_UART_Init+0x58>)
 8008428:	2200      	movs	r2, #0
 800842a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800842c:	4b0c      	ldr	r3, [pc, #48]	; (8008460 <MX_USART1_UART_Init+0x58>)
 800842e:	220c      	movs	r2, #12
 8008430:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008432:	4b0b      	ldr	r3, [pc, #44]	; (8008460 <MX_USART1_UART_Init+0x58>)
 8008434:	2200      	movs	r2, #0
 8008436:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008438:	4b09      	ldr	r3, [pc, #36]	; (8008460 <MX_USART1_UART_Init+0x58>)
 800843a:	2200      	movs	r2, #0
 800843c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800843e:	4b08      	ldr	r3, [pc, #32]	; (8008460 <MX_USART1_UART_Init+0x58>)
 8008440:	2200      	movs	r2, #0
 8008442:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008444:	4b06      	ldr	r3, [pc, #24]	; (8008460 <MX_USART1_UART_Init+0x58>)
 8008446:	2200      	movs	r2, #0
 8008448:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800844a:	4805      	ldr	r0, [pc, #20]	; (8008460 <MX_USART1_UART_Init+0x58>)
 800844c:	f7fc fafe 	bl	8004a4c <HAL_UART_Init>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8008456:	f000 f901 	bl	800865c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800845a:	bf00      	nop
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	200002b4 	.word	0x200002b4
 8008464:	40013800 	.word	0x40013800

08008468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08a      	sub	sp, #40	; 0x28
 800846c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800846e:	f107 0314 	add.w	r3, r7, #20
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]
 8008476:	605a      	str	r2, [r3, #4]
 8008478:	609a      	str	r2, [r3, #8]
 800847a:	60da      	str	r2, [r3, #12]
 800847c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800847e:	4b4f      	ldr	r3, [pc, #316]	; (80085bc <MX_GPIO_Init+0x154>)
 8008480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008482:	4a4e      	ldr	r2, [pc, #312]	; (80085bc <MX_GPIO_Init+0x154>)
 8008484:	f043 0310 	orr.w	r3, r3, #16
 8008488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800848a:	4b4c      	ldr	r3, [pc, #304]	; (80085bc <MX_GPIO_Init+0x154>)
 800848c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800848e:	f003 0310 	and.w	r3, r3, #16
 8008492:	613b      	str	r3, [r7, #16]
 8008494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008496:	4b49      	ldr	r3, [pc, #292]	; (80085bc <MX_GPIO_Init+0x154>)
 8008498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800849a:	4a48      	ldr	r2, [pc, #288]	; (80085bc <MX_GPIO_Init+0x154>)
 800849c:	f043 0304 	orr.w	r3, r3, #4
 80084a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084a2:	4b46      	ldr	r3, [pc, #280]	; (80085bc <MX_GPIO_Init+0x154>)
 80084a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084a6:	f003 0304 	and.w	r3, r3, #4
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80084ae:	4b43      	ldr	r3, [pc, #268]	; (80085bc <MX_GPIO_Init+0x154>)
 80084b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084b2:	4a42      	ldr	r2, [pc, #264]	; (80085bc <MX_GPIO_Init+0x154>)
 80084b4:	f043 0302 	orr.w	r3, r3, #2
 80084b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084ba:	4b40      	ldr	r3, [pc, #256]	; (80085bc <MX_GPIO_Init+0x154>)
 80084bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	60bb      	str	r3, [r7, #8]
 80084c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80084c6:	4b3d      	ldr	r3, [pc, #244]	; (80085bc <MX_GPIO_Init+0x154>)
 80084c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ca:	4a3c      	ldr	r2, [pc, #240]	; (80085bc <MX_GPIO_Init+0x154>)
 80084cc:	f043 0308 	orr.w	r3, r3, #8
 80084d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084d2:	4b3a      	ldr	r3, [pc, #232]	; (80085bc <MX_GPIO_Init+0x154>)
 80084d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d6:	f003 0308 	and.w	r3, r3, #8
 80084da:	607b      	str	r3, [r7, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80084de:	4b37      	ldr	r3, [pc, #220]	; (80085bc <MX_GPIO_Init+0x154>)
 80084e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e2:	4a36      	ldr	r2, [pc, #216]	; (80085bc <MX_GPIO_Init+0x154>)
 80084e4:	f043 0301 	orr.w	r3, r3, #1
 80084e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084ea:	4b34      	ldr	r3, [pc, #208]	; (80085bc <MX_GPIO_Init+0x154>)
 80084ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 80084f6:	2201      	movs	r2, #1
 80084f8:	2108      	movs	r1, #8
 80084fa:	4831      	ldr	r0, [pc, #196]	; (80085c0 <MX_GPIO_Init+0x158>)
 80084fc:	f7f8 fc84 	bl	8000e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8008500:	2200      	movs	r2, #0
 8008502:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008506:	482f      	ldr	r0, [pc, #188]	; (80085c4 <MX_GPIO_Init+0x15c>)
 8008508:	f7f8 fc7e 	bl	8000e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_ERROR_Pin */
  GPIO_InitStruct.Pin = LED_ERROR_Pin;
 800850c:	2308      	movs	r3, #8
 800850e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008510:	2301      	movs	r3, #1
 8008512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008514:	2300      	movs	r3, #0
 8008516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008518:	2300      	movs	r3, #0
 800851a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_ERROR_GPIO_Port, &GPIO_InitStruct);
 800851c:	f107 0314 	add.w	r3, r7, #20
 8008520:	4619      	mov	r1, r3
 8008522:	4827      	ldr	r0, [pc, #156]	; (80085c0 <MX_GPIO_Init+0x158>)
 8008524:	f7f8 f9d2 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSHBUTTON_Pin */
  GPIO_InitStruct.Pin = PUSHBUTTON_Pin;
 8008528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800852c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800852e:	4b26      	ldr	r3, [pc, #152]	; (80085c8 <MX_GPIO_Init+0x160>)
 8008530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008532:	2300      	movs	r3, #0
 8008534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 8008536:	f107 0314 	add.w	r3, r7, #20
 800853a:	4619      	mov	r1, r3
 800853c:	4823      	ldr	r0, [pc, #140]	; (80085cc <MX_GPIO_Init+0x164>)
 800853e:	f7f8 f9c5 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : test_push_Pin */
  GPIO_InitStruct.Pin = test_push_Pin;
 8008542:	2301      	movs	r3, #1
 8008544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008546:	4b20      	ldr	r3, [pc, #128]	; (80085c8 <MX_GPIO_Init+0x160>)
 8008548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800854a:	2302      	movs	r3, #2
 800854c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(test_push_GPIO_Port, &GPIO_InitStruct);
 800854e:	f107 0314 	add.w	r3, r7, #20
 8008552:	4619      	mov	r1, r3
 8008554:	481d      	ldr	r0, [pc, #116]	; (80085cc <MX_GPIO_Init+0x164>)
 8008556:	f7f8 f9b9 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800855a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800855e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008560:	2301      	movs	r3, #1
 8008562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008564:	2300      	movs	r3, #0
 8008566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008568:	2300      	movs	r3, #0
 800856a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800856c:	f107 0314 	add.w	r3, r7, #20
 8008570:	4619      	mov	r1, r3
 8008572:	4814      	ldr	r0, [pc, #80]	; (80085c4 <MX_GPIO_Init+0x15c>)
 8008574:	f7f8 f9aa 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008578:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800857c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800857e:	4b12      	ldr	r3, [pc, #72]	; (80085c8 <MX_GPIO_Init+0x160>)
 8008580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008582:	2300      	movs	r3, #0
 8008584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008586:	f107 0314 	add.w	r3, r7, #20
 800858a:	4619      	mov	r1, r3
 800858c:	4810      	ldr	r0, [pc, #64]	; (80085d0 <MX_GPIO_Init+0x168>)
 800858e:	f7f8 f99d 	bl	80008cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8008592:	2200      	movs	r2, #0
 8008594:	2101      	movs	r1, #1
 8008596:	2006      	movs	r0, #6
 8008598:	f7f8 f961 	bl	800085e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800859c:	2006      	movs	r0, #6
 800859e:	f7f8 f97a 	bl	8000896 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80085a2:	2200      	movs	r2, #0
 80085a4:	2105      	movs	r1, #5
 80085a6:	2028      	movs	r0, #40	; 0x28
 80085a8:	f7f8 f959 	bl	800085e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80085ac:	2028      	movs	r0, #40	; 0x28
 80085ae:	f7f8 f972 	bl	8000896 <HAL_NVIC_EnableIRQ>

}
 80085b2:	bf00      	nop
 80085b4:	3728      	adds	r7, #40	; 0x28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	40021000 	.word	0x40021000
 80085c0:	48001000 	.word	0x48001000
 80085c4:	48000400 	.word	0x48000400
 80085c8:	10110000 	.word	0x10110000
 80085cc:	48000800 	.word	0x48000800
 80085d0:	48000c00 	.word	0x48000c00

080085d4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
/**
 * @brief Push-button Handler
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PUSHBUTTON_Pin)
 80085de:	88fb      	ldrh	r3, [r7, #6]
 80085e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085e4:	d102      	bne.n	80085ec <HAL_GPIO_EXTI_Callback+0x18>
	{
		 button_flag = 1;
 80085e6:	4b04      	ldr	r3, [pc, #16]	; (80085f8 <HAL_GPIO_EXTI_Callback+0x24>)
 80085e8:	2201      	movs	r2, #1
 80085ea:	701a      	strb	r2, [r3, #0]
//		 HAL_Delay(10);
//		 mousehid.button = 0;
//		 USBD_HID_SendReport(&hUsbDeviceFS,&mousehid, sizeof (mousehid));
	}

}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	20000230 	.word	0x20000230

080085fc <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief Interrupts Handler for TIM2
 *  At 80MHz system clock, prescaler = 0 and counter period = 8000000, this happens at 10Hz
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b098      	sub	sp, #96	; 0x60
 8008600:	af02      	add	r7, sp, #8
 8008602:	6078      	str	r0, [r7, #4]
	// Read acclerometer values, store in acceleroResults array
//	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	BSP_ACCELERO_AccGetXYZ(acceleroResults);
 8008604:	4812      	ldr	r0, [pc, #72]	; (8008650 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8008606:	f000 f9c5 	bl	8008994 <BSP_ACCELERO_AccGetXYZ>
//	// Format: (X, Y, Z), if printf is to be reconfigured (Cumbersome!)
//	// printf("(%d, %d, %d)\n", acceleroResults[0], acceleroResults[1], acceleroResults[2]);
	char XYZ[80];
	sprintf(XYZ, "%d, %d, %d, End\r", acceleroResults[0], acceleroResults[1], acceleroResults[2]);
 800860a:	4b11      	ldr	r3, [pc, #68]	; (8008650 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800860c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008610:	461a      	mov	r2, r3
 8008612:	4b0f      	ldr	r3, [pc, #60]	; (8008650 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8008614:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008618:	4619      	mov	r1, r3
 800861a:	4b0d      	ldr	r3, [pc, #52]	; (8008650 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800861c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008620:	f107 0008 	add.w	r0, r7, #8
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	460b      	mov	r3, r1
 8008628:	490a      	ldr	r1, [pc, #40]	; (8008654 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800862a:	f001 f981 	bl	8009930 <siprintf>
	HAL_UART_Transmit(&huart1, XYZ, (uint16_t)strlen(XYZ), 10);
 800862e:	f107 0308 	add.w	r3, r7, #8
 8008632:	4618      	mov	r0, r3
 8008634:	f7f7 fdcc 	bl	80001d0 <strlen>
 8008638:	4603      	mov	r3, r0
 800863a:	b29a      	uxth	r2, r3
 800863c:	f107 0108 	add.w	r1, r7, #8
 8008640:	230a      	movs	r3, #10
 8008642:	4805      	ldr	r0, [pc, #20]	; (8008658 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8008644:	f7fc fa50 	bl	8004ae8 <HAL_UART_Transmit>
}
 8008648:	bf00      	nop
 800864a:	3758      	adds	r7, #88	; 0x58
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	2000025c 	.word	0x2000025c
 8008654:	0800a1a4 	.word	0x0800a1a4
 8008658:	200002b4 	.word	0x200002b4

0800865c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
 8008660:	2200      	movs	r2, #0
 8008662:	2108      	movs	r1, #8
 8008664:	4803      	ldr	r0, [pc, #12]	; (8008674 <Error_Handler+0x18>)
 8008666:	f7f8 fbcf 	bl	8000e08 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800866a:	b672      	cpsid	i
}
 800866c:	bf00      	nop
  __disable_irq();
  __BKPT();
 800866e:	be00      	bkpt	0x0000
  while (1)
 8008670:	e7fe      	b.n	8008670 <Error_Handler+0x14>
 8008672:	bf00      	nop
 8008674:	48001000 	.word	0x48001000

08008678 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08a      	sub	sp, #40	; 0x28
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8008680:	4b27      	ldr	r3, [pc, #156]	; (8008720 <I2Cx_MspInit+0xa8>)
 8008682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008684:	4a26      	ldr	r2, [pc, #152]	; (8008720 <I2Cx_MspInit+0xa8>)
 8008686:	f043 0302 	orr.w	r3, r3, #2
 800868a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800868c:	4b24      	ldr	r3, [pc, #144]	; (8008720 <I2Cx_MspInit+0xa8>)
 800868e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008690:	f003 0302 	and.w	r3, r3, #2
 8008694:	613b      	str	r3, [r7, #16]
 8008696:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8008698:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800869c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800869e:	2312      	movs	r3, #18
 80086a0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80086a2:	2301      	movs	r3, #1
 80086a4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086a6:	2303      	movs	r3, #3
 80086a8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80086aa:	2304      	movs	r3, #4
 80086ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80086ae:	f107 0314 	add.w	r3, r7, #20
 80086b2:	4619      	mov	r1, r3
 80086b4:	481b      	ldr	r0, [pc, #108]	; (8008724 <I2Cx_MspInit+0xac>)
 80086b6:	f7f8 f909 	bl	80008cc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80086ba:	f107 0314 	add.w	r3, r7, #20
 80086be:	4619      	mov	r1, r3
 80086c0:	4818      	ldr	r0, [pc, #96]	; (8008724 <I2Cx_MspInit+0xac>)
 80086c2:	f7f8 f903 	bl	80008cc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80086c6:	4b16      	ldr	r3, [pc, #88]	; (8008720 <I2Cx_MspInit+0xa8>)
 80086c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ca:	4a15      	ldr	r2, [pc, #84]	; (8008720 <I2Cx_MspInit+0xa8>)
 80086cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80086d0:	6593      	str	r3, [r2, #88]	; 0x58
 80086d2:	4b13      	ldr	r3, [pc, #76]	; (8008720 <I2Cx_MspInit+0xa8>)
 80086d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80086de:	4b10      	ldr	r3, [pc, #64]	; (8008720 <I2Cx_MspInit+0xa8>)
 80086e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e2:	4a0f      	ldr	r2, [pc, #60]	; (8008720 <I2Cx_MspInit+0xa8>)
 80086e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80086e8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80086ea:	4b0d      	ldr	r3, [pc, #52]	; (8008720 <I2Cx_MspInit+0xa8>)
 80086ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ee:	4a0c      	ldr	r2, [pc, #48]	; (8008720 <I2Cx_MspInit+0xa8>)
 80086f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80086f4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80086f6:	2200      	movs	r2, #0
 80086f8:	210f      	movs	r1, #15
 80086fa:	2021      	movs	r0, #33	; 0x21
 80086fc:	f7f8 f8af 	bl	800085e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8008700:	2021      	movs	r0, #33	; 0x21
 8008702:	f7f8 f8c8 	bl	8000896 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8008706:	2200      	movs	r2, #0
 8008708:	210f      	movs	r1, #15
 800870a:	2022      	movs	r0, #34	; 0x22
 800870c:	f7f8 f8a7 	bl	800085e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8008710:	2022      	movs	r0, #34	; 0x22
 8008712:	f7f8 f8c0 	bl	8000896 <HAL_NVIC_EnableIRQ>
}
 8008716:	bf00      	nop
 8008718:	3728      	adds	r7, #40	; 0x28
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	40021000 	.word	0x40021000
 8008724:	48000400 	.word	0x48000400

08008728 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a12      	ldr	r2, [pc, #72]	; (800877c <I2Cx_Init+0x54>)
 8008734:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a11      	ldr	r2, [pc, #68]	; (8008780 <I2Cx_Init+0x58>)
 800873a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff ff89 	bl	8008678 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7f8 fb7e 	bl	8000e68 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800876c:	2100      	movs	r1, #0
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7f9 f882 	bl	8001878 <HAL_I2CEx_ConfigAnalogFilter>
}
 8008774:	bf00      	nop
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	40005800 	.word	0x40005800
 8008780:	00702681 	.word	0x00702681

08008784 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b08a      	sub	sp, #40	; 0x28
 8008788:	af04      	add	r7, sp, #16
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	4608      	mov	r0, r1
 800878e:	4611      	mov	r1, r2
 8008790:	461a      	mov	r2, r3
 8008792:	4603      	mov	r3, r0
 8008794:	72fb      	strb	r3, [r7, #11]
 8008796:	460b      	mov	r3, r1
 8008798:	813b      	strh	r3, [r7, #8]
 800879a:	4613      	mov	r3, r2
 800879c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80087a2:	7afb      	ldrb	r3, [r7, #11]
 80087a4:	b299      	uxth	r1, r3
 80087a6:	88f8      	ldrh	r0, [r7, #6]
 80087a8:	893a      	ldrh	r2, [r7, #8]
 80087aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80087ae:	9302      	str	r3, [sp, #8]
 80087b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087b2:	9301      	str	r3, [sp, #4]
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	4603      	mov	r3, r0
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f7f8 fd26 	bl	800120c <HAL_I2C_Mem_Read>
 80087c0:	4603      	mov	r3, r0
 80087c2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d004      	beq.n	80087d4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80087ca:	7afb      	ldrb	r3, [r7, #11]
 80087cc:	4619      	mov	r1, r3
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f000 f832 	bl	8008838 <I2Cx_Error>
  }
  return status;
 80087d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3718      	adds	r7, #24
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b08a      	sub	sp, #40	; 0x28
 80087e2:	af04      	add	r7, sp, #16
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	4608      	mov	r0, r1
 80087e8:	4611      	mov	r1, r2
 80087ea:	461a      	mov	r2, r3
 80087ec:	4603      	mov	r3, r0
 80087ee:	72fb      	strb	r3, [r7, #11]
 80087f0:	460b      	mov	r3, r1
 80087f2:	813b      	strh	r3, [r7, #8]
 80087f4:	4613      	mov	r3, r2
 80087f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80087fc:	7afb      	ldrb	r3, [r7, #11]
 80087fe:	b299      	uxth	r1, r3
 8008800:	88f8      	ldrh	r0, [r7, #6]
 8008802:	893a      	ldrh	r2, [r7, #8]
 8008804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008808:	9302      	str	r3, [sp, #8]
 800880a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800880c:	9301      	str	r3, [sp, #4]
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	4603      	mov	r3, r0
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f7f8 fbe5 	bl	8000fe4 <HAL_I2C_Mem_Write>
 800881a:	4603      	mov	r3, r0
 800881c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d004      	beq.n	800882e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8008824:	7afb      	ldrb	r3, [r7, #11]
 8008826:	4619      	mov	r1, r3
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 f805 	bl	8008838 <I2Cx_Error>
  }
  return status;
 800882e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	460b      	mov	r3, r1
 8008842:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7f8 fb9e 	bl	8000f86 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7ff ff6c 	bl	8008728 <I2Cx_Init>
}
 8008850:	bf00      	nop
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800885c:	4802      	ldr	r0, [pc, #8]	; (8008868 <SENSOR_IO_Init+0x10>)
 800885e:	f7ff ff63 	bl	8008728 <I2Cx_Init>
}
 8008862:	bf00      	nop
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	20000470 	.word	0x20000470

0800886c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af02      	add	r7, sp, #8
 8008872:	4603      	mov	r3, r0
 8008874:	71fb      	strb	r3, [r7, #7]
 8008876:	460b      	mov	r3, r1
 8008878:	71bb      	strb	r3, [r7, #6]
 800887a:	4613      	mov	r3, r2
 800887c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800887e:	79bb      	ldrb	r3, [r7, #6]
 8008880:	b29a      	uxth	r2, r3
 8008882:	79f9      	ldrb	r1, [r7, #7]
 8008884:	2301      	movs	r3, #1
 8008886:	9301      	str	r3, [sp, #4]
 8008888:	1d7b      	adds	r3, r7, #5
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	2301      	movs	r3, #1
 800888e:	4803      	ldr	r0, [pc, #12]	; (800889c <SENSOR_IO_Write+0x30>)
 8008890:	f7ff ffa5 	bl	80087de <I2Cx_WriteMultiple>
}
 8008894:	bf00      	nop
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	20000470 	.word	0x20000470

080088a0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af02      	add	r7, sp, #8
 80088a6:	4603      	mov	r3, r0
 80088a8:	460a      	mov	r2, r1
 80088aa:	71fb      	strb	r3, [r7, #7]
 80088ac:	4613      	mov	r3, r2
 80088ae:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80088b4:	79bb      	ldrb	r3, [r7, #6]
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	79f9      	ldrb	r1, [r7, #7]
 80088ba:	2301      	movs	r3, #1
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	f107 030f 	add.w	r3, r7, #15
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	2301      	movs	r3, #1
 80088c6:	4804      	ldr	r0, [pc, #16]	; (80088d8 <SENSOR_IO_Read+0x38>)
 80088c8:	f7ff ff5c 	bl	8008784 <I2Cx_ReadMultiple>

  return read_value;
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20000470 	.word	0x20000470

080088dc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af02      	add	r7, sp, #8
 80088e2:	603a      	str	r2, [r7, #0]
 80088e4:	461a      	mov	r2, r3
 80088e6:	4603      	mov	r3, r0
 80088e8:	71fb      	strb	r3, [r7, #7]
 80088ea:	460b      	mov	r3, r1
 80088ec:	71bb      	strb	r3, [r7, #6]
 80088ee:	4613      	mov	r3, r2
 80088f0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80088f2:	79bb      	ldrb	r3, [r7, #6]
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	79f9      	ldrb	r1, [r7, #7]
 80088f8:	88bb      	ldrh	r3, [r7, #4]
 80088fa:	9301      	str	r3, [sp, #4]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	2301      	movs	r3, #1
 8008902:	4804      	ldr	r0, [pc, #16]	; (8008914 <SENSOR_IO_ReadMultiple+0x38>)
 8008904:	f7ff ff3e 	bl	8008784 <I2Cx_ReadMultiple>
 8008908:	4603      	mov	r3, r0
 800890a:	b29b      	uxth	r3, r3
}
 800890c:	4618      	mov	r0, r3
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	20000470 	.word	0x20000470

08008918 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8008922:	2300      	movs	r3, #0
 8008924:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8008926:	4b19      	ldr	r3, [pc, #100]	; (800898c <BSP_ACCELERO_Init+0x74>)
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	4798      	blx	r3
 800892c:	4603      	mov	r3, r0
 800892e:	2b6a      	cmp	r3, #106	; 0x6a
 8008930:	d002      	beq.n	8008938 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	73fb      	strb	r3, [r7, #15]
 8008936:	e024      	b.n	8008982 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8008938:	4b15      	ldr	r3, [pc, #84]	; (8008990 <BSP_ACCELERO_Init+0x78>)
 800893a:	4a14      	ldr	r2, [pc, #80]	; (800898c <BSP_ACCELERO_Init+0x74>)
 800893c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800893e:	2330      	movs	r3, #48	; 0x30
 8008940:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8008942:	2300      	movs	r3, #0
 8008944:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8008946:	2300      	movs	r3, #0
 8008948:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800894a:	2340      	movs	r3, #64	; 0x40
 800894c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800894e:	2300      	movs	r3, #0
 8008950:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8008952:	2300      	movs	r3, #0
 8008954:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8008956:	797a      	ldrb	r2, [r7, #5]
 8008958:	7abb      	ldrb	r3, [r7, #10]
 800895a:	4313      	orrs	r3, r2
 800895c:	b2db      	uxtb	r3, r3
 800895e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8008960:	7a3b      	ldrb	r3, [r7, #8]
 8008962:	f043 0304 	orr.w	r3, r3, #4
 8008966:	b2db      	uxtb	r3, r3
 8008968:	021b      	lsls	r3, r3, #8
 800896a:	b21a      	sxth	r2, r3
 800896c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008970:	4313      	orrs	r3, r2
 8008972:	b21b      	sxth	r3, r3
 8008974:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8008976:	4b06      	ldr	r3, [pc, #24]	; (8008990 <BSP_ACCELERO_Init+0x78>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	89ba      	ldrh	r2, [r7, #12]
 800897e:	4610      	mov	r0, r2
 8008980:	4798      	blx	r3
  }  

  return ret;
 8008982:	7bfb      	ldrb	r3, [r7, #15]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	20000110 	.word	0x20000110
 8008990:	20000234 	.word	0x20000234

08008994 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800899c:	4b08      	ldr	r3, [pc, #32]	; (80089c0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d009      	beq.n	80089b8 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80089a4:	4b06      	ldr	r3, [pc, #24]	; (80089c0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d004      	beq.n	80089b8 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80089ae:	4b04      	ldr	r3, [pc, #16]	; (80089c0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	4798      	blx	r3
    }
  }
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	20000234 	.word	0x20000234

080089c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089ca:	4b0f      	ldr	r3, [pc, #60]	; (8008a08 <HAL_MspInit+0x44>)
 80089cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089ce:	4a0e      	ldr	r2, [pc, #56]	; (8008a08 <HAL_MspInit+0x44>)
 80089d0:	f043 0301 	orr.w	r3, r3, #1
 80089d4:	6613      	str	r3, [r2, #96]	; 0x60
 80089d6:	4b0c      	ldr	r3, [pc, #48]	; (8008a08 <HAL_MspInit+0x44>)
 80089d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	607b      	str	r3, [r7, #4]
 80089e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80089e2:	4b09      	ldr	r3, [pc, #36]	; (8008a08 <HAL_MspInit+0x44>)
 80089e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089e6:	4a08      	ldr	r2, [pc, #32]	; (8008a08 <HAL_MspInit+0x44>)
 80089e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089ec:	6593      	str	r3, [r2, #88]	; 0x58
 80089ee:	4b06      	ldr	r3, [pc, #24]	; (8008a08 <HAL_MspInit+0x44>)
 80089f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089f6:	603b      	str	r3, [r7, #0]
 80089f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80089fa:	bf00      	nop
 80089fc:	370c      	adds	r7, #12
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	40021000 	.word	0x40021000

08008a0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b0ac      	sub	sp, #176	; 0xb0
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008a18:	2200      	movs	r2, #0
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	605a      	str	r2, [r3, #4]
 8008a1e:	609a      	str	r2, [r3, #8]
 8008a20:	60da      	str	r2, [r3, #12]
 8008a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008a24:	f107 0314 	add.w	r3, r7, #20
 8008a28:	2288      	movs	r2, #136	; 0x88
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 ff77 	bl	8009920 <memset>
  if(hi2c->Instance==I2C1)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a21      	ldr	r2, [pc, #132]	; (8008abc <HAL_I2C_MspInit+0xb0>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d13b      	bne.n	8008ab4 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8008a3c:	2340      	movs	r3, #64	; 0x40
 8008a3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008a40:	2300      	movs	r3, #0
 8008a42:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008a44:	f107 0314 	add.w	r3, r7, #20
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7fa fe93 	bl	8003774 <HAL_RCCEx_PeriphCLKConfig>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d001      	beq.n	8008a58 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8008a54:	f7ff fe02 	bl	800865c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a58:	4b19      	ldr	r3, [pc, #100]	; (8008ac0 <HAL_I2C_MspInit+0xb4>)
 8008a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a5c:	4a18      	ldr	r2, [pc, #96]	; (8008ac0 <HAL_I2C_MspInit+0xb4>)
 8008a5e:	f043 0302 	orr.w	r3, r3, #2
 8008a62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a64:	4b16      	ldr	r3, [pc, #88]	; (8008ac0 <HAL_I2C_MspInit+0xb4>)
 8008a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a68:	f003 0302 	and.w	r3, r3, #2
 8008a6c:	613b      	str	r3, [r7, #16]
 8008a6e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008a70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008a74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008a78:	2312      	movs	r3, #18
 8008a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a84:	2303      	movs	r3, #3
 8008a86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008a8a:	2304      	movs	r3, #4
 8008a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008a94:	4619      	mov	r1, r3
 8008a96:	480b      	ldr	r0, [pc, #44]	; (8008ac4 <HAL_I2C_MspInit+0xb8>)
 8008a98:	f7f7 ff18 	bl	80008cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008a9c:	4b08      	ldr	r3, [pc, #32]	; (8008ac0 <HAL_I2C_MspInit+0xb4>)
 8008a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa0:	4a07      	ldr	r2, [pc, #28]	; (8008ac0 <HAL_I2C_MspInit+0xb4>)
 8008aa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8008aa8:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <HAL_I2C_MspInit+0xb4>)
 8008aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008ab4:	bf00      	nop
 8008ab6:	37b0      	adds	r7, #176	; 0xb0
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	40005400 	.word	0x40005400
 8008ac0:	40021000 	.word	0x40021000
 8008ac4:	48000400 	.word	0x48000400

08008ac8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a0b      	ldr	r2, [pc, #44]	; (8008b04 <HAL_I2C_MspDeInit+0x3c>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d10f      	bne.n	8008afa <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008ada:	4b0b      	ldr	r3, [pc, #44]	; (8008b08 <HAL_I2C_MspDeInit+0x40>)
 8008adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ade:	4a0a      	ldr	r2, [pc, #40]	; (8008b08 <HAL_I2C_MspDeInit+0x40>)
 8008ae0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ae4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8008ae6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008aea:	4808      	ldr	r0, [pc, #32]	; (8008b0c <HAL_I2C_MspDeInit+0x44>)
 8008aec:	f7f8 f898 	bl	8000c20 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8008af0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008af4:	4805      	ldr	r0, [pc, #20]	; (8008b0c <HAL_I2C_MspDeInit+0x44>)
 8008af6:	f7f8 f893 	bl	8000c20 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008afa:	bf00      	nop
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	40005400 	.word	0x40005400
 8008b08:	40021000 	.word	0x40021000
 8008b0c:	48000400 	.word	0x48000400

08008b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b20:	d113      	bne.n	8008b4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008b22:	4b0c      	ldr	r3, [pc, #48]	; (8008b54 <HAL_TIM_Base_MspInit+0x44>)
 8008b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b26:	4a0b      	ldr	r2, [pc, #44]	; (8008b54 <HAL_TIM_Base_MspInit+0x44>)
 8008b28:	f043 0301 	orr.w	r3, r3, #1
 8008b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8008b2e:	4b09      	ldr	r3, [pc, #36]	; (8008b54 <HAL_TIM_Base_MspInit+0x44>)
 8008b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	60fb      	str	r3, [r7, #12]
 8008b38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	201c      	movs	r0, #28
 8008b40:	f7f7 fe8d 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008b44:	201c      	movs	r0, #28
 8008b46:	f7f7 fea6 	bl	8000896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8008b4a:	bf00      	nop
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	40021000 	.word	0x40021000

08008b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b0ac      	sub	sp, #176	; 0xb0
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008b64:	2200      	movs	r2, #0
 8008b66:	601a      	str	r2, [r3, #0]
 8008b68:	605a      	str	r2, [r3, #4]
 8008b6a:	609a      	str	r2, [r3, #8]
 8008b6c:	60da      	str	r2, [r3, #12]
 8008b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008b70:	f107 0314 	add.w	r3, r7, #20
 8008b74:	2288      	movs	r2, #136	; 0x88
 8008b76:	2100      	movs	r1, #0
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fed1 	bl	8009920 <memset>
  if(huart->Instance==USART1)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a21      	ldr	r2, [pc, #132]	; (8008c08 <HAL_UART_MspInit+0xb0>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d13a      	bne.n	8008bfe <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008b90:	f107 0314 	add.w	r3, r7, #20
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fa fded 	bl	8003774 <HAL_RCCEx_PeriphCLKConfig>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008ba0:	f7ff fd5c 	bl	800865c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008ba4:	4b19      	ldr	r3, [pc, #100]	; (8008c0c <HAL_UART_MspInit+0xb4>)
 8008ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ba8:	4a18      	ldr	r2, [pc, #96]	; (8008c0c <HAL_UART_MspInit+0xb4>)
 8008baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bae:	6613      	str	r3, [r2, #96]	; 0x60
 8008bb0:	4b16      	ldr	r3, [pc, #88]	; (8008c0c <HAL_UART_MspInit+0xb4>)
 8008bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bb8:	613b      	str	r3, [r7, #16]
 8008bba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008bbc:	4b13      	ldr	r3, [pc, #76]	; (8008c0c <HAL_UART_MspInit+0xb4>)
 8008bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bc0:	4a12      	ldr	r2, [pc, #72]	; (8008c0c <HAL_UART_MspInit+0xb4>)
 8008bc2:	f043 0302 	orr.w	r3, r3, #2
 8008bc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008bc8:	4b10      	ldr	r3, [pc, #64]	; (8008c0c <HAL_UART_MspInit+0xb4>)
 8008bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bcc:	f003 0302 	and.w	r3, r3, #2
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008bd4:	23c0      	movs	r3, #192	; 0xc0
 8008bd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bda:	2302      	movs	r3, #2
 8008bdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008be0:	2300      	movs	r3, #0
 8008be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008be6:	2303      	movs	r3, #3
 8008be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008bec:	2307      	movs	r3, #7
 8008bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bf2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	4805      	ldr	r0, [pc, #20]	; (8008c10 <HAL_UART_MspInit+0xb8>)
 8008bfa:	f7f7 fe67 	bl	80008cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008bfe:	bf00      	nop
 8008c00:	37b0      	adds	r7, #176	; 0xb0
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	40013800 	.word	0x40013800
 8008c0c:	40021000 	.word	0x40021000
 8008c10:	48000400 	.word	0x48000400

08008c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008c14:	b480      	push	{r7}
 8008c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008c18:	e7fe      	b.n	8008c18 <NMI_Handler+0x4>

08008c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008c1e:	e7fe      	b.n	8008c1e <HardFault_Handler+0x4>

08008c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008c20:	b480      	push	{r7}
 8008c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008c24:	e7fe      	b.n	8008c24 <MemManage_Handler+0x4>

08008c26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008c26:	b480      	push	{r7}
 8008c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008c2a:	e7fe      	b.n	8008c2a <BusFault_Handler+0x4>

08008c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008c30:	e7fe      	b.n	8008c30 <UsageFault_Handler+0x4>

08008c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008c32:	b480      	push	{r7}
 8008c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008c36:	bf00      	nop
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008c40:	b480      	push	{r7}
 8008c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008c44:	bf00      	nop
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008c4e:	b480      	push	{r7}
 8008c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008c52:	bf00      	nop
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008c60:	f7f7 fcde 	bl	8000620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008c64:	bf00      	nop
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008c6c:	2001      	movs	r0, #1
 8008c6e:	f7f8 f8e3 	bl	8000e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008c72:	bf00      	nop
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008c7c:	4802      	ldr	r0, [pc, #8]	; (8008c88 <TIM2_IRQHandler+0x10>)
 8008c7e:	f7fb fafd 	bl	800427c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008c82:	bf00      	nop
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	200003a0 	.word	0x200003a0

08008c8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8008c90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008c94:	f7f8 f8d0 	bl	8000e38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8008c98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008c9c:	f7f8 f8cc 	bl	8000e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008ca0:	bf00      	nop
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008ca8:	4802      	ldr	r0, [pc, #8]	; (8008cb4 <OTG_FS_IRQHandler+0x10>)
 8008caa:	f7f8 ffcf 	bl	8001c4c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008cae:	bf00      	nop
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	2000078c 	.word	0x2000078c

08008cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008cc0:	4a14      	ldr	r2, [pc, #80]	; (8008d14 <_sbrk+0x5c>)
 8008cc2:	4b15      	ldr	r3, [pc, #84]	; (8008d18 <_sbrk+0x60>)
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008ccc:	4b13      	ldr	r3, [pc, #76]	; (8008d1c <_sbrk+0x64>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d102      	bne.n	8008cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008cd4:	4b11      	ldr	r3, [pc, #68]	; (8008d1c <_sbrk+0x64>)
 8008cd6:	4a12      	ldr	r2, [pc, #72]	; (8008d20 <_sbrk+0x68>)
 8008cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008cda:	4b10      	ldr	r3, [pc, #64]	; (8008d1c <_sbrk+0x64>)
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d207      	bcs.n	8008cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008ce8:	f000 fdf0 	bl	80098cc <__errno>
 8008cec:	4603      	mov	r3, r0
 8008cee:	220c      	movs	r2, #12
 8008cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf6:	e009      	b.n	8008d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008cf8:	4b08      	ldr	r3, [pc, #32]	; (8008d1c <_sbrk+0x64>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008cfe:	4b07      	ldr	r3, [pc, #28]	; (8008d1c <_sbrk+0x64>)
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4413      	add	r3, r2
 8008d06:	4a05      	ldr	r2, [pc, #20]	; (8008d1c <_sbrk+0x64>)
 8008d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	20018000 	.word	0x20018000
 8008d18:	00000400 	.word	0x00000400
 8008d1c:	20000238 	.word	0x20000238
 8008d20:	20000da8 	.word	0x20000da8

08008d24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008d24:	b480      	push	{r7}
 8008d26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008d28:	4b15      	ldr	r3, [pc, #84]	; (8008d80 <SystemInit+0x5c>)
 8008d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d2e:	4a14      	ldr	r2, [pc, #80]	; (8008d80 <SystemInit+0x5c>)
 8008d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008d38:	4b12      	ldr	r3, [pc, #72]	; (8008d84 <SystemInit+0x60>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a11      	ldr	r2, [pc, #68]	; (8008d84 <SystemInit+0x60>)
 8008d3e:	f043 0301 	orr.w	r3, r3, #1
 8008d42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8008d44:	4b0f      	ldr	r3, [pc, #60]	; (8008d84 <SystemInit+0x60>)
 8008d46:	2200      	movs	r2, #0
 8008d48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8008d4a:	4b0e      	ldr	r3, [pc, #56]	; (8008d84 <SystemInit+0x60>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a0d      	ldr	r2, [pc, #52]	; (8008d84 <SystemInit+0x60>)
 8008d50:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8008d54:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8008d58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8008d5a:	4b0a      	ldr	r3, [pc, #40]	; (8008d84 <SystemInit+0x60>)
 8008d5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008d60:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008d62:	4b08      	ldr	r3, [pc, #32]	; (8008d84 <SystemInit+0x60>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a07      	ldr	r2, [pc, #28]	; (8008d84 <SystemInit+0x60>)
 8008d68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8008d6e:	4b05      	ldr	r3, [pc, #20]	; (8008d84 <SystemInit+0x60>)
 8008d70:	2200      	movs	r2, #0
 8008d72:	619a      	str	r2, [r3, #24]
}
 8008d74:	bf00      	nop
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	e000ed00 	.word	0xe000ed00
 8008d84:	40021000 	.word	0x40021000

08008d88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	490e      	ldr	r1, [pc, #56]	; (8008dc8 <MX_USB_DEVICE_Init+0x40>)
 8008d90:	480e      	ldr	r0, [pc, #56]	; (8008dcc <MX_USB_DEVICE_Init+0x44>)
 8008d92:	f7fd ff19 	bl	8006bc8 <USBD_Init>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d9c:	f7ff fc5e 	bl	800865c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008da0:	490b      	ldr	r1, [pc, #44]	; (8008dd0 <MX_USB_DEVICE_Init+0x48>)
 8008da2:	480a      	ldr	r0, [pc, #40]	; (8008dcc <MX_USB_DEVICE_Init+0x44>)
 8008da4:	f7fd ff40 	bl	8006c28 <USBD_RegisterClass>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008dae:	f7ff fc55 	bl	800865c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008db2:	4806      	ldr	r0, [pc, #24]	; (8008dcc <MX_USB_DEVICE_Init+0x44>)
 8008db4:	f7fd ff5f 	bl	8006c76 <USBD_Start>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008dbe:	f7ff fc4d 	bl	800865c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008dc2:	bf00      	nop
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20000148 	.word	0x20000148
 8008dcc:	200004bc 	.word	0x200004bc
 8008dd0:	20000008 	.word	0x20000008

08008dd4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b0ac      	sub	sp, #176	; 0xb0
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ddc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008de0:	2200      	movs	r2, #0
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	605a      	str	r2, [r3, #4]
 8008de6:	609a      	str	r2, [r3, #8]
 8008de8:	60da      	str	r2, [r3, #12]
 8008dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008dec:	f107 0314 	add.w	r3, r7, #20
 8008df0:	2288      	movs	r2, #136	; 0x88
 8008df2:	2100      	movs	r1, #0
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 fd93 	bl	8009920 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e02:	d173      	bne.n	8008eec <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e08:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008e0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008e0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008e12:	2301      	movs	r3, #1
 8008e14:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008e16:	2301      	movs	r3, #1
 8008e18:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8008e1a:	2318      	movs	r3, #24
 8008e1c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008e1e:	2307      	movs	r3, #7
 8008e20:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008e22:	2302      	movs	r3, #2
 8008e24:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008e26:	2302      	movs	r3, #2
 8008e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008e2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e2e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008e30:	f107 0314 	add.w	r3, r7, #20
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fa fc9d 	bl	8003774 <HAL_RCCEx_PeriphCLKConfig>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d001      	beq.n	8008e44 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8008e40:	f7ff fc0c 	bl	800865c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e44:	4b2b      	ldr	r3, [pc, #172]	; (8008ef4 <HAL_PCD_MspInit+0x120>)
 8008e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e48:	4a2a      	ldr	r2, [pc, #168]	; (8008ef4 <HAL_PCD_MspInit+0x120>)
 8008e4a:	f043 0301 	orr.w	r3, r3, #1
 8008e4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e50:	4b28      	ldr	r3, [pc, #160]	; (8008ef4 <HAL_PCD_MspInit+0x120>)
 8008e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	613b      	str	r3, [r7, #16]
 8008e5a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008e5c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e64:	2302      	movs	r3, #2
 8008e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e70:	2303      	movs	r3, #3
 8008e72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e76:	230a      	movs	r3, #10
 8008e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008e80:	4619      	mov	r1, r3
 8008e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e86:	f7f7 fd21 	bl	80008cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e8a:	4b1a      	ldr	r3, [pc, #104]	; (8008ef4 <HAL_PCD_MspInit+0x120>)
 8008e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e8e:	4a19      	ldr	r2, [pc, #100]	; (8008ef4 <HAL_PCD_MspInit+0x120>)
 8008e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e96:	4b17      	ldr	r3, [pc, #92]	; (8008ef4 <HAL_PCD_MspInit+0x120>)
 8008e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e9e:	60fb      	str	r3, [r7, #12]
 8008ea0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ea2:	4b14      	ldr	r3, [pc, #80]	; (8008ef4 <HAL_PCD_MspInit+0x120>)
 8008ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d114      	bne.n	8008ed8 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008eae:	4b11      	ldr	r3, [pc, #68]	; (8008ef4 <HAL_PCD_MspInit+0x120>)
 8008eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb2:	4a10      	ldr	r2, [pc, #64]	; (8008ef4 <HAL_PCD_MspInit+0x120>)
 8008eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8008eba:	4b0e      	ldr	r3, [pc, #56]	; (8008ef4 <HAL_PCD_MspInit+0x120>)
 8008ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ec2:	60bb      	str	r3, [r7, #8]
 8008ec4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008ec6:	f7f9 fe59 	bl	8002b7c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008eca:	4b0a      	ldr	r3, [pc, #40]	; (8008ef4 <HAL_PCD_MspInit+0x120>)
 8008ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ece:	4a09      	ldr	r2, [pc, #36]	; (8008ef4 <HAL_PCD_MspInit+0x120>)
 8008ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8008ed6:	e001      	b.n	8008edc <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008ed8:	f7f9 fe50 	bl	8002b7c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008edc:	2200      	movs	r2, #0
 8008ede:	2100      	movs	r1, #0
 8008ee0:	2043      	movs	r0, #67	; 0x43
 8008ee2:	f7f7 fcbc 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ee6:	2043      	movs	r0, #67	; 0x43
 8008ee8:	f7f7 fcd5 	bl	8000896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008eec:	bf00      	nop
 8008eee:	37b0      	adds	r7, #176	; 0xb0
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	40021000 	.word	0x40021000

08008ef8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	4610      	mov	r0, r2
 8008f10:	f7fd fefc 	bl	8006d0c <USBD_LL_SetupStage>
}
 8008f14:	bf00      	nop
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008f2e:	78fa      	ldrb	r2, [r7, #3]
 8008f30:	6879      	ldr	r1, [r7, #4]
 8008f32:	4613      	mov	r3, r2
 8008f34:	00db      	lsls	r3, r3, #3
 8008f36:	1a9b      	subs	r3, r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	440b      	add	r3, r1
 8008f3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	78fb      	ldrb	r3, [r7, #3]
 8008f44:	4619      	mov	r1, r3
 8008f46:	f7fd ff36 	bl	8006db6 <USBD_LL_DataOutStage>
}
 8008f4a:	bf00      	nop
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b082      	sub	sp, #8
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008f64:	78fa      	ldrb	r2, [r7, #3]
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	00db      	lsls	r3, r3, #3
 8008f6c:	1a9b      	subs	r3, r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	440b      	add	r3, r1
 8008f72:	3348      	adds	r3, #72	; 0x48
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	78fb      	ldrb	r3, [r7, #3]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	f7fd ff7f 	bl	8006e7c <USBD_LL_DataInStage>
}
 8008f7e:	bf00      	nop
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b082      	sub	sp, #8
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fe f893 	bl	80070c0 <USBD_LL_SOF>
}
 8008f9a:	bf00      	nop
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008faa:	2301      	movs	r3, #1
 8008fac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d001      	beq.n	8008fba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008fb6:	f7ff fb51 	bl	800865c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fc0:	7bfa      	ldrb	r2, [r7, #15]
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7fe f83d 	bl	8007044 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7fd ffe9 	bl	8006fa8 <USBD_LL_Reset>
}
 8008fd6:	bf00      	nop
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
	...

08008fe0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	6812      	ldr	r2, [r2, #0]
 8008ff6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ffa:	f043 0301 	orr.w	r3, r3, #1
 8008ffe:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009006:	4618      	mov	r0, r3
 8009008:	f7fe f82c 	bl	8007064 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a1b      	ldr	r3, [r3, #32]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d005      	beq.n	8009020 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009014:	4b04      	ldr	r3, [pc, #16]	; (8009028 <HAL_PCD_SuspendCallback+0x48>)
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	4a03      	ldr	r2, [pc, #12]	; (8009028 <HAL_PCD_SuspendCallback+0x48>)
 800901a:	f043 0306 	orr.w	r3, r3, #6
 800901e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009020:	bf00      	nop
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	e000ed00 	.word	0xe000ed00

0800902c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	6812      	ldr	r2, [r2, #0]
 8009042:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009046:	f023 0301 	bic.w	r3, r3, #1
 800904a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a1b      	ldr	r3, [r3, #32]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d007      	beq.n	8009064 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009054:	4b08      	ldr	r3, [pc, #32]	; (8009078 <HAL_PCD_ResumeCallback+0x4c>)
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	4a07      	ldr	r2, [pc, #28]	; (8009078 <HAL_PCD_ResumeCallback+0x4c>)
 800905a:	f023 0306 	bic.w	r3, r3, #6
 800905e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009060:	f000 fae2 	bl	8009628 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe f810 	bl	8007090 <USBD_LL_Resume>
}
 8009070:	bf00      	nop
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	e000ed00 	.word	0xe000ed00

0800907c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800908e:	78fa      	ldrb	r2, [r7, #3]
 8009090:	4611      	mov	r1, r2
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe f85c 	bl	8007150 <USBD_LL_IsoOUTIncomplete>
}
 8009098:	bf00      	nop
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090b2:	78fa      	ldrb	r2, [r7, #3]
 80090b4:	4611      	mov	r1, r2
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fe f824 	bl	8007104 <USBD_LL_IsoINIncomplete>
}
 80090bc:	bf00      	nop
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe f862 	bl	800719c <USBD_LL_DevConnected>
}
 80090d8:	bf00      	nop
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe f85f 	bl	80071b2 <USBD_LL_DevDisconnected>
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d13c      	bne.n	8009186 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800910c:	4a20      	ldr	r2, [pc, #128]	; (8009190 <USBD_LL_Init+0x94>)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a1e      	ldr	r2, [pc, #120]	; (8009190 <USBD_LL_Init+0x94>)
 8009118:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800911c:	4b1c      	ldr	r3, [pc, #112]	; (8009190 <USBD_LL_Init+0x94>)
 800911e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009122:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009124:	4b1a      	ldr	r3, [pc, #104]	; (8009190 <USBD_LL_Init+0x94>)
 8009126:	2206      	movs	r2, #6
 8009128:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800912a:	4b19      	ldr	r3, [pc, #100]	; (8009190 <USBD_LL_Init+0x94>)
 800912c:	2202      	movs	r2, #2
 800912e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009130:	4b17      	ldr	r3, [pc, #92]	; (8009190 <USBD_LL_Init+0x94>)
 8009132:	2202      	movs	r2, #2
 8009134:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009136:	4b16      	ldr	r3, [pc, #88]	; (8009190 <USBD_LL_Init+0x94>)
 8009138:	2200      	movs	r2, #0
 800913a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800913c:	4b14      	ldr	r3, [pc, #80]	; (8009190 <USBD_LL_Init+0x94>)
 800913e:	2200      	movs	r2, #0
 8009140:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009142:	4b13      	ldr	r3, [pc, #76]	; (8009190 <USBD_LL_Init+0x94>)
 8009144:	2200      	movs	r2, #0
 8009146:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009148:	4b11      	ldr	r3, [pc, #68]	; (8009190 <USBD_LL_Init+0x94>)
 800914a:	2200      	movs	r2, #0
 800914c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800914e:	4b10      	ldr	r3, [pc, #64]	; (8009190 <USBD_LL_Init+0x94>)
 8009150:	2200      	movs	r2, #0
 8009152:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009154:	4b0e      	ldr	r3, [pc, #56]	; (8009190 <USBD_LL_Init+0x94>)
 8009156:	2200      	movs	r2, #0
 8009158:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800915a:	480d      	ldr	r0, [pc, #52]	; (8009190 <USBD_LL_Init+0x94>)
 800915c:	f7f8 fc23 	bl	80019a6 <HAL_PCD_Init>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009166:	f7ff fa79 	bl	800865c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800916a:	2180      	movs	r1, #128	; 0x80
 800916c:	4808      	ldr	r0, [pc, #32]	; (8009190 <USBD_LL_Init+0x94>)
 800916e:	f7f9 fc6c 	bl	8002a4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009172:	2240      	movs	r2, #64	; 0x40
 8009174:	2100      	movs	r1, #0
 8009176:	4806      	ldr	r0, [pc, #24]	; (8009190 <USBD_LL_Init+0x94>)
 8009178:	f7f9 fc20 	bl	80029bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800917c:	2280      	movs	r2, #128	; 0x80
 800917e:	2101      	movs	r1, #1
 8009180:	4803      	ldr	r0, [pc, #12]	; (8009190 <USBD_LL_Init+0x94>)
 8009182:	f7f9 fc1b 	bl	80029bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	2000078c 	.word	0x2000078c

08009194 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7f8 fd1f 	bl	8001bee <HAL_PCD_Start>
 80091b0:	4603      	mov	r3, r0
 80091b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80091b4:	7bbb      	ldrb	r3, [r7, #14]
 80091b6:	2b03      	cmp	r3, #3
 80091b8:	d816      	bhi.n	80091e8 <USBD_LL_Start+0x54>
 80091ba:	a201      	add	r2, pc, #4	; (adr r2, 80091c0 <USBD_LL_Start+0x2c>)
 80091bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c0:	080091d1 	.word	0x080091d1
 80091c4:	080091d7 	.word	0x080091d7
 80091c8:	080091dd 	.word	0x080091dd
 80091cc:	080091e3 	.word	0x080091e3
    case HAL_OK :
      usb_status = USBD_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	73fb      	strb	r3, [r7, #15]
    break;
 80091d4:	e00b      	b.n	80091ee <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091d6:	2303      	movs	r3, #3
 80091d8:	73fb      	strb	r3, [r7, #15]
    break;
 80091da:	e008      	b.n	80091ee <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091dc:	2301      	movs	r3, #1
 80091de:	73fb      	strb	r3, [r7, #15]
    break;
 80091e0:	e005      	b.n	80091ee <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091e2:	2303      	movs	r3, #3
 80091e4:	73fb      	strb	r3, [r7, #15]
    break;
 80091e6:	e002      	b.n	80091ee <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80091e8:	2303      	movs	r3, #3
 80091ea:	73fb      	strb	r3, [r7, #15]
    break;
 80091ec:	bf00      	nop
  }
  return usb_status;
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	4608      	mov	r0, r1
 8009202:	4611      	mov	r1, r2
 8009204:	461a      	mov	r2, r3
 8009206:	4603      	mov	r3, r0
 8009208:	70fb      	strb	r3, [r7, #3]
 800920a:	460b      	mov	r3, r1
 800920c:	70bb      	strb	r3, [r7, #2]
 800920e:	4613      	mov	r3, r2
 8009210:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009220:	78bb      	ldrb	r3, [r7, #2]
 8009222:	883a      	ldrh	r2, [r7, #0]
 8009224:	78f9      	ldrb	r1, [r7, #3]
 8009226:	f7f9 f8da 	bl	80023de <HAL_PCD_EP_Open>
 800922a:	4603      	mov	r3, r0
 800922c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800922e:	7bbb      	ldrb	r3, [r7, #14]
 8009230:	2b03      	cmp	r3, #3
 8009232:	d817      	bhi.n	8009264 <USBD_LL_OpenEP+0x6c>
 8009234:	a201      	add	r2, pc, #4	; (adr r2, 800923c <USBD_LL_OpenEP+0x44>)
 8009236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923a:	bf00      	nop
 800923c:	0800924d 	.word	0x0800924d
 8009240:	08009253 	.word	0x08009253
 8009244:	08009259 	.word	0x08009259
 8009248:	0800925f 	.word	0x0800925f
    case HAL_OK :
      usb_status = USBD_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73fb      	strb	r3, [r7, #15]
    break;
 8009250:	e00b      	b.n	800926a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009252:	2303      	movs	r3, #3
 8009254:	73fb      	strb	r3, [r7, #15]
    break;
 8009256:	e008      	b.n	800926a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009258:	2301      	movs	r3, #1
 800925a:	73fb      	strb	r3, [r7, #15]
    break;
 800925c:	e005      	b.n	800926a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800925e:	2303      	movs	r3, #3
 8009260:	73fb      	strb	r3, [r7, #15]
    break;
 8009262:	e002      	b.n	800926a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009264:	2303      	movs	r3, #3
 8009266:	73fb      	strb	r3, [r7, #15]
    break;
 8009268:	bf00      	nop
  }
  return usb_status;
 800926a:	7bfb      	ldrb	r3, [r7, #15]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	460b      	mov	r3, r1
 800927e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800928e:	78fa      	ldrb	r2, [r7, #3]
 8009290:	4611      	mov	r1, r2
 8009292:	4618      	mov	r0, r3
 8009294:	f7f9 f90b 	bl	80024ae <HAL_PCD_EP_Close>
 8009298:	4603      	mov	r3, r0
 800929a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800929c:	7bbb      	ldrb	r3, [r7, #14]
 800929e:	2b03      	cmp	r3, #3
 80092a0:	d816      	bhi.n	80092d0 <USBD_LL_CloseEP+0x5c>
 80092a2:	a201      	add	r2, pc, #4	; (adr r2, 80092a8 <USBD_LL_CloseEP+0x34>)
 80092a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a8:	080092b9 	.word	0x080092b9
 80092ac:	080092bf 	.word	0x080092bf
 80092b0:	080092c5 	.word	0x080092c5
 80092b4:	080092cb 	.word	0x080092cb
    case HAL_OK :
      usb_status = USBD_OK;
 80092b8:	2300      	movs	r3, #0
 80092ba:	73fb      	strb	r3, [r7, #15]
    break;
 80092bc:	e00b      	b.n	80092d6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092be:	2303      	movs	r3, #3
 80092c0:	73fb      	strb	r3, [r7, #15]
    break;
 80092c2:	e008      	b.n	80092d6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092c4:	2301      	movs	r3, #1
 80092c6:	73fb      	strb	r3, [r7, #15]
    break;
 80092c8:	e005      	b.n	80092d6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092ca:	2303      	movs	r3, #3
 80092cc:	73fb      	strb	r3, [r7, #15]
    break;
 80092ce:	e002      	b.n	80092d6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80092d0:	2303      	movs	r3, #3
 80092d2:	73fb      	strb	r3, [r7, #15]
    break;
 80092d4:	bf00      	nop
  }
  return usb_status;
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	460b      	mov	r3, r1
 80092ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092fa:	78fa      	ldrb	r2, [r7, #3]
 80092fc:	4611      	mov	r1, r2
 80092fe:	4618      	mov	r0, r3
 8009300:	f7f9 f99a 	bl	8002638 <HAL_PCD_EP_SetStall>
 8009304:	4603      	mov	r3, r0
 8009306:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009308:	7bbb      	ldrb	r3, [r7, #14]
 800930a:	2b03      	cmp	r3, #3
 800930c:	d816      	bhi.n	800933c <USBD_LL_StallEP+0x5c>
 800930e:	a201      	add	r2, pc, #4	; (adr r2, 8009314 <USBD_LL_StallEP+0x34>)
 8009310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009314:	08009325 	.word	0x08009325
 8009318:	0800932b 	.word	0x0800932b
 800931c:	08009331 	.word	0x08009331
 8009320:	08009337 	.word	0x08009337
    case HAL_OK :
      usb_status = USBD_OK;
 8009324:	2300      	movs	r3, #0
 8009326:	73fb      	strb	r3, [r7, #15]
    break;
 8009328:	e00b      	b.n	8009342 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800932a:	2303      	movs	r3, #3
 800932c:	73fb      	strb	r3, [r7, #15]
    break;
 800932e:	e008      	b.n	8009342 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009330:	2301      	movs	r3, #1
 8009332:	73fb      	strb	r3, [r7, #15]
    break;
 8009334:	e005      	b.n	8009342 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009336:	2303      	movs	r3, #3
 8009338:	73fb      	strb	r3, [r7, #15]
    break;
 800933a:	e002      	b.n	8009342 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800933c:	2303      	movs	r3, #3
 800933e:	73fb      	strb	r3, [r7, #15]
    break;
 8009340:	bf00      	nop
  }
  return usb_status;
 8009342:	7bfb      	ldrb	r3, [r7, #15]
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009366:	78fa      	ldrb	r2, [r7, #3]
 8009368:	4611      	mov	r1, r2
 800936a:	4618      	mov	r0, r3
 800936c:	f7f9 f9c6 	bl	80026fc <HAL_PCD_EP_ClrStall>
 8009370:	4603      	mov	r3, r0
 8009372:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009374:	7bbb      	ldrb	r3, [r7, #14]
 8009376:	2b03      	cmp	r3, #3
 8009378:	d816      	bhi.n	80093a8 <USBD_LL_ClearStallEP+0x5c>
 800937a:	a201      	add	r2, pc, #4	; (adr r2, 8009380 <USBD_LL_ClearStallEP+0x34>)
 800937c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009380:	08009391 	.word	0x08009391
 8009384:	08009397 	.word	0x08009397
 8009388:	0800939d 	.word	0x0800939d
 800938c:	080093a3 	.word	0x080093a3
    case HAL_OK :
      usb_status = USBD_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]
    break;
 8009394:	e00b      	b.n	80093ae <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009396:	2303      	movs	r3, #3
 8009398:	73fb      	strb	r3, [r7, #15]
    break;
 800939a:	e008      	b.n	80093ae <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800939c:	2301      	movs	r3, #1
 800939e:	73fb      	strb	r3, [r7, #15]
    break;
 80093a0:	e005      	b.n	80093ae <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093a2:	2303      	movs	r3, #3
 80093a4:	73fb      	strb	r3, [r7, #15]
    break;
 80093a6:	e002      	b.n	80093ae <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80093a8:	2303      	movs	r3, #3
 80093aa:	73fb      	strb	r3, [r7, #15]
    break;
 80093ac:	bf00      	nop
  }
  return usb_status;
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80093cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	da0b      	bge.n	80093ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80093d4:	78fb      	ldrb	r3, [r7, #3]
 80093d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093da:	68f9      	ldr	r1, [r7, #12]
 80093dc:	4613      	mov	r3, r2
 80093de:	00db      	lsls	r3, r3, #3
 80093e0:	1a9b      	subs	r3, r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	440b      	add	r3, r1
 80093e6:	333e      	adds	r3, #62	; 0x3e
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	e00b      	b.n	8009404 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093f2:	68f9      	ldr	r1, [r7, #12]
 80093f4:	4613      	mov	r3, r2
 80093f6:	00db      	lsls	r3, r3, #3
 80093f8:	1a9b      	subs	r3, r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	440b      	add	r3, r1
 80093fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009402:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009404:	4618      	mov	r0, r3
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800942a:	78fa      	ldrb	r2, [r7, #3]
 800942c:	4611      	mov	r1, r2
 800942e:	4618      	mov	r0, r3
 8009430:	f7f8 ffb0 	bl	8002394 <HAL_PCD_SetAddress>
 8009434:	4603      	mov	r3, r0
 8009436:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009438:	7bbb      	ldrb	r3, [r7, #14]
 800943a:	2b03      	cmp	r3, #3
 800943c:	d816      	bhi.n	800946c <USBD_LL_SetUSBAddress+0x5c>
 800943e:	a201      	add	r2, pc, #4	; (adr r2, 8009444 <USBD_LL_SetUSBAddress+0x34>)
 8009440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009444:	08009455 	.word	0x08009455
 8009448:	0800945b 	.word	0x0800945b
 800944c:	08009461 	.word	0x08009461
 8009450:	08009467 	.word	0x08009467
    case HAL_OK :
      usb_status = USBD_OK;
 8009454:	2300      	movs	r3, #0
 8009456:	73fb      	strb	r3, [r7, #15]
    break;
 8009458:	e00b      	b.n	8009472 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800945a:	2303      	movs	r3, #3
 800945c:	73fb      	strb	r3, [r7, #15]
    break;
 800945e:	e008      	b.n	8009472 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009460:	2301      	movs	r3, #1
 8009462:	73fb      	strb	r3, [r7, #15]
    break;
 8009464:	e005      	b.n	8009472 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009466:	2303      	movs	r3, #3
 8009468:	73fb      	strb	r3, [r7, #15]
    break;
 800946a:	e002      	b.n	8009472 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800946c:	2303      	movs	r3, #3
 800946e:	73fb      	strb	r3, [r7, #15]
    break;
 8009470:	bf00      	nop
  }
  return usb_status;
 8009472:	7bfb      	ldrb	r3, [r7, #15]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b086      	sub	sp, #24
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	607a      	str	r2, [r7, #4]
 8009486:	603b      	str	r3, [r7, #0]
 8009488:	460b      	mov	r3, r1
 800948a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800949a:	7af9      	ldrb	r1, [r7, #11]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	f7f9 f88d 	bl	80025be <HAL_PCD_EP_Transmit>
 80094a4:	4603      	mov	r3, r0
 80094a6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80094a8:	7dbb      	ldrb	r3, [r7, #22]
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	d816      	bhi.n	80094dc <USBD_LL_Transmit+0x60>
 80094ae:	a201      	add	r2, pc, #4	; (adr r2, 80094b4 <USBD_LL_Transmit+0x38>)
 80094b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b4:	080094c5 	.word	0x080094c5
 80094b8:	080094cb 	.word	0x080094cb
 80094bc:	080094d1 	.word	0x080094d1
 80094c0:	080094d7 	.word	0x080094d7
    case HAL_OK :
      usb_status = USBD_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	75fb      	strb	r3, [r7, #23]
    break;
 80094c8:	e00b      	b.n	80094e2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094ca:	2303      	movs	r3, #3
 80094cc:	75fb      	strb	r3, [r7, #23]
    break;
 80094ce:	e008      	b.n	80094e2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094d0:	2301      	movs	r3, #1
 80094d2:	75fb      	strb	r3, [r7, #23]
    break;
 80094d4:	e005      	b.n	80094e2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094d6:	2303      	movs	r3, #3
 80094d8:	75fb      	strb	r3, [r7, #23]
    break;
 80094da:	e002      	b.n	80094e2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80094dc:	2303      	movs	r3, #3
 80094de:	75fb      	strb	r3, [r7, #23]
    break;
 80094e0:	bf00      	nop
  }
  return usb_status;
 80094e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b086      	sub	sp, #24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	607a      	str	r2, [r7, #4]
 80094f6:	603b      	str	r3, [r7, #0]
 80094f8:	460b      	mov	r3, r1
 80094fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800950a:	7af9      	ldrb	r1, [r7, #11]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	f7f9 f817 	bl	8002542 <HAL_PCD_EP_Receive>
 8009514:	4603      	mov	r3, r0
 8009516:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009518:	7dbb      	ldrb	r3, [r7, #22]
 800951a:	2b03      	cmp	r3, #3
 800951c:	d816      	bhi.n	800954c <USBD_LL_PrepareReceive+0x60>
 800951e:	a201      	add	r2, pc, #4	; (adr r2, 8009524 <USBD_LL_PrepareReceive+0x38>)
 8009520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009524:	08009535 	.word	0x08009535
 8009528:	0800953b 	.word	0x0800953b
 800952c:	08009541 	.word	0x08009541
 8009530:	08009547 	.word	0x08009547
    case HAL_OK :
      usb_status = USBD_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	75fb      	strb	r3, [r7, #23]
    break;
 8009538:	e00b      	b.n	8009552 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800953a:	2303      	movs	r3, #3
 800953c:	75fb      	strb	r3, [r7, #23]
    break;
 800953e:	e008      	b.n	8009552 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009540:	2301      	movs	r3, #1
 8009542:	75fb      	strb	r3, [r7, #23]
    break;
 8009544:	e005      	b.n	8009552 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009546:	2303      	movs	r3, #3
 8009548:	75fb      	strb	r3, [r7, #23]
    break;
 800954a:	e002      	b.n	8009552 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800954c:	2303      	movs	r3, #3
 800954e:	75fb      	strb	r3, [r7, #23]
    break;
 8009550:	bf00      	nop
  }
  return usb_status;
 8009552:	7dfb      	ldrb	r3, [r7, #23]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	460b      	mov	r3, r1
 8009566:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009568:	78fb      	ldrb	r3, [r7, #3]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d002      	beq.n	8009574 <HAL_PCDEx_LPM_Callback+0x18>
 800956e:	2b01      	cmp	r3, #1
 8009570:	d01f      	beq.n	80095b2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009572:	e03b      	b.n	80095ec <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a1b      	ldr	r3, [r3, #32]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d007      	beq.n	800958c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800957c:	f000 f854 	bl	8009628 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009580:	4b1c      	ldr	r3, [pc, #112]	; (80095f4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	4a1b      	ldr	r2, [pc, #108]	; (80095f4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009586:	f023 0306 	bic.w	r3, r3, #6
 800958a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	6812      	ldr	r2, [r2, #0]
 800959a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800959e:	f023 0301 	bic.w	r3, r3, #1
 80095a2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fd fd70 	bl	8007090 <USBD_LL_Resume>
    break;
 80095b0:	e01c      	b.n	80095ec <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	6812      	ldr	r2, [r2, #0]
 80095c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095c4:	f043 0301 	orr.w	r3, r3, #1
 80095c8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fd fd47 	bl	8007064 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d005      	beq.n	80095ea <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095de:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <HAL_PCDEx_LPM_Callback+0x98>)
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	4a04      	ldr	r2, [pc, #16]	; (80095f4 <HAL_PCDEx_LPM_Callback+0x98>)
 80095e4:	f043 0306 	orr.w	r3, r3, #6
 80095e8:	6113      	str	r3, [r2, #16]
    break;
 80095ea:	bf00      	nop
}
 80095ec:	bf00      	nop
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	e000ed00 	.word	0xe000ed00

080095f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009600:	4b03      	ldr	r3, [pc, #12]	; (8009610 <USBD_static_malloc+0x18>)
}
 8009602:	4618      	mov	r0, r3
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	2000023c 	.word	0x2000023c

08009614 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]

}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800962c:	f7fe fe0c 	bl	8008248 <SystemClock_Config>
}
 8009630:	bf00      	nop
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	4603      	mov	r3, r0
 800963c:	6039      	str	r1, [r7, #0]
 800963e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	2212      	movs	r2, #18
 8009644:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009646:	4b03      	ldr	r3, [pc, #12]	; (8009654 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009648:	4618      	mov	r0, r3
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	20000168 	.word	0x20000168

08009658 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	4603      	mov	r3, r0
 8009660:	6039      	str	r1, [r7, #0]
 8009662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	2204      	movs	r2, #4
 8009668:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800966a:	4b03      	ldr	r3, [pc, #12]	; (8009678 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800966c:	4618      	mov	r0, r3
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	20000188 	.word	0x20000188

0800967c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	4603      	mov	r3, r0
 8009684:	6039      	str	r1, [r7, #0]
 8009686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009688:	79fb      	ldrb	r3, [r7, #7]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d105      	bne.n	800969a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	4907      	ldr	r1, [pc, #28]	; (80096b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009692:	4808      	ldr	r0, [pc, #32]	; (80096b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009694:	f7fe fb4b 	bl	8007d2e <USBD_GetString>
 8009698:	e004      	b.n	80096a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	4904      	ldr	r1, [pc, #16]	; (80096b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800969e:	4805      	ldr	r0, [pc, #20]	; (80096b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80096a0:	f7fe fb45 	bl	8007d2e <USBD_GetString>
  }
  return USBD_StrDesc;
 80096a4:	4b02      	ldr	r3, [pc, #8]	; (80096b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	20000b94 	.word	0x20000b94
 80096b4:	0800a1b8 	.word	0x0800a1b8

080096b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	4603      	mov	r3, r0
 80096c0:	6039      	str	r1, [r7, #0]
 80096c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80096c4:	683a      	ldr	r2, [r7, #0]
 80096c6:	4904      	ldr	r1, [pc, #16]	; (80096d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80096c8:	4804      	ldr	r0, [pc, #16]	; (80096dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80096ca:	f7fe fb30 	bl	8007d2e <USBD_GetString>
  return USBD_StrDesc;
 80096ce:	4b02      	ldr	r3, [pc, #8]	; (80096d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	20000b94 	.word	0x20000b94
 80096dc:	0800a1d0 	.word	0x0800a1d0

080096e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	4603      	mov	r3, r0
 80096e8:	6039      	str	r1, [r7, #0]
 80096ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	221a      	movs	r2, #26
 80096f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80096f2:	f000 f855 	bl	80097a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80096f6:	4b02      	ldr	r3, [pc, #8]	; (8009700 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	2000018c 	.word	0x2000018c

08009704 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	4603      	mov	r3, r0
 800970c:	6039      	str	r1, [r7, #0]
 800970e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009710:	79fb      	ldrb	r3, [r7, #7]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d105      	bne.n	8009722 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009716:	683a      	ldr	r2, [r7, #0]
 8009718:	4907      	ldr	r1, [pc, #28]	; (8009738 <USBD_FS_ConfigStrDescriptor+0x34>)
 800971a:	4808      	ldr	r0, [pc, #32]	; (800973c <USBD_FS_ConfigStrDescriptor+0x38>)
 800971c:	f7fe fb07 	bl	8007d2e <USBD_GetString>
 8009720:	e004      	b.n	800972c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	4904      	ldr	r1, [pc, #16]	; (8009738 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009726:	4805      	ldr	r0, [pc, #20]	; (800973c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009728:	f7fe fb01 	bl	8007d2e <USBD_GetString>
  }
  return USBD_StrDesc;
 800972c:	4b02      	ldr	r3, [pc, #8]	; (8009738 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	20000b94 	.word	0x20000b94
 800973c:	0800a1e4 	.word	0x0800a1e4

08009740 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	4603      	mov	r3, r0
 8009748:	6039      	str	r1, [r7, #0]
 800974a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800974c:	79fb      	ldrb	r3, [r7, #7]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d105      	bne.n	800975e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	4907      	ldr	r1, [pc, #28]	; (8009774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009756:	4808      	ldr	r0, [pc, #32]	; (8009778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009758:	f7fe fae9 	bl	8007d2e <USBD_GetString>
 800975c:	e004      	b.n	8009768 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	4904      	ldr	r1, [pc, #16]	; (8009774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009762:	4805      	ldr	r0, [pc, #20]	; (8009778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009764:	f7fe fae3 	bl	8007d2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009768:	4b02      	ldr	r3, [pc, #8]	; (8009774 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800976a:	4618      	mov	r0, r3
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20000b94 	.word	0x20000b94
 8009778:	0800a1f0 	.word	0x0800a1f0

0800977c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	6039      	str	r1, [r7, #0]
 8009786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	220c      	movs	r2, #12
 800978c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800978e:	4b03      	ldr	r3, [pc, #12]	; (800979c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009790:	4618      	mov	r0, r3
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	2000017c 	.word	0x2000017c

080097a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80097a6:	4b0f      	ldr	r3, [pc, #60]	; (80097e4 <Get_SerialNum+0x44>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80097ac:	4b0e      	ldr	r3, [pc, #56]	; (80097e8 <Get_SerialNum+0x48>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80097b2:	4b0e      	ldr	r3, [pc, #56]	; (80097ec <Get_SerialNum+0x4c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4413      	add	r3, r2
 80097be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d009      	beq.n	80097da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80097c6:	2208      	movs	r2, #8
 80097c8:	4909      	ldr	r1, [pc, #36]	; (80097f0 <Get_SerialNum+0x50>)
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	f000 f814 	bl	80097f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80097d0:	2204      	movs	r2, #4
 80097d2:	4908      	ldr	r1, [pc, #32]	; (80097f4 <Get_SerialNum+0x54>)
 80097d4:	68b8      	ldr	r0, [r7, #8]
 80097d6:	f000 f80f 	bl	80097f8 <IntToUnicode>
  }
}
 80097da:	bf00      	nop
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	1fff7590 	.word	0x1fff7590
 80097e8:	1fff7594 	.word	0x1fff7594
 80097ec:	1fff7598 	.word	0x1fff7598
 80097f0:	2000018e 	.word	0x2000018e
 80097f4:	2000019e 	.word	0x2000019e

080097f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b087      	sub	sp, #28
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	4613      	mov	r3, r2
 8009804:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800980a:	2300      	movs	r3, #0
 800980c:	75fb      	strb	r3, [r7, #23]
 800980e:	e027      	b.n	8009860 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	0f1b      	lsrs	r3, r3, #28
 8009814:	2b09      	cmp	r3, #9
 8009816:	d80b      	bhi.n	8009830 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	0f1b      	lsrs	r3, r3, #28
 800981c:	b2da      	uxtb	r2, r3
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	005b      	lsls	r3, r3, #1
 8009822:	4619      	mov	r1, r3
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	440b      	add	r3, r1
 8009828:	3230      	adds	r2, #48	; 0x30
 800982a:	b2d2      	uxtb	r2, r2
 800982c:	701a      	strb	r2, [r3, #0]
 800982e:	e00a      	b.n	8009846 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	0f1b      	lsrs	r3, r3, #28
 8009834:	b2da      	uxtb	r2, r3
 8009836:	7dfb      	ldrb	r3, [r7, #23]
 8009838:	005b      	lsls	r3, r3, #1
 800983a:	4619      	mov	r1, r3
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	440b      	add	r3, r1
 8009840:	3237      	adds	r2, #55	; 0x37
 8009842:	b2d2      	uxtb	r2, r2
 8009844:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	011b      	lsls	r3, r3, #4
 800984a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800984c:	7dfb      	ldrb	r3, [r7, #23]
 800984e:	005b      	lsls	r3, r3, #1
 8009850:	3301      	adds	r3, #1
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	4413      	add	r3, r2
 8009856:	2200      	movs	r2, #0
 8009858:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800985a:	7dfb      	ldrb	r3, [r7, #23]
 800985c:	3301      	adds	r3, #1
 800985e:	75fb      	strb	r3, [r7, #23]
 8009860:	7dfa      	ldrb	r2, [r7, #23]
 8009862:	79fb      	ldrb	r3, [r7, #7]
 8009864:	429a      	cmp	r2, r3
 8009866:	d3d3      	bcc.n	8009810 <IntToUnicode+0x18>
  }
}
 8009868:	bf00      	nop
 800986a:	bf00      	nop
 800986c:	371c      	adds	r7, #28
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
	...

08009878 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80098b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800987c:	f7ff fa52 	bl	8008d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8009880:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8009882:	e003      	b.n	800988c <LoopCopyDataInit>

08009884 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8009884:	4b0b      	ldr	r3, [pc, #44]	; (80098b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8009886:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8009888:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800988a:	3104      	adds	r1, #4

0800988c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800988c:	480a      	ldr	r0, [pc, #40]	; (80098b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800988e:	4b0b      	ldr	r3, [pc, #44]	; (80098bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8009890:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8009892:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8009894:	d3f6      	bcc.n	8009884 <CopyDataInit>
	ldr	r2, =_sbss
 8009896:	4a0a      	ldr	r2, [pc, #40]	; (80098c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8009898:	e002      	b.n	80098a0 <LoopFillZerobss>

0800989a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800989a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800989c:	f842 3b04 	str.w	r3, [r2], #4

080098a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80098a0:	4b08      	ldr	r3, [pc, #32]	; (80098c4 <LoopForever+0x16>)
	cmp	r2, r3
 80098a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80098a4:	d3f9      	bcc.n	800989a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80098a6:	f000 f817 	bl	80098d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80098aa:	f7fe fc1f 	bl	80080ec <main>

080098ae <LoopForever>:

LoopForever:
    b LoopForever
 80098ae:	e7fe      	b.n	80098ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80098b0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80098b4:	0800a28c 	.word	0x0800a28c
	ldr	r0, =_sdata
 80098b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80098bc:	2000020c 	.word	0x2000020c
	ldr	r2, =_sbss
 80098c0:	2000020c 	.word	0x2000020c
	ldr	r3, = _ebss
 80098c4:	20000da4 	.word	0x20000da4

080098c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80098c8:	e7fe      	b.n	80098c8 <ADC1_2_IRQHandler>
	...

080098cc <__errno>:
 80098cc:	4b01      	ldr	r3, [pc, #4]	; (80098d4 <__errno+0x8>)
 80098ce:	6818      	ldr	r0, [r3, #0]
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	200001a8 	.word	0x200001a8

080098d8 <__libc_init_array>:
 80098d8:	b570      	push	{r4, r5, r6, lr}
 80098da:	4d0d      	ldr	r5, [pc, #52]	; (8009910 <__libc_init_array+0x38>)
 80098dc:	4c0d      	ldr	r4, [pc, #52]	; (8009914 <__libc_init_array+0x3c>)
 80098de:	1b64      	subs	r4, r4, r5
 80098e0:	10a4      	asrs	r4, r4, #2
 80098e2:	2600      	movs	r6, #0
 80098e4:	42a6      	cmp	r6, r4
 80098e6:	d109      	bne.n	80098fc <__libc_init_array+0x24>
 80098e8:	4d0b      	ldr	r5, [pc, #44]	; (8009918 <__libc_init_array+0x40>)
 80098ea:	4c0c      	ldr	r4, [pc, #48]	; (800991c <__libc_init_array+0x44>)
 80098ec:	f000 fc4e 	bl	800a18c <_init>
 80098f0:	1b64      	subs	r4, r4, r5
 80098f2:	10a4      	asrs	r4, r4, #2
 80098f4:	2600      	movs	r6, #0
 80098f6:	42a6      	cmp	r6, r4
 80098f8:	d105      	bne.n	8009906 <__libc_init_array+0x2e>
 80098fa:	bd70      	pop	{r4, r5, r6, pc}
 80098fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009900:	4798      	blx	r3
 8009902:	3601      	adds	r6, #1
 8009904:	e7ee      	b.n	80098e4 <__libc_init_array+0xc>
 8009906:	f855 3b04 	ldr.w	r3, [r5], #4
 800990a:	4798      	blx	r3
 800990c:	3601      	adds	r6, #1
 800990e:	e7f2      	b.n	80098f6 <__libc_init_array+0x1e>
 8009910:	0800a284 	.word	0x0800a284
 8009914:	0800a284 	.word	0x0800a284
 8009918:	0800a284 	.word	0x0800a284
 800991c:	0800a288 	.word	0x0800a288

08009920 <memset>:
 8009920:	4402      	add	r2, r0
 8009922:	4603      	mov	r3, r0
 8009924:	4293      	cmp	r3, r2
 8009926:	d100      	bne.n	800992a <memset+0xa>
 8009928:	4770      	bx	lr
 800992a:	f803 1b01 	strb.w	r1, [r3], #1
 800992e:	e7f9      	b.n	8009924 <memset+0x4>

08009930 <siprintf>:
 8009930:	b40e      	push	{r1, r2, r3}
 8009932:	b500      	push	{lr}
 8009934:	b09c      	sub	sp, #112	; 0x70
 8009936:	ab1d      	add	r3, sp, #116	; 0x74
 8009938:	9002      	str	r0, [sp, #8]
 800993a:	9006      	str	r0, [sp, #24]
 800993c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009940:	4809      	ldr	r0, [pc, #36]	; (8009968 <siprintf+0x38>)
 8009942:	9107      	str	r1, [sp, #28]
 8009944:	9104      	str	r1, [sp, #16]
 8009946:	4909      	ldr	r1, [pc, #36]	; (800996c <siprintf+0x3c>)
 8009948:	f853 2b04 	ldr.w	r2, [r3], #4
 800994c:	9105      	str	r1, [sp, #20]
 800994e:	6800      	ldr	r0, [r0, #0]
 8009950:	9301      	str	r3, [sp, #4]
 8009952:	a902      	add	r1, sp, #8
 8009954:	f000 f868 	bl	8009a28 <_svfiprintf_r>
 8009958:	9b02      	ldr	r3, [sp, #8]
 800995a:	2200      	movs	r2, #0
 800995c:	701a      	strb	r2, [r3, #0]
 800995e:	b01c      	add	sp, #112	; 0x70
 8009960:	f85d eb04 	ldr.w	lr, [sp], #4
 8009964:	b003      	add	sp, #12
 8009966:	4770      	bx	lr
 8009968:	200001a8 	.word	0x200001a8
 800996c:	ffff0208 	.word	0xffff0208

08009970 <__ssputs_r>:
 8009970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009974:	688e      	ldr	r6, [r1, #8]
 8009976:	429e      	cmp	r6, r3
 8009978:	4682      	mov	sl, r0
 800997a:	460c      	mov	r4, r1
 800997c:	4690      	mov	r8, r2
 800997e:	461f      	mov	r7, r3
 8009980:	d838      	bhi.n	80099f4 <__ssputs_r+0x84>
 8009982:	898a      	ldrh	r2, [r1, #12]
 8009984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009988:	d032      	beq.n	80099f0 <__ssputs_r+0x80>
 800998a:	6825      	ldr	r5, [r4, #0]
 800998c:	6909      	ldr	r1, [r1, #16]
 800998e:	eba5 0901 	sub.w	r9, r5, r1
 8009992:	6965      	ldr	r5, [r4, #20]
 8009994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009998:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800999c:	3301      	adds	r3, #1
 800999e:	444b      	add	r3, r9
 80099a0:	106d      	asrs	r5, r5, #1
 80099a2:	429d      	cmp	r5, r3
 80099a4:	bf38      	it	cc
 80099a6:	461d      	movcc	r5, r3
 80099a8:	0553      	lsls	r3, r2, #21
 80099aa:	d531      	bpl.n	8009a10 <__ssputs_r+0xa0>
 80099ac:	4629      	mov	r1, r5
 80099ae:	f000 fb47 	bl	800a040 <_malloc_r>
 80099b2:	4606      	mov	r6, r0
 80099b4:	b950      	cbnz	r0, 80099cc <__ssputs_r+0x5c>
 80099b6:	230c      	movs	r3, #12
 80099b8:	f8ca 3000 	str.w	r3, [sl]
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099c2:	81a3      	strh	r3, [r4, #12]
 80099c4:	f04f 30ff 	mov.w	r0, #4294967295
 80099c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099cc:	6921      	ldr	r1, [r4, #16]
 80099ce:	464a      	mov	r2, r9
 80099d0:	f000 fabe 	bl	8009f50 <memcpy>
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099de:	81a3      	strh	r3, [r4, #12]
 80099e0:	6126      	str	r6, [r4, #16]
 80099e2:	6165      	str	r5, [r4, #20]
 80099e4:	444e      	add	r6, r9
 80099e6:	eba5 0509 	sub.w	r5, r5, r9
 80099ea:	6026      	str	r6, [r4, #0]
 80099ec:	60a5      	str	r5, [r4, #8]
 80099ee:	463e      	mov	r6, r7
 80099f0:	42be      	cmp	r6, r7
 80099f2:	d900      	bls.n	80099f6 <__ssputs_r+0x86>
 80099f4:	463e      	mov	r6, r7
 80099f6:	4632      	mov	r2, r6
 80099f8:	6820      	ldr	r0, [r4, #0]
 80099fa:	4641      	mov	r1, r8
 80099fc:	f000 fab6 	bl	8009f6c <memmove>
 8009a00:	68a3      	ldr	r3, [r4, #8]
 8009a02:	6822      	ldr	r2, [r4, #0]
 8009a04:	1b9b      	subs	r3, r3, r6
 8009a06:	4432      	add	r2, r6
 8009a08:	60a3      	str	r3, [r4, #8]
 8009a0a:	6022      	str	r2, [r4, #0]
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	e7db      	b.n	80099c8 <__ssputs_r+0x58>
 8009a10:	462a      	mov	r2, r5
 8009a12:	f000 fb6f 	bl	800a0f4 <_realloc_r>
 8009a16:	4606      	mov	r6, r0
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d1e1      	bne.n	80099e0 <__ssputs_r+0x70>
 8009a1c:	6921      	ldr	r1, [r4, #16]
 8009a1e:	4650      	mov	r0, sl
 8009a20:	f000 fabe 	bl	8009fa0 <_free_r>
 8009a24:	e7c7      	b.n	80099b6 <__ssputs_r+0x46>
	...

08009a28 <_svfiprintf_r>:
 8009a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2c:	4698      	mov	r8, r3
 8009a2e:	898b      	ldrh	r3, [r1, #12]
 8009a30:	061b      	lsls	r3, r3, #24
 8009a32:	b09d      	sub	sp, #116	; 0x74
 8009a34:	4607      	mov	r7, r0
 8009a36:	460d      	mov	r5, r1
 8009a38:	4614      	mov	r4, r2
 8009a3a:	d50e      	bpl.n	8009a5a <_svfiprintf_r+0x32>
 8009a3c:	690b      	ldr	r3, [r1, #16]
 8009a3e:	b963      	cbnz	r3, 8009a5a <_svfiprintf_r+0x32>
 8009a40:	2140      	movs	r1, #64	; 0x40
 8009a42:	f000 fafd 	bl	800a040 <_malloc_r>
 8009a46:	6028      	str	r0, [r5, #0]
 8009a48:	6128      	str	r0, [r5, #16]
 8009a4a:	b920      	cbnz	r0, 8009a56 <_svfiprintf_r+0x2e>
 8009a4c:	230c      	movs	r3, #12
 8009a4e:	603b      	str	r3, [r7, #0]
 8009a50:	f04f 30ff 	mov.w	r0, #4294967295
 8009a54:	e0d1      	b.n	8009bfa <_svfiprintf_r+0x1d2>
 8009a56:	2340      	movs	r3, #64	; 0x40
 8009a58:	616b      	str	r3, [r5, #20]
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a5e:	2320      	movs	r3, #32
 8009a60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a64:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a68:	2330      	movs	r3, #48	; 0x30
 8009a6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c14 <_svfiprintf_r+0x1ec>
 8009a6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a72:	f04f 0901 	mov.w	r9, #1
 8009a76:	4623      	mov	r3, r4
 8009a78:	469a      	mov	sl, r3
 8009a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a7e:	b10a      	cbz	r2, 8009a84 <_svfiprintf_r+0x5c>
 8009a80:	2a25      	cmp	r2, #37	; 0x25
 8009a82:	d1f9      	bne.n	8009a78 <_svfiprintf_r+0x50>
 8009a84:	ebba 0b04 	subs.w	fp, sl, r4
 8009a88:	d00b      	beq.n	8009aa2 <_svfiprintf_r+0x7a>
 8009a8a:	465b      	mov	r3, fp
 8009a8c:	4622      	mov	r2, r4
 8009a8e:	4629      	mov	r1, r5
 8009a90:	4638      	mov	r0, r7
 8009a92:	f7ff ff6d 	bl	8009970 <__ssputs_r>
 8009a96:	3001      	adds	r0, #1
 8009a98:	f000 80aa 	beq.w	8009bf0 <_svfiprintf_r+0x1c8>
 8009a9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a9e:	445a      	add	r2, fp
 8009aa0:	9209      	str	r2, [sp, #36]	; 0x24
 8009aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f000 80a2 	beq.w	8009bf0 <_svfiprintf_r+0x1c8>
 8009aac:	2300      	movs	r3, #0
 8009aae:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ab6:	f10a 0a01 	add.w	sl, sl, #1
 8009aba:	9304      	str	r3, [sp, #16]
 8009abc:	9307      	str	r3, [sp, #28]
 8009abe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ac2:	931a      	str	r3, [sp, #104]	; 0x68
 8009ac4:	4654      	mov	r4, sl
 8009ac6:	2205      	movs	r2, #5
 8009ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009acc:	4851      	ldr	r0, [pc, #324]	; (8009c14 <_svfiprintf_r+0x1ec>)
 8009ace:	f7f6 fb87 	bl	80001e0 <memchr>
 8009ad2:	9a04      	ldr	r2, [sp, #16]
 8009ad4:	b9d8      	cbnz	r0, 8009b0e <_svfiprintf_r+0xe6>
 8009ad6:	06d0      	lsls	r0, r2, #27
 8009ad8:	bf44      	itt	mi
 8009ada:	2320      	movmi	r3, #32
 8009adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ae0:	0711      	lsls	r1, r2, #28
 8009ae2:	bf44      	itt	mi
 8009ae4:	232b      	movmi	r3, #43	; 0x2b
 8009ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aea:	f89a 3000 	ldrb.w	r3, [sl]
 8009aee:	2b2a      	cmp	r3, #42	; 0x2a
 8009af0:	d015      	beq.n	8009b1e <_svfiprintf_r+0xf6>
 8009af2:	9a07      	ldr	r2, [sp, #28]
 8009af4:	4654      	mov	r4, sl
 8009af6:	2000      	movs	r0, #0
 8009af8:	f04f 0c0a 	mov.w	ip, #10
 8009afc:	4621      	mov	r1, r4
 8009afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b02:	3b30      	subs	r3, #48	; 0x30
 8009b04:	2b09      	cmp	r3, #9
 8009b06:	d94e      	bls.n	8009ba6 <_svfiprintf_r+0x17e>
 8009b08:	b1b0      	cbz	r0, 8009b38 <_svfiprintf_r+0x110>
 8009b0a:	9207      	str	r2, [sp, #28]
 8009b0c:	e014      	b.n	8009b38 <_svfiprintf_r+0x110>
 8009b0e:	eba0 0308 	sub.w	r3, r0, r8
 8009b12:	fa09 f303 	lsl.w	r3, r9, r3
 8009b16:	4313      	orrs	r3, r2
 8009b18:	9304      	str	r3, [sp, #16]
 8009b1a:	46a2      	mov	sl, r4
 8009b1c:	e7d2      	b.n	8009ac4 <_svfiprintf_r+0x9c>
 8009b1e:	9b03      	ldr	r3, [sp, #12]
 8009b20:	1d19      	adds	r1, r3, #4
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	9103      	str	r1, [sp, #12]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	bfbb      	ittet	lt
 8009b2a:	425b      	neglt	r3, r3
 8009b2c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b30:	9307      	strge	r3, [sp, #28]
 8009b32:	9307      	strlt	r3, [sp, #28]
 8009b34:	bfb8      	it	lt
 8009b36:	9204      	strlt	r2, [sp, #16]
 8009b38:	7823      	ldrb	r3, [r4, #0]
 8009b3a:	2b2e      	cmp	r3, #46	; 0x2e
 8009b3c:	d10c      	bne.n	8009b58 <_svfiprintf_r+0x130>
 8009b3e:	7863      	ldrb	r3, [r4, #1]
 8009b40:	2b2a      	cmp	r3, #42	; 0x2a
 8009b42:	d135      	bne.n	8009bb0 <_svfiprintf_r+0x188>
 8009b44:	9b03      	ldr	r3, [sp, #12]
 8009b46:	1d1a      	adds	r2, r3, #4
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	9203      	str	r2, [sp, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	bfb8      	it	lt
 8009b50:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b54:	3402      	adds	r4, #2
 8009b56:	9305      	str	r3, [sp, #20]
 8009b58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c24 <_svfiprintf_r+0x1fc>
 8009b5c:	7821      	ldrb	r1, [r4, #0]
 8009b5e:	2203      	movs	r2, #3
 8009b60:	4650      	mov	r0, sl
 8009b62:	f7f6 fb3d 	bl	80001e0 <memchr>
 8009b66:	b140      	cbz	r0, 8009b7a <_svfiprintf_r+0x152>
 8009b68:	2340      	movs	r3, #64	; 0x40
 8009b6a:	eba0 000a 	sub.w	r0, r0, sl
 8009b6e:	fa03 f000 	lsl.w	r0, r3, r0
 8009b72:	9b04      	ldr	r3, [sp, #16]
 8009b74:	4303      	orrs	r3, r0
 8009b76:	3401      	adds	r4, #1
 8009b78:	9304      	str	r3, [sp, #16]
 8009b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b7e:	4826      	ldr	r0, [pc, #152]	; (8009c18 <_svfiprintf_r+0x1f0>)
 8009b80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b84:	2206      	movs	r2, #6
 8009b86:	f7f6 fb2b 	bl	80001e0 <memchr>
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	d038      	beq.n	8009c00 <_svfiprintf_r+0x1d8>
 8009b8e:	4b23      	ldr	r3, [pc, #140]	; (8009c1c <_svfiprintf_r+0x1f4>)
 8009b90:	bb1b      	cbnz	r3, 8009bda <_svfiprintf_r+0x1b2>
 8009b92:	9b03      	ldr	r3, [sp, #12]
 8009b94:	3307      	adds	r3, #7
 8009b96:	f023 0307 	bic.w	r3, r3, #7
 8009b9a:	3308      	adds	r3, #8
 8009b9c:	9303      	str	r3, [sp, #12]
 8009b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba0:	4433      	add	r3, r6
 8009ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ba4:	e767      	b.n	8009a76 <_svfiprintf_r+0x4e>
 8009ba6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009baa:	460c      	mov	r4, r1
 8009bac:	2001      	movs	r0, #1
 8009bae:	e7a5      	b.n	8009afc <_svfiprintf_r+0xd4>
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	3401      	adds	r4, #1
 8009bb4:	9305      	str	r3, [sp, #20]
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	f04f 0c0a 	mov.w	ip, #10
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bc2:	3a30      	subs	r2, #48	; 0x30
 8009bc4:	2a09      	cmp	r2, #9
 8009bc6:	d903      	bls.n	8009bd0 <_svfiprintf_r+0x1a8>
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d0c5      	beq.n	8009b58 <_svfiprintf_r+0x130>
 8009bcc:	9105      	str	r1, [sp, #20]
 8009bce:	e7c3      	b.n	8009b58 <_svfiprintf_r+0x130>
 8009bd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e7f0      	b.n	8009bbc <_svfiprintf_r+0x194>
 8009bda:	ab03      	add	r3, sp, #12
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	462a      	mov	r2, r5
 8009be0:	4b0f      	ldr	r3, [pc, #60]	; (8009c20 <_svfiprintf_r+0x1f8>)
 8009be2:	a904      	add	r1, sp, #16
 8009be4:	4638      	mov	r0, r7
 8009be6:	f3af 8000 	nop.w
 8009bea:	1c42      	adds	r2, r0, #1
 8009bec:	4606      	mov	r6, r0
 8009bee:	d1d6      	bne.n	8009b9e <_svfiprintf_r+0x176>
 8009bf0:	89ab      	ldrh	r3, [r5, #12]
 8009bf2:	065b      	lsls	r3, r3, #25
 8009bf4:	f53f af2c 	bmi.w	8009a50 <_svfiprintf_r+0x28>
 8009bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bfa:	b01d      	add	sp, #116	; 0x74
 8009bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c00:	ab03      	add	r3, sp, #12
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	462a      	mov	r2, r5
 8009c06:	4b06      	ldr	r3, [pc, #24]	; (8009c20 <_svfiprintf_r+0x1f8>)
 8009c08:	a904      	add	r1, sp, #16
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	f000 f87a 	bl	8009d04 <_printf_i>
 8009c10:	e7eb      	b.n	8009bea <_svfiprintf_r+0x1c2>
 8009c12:	bf00      	nop
 8009c14:	0800a248 	.word	0x0800a248
 8009c18:	0800a252 	.word	0x0800a252
 8009c1c:	00000000 	.word	0x00000000
 8009c20:	08009971 	.word	0x08009971
 8009c24:	0800a24e 	.word	0x0800a24e

08009c28 <_printf_common>:
 8009c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c2c:	4616      	mov	r6, r2
 8009c2e:	4699      	mov	r9, r3
 8009c30:	688a      	ldr	r2, [r1, #8]
 8009c32:	690b      	ldr	r3, [r1, #16]
 8009c34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	bfb8      	it	lt
 8009c3c:	4613      	movlt	r3, r2
 8009c3e:	6033      	str	r3, [r6, #0]
 8009c40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c44:	4607      	mov	r7, r0
 8009c46:	460c      	mov	r4, r1
 8009c48:	b10a      	cbz	r2, 8009c4e <_printf_common+0x26>
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	6033      	str	r3, [r6, #0]
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	0699      	lsls	r1, r3, #26
 8009c52:	bf42      	ittt	mi
 8009c54:	6833      	ldrmi	r3, [r6, #0]
 8009c56:	3302      	addmi	r3, #2
 8009c58:	6033      	strmi	r3, [r6, #0]
 8009c5a:	6825      	ldr	r5, [r4, #0]
 8009c5c:	f015 0506 	ands.w	r5, r5, #6
 8009c60:	d106      	bne.n	8009c70 <_printf_common+0x48>
 8009c62:	f104 0a19 	add.w	sl, r4, #25
 8009c66:	68e3      	ldr	r3, [r4, #12]
 8009c68:	6832      	ldr	r2, [r6, #0]
 8009c6a:	1a9b      	subs	r3, r3, r2
 8009c6c:	42ab      	cmp	r3, r5
 8009c6e:	dc26      	bgt.n	8009cbe <_printf_common+0x96>
 8009c70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c74:	1e13      	subs	r3, r2, #0
 8009c76:	6822      	ldr	r2, [r4, #0]
 8009c78:	bf18      	it	ne
 8009c7a:	2301      	movne	r3, #1
 8009c7c:	0692      	lsls	r2, r2, #26
 8009c7e:	d42b      	bmi.n	8009cd8 <_printf_common+0xb0>
 8009c80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c84:	4649      	mov	r1, r9
 8009c86:	4638      	mov	r0, r7
 8009c88:	47c0      	blx	r8
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	d01e      	beq.n	8009ccc <_printf_common+0xa4>
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	68e5      	ldr	r5, [r4, #12]
 8009c92:	6832      	ldr	r2, [r6, #0]
 8009c94:	f003 0306 	and.w	r3, r3, #6
 8009c98:	2b04      	cmp	r3, #4
 8009c9a:	bf08      	it	eq
 8009c9c:	1aad      	subeq	r5, r5, r2
 8009c9e:	68a3      	ldr	r3, [r4, #8]
 8009ca0:	6922      	ldr	r2, [r4, #16]
 8009ca2:	bf0c      	ite	eq
 8009ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ca8:	2500      	movne	r5, #0
 8009caa:	4293      	cmp	r3, r2
 8009cac:	bfc4      	itt	gt
 8009cae:	1a9b      	subgt	r3, r3, r2
 8009cb0:	18ed      	addgt	r5, r5, r3
 8009cb2:	2600      	movs	r6, #0
 8009cb4:	341a      	adds	r4, #26
 8009cb6:	42b5      	cmp	r5, r6
 8009cb8:	d11a      	bne.n	8009cf0 <_printf_common+0xc8>
 8009cba:	2000      	movs	r0, #0
 8009cbc:	e008      	b.n	8009cd0 <_printf_common+0xa8>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	4652      	mov	r2, sl
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	47c0      	blx	r8
 8009cc8:	3001      	adds	r0, #1
 8009cca:	d103      	bne.n	8009cd4 <_printf_common+0xac>
 8009ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd4:	3501      	adds	r5, #1
 8009cd6:	e7c6      	b.n	8009c66 <_printf_common+0x3e>
 8009cd8:	18e1      	adds	r1, r4, r3
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	2030      	movs	r0, #48	; 0x30
 8009cde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ce2:	4422      	add	r2, r4
 8009ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ce8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cec:	3302      	adds	r3, #2
 8009cee:	e7c7      	b.n	8009c80 <_printf_common+0x58>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	4622      	mov	r2, r4
 8009cf4:	4649      	mov	r1, r9
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	47c0      	blx	r8
 8009cfa:	3001      	adds	r0, #1
 8009cfc:	d0e6      	beq.n	8009ccc <_printf_common+0xa4>
 8009cfe:	3601      	adds	r6, #1
 8009d00:	e7d9      	b.n	8009cb6 <_printf_common+0x8e>
	...

08009d04 <_printf_i>:
 8009d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d08:	460c      	mov	r4, r1
 8009d0a:	4691      	mov	r9, r2
 8009d0c:	7e27      	ldrb	r7, [r4, #24]
 8009d0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009d10:	2f78      	cmp	r7, #120	; 0x78
 8009d12:	4680      	mov	r8, r0
 8009d14:	469a      	mov	sl, r3
 8009d16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d1a:	d807      	bhi.n	8009d2c <_printf_i+0x28>
 8009d1c:	2f62      	cmp	r7, #98	; 0x62
 8009d1e:	d80a      	bhi.n	8009d36 <_printf_i+0x32>
 8009d20:	2f00      	cmp	r7, #0
 8009d22:	f000 80d8 	beq.w	8009ed6 <_printf_i+0x1d2>
 8009d26:	2f58      	cmp	r7, #88	; 0x58
 8009d28:	f000 80a3 	beq.w	8009e72 <_printf_i+0x16e>
 8009d2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d34:	e03a      	b.n	8009dac <_printf_i+0xa8>
 8009d36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d3a:	2b15      	cmp	r3, #21
 8009d3c:	d8f6      	bhi.n	8009d2c <_printf_i+0x28>
 8009d3e:	a001      	add	r0, pc, #4	; (adr r0, 8009d44 <_printf_i+0x40>)
 8009d40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009d44:	08009d9d 	.word	0x08009d9d
 8009d48:	08009db1 	.word	0x08009db1
 8009d4c:	08009d2d 	.word	0x08009d2d
 8009d50:	08009d2d 	.word	0x08009d2d
 8009d54:	08009d2d 	.word	0x08009d2d
 8009d58:	08009d2d 	.word	0x08009d2d
 8009d5c:	08009db1 	.word	0x08009db1
 8009d60:	08009d2d 	.word	0x08009d2d
 8009d64:	08009d2d 	.word	0x08009d2d
 8009d68:	08009d2d 	.word	0x08009d2d
 8009d6c:	08009d2d 	.word	0x08009d2d
 8009d70:	08009ebd 	.word	0x08009ebd
 8009d74:	08009de1 	.word	0x08009de1
 8009d78:	08009e9f 	.word	0x08009e9f
 8009d7c:	08009d2d 	.word	0x08009d2d
 8009d80:	08009d2d 	.word	0x08009d2d
 8009d84:	08009edf 	.word	0x08009edf
 8009d88:	08009d2d 	.word	0x08009d2d
 8009d8c:	08009de1 	.word	0x08009de1
 8009d90:	08009d2d 	.word	0x08009d2d
 8009d94:	08009d2d 	.word	0x08009d2d
 8009d98:	08009ea7 	.word	0x08009ea7
 8009d9c:	680b      	ldr	r3, [r1, #0]
 8009d9e:	1d1a      	adds	r2, r3, #4
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	600a      	str	r2, [r1, #0]
 8009da4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009da8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dac:	2301      	movs	r3, #1
 8009dae:	e0a3      	b.n	8009ef8 <_printf_i+0x1f4>
 8009db0:	6825      	ldr	r5, [r4, #0]
 8009db2:	6808      	ldr	r0, [r1, #0]
 8009db4:	062e      	lsls	r6, r5, #24
 8009db6:	f100 0304 	add.w	r3, r0, #4
 8009dba:	d50a      	bpl.n	8009dd2 <_printf_i+0xce>
 8009dbc:	6805      	ldr	r5, [r0, #0]
 8009dbe:	600b      	str	r3, [r1, #0]
 8009dc0:	2d00      	cmp	r5, #0
 8009dc2:	da03      	bge.n	8009dcc <_printf_i+0xc8>
 8009dc4:	232d      	movs	r3, #45	; 0x2d
 8009dc6:	426d      	negs	r5, r5
 8009dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dcc:	485e      	ldr	r0, [pc, #376]	; (8009f48 <_printf_i+0x244>)
 8009dce:	230a      	movs	r3, #10
 8009dd0:	e019      	b.n	8009e06 <_printf_i+0x102>
 8009dd2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009dd6:	6805      	ldr	r5, [r0, #0]
 8009dd8:	600b      	str	r3, [r1, #0]
 8009dda:	bf18      	it	ne
 8009ddc:	b22d      	sxthne	r5, r5
 8009dde:	e7ef      	b.n	8009dc0 <_printf_i+0xbc>
 8009de0:	680b      	ldr	r3, [r1, #0]
 8009de2:	6825      	ldr	r5, [r4, #0]
 8009de4:	1d18      	adds	r0, r3, #4
 8009de6:	6008      	str	r0, [r1, #0]
 8009de8:	0628      	lsls	r0, r5, #24
 8009dea:	d501      	bpl.n	8009df0 <_printf_i+0xec>
 8009dec:	681d      	ldr	r5, [r3, #0]
 8009dee:	e002      	b.n	8009df6 <_printf_i+0xf2>
 8009df0:	0669      	lsls	r1, r5, #25
 8009df2:	d5fb      	bpl.n	8009dec <_printf_i+0xe8>
 8009df4:	881d      	ldrh	r5, [r3, #0]
 8009df6:	4854      	ldr	r0, [pc, #336]	; (8009f48 <_printf_i+0x244>)
 8009df8:	2f6f      	cmp	r7, #111	; 0x6f
 8009dfa:	bf0c      	ite	eq
 8009dfc:	2308      	moveq	r3, #8
 8009dfe:	230a      	movne	r3, #10
 8009e00:	2100      	movs	r1, #0
 8009e02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e06:	6866      	ldr	r6, [r4, #4]
 8009e08:	60a6      	str	r6, [r4, #8]
 8009e0a:	2e00      	cmp	r6, #0
 8009e0c:	bfa2      	ittt	ge
 8009e0e:	6821      	ldrge	r1, [r4, #0]
 8009e10:	f021 0104 	bicge.w	r1, r1, #4
 8009e14:	6021      	strge	r1, [r4, #0]
 8009e16:	b90d      	cbnz	r5, 8009e1c <_printf_i+0x118>
 8009e18:	2e00      	cmp	r6, #0
 8009e1a:	d04d      	beq.n	8009eb8 <_printf_i+0x1b4>
 8009e1c:	4616      	mov	r6, r2
 8009e1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e22:	fb03 5711 	mls	r7, r3, r1, r5
 8009e26:	5dc7      	ldrb	r7, [r0, r7]
 8009e28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e2c:	462f      	mov	r7, r5
 8009e2e:	42bb      	cmp	r3, r7
 8009e30:	460d      	mov	r5, r1
 8009e32:	d9f4      	bls.n	8009e1e <_printf_i+0x11a>
 8009e34:	2b08      	cmp	r3, #8
 8009e36:	d10b      	bne.n	8009e50 <_printf_i+0x14c>
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	07df      	lsls	r7, r3, #31
 8009e3c:	d508      	bpl.n	8009e50 <_printf_i+0x14c>
 8009e3e:	6923      	ldr	r3, [r4, #16]
 8009e40:	6861      	ldr	r1, [r4, #4]
 8009e42:	4299      	cmp	r1, r3
 8009e44:	bfde      	ittt	le
 8009e46:	2330      	movle	r3, #48	; 0x30
 8009e48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e50:	1b92      	subs	r2, r2, r6
 8009e52:	6122      	str	r2, [r4, #16]
 8009e54:	f8cd a000 	str.w	sl, [sp]
 8009e58:	464b      	mov	r3, r9
 8009e5a:	aa03      	add	r2, sp, #12
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	4640      	mov	r0, r8
 8009e60:	f7ff fee2 	bl	8009c28 <_printf_common>
 8009e64:	3001      	adds	r0, #1
 8009e66:	d14c      	bne.n	8009f02 <_printf_i+0x1fe>
 8009e68:	f04f 30ff 	mov.w	r0, #4294967295
 8009e6c:	b004      	add	sp, #16
 8009e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e72:	4835      	ldr	r0, [pc, #212]	; (8009f48 <_printf_i+0x244>)
 8009e74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	680e      	ldr	r6, [r1, #0]
 8009e7c:	061f      	lsls	r7, r3, #24
 8009e7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009e82:	600e      	str	r6, [r1, #0]
 8009e84:	d514      	bpl.n	8009eb0 <_printf_i+0x1ac>
 8009e86:	07d9      	lsls	r1, r3, #31
 8009e88:	bf44      	itt	mi
 8009e8a:	f043 0320 	orrmi.w	r3, r3, #32
 8009e8e:	6023      	strmi	r3, [r4, #0]
 8009e90:	b91d      	cbnz	r5, 8009e9a <_printf_i+0x196>
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	f023 0320 	bic.w	r3, r3, #32
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	2310      	movs	r3, #16
 8009e9c:	e7b0      	b.n	8009e00 <_printf_i+0xfc>
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	f043 0320 	orr.w	r3, r3, #32
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	2378      	movs	r3, #120	; 0x78
 8009ea8:	4828      	ldr	r0, [pc, #160]	; (8009f4c <_printf_i+0x248>)
 8009eaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009eae:	e7e3      	b.n	8009e78 <_printf_i+0x174>
 8009eb0:	065e      	lsls	r6, r3, #25
 8009eb2:	bf48      	it	mi
 8009eb4:	b2ad      	uxthmi	r5, r5
 8009eb6:	e7e6      	b.n	8009e86 <_printf_i+0x182>
 8009eb8:	4616      	mov	r6, r2
 8009eba:	e7bb      	b.n	8009e34 <_printf_i+0x130>
 8009ebc:	680b      	ldr	r3, [r1, #0]
 8009ebe:	6826      	ldr	r6, [r4, #0]
 8009ec0:	6960      	ldr	r0, [r4, #20]
 8009ec2:	1d1d      	adds	r5, r3, #4
 8009ec4:	600d      	str	r5, [r1, #0]
 8009ec6:	0635      	lsls	r5, r6, #24
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	d501      	bpl.n	8009ed0 <_printf_i+0x1cc>
 8009ecc:	6018      	str	r0, [r3, #0]
 8009ece:	e002      	b.n	8009ed6 <_printf_i+0x1d2>
 8009ed0:	0671      	lsls	r1, r6, #25
 8009ed2:	d5fb      	bpl.n	8009ecc <_printf_i+0x1c8>
 8009ed4:	8018      	strh	r0, [r3, #0]
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	6123      	str	r3, [r4, #16]
 8009eda:	4616      	mov	r6, r2
 8009edc:	e7ba      	b.n	8009e54 <_printf_i+0x150>
 8009ede:	680b      	ldr	r3, [r1, #0]
 8009ee0:	1d1a      	adds	r2, r3, #4
 8009ee2:	600a      	str	r2, [r1, #0]
 8009ee4:	681e      	ldr	r6, [r3, #0]
 8009ee6:	6862      	ldr	r2, [r4, #4]
 8009ee8:	2100      	movs	r1, #0
 8009eea:	4630      	mov	r0, r6
 8009eec:	f7f6 f978 	bl	80001e0 <memchr>
 8009ef0:	b108      	cbz	r0, 8009ef6 <_printf_i+0x1f2>
 8009ef2:	1b80      	subs	r0, r0, r6
 8009ef4:	6060      	str	r0, [r4, #4]
 8009ef6:	6863      	ldr	r3, [r4, #4]
 8009ef8:	6123      	str	r3, [r4, #16]
 8009efa:	2300      	movs	r3, #0
 8009efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f00:	e7a8      	b.n	8009e54 <_printf_i+0x150>
 8009f02:	6923      	ldr	r3, [r4, #16]
 8009f04:	4632      	mov	r2, r6
 8009f06:	4649      	mov	r1, r9
 8009f08:	4640      	mov	r0, r8
 8009f0a:	47d0      	blx	sl
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	d0ab      	beq.n	8009e68 <_printf_i+0x164>
 8009f10:	6823      	ldr	r3, [r4, #0]
 8009f12:	079b      	lsls	r3, r3, #30
 8009f14:	d413      	bmi.n	8009f3e <_printf_i+0x23a>
 8009f16:	68e0      	ldr	r0, [r4, #12]
 8009f18:	9b03      	ldr	r3, [sp, #12]
 8009f1a:	4298      	cmp	r0, r3
 8009f1c:	bfb8      	it	lt
 8009f1e:	4618      	movlt	r0, r3
 8009f20:	e7a4      	b.n	8009e6c <_printf_i+0x168>
 8009f22:	2301      	movs	r3, #1
 8009f24:	4632      	mov	r2, r6
 8009f26:	4649      	mov	r1, r9
 8009f28:	4640      	mov	r0, r8
 8009f2a:	47d0      	blx	sl
 8009f2c:	3001      	adds	r0, #1
 8009f2e:	d09b      	beq.n	8009e68 <_printf_i+0x164>
 8009f30:	3501      	adds	r5, #1
 8009f32:	68e3      	ldr	r3, [r4, #12]
 8009f34:	9903      	ldr	r1, [sp, #12]
 8009f36:	1a5b      	subs	r3, r3, r1
 8009f38:	42ab      	cmp	r3, r5
 8009f3a:	dcf2      	bgt.n	8009f22 <_printf_i+0x21e>
 8009f3c:	e7eb      	b.n	8009f16 <_printf_i+0x212>
 8009f3e:	2500      	movs	r5, #0
 8009f40:	f104 0619 	add.w	r6, r4, #25
 8009f44:	e7f5      	b.n	8009f32 <_printf_i+0x22e>
 8009f46:	bf00      	nop
 8009f48:	0800a259 	.word	0x0800a259
 8009f4c:	0800a26a 	.word	0x0800a26a

08009f50 <memcpy>:
 8009f50:	440a      	add	r2, r1
 8009f52:	4291      	cmp	r1, r2
 8009f54:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f58:	d100      	bne.n	8009f5c <memcpy+0xc>
 8009f5a:	4770      	bx	lr
 8009f5c:	b510      	push	{r4, lr}
 8009f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f66:	4291      	cmp	r1, r2
 8009f68:	d1f9      	bne.n	8009f5e <memcpy+0xe>
 8009f6a:	bd10      	pop	{r4, pc}

08009f6c <memmove>:
 8009f6c:	4288      	cmp	r0, r1
 8009f6e:	b510      	push	{r4, lr}
 8009f70:	eb01 0402 	add.w	r4, r1, r2
 8009f74:	d902      	bls.n	8009f7c <memmove+0x10>
 8009f76:	4284      	cmp	r4, r0
 8009f78:	4623      	mov	r3, r4
 8009f7a:	d807      	bhi.n	8009f8c <memmove+0x20>
 8009f7c:	1e43      	subs	r3, r0, #1
 8009f7e:	42a1      	cmp	r1, r4
 8009f80:	d008      	beq.n	8009f94 <memmove+0x28>
 8009f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f8a:	e7f8      	b.n	8009f7e <memmove+0x12>
 8009f8c:	4402      	add	r2, r0
 8009f8e:	4601      	mov	r1, r0
 8009f90:	428a      	cmp	r2, r1
 8009f92:	d100      	bne.n	8009f96 <memmove+0x2a>
 8009f94:	bd10      	pop	{r4, pc}
 8009f96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f9e:	e7f7      	b.n	8009f90 <memmove+0x24>

08009fa0 <_free_r>:
 8009fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fa2:	2900      	cmp	r1, #0
 8009fa4:	d048      	beq.n	800a038 <_free_r+0x98>
 8009fa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009faa:	9001      	str	r0, [sp, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f1a1 0404 	sub.w	r4, r1, #4
 8009fb2:	bfb8      	it	lt
 8009fb4:	18e4      	addlt	r4, r4, r3
 8009fb6:	f000 f8d3 	bl	800a160 <__malloc_lock>
 8009fba:	4a20      	ldr	r2, [pc, #128]	; (800a03c <_free_r+0x9c>)
 8009fbc:	9801      	ldr	r0, [sp, #4]
 8009fbe:	6813      	ldr	r3, [r2, #0]
 8009fc0:	4615      	mov	r5, r2
 8009fc2:	b933      	cbnz	r3, 8009fd2 <_free_r+0x32>
 8009fc4:	6063      	str	r3, [r4, #4]
 8009fc6:	6014      	str	r4, [r2, #0]
 8009fc8:	b003      	add	sp, #12
 8009fca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fce:	f000 b8cd 	b.w	800a16c <__malloc_unlock>
 8009fd2:	42a3      	cmp	r3, r4
 8009fd4:	d90b      	bls.n	8009fee <_free_r+0x4e>
 8009fd6:	6821      	ldr	r1, [r4, #0]
 8009fd8:	1862      	adds	r2, r4, r1
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	bf04      	itt	eq
 8009fde:	681a      	ldreq	r2, [r3, #0]
 8009fe0:	685b      	ldreq	r3, [r3, #4]
 8009fe2:	6063      	str	r3, [r4, #4]
 8009fe4:	bf04      	itt	eq
 8009fe6:	1852      	addeq	r2, r2, r1
 8009fe8:	6022      	streq	r2, [r4, #0]
 8009fea:	602c      	str	r4, [r5, #0]
 8009fec:	e7ec      	b.n	8009fc8 <_free_r+0x28>
 8009fee:	461a      	mov	r2, r3
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	b10b      	cbz	r3, 8009ff8 <_free_r+0x58>
 8009ff4:	42a3      	cmp	r3, r4
 8009ff6:	d9fa      	bls.n	8009fee <_free_r+0x4e>
 8009ff8:	6811      	ldr	r1, [r2, #0]
 8009ffa:	1855      	adds	r5, r2, r1
 8009ffc:	42a5      	cmp	r5, r4
 8009ffe:	d10b      	bne.n	800a018 <_free_r+0x78>
 800a000:	6824      	ldr	r4, [r4, #0]
 800a002:	4421      	add	r1, r4
 800a004:	1854      	adds	r4, r2, r1
 800a006:	42a3      	cmp	r3, r4
 800a008:	6011      	str	r1, [r2, #0]
 800a00a:	d1dd      	bne.n	8009fc8 <_free_r+0x28>
 800a00c:	681c      	ldr	r4, [r3, #0]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	6053      	str	r3, [r2, #4]
 800a012:	4421      	add	r1, r4
 800a014:	6011      	str	r1, [r2, #0]
 800a016:	e7d7      	b.n	8009fc8 <_free_r+0x28>
 800a018:	d902      	bls.n	800a020 <_free_r+0x80>
 800a01a:	230c      	movs	r3, #12
 800a01c:	6003      	str	r3, [r0, #0]
 800a01e:	e7d3      	b.n	8009fc8 <_free_r+0x28>
 800a020:	6825      	ldr	r5, [r4, #0]
 800a022:	1961      	adds	r1, r4, r5
 800a024:	428b      	cmp	r3, r1
 800a026:	bf04      	itt	eq
 800a028:	6819      	ldreq	r1, [r3, #0]
 800a02a:	685b      	ldreq	r3, [r3, #4]
 800a02c:	6063      	str	r3, [r4, #4]
 800a02e:	bf04      	itt	eq
 800a030:	1949      	addeq	r1, r1, r5
 800a032:	6021      	streq	r1, [r4, #0]
 800a034:	6054      	str	r4, [r2, #4]
 800a036:	e7c7      	b.n	8009fc8 <_free_r+0x28>
 800a038:	b003      	add	sp, #12
 800a03a:	bd30      	pop	{r4, r5, pc}
 800a03c:	20000250 	.word	0x20000250

0800a040 <_malloc_r>:
 800a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a042:	1ccd      	adds	r5, r1, #3
 800a044:	f025 0503 	bic.w	r5, r5, #3
 800a048:	3508      	adds	r5, #8
 800a04a:	2d0c      	cmp	r5, #12
 800a04c:	bf38      	it	cc
 800a04e:	250c      	movcc	r5, #12
 800a050:	2d00      	cmp	r5, #0
 800a052:	4606      	mov	r6, r0
 800a054:	db01      	blt.n	800a05a <_malloc_r+0x1a>
 800a056:	42a9      	cmp	r1, r5
 800a058:	d903      	bls.n	800a062 <_malloc_r+0x22>
 800a05a:	230c      	movs	r3, #12
 800a05c:	6033      	str	r3, [r6, #0]
 800a05e:	2000      	movs	r0, #0
 800a060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a062:	f000 f87d 	bl	800a160 <__malloc_lock>
 800a066:	4921      	ldr	r1, [pc, #132]	; (800a0ec <_malloc_r+0xac>)
 800a068:	680a      	ldr	r2, [r1, #0]
 800a06a:	4614      	mov	r4, r2
 800a06c:	b99c      	cbnz	r4, 800a096 <_malloc_r+0x56>
 800a06e:	4f20      	ldr	r7, [pc, #128]	; (800a0f0 <_malloc_r+0xb0>)
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	b923      	cbnz	r3, 800a07e <_malloc_r+0x3e>
 800a074:	4621      	mov	r1, r4
 800a076:	4630      	mov	r0, r6
 800a078:	f000 f862 	bl	800a140 <_sbrk_r>
 800a07c:	6038      	str	r0, [r7, #0]
 800a07e:	4629      	mov	r1, r5
 800a080:	4630      	mov	r0, r6
 800a082:	f000 f85d 	bl	800a140 <_sbrk_r>
 800a086:	1c43      	adds	r3, r0, #1
 800a088:	d123      	bne.n	800a0d2 <_malloc_r+0x92>
 800a08a:	230c      	movs	r3, #12
 800a08c:	6033      	str	r3, [r6, #0]
 800a08e:	4630      	mov	r0, r6
 800a090:	f000 f86c 	bl	800a16c <__malloc_unlock>
 800a094:	e7e3      	b.n	800a05e <_malloc_r+0x1e>
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	1b5b      	subs	r3, r3, r5
 800a09a:	d417      	bmi.n	800a0cc <_malloc_r+0x8c>
 800a09c:	2b0b      	cmp	r3, #11
 800a09e:	d903      	bls.n	800a0a8 <_malloc_r+0x68>
 800a0a0:	6023      	str	r3, [r4, #0]
 800a0a2:	441c      	add	r4, r3
 800a0a4:	6025      	str	r5, [r4, #0]
 800a0a6:	e004      	b.n	800a0b2 <_malloc_r+0x72>
 800a0a8:	6863      	ldr	r3, [r4, #4]
 800a0aa:	42a2      	cmp	r2, r4
 800a0ac:	bf0c      	ite	eq
 800a0ae:	600b      	streq	r3, [r1, #0]
 800a0b0:	6053      	strne	r3, [r2, #4]
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f000 f85a 	bl	800a16c <__malloc_unlock>
 800a0b8:	f104 000b 	add.w	r0, r4, #11
 800a0bc:	1d23      	adds	r3, r4, #4
 800a0be:	f020 0007 	bic.w	r0, r0, #7
 800a0c2:	1ac2      	subs	r2, r0, r3
 800a0c4:	d0cc      	beq.n	800a060 <_malloc_r+0x20>
 800a0c6:	1a1b      	subs	r3, r3, r0
 800a0c8:	50a3      	str	r3, [r4, r2]
 800a0ca:	e7c9      	b.n	800a060 <_malloc_r+0x20>
 800a0cc:	4622      	mov	r2, r4
 800a0ce:	6864      	ldr	r4, [r4, #4]
 800a0d0:	e7cc      	b.n	800a06c <_malloc_r+0x2c>
 800a0d2:	1cc4      	adds	r4, r0, #3
 800a0d4:	f024 0403 	bic.w	r4, r4, #3
 800a0d8:	42a0      	cmp	r0, r4
 800a0da:	d0e3      	beq.n	800a0a4 <_malloc_r+0x64>
 800a0dc:	1a21      	subs	r1, r4, r0
 800a0de:	4630      	mov	r0, r6
 800a0e0:	f000 f82e 	bl	800a140 <_sbrk_r>
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	d1dd      	bne.n	800a0a4 <_malloc_r+0x64>
 800a0e8:	e7cf      	b.n	800a08a <_malloc_r+0x4a>
 800a0ea:	bf00      	nop
 800a0ec:	20000250 	.word	0x20000250
 800a0f0:	20000254 	.word	0x20000254

0800a0f4 <_realloc_r>:
 800a0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f6:	4607      	mov	r7, r0
 800a0f8:	4614      	mov	r4, r2
 800a0fa:	460e      	mov	r6, r1
 800a0fc:	b921      	cbnz	r1, 800a108 <_realloc_r+0x14>
 800a0fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a102:	4611      	mov	r1, r2
 800a104:	f7ff bf9c 	b.w	800a040 <_malloc_r>
 800a108:	b922      	cbnz	r2, 800a114 <_realloc_r+0x20>
 800a10a:	f7ff ff49 	bl	8009fa0 <_free_r>
 800a10e:	4625      	mov	r5, r4
 800a110:	4628      	mov	r0, r5
 800a112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a114:	f000 f830 	bl	800a178 <_malloc_usable_size_r>
 800a118:	42a0      	cmp	r0, r4
 800a11a:	d20f      	bcs.n	800a13c <_realloc_r+0x48>
 800a11c:	4621      	mov	r1, r4
 800a11e:	4638      	mov	r0, r7
 800a120:	f7ff ff8e 	bl	800a040 <_malloc_r>
 800a124:	4605      	mov	r5, r0
 800a126:	2800      	cmp	r0, #0
 800a128:	d0f2      	beq.n	800a110 <_realloc_r+0x1c>
 800a12a:	4631      	mov	r1, r6
 800a12c:	4622      	mov	r2, r4
 800a12e:	f7ff ff0f 	bl	8009f50 <memcpy>
 800a132:	4631      	mov	r1, r6
 800a134:	4638      	mov	r0, r7
 800a136:	f7ff ff33 	bl	8009fa0 <_free_r>
 800a13a:	e7e9      	b.n	800a110 <_realloc_r+0x1c>
 800a13c:	4635      	mov	r5, r6
 800a13e:	e7e7      	b.n	800a110 <_realloc_r+0x1c>

0800a140 <_sbrk_r>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	4d06      	ldr	r5, [pc, #24]	; (800a15c <_sbrk_r+0x1c>)
 800a144:	2300      	movs	r3, #0
 800a146:	4604      	mov	r4, r0
 800a148:	4608      	mov	r0, r1
 800a14a:	602b      	str	r3, [r5, #0]
 800a14c:	f7fe fdb4 	bl	8008cb8 <_sbrk>
 800a150:	1c43      	adds	r3, r0, #1
 800a152:	d102      	bne.n	800a15a <_sbrk_r+0x1a>
 800a154:	682b      	ldr	r3, [r5, #0]
 800a156:	b103      	cbz	r3, 800a15a <_sbrk_r+0x1a>
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	20000d94 	.word	0x20000d94

0800a160 <__malloc_lock>:
 800a160:	4801      	ldr	r0, [pc, #4]	; (800a168 <__malloc_lock+0x8>)
 800a162:	f000 b811 	b.w	800a188 <__retarget_lock_acquire_recursive>
 800a166:	bf00      	nop
 800a168:	20000d9c 	.word	0x20000d9c

0800a16c <__malloc_unlock>:
 800a16c:	4801      	ldr	r0, [pc, #4]	; (800a174 <__malloc_unlock+0x8>)
 800a16e:	f000 b80c 	b.w	800a18a <__retarget_lock_release_recursive>
 800a172:	bf00      	nop
 800a174:	20000d9c 	.word	0x20000d9c

0800a178 <_malloc_usable_size_r>:
 800a178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a17c:	1f18      	subs	r0, r3, #4
 800a17e:	2b00      	cmp	r3, #0
 800a180:	bfbc      	itt	lt
 800a182:	580b      	ldrlt	r3, [r1, r0]
 800a184:	18c0      	addlt	r0, r0, r3
 800a186:	4770      	bx	lr

0800a188 <__retarget_lock_acquire_recursive>:
 800a188:	4770      	bx	lr

0800a18a <__retarget_lock_release_recursive>:
 800a18a:	4770      	bx	lr

0800a18c <_init>:
 800a18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18e:	bf00      	nop
 800a190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a192:	bc08      	pop	{r3}
 800a194:	469e      	mov	lr, r3
 800a196:	4770      	bx	lr

0800a198 <_fini>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	bf00      	nop
 800a19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a19e:	bc08      	pop	{r3}
 800a1a0:	469e      	mov	lr, r3
 800a1a2:	4770      	bx	lr
